var Module = {
    print: function(text) {
        console.log(text);
    },
    printErr: function(text) {
        console.error(text);
    }
};

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) return 0; }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;


var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}



// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');


var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 6987712;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([114,98,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,97,117,120,105,108,105,97,114,121,32,102,105,108,101,32,37,115,10,0,0,0,0,0,0,0,69,82,82,79,82,58,32,99,111,117,108,100,32,110,111,116,32,97,108,108,111,99,97,116,101,32,37,100,32,98,121,116,101,115,32,111,102,32,109,101,109,111,114,121,10,0,0,0,95,108,105,98,0,0,0,0,95,108,105,98,50,0,0,0,95,108,105,98,51,0,0,0,95,108,105,98,52,0,0,0,95,108,105,98,53,0,0,0,95,108,105,98,54,0,0,0,95,108,105,98,55,0,0,0,95,108,105,98,56,0,0,0,95,108,105,98,57,0,0,0,95,114,101,102,114,101,115,104,0,0,0,0,0,0,0,0,116,105,116,108,101,0,0,0,99,111,112,121,114,105,103,104,116,0,0,0,0,0,0,0,97,114,116,105,115,116,0,0,103,97,109,101,0,0,0,0,121,101,97,114,0,0,0,0,108,101,110,103,116,104,0,0,102,97,100,101,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,80,83,45,88,32,69,88,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,115,102,98,121,0,0,0,67,104,111,99,111,98,111,32,68,117,110,103,101,111,110,32,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,97,106,111,114,32,101,114,114,111,114,33,32,32,80,83,70,32,119,97,115,32,79,75,44,32,98,117,116,32,114,101,102,101,114,101,110,99,101,100,32,108,105,98,114,97,114,121,32,105,115,32,110,111,116,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,0,0,0,0,0,0,224,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,0,0,0,0,63,255,127,242,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,37,48,56,120,0,0,0,1,255,2,3,255,4,5,255,255,6,7,255,8,9,255,10,11,255,12,13,255,14,15,255,16,17,255,18,19,255,20,21,255,22,23,255,24,25,255,26,27,255,28,29,255,30,31,255,32,33,255,34,35,255,36,37,255,255,38,39,255,40,41,255,42,43,255,44,45,255,46,47,255,48,49,255,50,51,255,52,53,255,54,55,255,56,57,255,58,59,255,60,61,255,62,63,255,64,65,255,66,67,255,68,69,255,255,70,71,255,72,73,255,74,75,255,76,77,255,78,79,255,80,81,255,82,83,255,84,85,255,86,87,255,88,89,255,90,91,255,92,93,255,94,95,255,96,97,255,98,99,255,100,101,255,255,102,103,255,104,105,255,106,107,255,108,109,255,110,111,255,112,113,255,114,115,255,116,117,255,118,119,255,120,121,255,122,123,255,124,125,255,126,127,255,128,129,255,130,131,255,132,133,0,0,0,0,0,45,0,35,13,0,0,44,13,0,14,44,8,45,14,35,8,0,23,80,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,132,0,0,68,132,0,0,76,132,0,0,0,0,0,0,62,132,0,0,70,132,0,0,78,132,0,0,0,0,0,0,64,132,0,0,72,132,0,0,80,132,0,0,0,0,0,0,188,131,0,0,190,131,0,0,192,131,0,0,194,131,0,0,196,131,0,0,198,131,0,0,200,131,0,0,202,131,0,0,204,131,0,0,0,0,0,0,220,131,0,0,222,131,0,0,224,131,0,0,226,131,0,0,228,131,0,0,230,131,0,0,232,131,0,0,234,131,0,0,236,131,0,0,0,0,0,0,252,131,0,0,254,131,0,0,0,132,0,0,2,132,0,0,4,132,0,0,6,132,0,0,8,132,0,0,10,132,0,0,12,132,0,0,0,0,0,0,56,134,0,0,56,134,0,0,56,134,0,0,56,134,0,0,56,134,0,0,56,134,0,0,56,134,0,0,56,134,0,0,56,134,0,0,0,0,0,0,120,134,0,0,160,134,0,0,200,134,0,0,240,134,0,0,208,131,0,0,212,131,0,0,216,131,0,0,0,0,0,0,240,131,0,0,244,131,0,0,248,131,0,0,0,0,0,0,16,132,0,0,20,132,0,0,24,132,0,0,0,0,0,0,64,134,0,0,64,134,0,0,64,134,0,0,0,0,0,0,40,135,0,0,56,135,0,0,72,135,0,0,88,135,0,0,112,101,114,109,105,115,115,105,111,110,32,118,105,111,108,97,116,105,111,110,32,50,0,0,112,101,114,109,105,115,115,105,111,110,32,118,105,111,108,97,116,105,111,110,63,0,0,0,83,82,95,73,83,67,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,66,82,69,65,75,33], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+32768);
/* memory initializer */ allocate([83,80,85,58,32,114,101,97,100,32,117,110,107,110,111,119,110,32,109,97,115,107,32,37,48,56,120,10,0,0,0,0,83,80,85,50,58,32,114,101,97,100,32,117,110,107,110,111,119,110,32,109,97,115,107,32,37,48,56,120,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,80,85,58,32,119,114,105,116,101,32,117,110,107,110,111,119,110,32,109,97,115,107,32,37,48,56,120,10,0,0,0,83,80,85,50,58,32,119,114,105,116,101,32,117,110,107,110,111,119,110,32,109,97,115,107,32,37,48,56,120,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+2131928);
/* memory initializer */ allocate([115,116,100,105,111,0,0,0,73,79,80,58,32,85,110,104,97,110,100,108,101,100,32,115,101,114,118,105,99,101,32,37,100,32,102,111,114,32,109,111,100,117,108,101,32,37,115,10,0,0,0,0,0,0,0,0,115,105,102,109,97,110,0,0,116,104,98,97,115,101,0,0,116,104,101,118,101,110,116,0,116,104,115,101,109,97,112,0,116,105,109,114,109,97,110,0,115,121,115,99,108,105,98,0,105,110,116,114,109,97,110,0,108,111,97,100,99,111,114,101,0,0,0,0,0,0,0,0,115,121,115,109,101,109,0,0,83,72,32,72,97,99,107,58,32,119,97,115,32,37,120,32,110,111,119,32,37,120,10,0,109,111,100,108,111,97,100,0,105,111,109,97,110,0,0,0,97,111,102,105,108,101,58,0,104,101,102,105,108,101,58,0,104,111,115,116,48,58], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+2141440);
/* memory initializer */ allocate([73,79,80,58,32,69,82,82,79,82,33,32,32,73,82,81,32,114,101,101,110,116,114,121,33,0,0,0,0,0,0,0,73,79,80,58,32,111,117,116,32,111,102,32,115,101,109,97,112,104,111,114,101,115,33,0,73,79,80,58,32,65,108,108,111,99,72,97,114,100,84,105,109,101,114,32,100,111,101,115,110,39,116,32,115,117,112,112,111,114,116,32,49,54,45,98,105,116,32,116,105,109,101,114,115,33,0,0,0,0,0,0,73,79,80,58,32,85,110,104,97,110,100,108,101,100,32,115,116,114,116,111,108,32,119,105,116,104,32,110,111,110,45,78,85,76,76,32,115,101,99,111,110,100,32,112,97,114,109,0,69,82,82,79,82,58,32,69,110,116,114,121,32,116,97,98,108,101,32,115,105,103,110,97,116,117,114,101,32,109,105,115,115,105,110,103,0,0,0,0,73,79,80,58,32,111,117,116,32,111,102,32,102,105,108,101,32,115,108,111,116,115,33,0,70,65,84,65,76,32,69,82,82,79,82,58,32,99,111,117,108,100,110,39,116,32,102,105,110,100,32,73,79,80,32,108,105,110,107,32,115,105,103,110,97,116,117,114,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+4247248);
/* memory initializer */ allocate([255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+4257352);
/* memory initializer */ allocate([114,1,0,0,25,5,0,0,118,1,0,0,0,0,0,0,110,1,0,0,25,5,0,0,122,1,0,0,0,0,0,0,106,1,0,0,24,5,0,0,125,1,0,0,0,0,0,0,102,1,0,0,24,5,0,0,129,1,0,0,0,0,0,0,98,1,0,0,24,5,0,0,133,1,0,0,0,0,0,0,95,1,0,0,24,5,0,0,137,1,0,0,0,0,0,0,91,1,0,0,24,5,0,0,141,1,0,0,0,0,0,0,87,1,0,0,23,5,0,0,145,1,0,0,0,0,0,0,83,1,0,0,23,5,0,0,149,1,0,0,0,0,0,0,80,1,0,0,23,5,0,0,154,1,0,0,0,0,0,0,76,1,0,0,22,5,0,0,158,1,0,0,0,0,0,0,72,1,0,0,22,5,0,0,162,1,0,0,0,0,0,0,69,1,0,0,21,5,0,0,166,1,0,0,0,0,0,0,65,1,0,0,20,5,0,0,170,1,0,0,0,0,0,0,62,1,0,0,20,5,0,0,174,1,0,0,0,0,0,0,58,1,0,0,19,5,0,0,178,1,0,0,0,0,0,0,55,1,0,0,18,5,0,0,183,1,0,0,1,0,0,0,51,1,0,0,17,5,0,0,187,1,0,0,1,0,0,0,48,1,0,0,17,5,0,0,191,1,0,0,1,0,0,0,44,1,0,0,16,5,0,0,195,1,0,0,1,0,0,0,41,1,0,0,15,5,0,0,200,1,0,0,1,0,0,0,37,1,0,0,14,5,0,0,204,1,0,0,1,0,0,0,34,1,0,0,13,5,0,0,208,1,0,0,1,0,0,0,30,1,0,0,12,5,0,0,213,1,0,0,1,0,0,0,27,1,0,0,11,5,0,0,217,1,0,0,1,0,0,0,24,1,0,0,10,5,0,0,221,1,0,0,1,0,0,0,20,1,0,0,8,5,0,0,226,1,0,0,1,0,0,0,17,1,0,0,7,5,0,0,230,1,0,0,2,0,0,0,14,1,0,0,6,5,0,0,235,1,0,0,2,0,0,0,11,1,0,0,4,5,0,0,239,1,0,0,2,0,0,0,7,1,0,0,3,5,0,0,243,1,0,0,2,0,0,0,4,1,0,0,2,5,0,0,248,1,0,0,2,0,0,0,1,1,0,0,0,5,0,0,252,1,0,0,2,0,0,0,254,0,0,0,255,4,0,0,1,2,0,0,2,0,0,0,251,0,0,0,253,4,0,0,5,2,0,0,3,0,0,0,248,0,0,0,251,4,0,0,10,2,0,0,3,0,0,0,245,0,0,0,250,4,0,0,15,2,0,0,3,0,0,0,242,0,0,0,248,4,0,0,19,2,0,0,3,0,0,0,239,0,0,0,246,4,0,0,24,2,0,0,3,0,0,0,236,0,0,0,245,4,0,0,28,2,0,0,4,0,0,0,233,0,0,0,243,4,0,0,33,2,0,0,4,0,0,0,230,0,0,0,241,4,0,0,38,2,0,0,4,0,0,0,227,0,0,0,239,4,0,0,42,2,0,0,4,0,0,0,224,0,0,0,237,4,0,0,47,2,0,0,4,0,0,0,221,0,0,0,235,4,0,0,51,2,0,0,5,0,0,0,218,0,0,0,233,4,0,0,56,2,0,0,5,0,0,0,215,0,0,0,231,4,0,0,61,2,0,0,5,0,0,0,212,0,0,0,229,4,0,0,65,2,0,0,5,0,0,0,210,0,0,0,227,4,0,0,70,2,0,0,6,0,0,0,207,0,0,0,224,4,0,0,75,2,0,0,6,0,0,0,204,0,0,0,222,4,0,0,80,2,0,0,6,0,0,0,201,0,0,0,220,4,0,0,84,2,0,0,6,0,0,0,199,0,0,0,217,4,0,0,89,2,0,0,7,0,0,0,196,0,0,0,215,4,0,0,94,2,0,0,7,0,0,0,193,0,0,0,213,4,0,0,99,2,0,0,7,0,0,0,191,0,0,0,210,4,0,0,103,2,0,0,8,0,0,0,188,0,0,0,208,4,0,0,108,2,0,0,8,0,0,0,186,0,0,0,205,4,0,0,113,2,0,0,8,0,0,0,183,0,0,0,203,4,0,0,118,2,0,0,9,0,0,0,180,0,0,0,200,4,0,0,123,2,0,0,9,0,0,0,178,0,0,0,197,4,0,0,128,2,0,0,9,0,0,0,175,0,0,0,195,4,0,0,132,2,0,0,10,0,0,0,173,0,0,0,192,4,0,0,137,2,0,0,10,0,0,0,171,0,0,0,189,4,0,0,142,2,0,0,10,0,0,0,168,0,0,0,186,4,0,0,147,2,0,0,11,0,0,0,166,0,0,0,183,4,0,0,152,2,0,0,11,0,0,0,163,0,0,0,181,4,0,0,157,2,0,0,11,0,0,0,161,0,0,0,178,4,0,0,162,2,0,0,12,0,0,0,159,0,0,0,175,4,0,0,166,2,0,0,12,0,0,0,156,0,0,0,172,4,0,0,171,2,0,0,13,0,0,0,154,0,0,0,169,4,0,0,176,2,0,0,13,0,0,0,152,0,0,0,166,4,0,0,181,2,0,0,14,0,0,0,150,0,0,0,162,4,0,0,186,2,0,0,14,0,0,0,147,0,0,0,159,4,0,0,191,2,0,0,15,0,0,0,145,0,0,0,156,4,0,0,196,2,0,0,15,0,0,0,143,0,0,0,153,4,0,0,201,2,0,0,15,0,0,0,141,0,0,0,150,4,0,0,206,2,0,0,16,0,0,0,139,0,0,0,146,4,0,0,211,2,0,0,16,0,0,0,137,0,0,0,143,4,0,0,216,2,0,0,17,0,0,0,134,0,0,0,140,4,0,0,220,2,0,0,17,0,0,0,132,0,0,0,136,4,0,0,225,2,0,0,18,0,0,0,130,0,0,0,133,4,0,0,230,2,0,0,19,0,0,0,128,0,0,0,129,4,0,0,235,2,0,0,19,0,0,0,126,0,0,0,126,4,0,0,240,2,0,0,20,0,0,0,124,0,0,0,122,4,0,0,245,2,0,0,20,0,0,0,122,0,0,0,119,4,0,0,250,2,0,0,21,0,0,0,120,0,0,0,115,4,0,0,255,2,0,0,21,0,0,0,118,0,0,0,112,4,0,0,4,3,0,0,22,0,0,0,117,0,0,0,108,4,0,0,9,3,0,0,23,0,0,0,115,0,0,0,104,4,0,0,14,3,0,0,23,0,0,0,113,0,0,0,101,4,0,0,19,3,0,0,24,0,0,0,111,0,0,0,97,4,0,0,24,3,0,0,24,0,0,0,109,0,0,0,93,4,0,0,29,3,0,0,25,0,0,0,107,0,0,0,89,4,0,0,34,3,0,0,26,0,0,0,106,0,0,0,85,4,0,0,38,3,0,0,27,0,0,0,104,0,0,0,82,4,0,0,43,3,0,0,27,0,0,0,102,0,0,0,78,4,0,0,48,3,0,0,28,0,0,0,100,0,0,0,74,4,0,0,53,3,0,0,29,0,0,0,99,0,0,0,70,4,0,0,58,3,0,0,29,0,0,0,97,0,0,0,66,4,0,0,63,3,0,0,30,0,0,0,95,0,0,0,62,4,0,0,68,3,0,0,31,0,0,0,94,0,0,0,58,4,0,0,73,3,0,0,32,0,0,0,92,0,0,0,54,4,0,0,78,3,0,0,32,0,0,0,90,0,0,0,50,4,0,0,83,3,0,0,33,0,0,0,89,0,0,0,46,4,0,0,87,3,0,0,34,0,0,0,87,0,0,0,42,4,0,0,92,3,0,0,35,0,0,0,86,0,0,0,37,4,0,0,97,3,0,0,36,0,0,0,84,0,0,0,33,4,0,0,102,3,0,0,36,0,0,0,83,0,0,0,29,4,0,0,107,3,0,0,37,0,0,0,81,0,0,0,25,4,0,0,112,3,0,0,38,0,0,0,80,0,0,0,21,4,0,0,116,3,0,0,39,0,0,0,78,0,0,0,16,4,0,0,121,3,0,0,40,0,0,0,77,0,0,0,12,4,0,0,126,3,0,0,41,0,0,0,76,0,0,0,8,4,0,0,131,3,0,0,42,0,0,0,74,0,0,0,3,4,0,0,136,3,0,0,43,0,0,0,73,0,0,0,255,3,0,0,140,3,0,0,44,0,0,0,71,0,0,0,251,3,0,0,145,3,0,0,45,0,0,0,70,0,0,0,246,3,0,0,150,3,0,0,46,0,0,0,69,0,0,0,242,3,0,0,155,3,0,0,47,0,0,0,67,0,0,0,237,3,0,0,159,3,0,0,48,0,0,0,66,0,0,0,233,3,0,0,164,3,0,0,49,0,0,0,65,0,0,0,229,3,0,0,169,3,0,0,50,0,0,0,64,0,0,0,224,3,0,0,173,3,0,0,51,0,0,0,62,0,0,0,220,3,0,0,178,3,0,0,52,0,0,0,61,0,0,0,215,3,0,0,183,3,0,0,53,0,0,0,60,0,0,0,210,3,0,0,187,3,0,0,54,0,0,0,59,0,0,0,206,3,0,0,192,3,0,0,55,0,0,0,58,0,0,0,201,3,0,0,197,3,0,0,56,0,0,0,56,0,0,0,197,3,0,0,201,3,0,0,58,0,0,0,55,0,0,0,192,3,0,0,206,3,0,0,59,0,0,0,54,0,0,0,187,3,0,0,210,3,0,0,60,0,0,0,53,0,0,0,183,3,0,0,215,3,0,0,61,0,0,0,52,0,0,0,178,3,0,0,220,3,0,0,62,0,0,0,51,0,0,0,173,3,0,0,224,3,0,0,64,0,0,0,50,0,0,0,169,3,0,0,229,3,0,0,65,0,0,0,49,0,0,0,164,3,0,0,233,3,0,0,66,0,0,0,48,0,0,0,159,3,0,0,237,3,0,0,67,0,0,0,47,0,0,0,155,3,0,0,242,3,0,0,69,0,0,0,46,0,0,0,150,3,0,0,246,3,0,0,70,0,0,0,45,0,0,0,145,3,0,0,251,3,0,0,71,0,0,0,44,0,0,0,140,3,0,0,255,3,0,0,73,0,0,0,43,0,0,0,136,3,0,0,3,4,0,0,74,0,0,0,42,0,0,0,131,3,0,0,8,4,0,0,76,0,0,0,41,0,0,0,126,3,0,0,12,4,0,0,77,0,0,0,40,0,0,0,121,3,0,0,16,4,0,0,78,0,0,0,39,0,0,0,116,3,0,0,21,4,0,0,80,0,0,0,38,0,0,0,112,3,0,0,25,4,0,0,81,0,0,0,37,0,0,0,107,3,0,0,29,4,0,0,83,0,0,0,36,0,0,0,102,3,0,0,33,4,0,0,84,0,0,0,36,0,0,0,97,3,0,0,37,4,0,0,86,0,0,0,35,0,0,0,92,3,0,0,42,4,0,0,87,0,0,0,34,0,0,0,87,3,0,0,46,4,0,0,89,0,0,0,33,0,0,0,83,3,0,0,50,4,0,0,90,0,0,0,32,0,0,0,78,3,0,0,54,4,0,0,92,0,0,0,32,0,0,0,73,3,0,0,58,4,0,0,94,0,0,0,31,0,0,0,68,3,0,0,62,4,0,0,95,0,0,0,30,0,0,0,63,3,0,0,66,4,0,0,97,0,0,0,29,0,0,0,58,3,0,0,70,4,0,0,99,0,0,0,29,0,0,0,53,3,0,0,74,4,0,0,100,0,0,0,28,0,0,0,48,3,0,0,78,4,0,0,102,0,0,0,27,0,0,0,43,3,0,0,82,4,0,0,104,0,0,0,27,0,0,0,38,3,0,0,85,4,0,0,106,0,0,0,26,0,0,0,34,3,0,0,89,4,0,0,107,0,0,0,25,0,0,0,29,3,0,0,93,4,0,0,109,0,0,0,24,0,0,0,24,3,0,0,97,4,0,0,111,0,0,0,24,0,0,0,19,3,0,0,101,4,0,0,113,0,0,0,23,0,0,0,14,3,0,0,104,4,0,0,115,0,0,0,23,0,0,0,9,3,0,0,108,4,0,0,117,0,0,0,22,0,0,0,4,3,0,0,112,4,0,0,118,0,0,0,21,0,0,0,255,2,0,0,115,4,0,0,120,0,0,0,21,0,0,0,250,2,0,0,119,4,0,0,122,0,0,0,20,0,0,0,245,2,0,0,122,4,0,0,124,0,0,0,20,0,0,0,240,2,0,0,126,4,0,0,126,0,0,0,19,0,0,0,235,2,0,0,129,4,0,0,128,0,0,0,19,0,0,0,230,2,0,0,133,4,0,0,130,0,0,0,18,0,0,0,225,2,0,0,136,4,0,0,132,0,0,0,17,0,0,0,220,2,0,0,140,4,0,0,134,0,0,0,17,0,0,0,216,2,0,0,143,4,0,0,137,0,0,0,16,0,0,0,211,2,0,0,146,4,0,0,139,0,0,0,16,0,0,0,206,2,0,0,150,4,0,0,141,0,0,0,15,0,0,0,201,2,0,0,153,4,0,0,143,0,0,0,15,0,0,0,196,2,0,0,156,4,0,0,145,0,0,0,15,0,0,0,191,2,0,0,159,4,0,0,147,0,0,0,14,0,0,0,186,2,0,0,162,4,0,0,150,0,0,0,14,0,0,0,181,2,0,0,166,4,0,0,152,0,0,0,13,0,0,0,176,2,0,0,169,4,0,0,154,0,0,0,13,0,0,0,171,2,0,0,172,4,0,0,156,0,0,0,12,0,0,0,166,2,0,0,175,4,0,0,159,0,0,0,12,0,0,0,162,2,0,0,178,4,0,0,161,0,0,0,11,0,0,0,157,2,0,0,181,4,0,0,163,0,0,0,11,0,0,0,152,2,0,0,183,4,0,0,166,0,0,0,11,0,0,0,147,2,0,0,186,4,0,0,168,0,0,0,10,0,0,0,142,2,0,0,189,4,0,0,171,0,0,0,10,0,0,0,137,2,0,0,192,4,0,0,173,0,0,0,10,0,0,0,132,2,0,0,195,4,0,0,175,0,0,0,9,0,0,0,128,2,0,0,197,4,0,0,178,0,0,0,9,0,0,0,123,2,0,0,200,4,0,0,180,0,0,0,9,0,0,0,118,2,0,0,203,4,0,0,183,0,0,0,8,0,0,0,113,2,0,0,205,4,0,0,186,0,0,0,8,0,0,0,108,2,0,0,208,4,0,0,188,0,0,0,8,0,0,0,103,2,0,0,210,4,0,0,191,0,0,0,7,0,0,0,99,2,0,0,213,4,0,0,193,0,0,0,7,0,0,0,94,2,0,0,215,4,0,0,196,0,0,0,7,0,0,0,89,2,0,0,217,4,0,0,199,0,0,0,6,0,0,0,84,2,0,0,220,4,0,0,201,0,0,0,6,0,0,0,80,2,0,0,222,4,0,0,204,0,0,0,6,0,0,0,75,2,0,0,224,4,0,0,207,0,0,0,6,0,0,0,70,2,0,0,227,4,0,0,210,0,0,0,5,0,0,0,65,2,0,0,229,4,0,0,212,0,0,0,5,0,0,0,61,2,0,0,231,4,0,0,215,0,0,0,5,0,0,0,56,2,0,0,233,4,0,0,218,0,0,0,5,0,0,0,51,2,0,0,235,4,0,0,221,0,0,0,4,0,0,0,47,2,0,0,237,4,0,0,224,0,0,0,4,0,0,0,42,2,0,0,239,4,0,0,227,0,0,0,4,0,0,0,38,2,0,0,241,4,0,0,230,0,0,0,4,0,0,0,33,2,0,0,243,4,0,0,233,0,0,0,4,0,0,0,28,2,0,0,245,4,0,0,236,0,0,0,3,0,0,0,24,2,0,0,246,4,0,0,239,0,0,0,3,0,0,0,19,2,0,0,248,4,0,0,242,0,0,0,3,0,0,0,15,2,0,0,250,4,0,0,245,0,0,0,3,0,0,0,10,2,0,0,251,4,0,0,248,0,0,0,3,0,0,0,5,2,0,0,253,4,0,0,251,0,0,0,2,0,0,0,1,2,0,0,255,4,0,0,254,0,0,0,2,0,0,0,252,1,0,0,0,5,0,0,1,1,0,0,2,0,0,0,248,1,0,0,2,5,0,0,4,1,0,0,2,0,0,0,243,1,0,0,3,5,0,0,7,1,0,0,2,0,0,0,239,1,0,0,4,5,0,0,11,1,0,0,2,0,0,0,235,1,0,0,6,5,0,0,14,1,0,0,2,0,0,0,230,1,0,0,7,5,0,0,17,1,0,0,1,0,0,0,226,1,0,0,8,5,0,0,20,1,0,0,1,0,0,0,221,1,0,0,10,5,0,0,24,1,0,0,1,0,0,0,217,1,0,0,11,5,0,0,27,1,0,0,1,0,0,0,213,1,0,0,12,5,0,0,30,1,0,0,1,0,0,0,208,1,0,0,13,5,0,0,34,1,0,0,1,0,0,0,204,1,0,0,14,5,0,0,37,1,0,0,1,0,0,0,200,1,0,0,15,5,0,0,41,1,0,0,1,0,0,0,195,1,0,0,16,5,0,0,44,1,0,0,1,0,0,0,191,1,0,0,17,5,0,0,48,1,0,0,1,0,0,0,187,1,0,0,17,5,0,0,51,1,0,0,1,0,0,0,183,1,0,0,18,5,0,0,55,1,0,0,0,0,0,0,178,1,0,0,19,5,0,0,58,1,0,0,0,0,0,0,174,1,0,0,20,5,0,0,62,1,0,0,0,0,0,0,170,1,0,0,20,5,0,0,65,1,0,0,0,0,0,0,166,1,0,0,21,5,0,0,69,1,0,0,0,0,0,0,162,1,0,0,22,5,0,0,72,1,0,0,0,0,0,0,158,1,0,0,22,5,0,0,76,1,0,0,0,0,0,0,154,1,0,0,23,5,0,0,80,1,0,0,0,0,0,0,149,1,0,0,23,5,0,0,83,1,0,0,0,0,0,0,145,1,0,0,23,5,0,0,87,1,0,0,0,0,0,0,141,1,0,0,24,5,0,0,91,1,0,0,0,0,0,0,137,1,0,0,24,5,0,0,95,1,0,0,0,0,0,0,133,1,0,0,24,5,0,0,98,1,0,0,0,0,0,0,129,1,0,0,24,5,0,0,102,1,0,0,0,0,0,0,125,1,0,0,24,5,0,0,106,1,0,0,0,0,0,0,122,1,0,0,25,5,0,0,110,1,0,0,0,0,0,0,118,1,0,0,25,5,0,0,114,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,115,0,0,0,204,255,255,255,98,0,0,0,201,255,255,255,122,0,0,0,196,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,101,99,111,109,112,114,101,115,115,32,102,97,105,108,58,32,37,120,32,37,100,33,10,0,0,0,0,0,0,0,0,70,65,84,65,76,58,32,85,110,107,110,111,119,110,32,77,73,80,83,32,69,76,70,32,114,101,108,111,99,97,116,105,111,110,33,0,0,0,0,0,78,111,116,32,97,110,32,69,76,70,32,102,105,108,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+4781848);
/* memory initializer */ allocate([150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,49,46,50,46,49,0,0,0,16,0,17,0,18,0,0,0,8,0,7,0,9,0,6,0,10,0,5,0,11,0,4,0,12,0,3,0,13,0,2,0,14,0,1,0,15,0,0,0,105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,0,0,0,0,0,105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0,0,0,0,0,117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0,0,0,0,0,0,0,0,104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0,0,0,0,0,105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0,0,0,0,116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0,0,0,0,0,105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0,0,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0,0,0,105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0,0,0,0,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,192,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,160,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,224,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,144,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,208,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,176,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,240,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,200,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,168,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,232,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,152,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,216,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,184,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,248,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,196,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,164,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,228,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,148,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,212,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,180,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,244,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,204,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,172,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,236,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,156,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,220,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,188,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,252,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,194,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,162,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,226,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,146,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,210,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,178,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,242,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,202,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,170,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,234,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,154,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,218,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,186,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,250,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,198,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,166,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,230,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,150,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,214,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,182,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,246,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,206,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,174,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,238,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,158,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,222,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,190,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,254,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,193,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,161,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,225,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,145,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,209,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,177,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,241,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,201,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,169,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,233,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,153,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,217,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,185,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,249,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,197,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,165,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,229,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,149,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,213,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,181,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,245,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,205,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,173,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,237,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,157,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,221,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,189,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,253,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,195,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,163,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,227,0,16,7,6], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+6975076);
/* memory initializer */ allocate([8,89,0,0,8,25,0,0,9,147,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,211,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,179,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,243,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,203,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,171,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,235,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,155,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,219,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,187,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,251,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,199,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,167,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,231,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,151,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,215,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,183,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,247,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,207,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,175,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,239,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,159,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,223,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,191,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,255,0,16,5,1,0,23,5,1,1,19,5,17,0,27,5,1,16,17,5,5,0,25,5,1,4,21,5,65,0,29,5,1,64,16,5,3,0,24,5,1,2,20,5,33,0,28,5,1,32,18,5,9,0,26,5,1,8,22,5,129,0,64,5,0,0,16,5,2,0,23,5,129,1,19,5,25,0,27,5,1,24,17,5,7,0,25,5,1,6,21,5,97,0,29,5,1,96,16,5,4,0,24,5,1,3,20,5,49,0,28,5,1,48,18,5,13,0,26,5,1,12,22,5,193,0,64,5,0,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0,0,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,0,17,0,17,0,17,0,18,0,18,0,18,0,18,0,19,0,19,0,19,0,19,0,20,0,20,0,20,0,20,0,21,0,21,0,21,0,21,0,16,0,76,0,66,0,0,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0,16,0,16,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,24,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,64,0,64,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+6985317);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _BDtoILow=true;

  var _BDtoIHigh=true;

   
  Module["_memset"] = _memset;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

   
  Module["_strncpy"] = _strncpy;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

   
  Module["_i64Add"] = _i64Add;

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

   
  Module["_strcpy"] = _strcpy;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "_send": _send, "_fread": _fread, "_lseek": _lseek, "__reallyNegative": __reallyNegative, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_open": _open, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "_close": _close, "_fseek": _fseek, "_pread": _pread, "_puts": _puts, "_mkport": _mkport, "_fclose": _fclose, "_write": _write, "_fsync": _fsync, "_ftell": _ftell, "___errno_location": ___errno_location, "_recv": _recv, "_printf": _printf, "__exit": __exit, "_read": _read, "_fputc": _fputc, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "__formatString": __formatString, "_fputs": _fputs, "_fopen": _fopen, "_exit": _exit, "___setErrNo": ___setErrNo, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var _send=env._send;
  var _fread=env._fread;
  var _lseek=env._lseek;
  var __reallyNegative=env.__reallyNegative;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _fseek=env._fseek;
  var _pread=env._pread;
  var _puts=env._puts;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var _write=env._write;
  var _fsync=env._fsync;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _printf=env._printf;
  var __exit=env.__exit;
  var _read=env._read;
  var _fputc=env._fputc;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _fopen=env._fopen;
  var _exit=env._exit;
  var ___setErrNo=env.___setErrNo;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _open_psf($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen(($filename|0),(32776|0))|0);
 (_fseek(($0|0),0,2)|0);
 $1 = (_ftell(($0|0))|0);
 (_fseek(($0|0),0,0)|0);
 $2 = (_malloc($1)|0);
 (_fread(($2|0),($1|0),1,($0|0))|0);
 (_fclose(($0|0))|0);
 (_psf_start($2,$1)|0);
 return;
}
function _generate_sound_data_psf() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_psf_gen(8,16384)|0);
 return (8|0);
}
function _ao_get_lib($filename,$buffer,$length) {
 $filename = $filename|0;
 $buffer = $buffer|0;
 $length = $length|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $0 = (_fopen(($filename|0),(32776|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer1>>2] = $filename;
  (_printf((32784|0),($vararg_buffer1|0))|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_fseek(($0|0),0,2)|0);
 $2 = (_ftell(($0|0))|0);
 (_fseek(($0|0),0,0)|0);
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_fclose(($0|0))|0);
  HEAP32[$vararg_buffer1>>2] = $2;
  (_printf((32824|0),($vararg_buffer1|0))|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  (_fread(($3|0),($2|0),1,($0|0))|0);
  (_fclose(($0|0))|0);
  HEAP32[$buffer>>2] = $3;
  $5 = $length;
  $6 = $5;
  HEAP32[$6>>2] = $2;
  $7 = (($5) + 4)|0;
  $8 = $7;
  HEAP32[$8>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _corlett_decode($input,$input_len,$output,$size,$c) {
 $input = $input|0;
 $input_len = $input_len|0;
 $output = $output|0;
 $size = $size|0;
 $c = $c|0;
 var $$0 = 0, $$0212 = 0, $$neg7 = 0, $$neg9 = 0, $$sum = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $data$015 = 0, $data$1 = 0, $decomp_dat$0 = 0, $decomp_length = 0, $exitcond = 0, $l$013 = 0, $l$1 = 0, $num_tags$014 = 0, $num_tags$1 = 0, $num_tags$210 = 0, $or$cond = 0, $tag_dec$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $decomp_length = sp;
 $0 = HEAP8[$input>>0]|0;
 $1 = ($0<<24>>24)==(80);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($input) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(83);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($input) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(70);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($input) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($input) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($input) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)==(0);
 do {
  if ($14) {
   HEAP32[$decomp_length>>2] = 0;
   $decomp_dat$0 = 0;
  } else {
   $15 = (($11) + 16)|0;
   $16 = ($15>>>0)>($input_len>>>0);
   if ($16) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $17 = $9 >>> 2;
   $18 = (($17) + 4)|0;
   $19 = (($input) + ($18<<2)|0);
   $20 = (_crc32(0,$19,$11)|0);
   $21 = ($20|0)==($13|0);
   if (!($21)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $22 = (_malloc(33554444)|0);
   HEAP32[$decomp_length>>2] = 33554444;
   $23 = (_uncompress($22,$decomp_length,$19,$11)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = HEAP32[$decomp_length>>2]|0;
    $26 = (($25) + 1)|0;
    $27 = (_realloc($22,$26)|0);
    $decomp_dat$0 = $27;
    break;
   }
   _free($22);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $28 = (_malloc(20744)|0);
 HEAP32[$c>>2] = $28;
 $29 = ($28|0)==(0|0);
 if ($29) {
  _free($decomp_dat$0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($28|0),0,20744)|0;
 $30 = HEAP32[$c>>2]|0;
 $31 = (($30) + 2304|0);
 HEAP8[$31>>0]=6369134&255;HEAP8[$31+1>>0]=(6369134>>8)&255;HEAP8[$31+2>>0]=(6369134>>16)&255;HEAP8[$31+3>>0]=6369134>>24;
 $32 = HEAP32[$c>>2]|0;
 $33 = (($32) + 2560|0);
 HEAP8[$33>>0]=6369134&255;HEAP8[$33+1>>0]=(6369134>>8)&255;HEAP8[$33+2>>0]=(6369134>>16)&255;HEAP8[$33+3>>0]=6369134>>24;
 $34 = HEAP32[$c>>2]|0;
 $35 = (($34) + 2816|0);
 HEAP8[$35>>0]=6369134&255;HEAP8[$35+1>>0]=(6369134>>8)&255;HEAP8[$35+2>>0]=(6369134>>16)&255;HEAP8[$35+3>>0]=6369134>>24;
 $36 = HEAP32[$c>>2]|0;
 $37 = (($36) + 3072|0);
 HEAP8[$37>>0]=6369134&255;HEAP8[$37+1>>0]=(6369134>>8)&255;HEAP8[$37+2>>0]=(6369134>>16)&255;HEAP8[$37+3>>0]=6369134>>24;
 $38 = HEAP32[$c>>2]|0;
 $39 = (($38) + 3328|0);
 HEAP8[$39>>0]=6369134&255;HEAP8[$39+1>>0]=(6369134>>8)&255;HEAP8[$39+2>>0]=(6369134>>16)&255;HEAP8[$39+3>>0]=6369134>>24;
 $40 = HEAP32[$c>>2]|0;
 $41 = (($40) + 3584|0);
 HEAP8[$41>>0]=6369134&255;HEAP8[$41+1>>0]=(6369134>>8)&255;HEAP8[$41+2>>0]=(6369134>>16)&255;HEAP8[$41+3>>0]=6369134>>24;
 $42 = HEAP32[$c>>2]|0;
 $43 = (($42) + 3840|0);
 HEAP8[$43>>0]=6369134&255;HEAP8[$43+1>>0]=(6369134>>8)&255;HEAP8[$43+2>>0]=(6369134>>16)&255;HEAP8[$43+3>>0]=6369134>>24;
 $44 = (($input) + 16|0);
 $45 = HEAP32[$c>>2]|0;
 $46 = (($45) + 20736|0);
 HEAP32[$46>>2] = $44;
 $47 = HEAP32[$c>>2]|0;
 $48 = (($47) + 20740|0);
 HEAP32[$48>>2] = $9;
 HEAP32[$output>>2] = $decomp_dat$0;
 $49 = HEAP32[$decomp_length>>2]|0;
 $50 = $size;
 $51 = $50;
 HEAP32[$51>>2] = $49;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = 0;
 $$neg7 = (($input_len) + -16)|0;
 $$neg9 = (($$neg7) - ($9))|0;
 $54 = (($$neg9) - ($11))|0;
 $55 = ($54>>>0)<(5);
 if ($55) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $56 = (($11) + ($9))|0;
 $57 = (($56) + 16)|0;
 $58 = (($input) + ($57)|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = ($59<<24>>24)==(91);
 if (!($60)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $$sum = (($56) + 17)|0;
 $61 = (($input) + ($$sum)|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = ($62<<24>>24)==(84);
 if (!($63)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $$sum3 = (($56) + 18)|0;
 $64 = (($input) + ($$sum3)|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = ($65<<24>>24)==(65);
 if (!($66)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $$sum4 = (($56) + 19)|0;
 $67 = (($input) + ($$sum4)|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = ($68<<24>>24)==(71);
 if (!($69)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $$sum5 = (($56) + 20)|0;
 $70 = (($input) + ($$sum5)|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = ($71<<24>>24)==(93);
 if (!($72)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $73 = (($54) + -5)|0;
 $74 = ($73|0)==(0);
 if ($74) {
  $num_tags$210 = 0;
 } else {
  $$sum6 = (($56) + 21)|0;
  $75 = (($input) + ($$sum6)|0);
  $$0212 = $73;$data$015 = 0;$l$013 = 0;$num_tags$014 = 0;$tag_dec$011 = $75;
  while(1) {
   $76 = ($data$015|0)==(0);
   $77 = HEAP8[$tag_dec$011>>0]|0;
   do {
    if ($76) {
     $84 = ($77<<24>>24)==(61);
     if ($84) {
      $85 = HEAP32[$c>>2]|0;
      $86 = (((($85) + ($num_tags$014<<8)|0) + ($l$013)|0) + 4352|0);
      HEAP8[$86>>0] = 0;
      $data$1 = 1;$l$1 = 0;$num_tags$1 = $num_tags$014;
      break;
     } else {
      $87 = (($l$013) + 1)|0;
      $88 = HEAP32[$c>>2]|0;
      $89 = (((($88) + ($num_tags$014<<8)|0) + ($l$013)|0) + 4352|0);
      HEAP8[$89>>0] = $77;
      $data$1 = $data$015;$l$1 = $87;$num_tags$1 = $num_tags$014;
      break;
     }
    } else {
     if ((($77<<24>>24) == 0) | (($77<<24>>24) == 10)) {
      $78 = HEAP32[$c>>2]|0;
      $79 = (((($78) + ($num_tags$014<<8)|0) + ($l$013)|0) + 12544|0);
      HEAP8[$79>>0] = 0;
      $80 = (($num_tags$014) + 1)|0;
      $data$1 = 0;$l$1 = 0;$num_tags$1 = $80;
      break;
     } else {
      $81 = (($l$013) + 1)|0;
      $82 = HEAP32[$c>>2]|0;
      $83 = (((($82) + ($num_tags$014<<8)|0) + ($l$013)|0) + 12544|0);
      HEAP8[$83>>0] = $77;
      $data$1 = $data$015;$l$1 = $81;$num_tags$1 = $num_tags$014;
      break;
     }
    }
   } while(0);
   $90 = (($tag_dec$011) + 1|0);
   $91 = (($$0212) + -1)|0;
   $92 = ($91|0)!=(0);
   $93 = ($num_tags$1|0)<(32);
   $or$cond = $92 & $93;
   if ($or$cond) {
    $$0212 = $91;$data$015 = $data$1;$l$013 = $l$1;$num_tags$014 = $num_tags$1;$tag_dec$011 = $90;
   } else {
    $num_tags$210 = 0;
    break;
   }
  }
 }
 while(1) {
  $94 = HEAP32[$c>>2]|0;
  $95 = ((($94) + ($num_tags$210<<8)|0) + 4352|0);
  $96 = (_strcasecmp($95,32872)|0);
  $97 = ($96|0)==(0);
  do {
   if ($97) {
    $98 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
    (_strcpy(($94|0),($98|0))|0);
    $99 = HEAP32[$c>>2]|0;
    $100 = ((($99) + ($num_tags$210<<8)|0) + 12544|0);
    HEAP8[$100>>0] = 0;
    $101 = HEAP32[$c>>2]|0;
    $102 = ((($101) + ($num_tags$210<<8)|0) + 4352|0);
    HEAP8[$102>>0] = 0;
   } else {
    $103 = (_strncmp($95,32880,5)|0);
    $104 = ($103|0)==(0);
    if ($104) {
     $105 = (($94) + 256|0);
     $106 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($105|0),($106|0))|0);
     $107 = HEAP32[$c>>2]|0;
     $108 = ((($107) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$108>>0] = 0;
     $109 = HEAP32[$c>>2]|0;
     $110 = ((($109) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$110>>0] = 0;
     break;
    }
    $111 = (_strncmp($95,32888,5)|0);
    $112 = ($111|0)==(0);
    if ($112) {
     $113 = (($94) + 512|0);
     $114 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($113|0),($114|0))|0);
     $115 = HEAP32[$c>>2]|0;
     $116 = ((($115) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$116>>0] = 0;
     $117 = HEAP32[$c>>2]|0;
     $118 = ((($117) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$118>>0] = 0;
     break;
    }
    $119 = (_strncmp($95,32896,5)|0);
    $120 = ($119|0)==(0);
    if ($120) {
     $121 = (($94) + 768|0);
     $122 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($121|0),($122|0))|0);
     $123 = HEAP32[$c>>2]|0;
     $124 = ((($123) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$124>>0] = 0;
     $125 = HEAP32[$c>>2]|0;
     $126 = ((($125) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$126>>0] = 0;
     break;
    }
    $127 = (_strncmp($95,32904,5)|0);
    $128 = ($127|0)==(0);
    if ($128) {
     $129 = (($94) + 1024|0);
     $130 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($129|0),($130|0))|0);
     $131 = HEAP32[$c>>2]|0;
     $132 = ((($131) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$132>>0] = 0;
     $133 = HEAP32[$c>>2]|0;
     $134 = ((($133) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$134>>0] = 0;
     break;
    }
    $135 = (_strncmp($95,32912,5)|0);
    $136 = ($135|0)==(0);
    if ($136) {
     $137 = (($94) + 1280|0);
     $138 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($137|0),($138|0))|0);
     $139 = HEAP32[$c>>2]|0;
     $140 = ((($139) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$140>>0] = 0;
     $141 = HEAP32[$c>>2]|0;
     $142 = ((($141) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$142>>0] = 0;
     break;
    }
    $143 = (_strncmp($95,32920,5)|0);
    $144 = ($143|0)==(0);
    if ($144) {
     $145 = (($94) + 1536|0);
     $146 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($145|0),($146|0))|0);
     $147 = HEAP32[$c>>2]|0;
     $148 = ((($147) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$148>>0] = 0;
     $149 = HEAP32[$c>>2]|0;
     $150 = ((($149) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$150>>0] = 0;
     break;
    }
    $151 = (_strncmp($95,32928,5)|0);
    $152 = ($151|0)==(0);
    if ($152) {
     $153 = (($94) + 1792|0);
     $154 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($153|0),($154|0))|0);
     $155 = HEAP32[$c>>2]|0;
     $156 = ((($155) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$156>>0] = 0;
     $157 = HEAP32[$c>>2]|0;
     $158 = ((($157) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$158>>0] = 0;
     break;
    }
    $159 = (_strncmp($95,32936,5)|0);
    $160 = ($159|0)==(0);
    if ($160) {
     $161 = (($94) + 2048|0);
     $162 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($161|0),($162|0))|0);
     $163 = HEAP32[$c>>2]|0;
     $164 = ((($163) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$164>>0] = 0;
     $165 = HEAP32[$c>>2]|0;
     $166 = ((($165) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$166>>0] = 0;
     break;
    }
    $167 = (_strncmp($95,32944,8)|0);
    $168 = ($167|0)==(0);
    if ($168) {
     $169 = (($94) + 4096|0);
     $170 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($169|0),($170|0))|0);
     $171 = HEAP32[$c>>2]|0;
     $172 = ((($171) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$172>>0] = 0;
     $173 = HEAP32[$c>>2]|0;
     $174 = ((($173) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$174>>0] = 0;
     break;
    }
    $175 = (_strncmp($95,32960,5)|0);
    $176 = ($175|0)==(0);
    if ($176) {
     $177 = (($94) + 2304|0);
     $178 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($177|0),($178|0))|0);
     $179 = HEAP32[$c>>2]|0;
     $180 = ((($179) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$180>>0] = 0;
     $181 = HEAP32[$c>>2]|0;
     $182 = ((($181) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$182>>0] = 0;
     break;
    }
    $183 = (_strncmp($95,32968,9)|0);
    $184 = ($183|0)==(0);
    if ($184) {
     $185 = (($94) + 2560|0);
     $186 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($185|0),($186|0))|0);
     $187 = HEAP32[$c>>2]|0;
     $188 = ((($187) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$188>>0] = 0;
     $189 = HEAP32[$c>>2]|0;
     $190 = ((($189) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$190>>0] = 0;
     break;
    }
    $191 = (_strncmp($95,32984,6)|0);
    $192 = ($191|0)==(0);
    if ($192) {
     $193 = (($94) + 2816|0);
     $194 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($193|0),($194|0))|0);
     $195 = HEAP32[$c>>2]|0;
     $196 = ((($195) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$196>>0] = 0;
     $197 = HEAP32[$c>>2]|0;
     $198 = ((($197) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$198>>0] = 0;
     break;
    }
    $199 = (_strncmp($95,32992,4)|0);
    $200 = ($199|0)==(0);
    if ($200) {
     $201 = (($94) + 3072|0);
     $202 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($201|0),($202|0))|0);
     $203 = HEAP32[$c>>2]|0;
     $204 = ((($203) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$204>>0] = 0;
     $205 = HEAP32[$c>>2]|0;
     $206 = ((($205) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$206>>0] = 0;
     break;
    }
    $207 = (_strncmp($95,33000,4)|0);
    $208 = ($207|0)==(0);
    if ($208) {
     $209 = (($94) + 3328|0);
     $210 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($209|0),($210|0))|0);
     $211 = HEAP32[$c>>2]|0;
     $212 = ((($211) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$212>>0] = 0;
     $213 = HEAP32[$c>>2]|0;
     $214 = ((($213) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$214>>0] = 0;
     break;
    }
    $215 = (_strncmp($95,33008,6)|0);
    $216 = ($215|0)==(0);
    if ($216) {
     $217 = (($94) + 3584|0);
     $218 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
     (_strcpy(($217|0),($218|0))|0);
     $219 = HEAP32[$c>>2]|0;
     $220 = ((($219) + ($num_tags$210<<8)|0) + 12544|0);
     HEAP8[$220>>0] = 0;
     $221 = HEAP32[$c>>2]|0;
     $222 = ((($221) + ($num_tags$210<<8)|0) + 4352|0);
     HEAP8[$222>>0] = 0;
     break;
    }
    $223 = (_strncmp($95,33016,4)|0);
    $224 = ($223|0)==(0);
    if (!($224)) {
     break;
    }
    $225 = (($94) + 3840|0);
    $226 = ((($94) + ($num_tags$210<<8)|0) + 12544|0);
    (_strcpy(($225|0),($226|0))|0);
    $227 = HEAP32[$c>>2]|0;
    $228 = ((($227) + ($num_tags$210<<8)|0) + 12544|0);
    HEAP8[$228>>0] = 0;
    $229 = HEAP32[$c>>2]|0;
    $230 = ((($229) + ($num_tags$210<<8)|0) + 4352|0);
    HEAP8[$230>>0] = 0;
   }
  } while(0);
  $231 = (($num_tags$210) + 1)|0;
  $exitcond = ($231|0)==(32);
  if ($exitcond) {
   $$0 = 1;
   break;
  } else {
   $num_tags$210 = $231;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _psfTimeToMS($str) {
 $str = $str|0;
 var $$lcssa10 = 0, $$lcssa11 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $acc$0$lcssa = 0, $acc$04 = 0, $acc$04$lcssa8 = 0, $acc$04$lcssa9 = 0;
 var $acc$1 = 0, $acc$2 = 0, $c$03 = 0, $c$1 = 0, $s = 0, $x$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp;
 (_strncpy(($s|0),($str|0),100)|0);
 $0 = (($s) + 99|0);
 HEAP8[$0>>0] = 0;
 $1 = (_strlen(($s|0))|0);
 $2 = ($1|0)>(-1);
 L1: do {
  if ($2) {
   $acc$04 = 0;$c$03 = 0;$x$05 = $1;
   while(1) {
    $3 = (($s) + ($x$05)|0);
    $4 = HEAP8[$3>>0]|0;
    if ((($4<<24>>24) == 44) | (($4<<24>>24) == 46)) {
     $$sum2 = (($x$05) + 1)|0;
     $5 = (($s) + ($$sum2)|0);
     $6 = (_atoi($5)|0);
     HEAP8[$3>>0] = 0;
     $acc$2 = $6;$c$1 = $c$03;
    } else if ((($4<<24>>24) == 58)) {
     if ((($c$03|0) == 0)) {
      $$sum1 = (($x$05) + 1)|0;
      $7 = (($s) + ($$sum1)|0);
      $8 = (_atoi($7)|0);
      $9 = ($8*10)|0;
      $10 = (($9) + ($acc$04))|0;
      $acc$1 = $10;
     } else if ((($c$03|0) == 1)) {
      $11 = ($x$05|0)!=(0);
      $12 = $11&1;
      $$sum = (($12) + ($x$05))|0;
      $13 = (($s) + ($$sum)|0);
      $14 = (_atoi($13)|0);
      $15 = ($14*600)|0;
      $16 = (($15) + ($acc$04))|0;
      $acc$1 = $16;
     } else {
      $acc$1 = $acc$04;
     }
     $17 = (($c$03) + 1)|0;
     HEAP8[$3>>0] = 0;
     $acc$2 = $acc$1;$c$1 = $17;
    } else {
     $18 = ($x$05|0)==(0);
     if ($18) {
      if ((($c$03|0) == 1)) {
       $$lcssa10 = $3;$acc$04$lcssa8 = $acc$04;
       label = 11;
       break;
      } else if ((($c$03|0) == 2)) {
       $$lcssa11 = $3;$acc$04$lcssa9 = $acc$04;
       label = 12;
       break;
      } else if (!((($c$03|0) == 0))) {
       $acc$0$lcssa = $acc$04;
       break L1;
      }
      $19 = (_atoi($3)|0);
      $20 = ($19*10)|0;
      $21 = (($20) + ($acc$04))|0;
      $acc$2 = $21;$c$1 = 0;
     } else {
      $acc$2 = $acc$04;$c$1 = $c$03;
     }
    }
    $28 = (($x$05) + -1)|0;
    $29 = ($x$05|0)>(0);
    if ($29) {
     $acc$04 = $acc$2;$c$03 = $c$1;$x$05 = $28;
    } else {
     $acc$0$lcssa = $acc$2;
     break L1;
    }
   }
   if ((label|0) == 11) {
    $22 = (_atoi($$lcssa10)|0);
    $23 = ($22*600)|0;
    $24 = (($23) + ($acc$04$lcssa8))|0;
    $acc$0$lcssa = $24;
    break;
   }
   else if ((label|0) == 12) {
    $25 = (_atoi($$lcssa11)|0);
    $26 = ($25*36000)|0;
    $27 = (($26) + ($acc$04$lcssa9))|0;
    $acc$0$lcssa = $27;
    break;
   }
  } else {
   $acc$0$lcssa = 0;
  }
 } while(0);
 $30 = ($acc$0$lcssa*100)|0;
 STACKTOP = sp;return ($30|0);
}
function _psf_start($buffer,$length) {
 $buffer = $buffer|0;
 $length = $length|0;
 var $$ = 0, $$0 = 0, $$SP$0 = 0, $$masked = 0, $$masked2 = 0, $$masked3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $GP$0 = 0, $PC$0 = 0, $SP$0 = 0, $alib_decoded = 0, $alib_len = 0, $exitcond = 0, $file = 0, $file_len = 0, $i$07 = 0, $i2$06 = 0, $lengthMS$0 = 0, $lib = 0;
 var $lib_decoded = 0, $lib_len = 0, $lib_raw_file = 0, $mipsinfo = 0, $or$cond = 0, $tmp_length = 0, $tmp_length1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $file = sp + 64|0;
 $lib_decoded = sp + 48|0;
 $lib_raw_file = sp + 52|0;
 $alib_decoded = sp + 56|0;
 $file_len = sp;
 $lib_len = sp + 40|0;
 $alib_len = sp + 32|0;
 $lib = sp + 60|0;
 $mipsinfo = sp + 8|0;
 $tmp_length = sp + 16|0;
 $tmp_length1 = sp + 24|0;
 _memset((34768|0),0,2097152)|0;
 $0 = (_corlett_decode($buffer,$length,$file,$file_len,33032)|0);
 $1 = ($0|0)==(1);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$file>>2]|0;
 $3 = (_strncmp($2,33040,8)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[33032>>2]|0;
 $6 = (($5) + 4096|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(53);
 if ($8) {
  HEAP32[33024>>2] = 50;
 }
 $9 = HEAP32[33032>>2]|0;
 $10 = (($9) + 4096|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(54);
 if ($12) {
  HEAP32[33024>>2] = 60;
 }
 $13 = HEAP32[$file>>2]|0;
 $14 = (($13) + 16|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($13) + 17|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 8;
 $21 = $20 | $16;
 $22 = (($13) + 18|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 16;
 $26 = $21 | $25;
 $27 = (($13) + 19|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 24;
 $31 = $26 | $30;
 $32 = (($13) + 20|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = (($13) + 21|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 << 8;
 $39 = $38 | $34;
 $40 = (($13) + 22|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 << 16;
 $44 = $39 | $43;
 $45 = (($13) + 23|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 << 24;
 $49 = $44 | $48;
 $50 = (($13) + 48|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = (($13) + 49|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 << 8;
 $57 = $56 | $52;
 $58 = (($13) + 50|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 << 16;
 $62 = $57 | $61;
 $63 = (($13) + 51|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $65 << 24;
 $67 = $62 | $66;
 $68 = HEAP32[33032>>2]|0;
 $69 = HEAP8[$68>>0]|0;
 $70 = ($69<<24>>24)==(0);
 if ($70) {
  $GP$0 = $49;$PC$0 = $31;$SP$0 = $67;
 } else {
  $71 = (_ao_get_lib($68,$lib_raw_file,$tmp_length)|0);
  $72 = ($71|0)==(1);
  if (!($72)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $73 = $tmp_length;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($73) + 4)|0;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP32[$lib_raw_file>>2]|0;
  $80 = (_corlett_decode($79,$75,$lib_decoded,$lib_len,$lib)|0);
  $81 = ($80|0)==(1);
  $82 = HEAP32[$lib_raw_file>>2]|0;
  _free($82);
  if (!($81)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $83 = HEAP32[$lib_decoded>>2]|0;
  $84 = (_strncmp($83,33040,8)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   (_puts((33376|0))|0);
   $86 = HEAP32[$lib>>2]|0;
   _free($86);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $87 = HEAP32[33024>>2]|0;
  $88 = ($87|0)==(-1);
  if ($88) {
   $89 = HEAP32[$lib>>2]|0;
   $90 = (($89) + 4096|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = ($91<<24>>24)==(53);
   if ($92) {
    HEAP32[33024>>2] = 50;
   }
   $93 = HEAP32[$lib>>2]|0;
   $94 = (($93) + 4096|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = ($95<<24>>24)==(54);
   if ($96) {
    HEAP32[33024>>2] = 60;
   }
  }
  $97 = HEAP32[$lib_decoded>>2]|0;
  $98 = (($97) + 16|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($97) + 17|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = $103 << 8;
  $105 = $104 | $100;
  $106 = (($97) + 18|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $109 = $108 << 16;
  $110 = $105 | $109;
  $111 = (($97) + 19|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $114 = $113 << 24;
  $115 = $110 | $114;
  $116 = (($97) + 20|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($97) + 21|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = $121 << 8;
  $123 = $122 | $118;
  $124 = (($97) + 22|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = $126 << 16;
  $128 = $123 | $127;
  $129 = (($97) + 23|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130&255;
  $132 = $131 << 24;
  $133 = $128 | $132;
  $134 = (($97) + 48|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = (($97) + 49|0);
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $140 = $139 << 8;
  $141 = $140 | $136;
  $142 = (($97) + 50|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $143&255;
  $145 = $144 << 16;
  $146 = $141 | $145;
  $147 = (($97) + 51|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = $149 << 24;
  $151 = $146 | $150;
  $152 = (($97) + 24|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = $153&255;
  $155 = (($97) + 25|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = $156&255;
  $158 = $157 << 8;
  $159 = $158 | $154;
  $160 = (($97) + 26|0);
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = $162 << 16;
  $164 = $159 | $163;
  $165 = (($97) + 27|0);
  $166 = HEAP8[$165>>0]|0;
  $167 = $166&255;
  $168 = $167 << 24;
  $$masked3 = $168 & 1056964608;
  $169 = $164 | $$masked3;
  $170 = (($97) + 28|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = $171&255;
  $173 = (($97) + 29|0);
  $174 = HEAP8[$173>>0]|0;
  $175 = $174&255;
  $176 = $175 << 8;
  $177 = $176 | $172;
  $178 = (($97) + 30|0);
  $179 = HEAP8[$178>>0]|0;
  $180 = $179&255;
  $181 = $180 << 16;
  $182 = $177 | $181;
  $183 = (($97) + 31|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  $186 = $185 << 24;
  $187 = $182 | $186;
  $188 = $169 >>> 2;
  $189 = (34768 + ($188<<2)|0);
  $190 = (($97) + 2048|0);
  _memcpy(($189|0),($190|0),($187|0))|0;
  $191 = HEAP32[$lib>>2]|0;
  _free($191);
  $GP$0 = $133;$PC$0 = $115;$SP$0 = $151;
 }
 $192 = HEAP32[$file>>2]|0;
 $193 = (($192) + 24|0);
 $194 = HEAP8[$193>>0]|0;
 $195 = $194&255;
 $196 = (($192) + 25|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = $197&255;
 $199 = $198 << 8;
 $200 = $199 | $195;
 $201 = (($192) + 26|0);
 $202 = HEAP8[$201>>0]|0;
 $203 = $202&255;
 $204 = $203 << 16;
 $205 = $200 | $204;
 $206 = (($192) + 27|0);
 $207 = HEAP8[$206>>0]|0;
 $208 = $207&255;
 $209 = $208 << 24;
 $$masked = $209 & 1056964608;
 $210 = $205 | $$masked;
 $211 = (($192) + 28|0);
 $212 = HEAP8[$211>>0]|0;
 $213 = $212&255;
 $214 = (($192) + 29|0);
 $215 = HEAP8[$214>>0]|0;
 $216 = $215&255;
 $217 = $216 << 8;
 $218 = $217 | $213;
 $219 = (($192) + 30|0);
 $220 = HEAP8[$219>>0]|0;
 $221 = $220&255;
 $222 = $221 << 16;
 $223 = $218 | $222;
 $224 = (($192) + 31|0);
 $225 = HEAP8[$224>>0]|0;
 $226 = $225&255;
 $227 = $226 << 24;
 $228 = $223 | $227;
 $229 = $file_len;
 $230 = $229;
 $231 = HEAP32[$230>>2]|0;
 $232 = (($229) + 4)|0;
 $233 = $232;
 $234 = HEAP32[$233>>2]|0;
 $235 = (_i64Add(($231|0),($234|0),-2048,-1)|0);
 $236 = tempRet0;
 $237 = (0)>($236>>>0);
 $238 = ($228>>>0)>($235>>>0);
 $239 = (0)==($236|0);
 $240 = $239 & $238;
 $241 = $237 | $240;
 $$ = $241 ? $235 : $228;
 $242 = $210 >>> 2;
 $243 = (34768 + ($242<<2)|0);
 $244 = (($192) + 2048|0);
 _memcpy(($243|0),($244|0),($$|0))|0;
 $i$07 = 0;
 while(1) {
  $245 = HEAP32[33032>>2]|0;
  $246 = ((($245) + ($i$07<<8)|0) + 256|0);
  $247 = HEAP8[$246>>0]|0;
  $248 = ($247<<24>>24)==(0);
  if (!($248)) {
   $249 = (_ao_get_lib($246,$lib_raw_file,$tmp_length1)|0);
   $250 = ($249|0)==(1);
   if (!($250)) {
    $$0 = 0;
    label = 33;
    break;
   }
   $251 = $tmp_length1;
   $252 = $251;
   $253 = HEAP32[$252>>2]|0;
   $254 = (($251) + 4)|0;
   $255 = $254;
   $256 = HEAP32[$255>>2]|0;
   $257 = HEAP32[$lib_raw_file>>2]|0;
   $258 = (_corlett_decode($257,$253,$alib_decoded,$alib_len,$lib)|0);
   $259 = ($258|0)==(1);
   $260 = HEAP32[$lib_raw_file>>2]|0;
   _free($260);
   if (!($259)) {
    $$0 = 0;
    label = 33;
    break;
   }
   $261 = HEAP32[$alib_decoded>>2]|0;
   $262 = (_strncmp($261,33040,8)|0);
   $263 = ($262|0)==(0);
   if (!($263)) {
    label = 23;
    break;
   }
   $265 = (($261) + 24|0);
   $266 = HEAP8[$265>>0]|0;
   $267 = $266&255;
   $268 = (($261) + 25|0);
   $269 = HEAP8[$268>>0]|0;
   $270 = $269&255;
   $271 = $270 << 8;
   $272 = $271 | $267;
   $273 = (($261) + 26|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = $274&255;
   $276 = $275 << 16;
   $277 = $272 | $276;
   $278 = (($261) + 27|0);
   $279 = HEAP8[$278>>0]|0;
   $280 = $279&255;
   $281 = $280 << 24;
   $$masked2 = $281 & 1056964608;
   $282 = $277 | $$masked2;
   $283 = (($261) + 28|0);
   $284 = HEAP8[$283>>0]|0;
   $285 = $284&255;
   $286 = (($261) + 29|0);
   $287 = HEAP8[$286>>0]|0;
   $288 = $287&255;
   $289 = $288 << 8;
   $290 = $289 | $285;
   $291 = (($261) + 30|0);
   $292 = HEAP8[$291>>0]|0;
   $293 = $292&255;
   $294 = $293 << 16;
   $295 = $290 | $294;
   $296 = (($261) + 31|0);
   $297 = HEAP8[$296>>0]|0;
   $298 = $297&255;
   $299 = $298 << 24;
   $300 = $295 | $299;
   $301 = $282 >>> 2;
   $302 = (34768 + ($301<<2)|0);
   $303 = (($261) + 2048|0);
   _memcpy(($302|0),($303|0),($300|0))|0;
   $304 = HEAP32[$lib>>2]|0;
   _free($304);
  }
  $305 = (($i$07) + 1)|0;
  $306 = ($305|0)<(8);
  if ($306) {
   $i$07 = $305;
  } else {
   label = 26;
   break;
  }
 }
 if ((label|0) == 23) {
  (_puts((33376|0))|0);
  $264 = HEAP32[$lib>>2]|0;
  _free($264);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  $307 = HEAP32[$file>>2]|0;
  _free($307);
  HEAP32[33056>>2] = 6369134;
  $308 = HEAP32[33032>>2]|0;
  $309 = ($308|0)==(0|0);
  if (!($309)) {
   $i2$06 = 0;
   while(1) {
    $310 = HEAP32[33032>>2]|0;
    $311 = ((($310) + ($i2$06<<8)|0) + 4352|0);
    $312 = (_strcasecmp($311,33312)|0);
    $313 = ($312|0)==(0);
    if ($313) {
     $314 = ((($310) + ($i2$06<<8)|0) + 12544|0);
     (_strcpy((33056|0),($314|0))|0);
    }
    $315 = (($i2$06) + 1)|0;
    $exitcond = ($315|0)==(32);
    if ($exitcond) {
     break;
    } else {
     $i2$06 = $315;
    }
   }
  }
  _mips_reset(0);
  $316 = $mipsinfo;
  $317 = $316;
  HEAP32[$317>>2] = $PC$0;
  $318 = (($316) + 4)|0;
  $319 = $318;
  HEAP32[$319>>2] = 0;
  _mips_set_info(20,$mipsinfo);
  $320 = ($SP$0|0)==(0);
  $$SP$0 = $320 ? -2145386752 : $SP$0;
  $321 = $mipsinfo;
  $322 = $321;
  HEAP32[$322>>2] = $$SP$0;
  $323 = (($321) + 4)|0;
  $324 = $323;
  HEAP32[$324>>2] = 0;
  _mips_set_info(124,$mipsinfo);
  _mips_set_info(125,$mipsinfo);
  $325 = $mipsinfo;
  $326 = $325;
  HEAP32[$326>>2] = $GP$0;
  $327 = (($325) + 4)|0;
  $328 = $327;
  HEAP32[$328>>2] = 0;
  _mips_set_info(123,$mipsinfo);
  _psx_hw_init();
  (_SPUinit()|0);
  (_SPUopen()|0);
  $329 = HEAP32[33032>>2]|0;
  $330 = (($329) + 3584|0);
  $331 = (_psfTimeToMS($330)|0);
  $332 = HEAP32[33032>>2]|0;
  $333 = (($332) + 3840|0);
  $334 = (_psfTimeToMS($333)|0);
  $335 = ($331|0)==(0);
  $lengthMS$0 = $335 ? -1 : $331;
  _setlength($lengthMS$0,$334);
  $336 = HEAP32[33032>>2]|0;
  $337 = (($336) + 3072|0);
  $338 = (_strcmp($337,33320)|0);
  $339 = ($338|0)==(0);
  $340 = HEAP32[((34768 + 770192|0))>>2]|0;
  $341 = ($340|0)==(134410304);
  $or$cond = $339 & $341;
  if ($or$cond) {
   HEAP32[((34768 + 770192|0))>>2] = 0;
   HEAP32[((34768 + 770196|0))>>2] = 134410304;
   HEAP32[((34768 + 770200|0))>>2] = 0;
  }
  _memcpy((2146000|0),(34768|0),2097152)|0;
  _memcpy((4243152|0),(2141904|0),1024)|0;
  HEAP32[33344>>2] = $PC$0;
  HEAP32[33352>>2] = $GP$0;
  HEAP32[33360>>2] = $$SP$0;
  (_mips_execute(5000)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 33) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _spu_update($pSound,$lBytes) {
 $pSound = $pSound|0;
 $lBytes = $lBytes|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[33368>>2]|0;
 _memcpy(($0|0),($pSound|0),($lBytes|0))|0;
 return;
}
function _psf_gen($buffer,$samples) {
 $buffer = $buffer|0;
 $samples = $samples|0;
 var $0 = 0, $1 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($samples|0)==(0);
 if (!($0)) {
  $i$01 = 0;
  while(1) {
   _psx_hw_slice();
   (_SPUasync(384)|0);
   $1 = (($i$01) + 1)|0;
   $exitcond = ($1|0)==($samples|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $1;
   }
  }
 }
 HEAP32[33368>>2] = $buffer;
 _SPU_flushboot();
 _psx_hw_frame();
 return 1;
}
function _mips_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _mips_reset($param) {
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((33440 + 204|0))>>2]|0;
 $1 = $0 & -6422532;
 $2 = $1 | 4194304;
 _mips_set_cp0r(12,$2);
 _mips_set_cp0r(1,63);
 _mips_set_cp0r(15,512);
 _mips_set_pc(-1077936128);
 HEAP32[((33440 + 8|0))>>2] = -1;
 return;
}
function _mips_shorten_frame() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[33984>>2] = 0;
 return;
}
function _mips_execute($cycles) {
 $cycles = $cycles|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond = 0, $cond2 = 0, $cond3 = 0, $n_res$0 = 0, $n_res$1 = 0;
 var $n_res$2 = 0, $n_res$3 = 0, $sext = 0, $sext10 = 0, $sext11 = 0, $sext12 = 0, $sext13 = 0, $sext14 = 0, $sext15 = 0, $sext16 = 0, $sext17 = 0, $sext18 = 0, $sext19 = 0, $sext20 = 0, $sext21 = 0, $sext22 = 0, $sext23 = 0, $sext24 = 0, $sext25 = 0, $sext26 = 0;
 var $sext27 = 0, $sext28 = 0, $sext29 = 0, $sext30 = 0, $sext4 = 0, $sext5 = 0, $sext6 = 0, $sext7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[33984>>2] = $cycles;
 L1: while(1) {
  $0 = HEAP32[((33440 + 4|0))>>2]|0;
  $1 = (_program_read_dword_32le($0)|0);
  HEAP32[33440>>2] = $1;
  $2 = $1 >>> 26;
  L3: do {
   switch ($2|0) {
   case 0:  {
    $3 = $1 & 63;
    do {
     switch ($3|0) {
     case 7:  {
      $56 = $1 >>> 11;
      $57 = $56 & 31;
      $58 = $1 >>> 16;
      $59 = $58 & 31;
      $60 = ((33440 + ($59<<2)|0) + 28|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = $1 >>> 21;
      $63 = $62 & 31;
      $64 = ((33440 + ($63<<2)|0) + 28|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = $65 & 31;
      $67 = $61 >> $66;
      _mips_load($57,$67);
      break L3;
      break;
     }
     case 8:  {
      $68 = $1 & 63488;
      $69 = ($68|0)==(0);
      if ($69) {
       $70 = $1 >>> 21;
       $71 = $70 & 31;
       $72 = ((33440 + ($71<<2)|0) + 28|0);
       $73 = HEAP32[$72>>2]|0;
       _mips_delayed_branch($73);
       break L3;
      } else {
       _mips_exception(10);
       break L3;
      }
      break;
     }
     case 9:  {
      $74 = HEAP32[((33440 + 4|0))>>2]|0;
      $75 = $1 >>> 21;
      $76 = $75 & 31;
      $77 = ((33440 + ($76<<2)|0) + 28|0);
      $78 = HEAP32[$77>>2]|0;
      _mips_delayed_branch($78);
      $79 = HEAP32[33440>>2]|0;
      $80 = $79 >>> 11;
      $81 = $80 & 31;
      $82 = ($81|0)==(0);
      if ($82) {
       break L3;
      }
      $83 = (($74) + 8)|0;
      $84 = ((33440 + ($81<<2)|0) + 28|0);
      HEAP32[$84>>2] = $83;
      break L3;
      break;
     }
     case 12:  {
      _mips_exception(8);
      break L3;
      break;
     }
     case 13:  {
      label = 17;
      break L1;
      break;
     }
     case 16:  {
      $85 = $1 >>> 11;
      $86 = $85 & 31;
      $87 = HEAP32[((33440 + 20|0))>>2]|0;
      _mips_load($86,$87);
      break L3;
      break;
     }
     case 17:  {
      $88 = $1 & 63488;
      $89 = ($88|0)==(0);
      if ($89) {
       _mips_advance_pc();
       $90 = HEAP32[33440>>2]|0;
       $91 = $90 >>> 21;
       $92 = $91 & 31;
       $93 = ((33440 + ($92<<2)|0) + 28|0);
       $94 = HEAP32[$93>>2]|0;
       HEAP32[((33440 + 20|0))>>2] = $94;
       break L3;
      } else {
       _mips_exception(10);
       break L3;
      }
      break;
     }
     case 18:  {
      $95 = $1 >>> 11;
      $96 = $95 & 31;
      $97 = HEAP32[((33440 + 24|0))>>2]|0;
      _mips_load($96,$97);
      break L3;
      break;
     }
     case 11:  {
      $4 = HEAP32[((33440 + 4|0))>>2]|0;
      _psx_bios_hle($4);
      break L3;
      break;
     }
     case 0:  {
      $5 = $1 >>> 11;
      $6 = $5 & 31;
      $7 = $1 >>> 16;
      $8 = $7 & 31;
      $9 = ((33440 + ($8<<2)|0) + 28|0);
      $10 = HEAP32[$9>>2]|0;
      $11 = $1 >>> 6;
      $12 = $11 & 31;
      $13 = $10 << $12;
      _mips_load($6,$13);
      break L3;
      break;
     }
     case 2:  {
      $14 = $1 >>> 11;
      $15 = $14 & 31;
      $16 = $1 >>> 16;
      $17 = $16 & 31;
      $18 = ((33440 + ($17<<2)|0) + 28|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = $1 >>> 6;
      $21 = $20 & 31;
      $22 = $19 >>> $21;
      _mips_load($15,$22);
      break L3;
      break;
     }
     case 3:  {
      $23 = $1 >>> 11;
      $24 = $23 & 31;
      $25 = $1 >>> 16;
      $26 = $25 & 31;
      $27 = ((33440 + ($26<<2)|0) + 28|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $1 >>> 6;
      $30 = $29 & 31;
      $31 = $28 >> $30;
      _mips_load($24,$31);
      break L3;
      break;
     }
     case 4:  {
      $32 = $1 >>> 11;
      $33 = $32 & 31;
      $34 = $1 >>> 16;
      $35 = $34 & 31;
      $36 = ((33440 + ($35<<2)|0) + 28|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $1 >>> 21;
      $39 = $38 & 31;
      $40 = ((33440 + ($39<<2)|0) + 28|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = $41 & 31;
      $43 = $37 << $42;
      _mips_load($33,$43);
      break L3;
      break;
     }
     case 6:  {
      $44 = $1 >>> 11;
      $45 = $44 & 31;
      $46 = $1 >>> 16;
      $47 = $46 & 31;
      $48 = ((33440 + ($47<<2)|0) + 28|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = $1 >>> 21;
      $51 = $50 & 31;
      $52 = ((33440 + ($51<<2)|0) + 28|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = $53 & 31;
      $55 = $49 >>> $54;
      _mips_load($45,$55);
      break L3;
      break;
     }
     case 32:  {
      $159 = $1 >>> 21;
      $160 = $159 & 31;
      $161 = ((33440 + ($160<<2)|0) + 28|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = $1 >>> 16;
      $164 = $163 & 31;
      $165 = ((33440 + ($164<<2)|0) + 28|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = (($166) + ($162))|0;
      $168 = $162 ^ -2147483648;
      $169 = $168 ^ $166;
      $170 = $167 ^ $162;
      $171 = $170 & $169;
      $172 = ($171|0)<(0);
      if ($172) {
       _mips_exception(12);
       break L3;
      } else {
       $173 = $1 >>> 11;
       $174 = $173 & 31;
       _mips_load($174,$167);
       break L3;
      }
      break;
     }
     case 33:  {
      $175 = $1 >>> 11;
      $176 = $175 & 31;
      $177 = $1 >>> 21;
      $178 = $177 & 31;
      $179 = ((33440 + ($178<<2)|0) + 28|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = $1 >>> 16;
      $182 = $181 & 31;
      $183 = ((33440 + ($182<<2)|0) + 28|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = (($184) + ($180))|0;
      _mips_load($176,$185);
      break L3;
      break;
     }
     case 34:  {
      $186 = $1 >>> 21;
      $187 = $186 & 31;
      $188 = ((33440 + ($187<<2)|0) + 28|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $1 >>> 16;
      $191 = $190 & 31;
      $192 = ((33440 + ($191<<2)|0) + 28|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($189) - ($193))|0;
      $195 = $193 ^ $189;
      $196 = $194 ^ $189;
      $197 = $196 & $195;
      $198 = ($197|0)<(0);
      if ($198) {
       _mips_exception(12);
       break L3;
      } else {
       $199 = $1 >>> 11;
       $200 = $199 & 31;
       _mips_load($200,$194);
       break L3;
      }
      break;
     }
     case 19:  {
      $98 = $1 & 63488;
      $99 = ($98|0)==(0);
      if ($99) {
       _mips_advance_pc();
       $100 = HEAP32[33440>>2]|0;
       $101 = $100 >>> 21;
       $102 = $101 & 31;
       $103 = ((33440 + ($102<<2)|0) + 28|0);
       $104 = HEAP32[$103>>2]|0;
       HEAP32[((33440 + 24|0))>>2] = $104;
       break L3;
      } else {
       _mips_exception(10);
       break L3;
      }
      break;
     }
     case 24:  {
      $105 = $1 & 63488;
      $106 = ($105|0)==(0);
      if ($106) {
       $107 = $1 >>> 21;
       $108 = $107 & 31;
       $109 = ((33440 + ($108<<2)|0) + 28|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ($110|0)<(0);
       $112 = $111 << 31 >> 31;
       $113 = $1 >>> 16;
       $114 = $113 & 31;
       $115 = ((33440 + ($114<<2)|0) + 28|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = ($116|0)<(0);
       $118 = $117 << 31 >> 31;
       $119 = (___muldi3(($116|0),($118|0),($110|0),($112|0))|0);
       $120 = tempRet0;
       _mips_advance_pc();
       HEAP32[((33440 + 24|0))>>2] = $119;
       HEAP32[((33440 + 20|0))>>2] = $120;
       break L3;
      } else {
       _mips_exception(10);
       break L3;
      }
      break;
     }
     case 25:  {
      $121 = $1 & 63488;
      $122 = ($121|0)==(0);
      if ($122) {
       $123 = $1 >>> 21;
       $124 = $123 & 31;
       $125 = ((33440 + ($124<<2)|0) + 28|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = $1 >>> 16;
       $128 = $127 & 31;
       $129 = ((33440 + ($128<<2)|0) + 28|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = (___muldi3(($130|0),0,($126|0),0)|0);
       $132 = tempRet0;
       _mips_advance_pc();
       HEAP32[((33440 + 24|0))>>2] = $131;
       HEAP32[((33440 + 20|0))>>2] = $132;
       break L3;
      } else {
       _mips_exception(10);
       break L3;
      }
      break;
     }
     case 26:  {
      $133 = $1 & 63488;
      $134 = ($133|0)==(0);
      if (!($134)) {
       _mips_exception(10);
       break L3;
      }
      $135 = $1 >>> 16;
      $136 = $135 & 31;
      $137 = ((33440 + ($136<<2)|0) + 28|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0);
      if ($139) {
       _mips_advance_pc();
       break L3;
      } else {
       $140 = $1 >>> 21;
       $141 = $140 & 31;
       $142 = ((33440 + ($141<<2)|0) + 28|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (($143|0) / ($138|0))&-1;
       $145 = (($143|0) % ($138|0))&-1;
       _mips_advance_pc();
       HEAP32[((33440 + 24|0))>>2] = $144;
       HEAP32[((33440 + 20|0))>>2] = $145;
       break L3;
      }
      break;
     }
     case 27:  {
      $146 = $1 & 63488;
      $147 = ($146|0)==(0);
      if (!($147)) {
       _mips_exception(10);
       break L3;
      }
      $148 = $1 >>> 16;
      $149 = $148 & 31;
      $150 = ((33440 + ($149<<2)|0) + 28|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($151|0)==(0);
      if ($152) {
       _mips_advance_pc();
       break L3;
      } else {
       $153 = $1 >>> 21;
       $154 = $153 & 31;
       $155 = ((33440 + ($154<<2)|0) + 28|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = (($156>>>0) / ($151>>>0))&-1;
       $158 = (($156>>>0) % ($151>>>0))&-1;
       _mips_advance_pc();
       HEAP32[((33440 + 24|0))>>2] = $157;
       HEAP32[((33440 + 20|0))>>2] = $158;
       break L3;
      }
      break;
     }
     case 35:  {
      $201 = $1 >>> 11;
      $202 = $201 & 31;
      $203 = $1 >>> 21;
      $204 = $203 & 31;
      $205 = ((33440 + ($204<<2)|0) + 28|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = $1 >>> 16;
      $208 = $207 & 31;
      $209 = ((33440 + ($208<<2)|0) + 28|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = (($206) - ($210))|0;
      _mips_load($202,$211);
      break L3;
      break;
     }
     case 36:  {
      $212 = $1 >>> 11;
      $213 = $212 & 31;
      $214 = $1 >>> 21;
      $215 = $214 & 31;
      $216 = ((33440 + ($215<<2)|0) + 28|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = $1 >>> 16;
      $219 = $218 & 31;
      $220 = ((33440 + ($219<<2)|0) + 28|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = $221 & $217;
      _mips_load($213,$222);
      break L3;
      break;
     }
     case 37:  {
      $223 = $1 >>> 11;
      $224 = $223 & 31;
      $225 = $1 >>> 21;
      $226 = $225 & 31;
      $227 = ((33440 + ($226<<2)|0) + 28|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = $1 >>> 16;
      $230 = $229 & 31;
      $231 = ((33440 + ($230<<2)|0) + 28|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = $232 | $228;
      _mips_load($224,$233);
      break L3;
      break;
     }
     case 38:  {
      $234 = $1 >>> 11;
      $235 = $234 & 31;
      $236 = $1 >>> 21;
      $237 = $236 & 31;
      $238 = ((33440 + ($237<<2)|0) + 28|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = $1 >>> 16;
      $241 = $240 & 31;
      $242 = ((33440 + ($241<<2)|0) + 28|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = $243 ^ $239;
      _mips_load($235,$244);
      break L3;
      break;
     }
     case 39:  {
      $245 = $1 >>> 11;
      $246 = $245 & 31;
      $247 = $1 >>> 21;
      $248 = $247 & 31;
      $249 = ((33440 + ($248<<2)|0) + 28|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = $1 >>> 16;
      $252 = $251 & 31;
      $253 = ((33440 + ($252<<2)|0) + 28|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = $254 | $250;
      $256 = $255 ^ -1;
      _mips_load($246,$256);
      break L3;
      break;
     }
     case 42:  {
      $257 = $1 >>> 11;
      $258 = $257 & 31;
      $259 = $1 >>> 21;
      $260 = $259 & 31;
      $261 = ((33440 + ($260<<2)|0) + 28|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = $1 >>> 16;
      $264 = $263 & 31;
      $265 = ((33440 + ($264<<2)|0) + 28|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = ($262|0)<($266|0);
      $268 = $267&1;
      _mips_load($258,$268);
      break L3;
      break;
     }
     case 43:  {
      $269 = $1 >>> 11;
      $270 = $269 & 31;
      $271 = $1 >>> 21;
      $272 = $271 & 31;
      $273 = ((33440 + ($272<<2)|0) + 28|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = $1 >>> 16;
      $276 = $275 & 31;
      $277 = ((33440 + ($276<<2)|0) + 28|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = ($274>>>0)<($278>>>0);
      $280 = $279&1;
      _mips_load($270,$280);
      break L3;
      break;
     }
     default: {
      _mips_exception(10);
      break L3;
     }
     }
    } while(0);
    break;
   }
   case 1:  {
    $281 = $1 >>> 16;
    $282 = $281 & 31;
    if ((($282|0) == 0)) {
     $283 = $1 >>> 21;
     $284 = $283 & 31;
     $285 = ((33440 + ($284<<2)|0) + 28|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = ($286|0)<(0);
     if ($287) {
      $288 = HEAP32[((33440 + 4|0))>>2]|0;
      $sext30 = $1 << 16;
      $289 = $sext30 >> 14;
      $290 = (($289) + 4)|0;
      $291 = (($290) + ($288))|0;
      _mips_delayed_branch($291);
      break L3;
     } else {
      _mips_advance_pc();
      break L3;
     }
    } else if ((($282|0) == 1)) {
     $292 = $1 >>> 21;
     $293 = $292 & 31;
     $294 = ((33440 + ($293<<2)|0) + 28|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = ($295|0)>(-1);
     if ($296) {
      $297 = HEAP32[((33440 + 4|0))>>2]|0;
      $sext29 = $1 << 16;
      $298 = $sext29 >> 14;
      $299 = (($298) + 4)|0;
      $300 = (($299) + ($297))|0;
      _mips_delayed_branch($300);
      break L3;
     } else {
      _mips_advance_pc();
      break L3;
     }
    } else if ((($282|0) == 16)) {
     $301 = HEAP32[((33440 + 4|0))>>2]|0;
     $302 = (($301) + 8)|0;
     $303 = $1 >>> 21;
     $304 = $303 & 31;
     $305 = ((33440 + ($304<<2)|0) + 28|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = ($306|0)<(0);
     if ($307) {
      $sext28 = $1 << 16;
      $308 = $sext28 >> 14;
      $309 = (($308) + 4)|0;
      $310 = (($309) + ($301))|0;
      _mips_delayed_branch($310);
     } else {
      _mips_advance_pc();
     }
     HEAP32[((33440 + 152|0))>>2] = $302;
     break L3;
    } else if ((($282|0) == 17)) {
     $311 = HEAP32[((33440 + 4|0))>>2]|0;
     $312 = (($311) + 8)|0;
     $313 = $1 >>> 21;
     $314 = $313 & 31;
     $315 = ((33440 + ($314<<2)|0) + 28|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = ($316|0)>(-1);
     if ($317) {
      $sext27 = $1 << 16;
      $318 = $sext27 >> 14;
      $319 = (($318) + 4)|0;
      $320 = (($319) + ($311))|0;
      _mips_delayed_branch($320);
     } else {
      _mips_advance_pc();
     }
     HEAP32[((33440 + 152|0))>>2] = $312;
     break L3;
    } else {
     break L3;
    }
    break;
   }
   case 2:  {
    $321 = HEAP32[((33440 + 4|0))>>2]|0;
    $322 = (($321) + 4)|0;
    $323 = $322 & -268435456;
    $324 = $1 << 2;
    $325 = $324 & 268435452;
    $326 = $323 | $325;
    _mips_delayed_branch($326);
    break;
   }
   case 3:  {
    $327 = HEAP32[((33440 + 4|0))>>2]|0;
    $328 = (($327) + 8)|0;
    $329 = (($327) + 4)|0;
    $330 = $329 & -268435456;
    $331 = $1 << 2;
    $332 = $331 & 268435452;
    $333 = $330 | $332;
    _mips_delayed_branch($333);
    HEAP32[((33440 + 152|0))>>2] = $328;
    break;
   }
   case 4:  {
    $334 = $1 >>> 21;
    $335 = $334 & 31;
    $336 = ((33440 + ($335<<2)|0) + 28|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $1 >>> 16;
    $339 = $338 & 31;
    $340 = ((33440 + ($339<<2)|0) + 28|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = ($337|0)==($341|0);
    if ($342) {
     $343 = HEAP32[((33440 + 4|0))>>2]|0;
     $sext26 = $1 << 16;
     $344 = $sext26 >> 14;
     $345 = (($344) + 4)|0;
     $346 = (($345) + ($343))|0;
     _mips_delayed_branch($346);
     break L3;
    } else {
     _mips_advance_pc();
     break L3;
    }
    break;
   }
   case 5:  {
    $347 = $1 >>> 21;
    $348 = $347 & 31;
    $349 = ((33440 + ($348<<2)|0) + 28|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = $1 >>> 16;
    $352 = $351 & 31;
    $353 = ((33440 + ($352<<2)|0) + 28|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ($350|0)==($354|0);
    if ($355) {
     _mips_advance_pc();
     break L3;
    } else {
     $356 = HEAP32[((33440 + 4|0))>>2]|0;
     $sext25 = $1 << 16;
     $357 = $sext25 >> 14;
     $358 = (($357) + 4)|0;
     $359 = (($358) + ($356))|0;
     _mips_delayed_branch($359);
     break L3;
    }
    break;
   }
   case 6:  {
    $360 = $1 & 2031616;
    $361 = ($360|0)==(0);
    if (!($361)) {
     _mips_exception(10);
     break L3;
    }
    $362 = $1 >>> 21;
    $363 = $362 & 31;
    $364 = ((33440 + ($363<<2)|0) + 28|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = ($365|0)<(1);
    if ($366) {
     $367 = HEAP32[((33440 + 4|0))>>2]|0;
     $sext24 = $1 << 16;
     $368 = $sext24 >> 14;
     $369 = (($368) + 4)|0;
     $370 = (($369) + ($367))|0;
     _mips_delayed_branch($370);
     break L3;
    } else {
     _mips_advance_pc();
     break L3;
    }
    break;
   }
   case 7:  {
    $371 = $1 & 2031616;
    $372 = ($371|0)==(0);
    if (!($372)) {
     _mips_exception(10);
     break L3;
    }
    $373 = $1 >>> 21;
    $374 = $373 & 31;
    $375 = ((33440 + ($374<<2)|0) + 28|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = ($376|0)>(0);
    if ($377) {
     $378 = HEAP32[((33440 + 4|0))>>2]|0;
     $sext23 = $1 << 16;
     $379 = $sext23 >> 14;
     $380 = (($379) + 4)|0;
     $381 = (($380) + ($378))|0;
     _mips_delayed_branch($381);
     break L3;
    } else {
     _mips_advance_pc();
     break L3;
    }
    break;
   }
   case 8:  {
    $sext22 = $1 << 16;
    $382 = $sext22 >> 16;
    $383 = $1 >>> 21;
    $384 = $383 & 31;
    $385 = ((33440 + ($384<<2)|0) + 28|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = (($386) + ($382))|0;
    $388 = $382 ^ -2147483648;
    $389 = $388 ^ $386;
    $390 = $387 ^ $386;
    $391 = $390 & $389;
    $392 = ($391|0)<(0);
    if ($392) {
     _mips_exception(12);
     break L3;
    } else {
     $393 = $1 >>> 16;
     $394 = $393 & 31;
     _mips_load($394,$387);
     break L3;
    }
    break;
   }
   case 9:  {
    $395 = $1 >>> 16;
    $396 = $395 & 31;
    $397 = ($396|0)==(0);
    if ($397) {
     $398 = HEAP32[((33440 + 4|0))>>2]|0;
     $399 = $1 & 65535;
     _psx_iop_call($398,$399);
     _mips_advance_pc();
     break L3;
    } else {
     $400 = $1 >>> 21;
     $401 = $400 & 31;
     $402 = ((33440 + ($401<<2)|0) + 28|0);
     $403 = HEAP32[$402>>2]|0;
     $sext21 = $1 << 16;
     $404 = $sext21 >> 16;
     $405 = (($403) + ($404))|0;
     _mips_load($396,$405);
     break L3;
    }
    break;
   }
   case 10:  {
    $406 = $1 >>> 16;
    $407 = $406 & 31;
    $408 = $1 >>> 21;
    $409 = $408 & 31;
    $410 = ((33440 + ($409<<2)|0) + 28|0);
    $411 = HEAP32[$410>>2]|0;
    $sext20 = $1 << 16;
    $412 = $sext20 >> 16;
    $413 = ($411|0)<($412|0);
    $414 = $413&1;
    _mips_load($407,$414);
    break;
   }
   case 11:  {
    $415 = $1 >>> 16;
    $416 = $415 & 31;
    $417 = $1 >>> 21;
    $418 = $417 & 31;
    $419 = ((33440 + ($418<<2)|0) + 28|0);
    $420 = HEAP32[$419>>2]|0;
    $sext19 = $1 << 16;
    $421 = $sext19 >> 16;
    $422 = ($420>>>0)<($421>>>0);
    $423 = $422&1;
    _mips_load($416,$423);
    break;
   }
   case 12:  {
    $424 = $1 >>> 16;
    $425 = $424 & 31;
    $426 = $1 >>> 21;
    $427 = $426 & 31;
    $428 = ((33440 + ($427<<2)|0) + 28|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = $1 & 65535;
    $431 = $430 & $429;
    _mips_load($425,$431);
    break;
   }
   case 13:  {
    $432 = $1 >>> 16;
    $433 = $432 & 31;
    $434 = $1 >>> 21;
    $435 = $434 & 31;
    $436 = ((33440 + ($435<<2)|0) + 28|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = $1 & 65535;
    $439 = $437 | $438;
    _mips_load($433,$439);
    break;
   }
   case 14:  {
    $440 = $1 >>> 16;
    $441 = $440 & 31;
    $442 = $1 >>> 21;
    $443 = $442 & 31;
    $444 = ((33440 + ($443<<2)|0) + 28|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = $1 & 65535;
    $447 = $445 ^ $446;
    _mips_load($441,$447);
    break;
   }
   case 15:  {
    $448 = $1 >>> 16;
    $449 = $448 & 31;
    $450 = $1 << 16;
    _mips_load($449,$450);
    break;
   }
   case 16:  {
    $451 = HEAP32[((33440 + 204|0))>>2]|0;
    $452 = $451 & 268435458;
    $453 = ($452|0)==(2);
    if ($453) {
     _mips_exception(11);
     $454 = HEAP32[((33440 + 208|0))>>2]|0;
     $455 = $454 & -805306369;
     _mips_set_cp0r(13,$455);
     break L3;
    }
    $456 = $1 >>> 21;
    $457 = $456 & 31;
    switch ($457|0) {
    case 0:  {
     $458 = $1 >>> 16;
     $459 = $458 & 31;
     $460 = $1 >>> 11;
     $461 = $460 & 31;
     $462 = ((33440 + ($461<<2)|0) + 156|0);
     $463 = HEAP32[$462>>2]|0;
     _mips_delayed_load($459,$463);
     break L3;
     break;
    }
    case 2:  {
     _mips_advance_pc();
     break L3;
     break;
    }
    case 6:  {
     _mips_advance_pc();
     break L3;
     break;
    }
    case 4:  {
     $464 = $1 >>> 11;
     $465 = $464 & 31;
     $466 = ((33440 + ($465<<2)|0) + 156|0);
     $467 = HEAP32[$466>>2]|0;
     $468 = (33992 + ($465<<2)|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = $469 ^ -1;
     $471 = $467 & $470;
     $472 = $1 >>> 16;
     $473 = $472 & 31;
     $474 = ((33440 + ($473<<2)|0) + 28|0);
     $475 = HEAP32[$474>>2]|0;
     $476 = $475 & $469;
     $477 = $476 | $471;
     _mips_advance_pc();
     $478 = HEAP32[33440>>2]|0;
     $479 = $478 >>> 11;
     $480 = $479 & 31;
     _mips_set_cp0r($480,$477);
     break L3;
     break;
    }
    case 8:  {
     $481 = $1 >>> 16;
     $482 = $481 & 31;
     if ((($482|0) == 0)) {
      _mips_advance_pc();
      break L3;
     } else if ((($482|0) == 1)) {
      _mips_advance_pc();
      break L3;
     } else {
      _mips_advance_pc();
      break L3;
     }
     break;
    }
    default: {
     $483 = $1 & 33554432;
     $cond2 = ($483|0)==(0);
     if ($cond2) {
      _mips_advance_pc();
      break L3;
     }
     $484 = $1 & 63;
     $cond3 = ($484|0)==(16);
     _mips_advance_pc();
     if (!($cond3)) {
      break L3;
     }
     $485 = HEAP32[((33440 + 204|0))>>2]|0;
     $486 = $485 & -16;
     $487 = $485 >>> 2;
     $488 = $487 & 15;
     $489 = $488 | $486;
     _mips_set_cp0r(12,$489);
     break L3;
    }
    }
    break;
   }
   case 17:  {
    $490 = HEAP32[((33440 + 204|0))>>2]|0;
    $491 = $490 & 536870912;
    $492 = ($491|0)==(0);
    if ($492) {
     _mips_exception(11);
     $493 = HEAP32[((33440 + 208|0))>>2]|0;
     $494 = $493 & -805306369;
     $495 = $494 | 268435456;
     _mips_set_cp0r(13,$495);
     break L3;
    }
    $496 = $1 >>> 21;
    $497 = $496 & 31;
    switch ($497|0) {
    case 0:  {
     _mips_advance_pc();
     break L3;
     break;
    }
    case 2:  {
     _mips_advance_pc();
     break L3;
     break;
    }
    case 4:  {
     _mips_advance_pc();
     break L3;
     break;
    }
    case 6:  {
     _mips_advance_pc();
     break L3;
     break;
    }
    case 8:  {
     $498 = $1 >>> 16;
     $499 = $498 & 31;
     if ((($499|0) == 0)) {
      _mips_advance_pc();
      break L3;
     } else if ((($499|0) == 1)) {
      _mips_advance_pc();
      break L3;
     } else {
      _mips_advance_pc();
      break L3;
     }
     break;
    }
    default: {
     _mips_advance_pc();
     break L3;
    }
    }
    break;
   }
   case 18:  {
    $500 = HEAP32[((33440 + 204|0))>>2]|0;
    $501 = $500 & 1073741824;
    $502 = ($501|0)==(0);
    if ($502) {
     _mips_exception(11);
     $503 = HEAP32[((33440 + 208|0))>>2]|0;
     $504 = $503 & -805306369;
     $505 = $504 | 536870912;
     _mips_set_cp0r(13,$505);
     break L3;
    }
    $506 = $1 >>> 21;
    $507 = $506 & 31;
    switch ($507|0) {
    case 0:  {
     $508 = $1 >>> 16;
     $509 = $508 & 31;
     $510 = $1 >>> 11;
     $511 = $510 & 31;
     $512 = (_getcp2dr($511)|0);
     _mips_delayed_load($509,$512);
     break L3;
     break;
    }
    case 2:  {
     $513 = $1 >>> 16;
     $514 = $513 & 31;
     $515 = $1 >>> 11;
     $516 = $515 & 31;
     $517 = (_getcp2cr($516)|0);
     _mips_delayed_load($514,$517);
     break L3;
     break;
    }
    case 4:  {
     $518 = $1 >>> 11;
     $519 = $518 & 31;
     $520 = $1 >>> 16;
     $521 = $520 & 31;
     $522 = ((33440 + ($521<<2)|0) + 28|0);
     $523 = HEAP32[$522>>2]|0;
     _setcp2dr($519,$523);
     _mips_advance_pc();
     break L3;
     break;
    }
    case 6:  {
     $524 = $1 >>> 11;
     $525 = $524 & 31;
     $526 = $1 >>> 16;
     $527 = $526 & 31;
     $528 = ((33440 + ($527<<2)|0) + 28|0);
     $529 = HEAP32[$528>>2]|0;
     _setcp2cr($525,$529);
     _mips_advance_pc();
     break L3;
     break;
    }
    case 8:  {
     $530 = $1 >>> 16;
     $531 = $530 & 31;
     if ((($531|0) == 0)) {
      _mips_advance_pc();
      break L3;
     } else if ((($531|0) == 1)) {
      _mips_advance_pc();
      break L3;
     } else {
      _mips_advance_pc();
      break L3;
     }
     break;
    }
    default: {
     $532 = $1 & 33554432;
     $cond = ($532|0)==(0);
     if ($cond) {
      _mips_advance_pc();
      break L3;
     } else {
      $533 = $1 & 33554431;
      _docop2($533);
      _mips_advance_pc();
      break L3;
     }
    }
    }
    break;
   }
   case 32:  {
    $534 = HEAP32[((33440 + 204|0))>>2]|0;
    $535 = $534 & 65536;
    $536 = ($535|0)==(0);
    if (!($536)) {
     _mips_advance_pc();
     break L3;
    }
    $537 = $534 & 33554434;
    $538 = ($537|0)==(33554434);
    $539 = $1 >>> 21;
    $540 = $539 & 31;
    $541 = ((33440 + ($540<<2)|0) + 28|0);
    $542 = HEAP32[$541>>2]|0;
    $sext18 = $1 << 16;
    $543 = $sext18 >> 16;
    $544 = (($542) + ($543))|0;
    $545 = $534 << 30;
    $546 = $545 & -2147483648;
    $547 = $546 & $544;
    $548 = ($547|0)==(0);
    if ($538) {
     if ($548) {
      $549 = $1 >>> 16;
      $550 = $549 & 31;
      $551 = $544 ^ 3;
      $552 = (_program_read_byte_32le($551)|0);
      $553 = $552 << 24 >> 24;
      _mips_delayed_load($550,$553);
      break L3;
     } else {
      _mips_exception(4);
      _mips_set_cp0r(8,$544);
      break L3;
     }
    } else {
     if ($548) {
      $554 = $1 >>> 16;
      $555 = $554 & 31;
      $556 = (_program_read_byte_32le($544)|0);
      $557 = $556 << 24 >> 24;
      _mips_delayed_load($555,$557);
      break L3;
     } else {
      _mips_exception(4);
      _mips_set_cp0r(8,$544);
      break L3;
     }
    }
    break;
   }
   case 33:  {
    $558 = HEAP32[((33440 + 204|0))>>2]|0;
    $559 = $558 & 65536;
    $560 = ($559|0)==(0);
    if (!($560)) {
     _mips_advance_pc();
     break L3;
    }
    $561 = $558 & 33554434;
    $562 = ($561|0)==(33554434);
    $563 = $1 >>> 21;
    $564 = $563 & 31;
    $565 = ((33440 + ($564<<2)|0) + 28|0);
    $566 = HEAP32[$565>>2]|0;
    $sext17 = $1 << 16;
    $567 = $sext17 >> 16;
    $568 = (($566) + ($567))|0;
    $569 = $558 << 30;
    $570 = $569 & -2147483648;
    $571 = $570 | 1;
    $572 = $568 & $571;
    $573 = ($572|0)==(0);
    if ($562) {
     if ($573) {
      $574 = $1 >>> 16;
      $575 = $574 & 31;
      $576 = $568 ^ 2;
      $577 = (_program_read_word_32le($576)|0);
      $578 = $577 << 16 >> 16;
      _mips_delayed_load($575,$578);
      break L3;
     } else {
      _mips_exception(4);
      _mips_set_cp0r(8,$568);
      break L3;
     }
    } else {
     if ($573) {
      $579 = $1 >>> 16;
      $580 = $579 & 31;
      $581 = (_program_read_word_32le($568)|0);
      $582 = $581 << 16 >> 16;
      _mips_delayed_load($580,$582);
      break L3;
     } else {
      _mips_exception(4);
      _mips_set_cp0r(8,$568);
      break L3;
     }
    }
    break;
   }
   case 34:  {
    $583 = HEAP32[((33440 + 204|0))>>2]|0;
    $584 = $583 & 65536;
    $585 = ($584|0)==(0);
    if (!($585)) {
     _mips_advance_pc();
     break L3;
    }
    $586 = $583 & 33554434;
    $587 = ($586|0)==(33554434);
    $588 = $1 >>> 21;
    $589 = $588 & 31;
    $590 = ((33440 + ($589<<2)|0) + 28|0);
    $591 = HEAP32[$590>>2]|0;
    $sext16 = $1 << 16;
    $592 = $sext16 >> 16;
    $593 = (($591) + ($592))|0;
    $594 = $583 << 30;
    $595 = $594 & -2147483648;
    $596 = $595 & $593;
    $597 = ($596|0)==(0);
    if ($587) {
     if (!($597)) {
      _mips_exception(4);
      _mips_set_cp0r(8,$593);
      break L3;
     }
     $598 = $593 & 3;
     if ((($598|0) == 0)) {
      $599 = $1 >>> 16;
      $600 = $599 & 31;
      $601 = ((33440 + ($600<<2)|0) + 28|0);
      $602 = HEAP32[$601>>2]|0;
      $603 = $602 & 16777215;
      $604 = (($593) + 3)|0;
      $605 = (_program_read_byte_32le($604)|0);
      $606 = $605&255;
      $607 = $606 << 24;
      $608 = $607 | $603;
      $n_res$0 = $608;
     } else if ((($598|0) == 1)) {
      $609 = $1 >>> 16;
      $610 = $609 & 31;
      $611 = ((33440 + ($610<<2)|0) + 28|0);
      $612 = HEAP32[$611>>2]|0;
      $613 = $612 & 65535;
      $614 = (($593) + 1)|0;
      $615 = (_program_read_word_32le($614)|0);
      $616 = $615&65535;
      $617 = $616 << 16;
      $618 = $617 | $613;
      $n_res$0 = $618;
     } else if ((($598|0) == 2)) {
      $619 = $1 >>> 16;
      $620 = $619 & 31;
      $621 = ((33440 + ($620<<2)|0) + 28|0);
      $622 = HEAP32[$621>>2]|0;
      $623 = $622 & 255;
      $624 = (($593) + -1)|0;
      $625 = (_program_read_byte_32le($624)|0);
      $626 = $625&255;
      $627 = $626 << 8;
      $628 = $627 | $623;
      $629 = (_program_read_word_32le($593)|0);
      $630 = $629&65535;
      $631 = $630 << 16;
      $632 = $628 | $631;
      $n_res$0 = $632;
     } else {
      $633 = (($593) + -3)|0;
      $634 = (_program_read_dword_32le($633)|0);
      $n_res$0 = $634;
     }
     $635 = HEAP32[33440>>2]|0;
     $636 = $635 >>> 16;
     $637 = $636 & 31;
     _mips_delayed_load($637,$n_res$0);
     break L3;
    } else {
     if (!($597)) {
      _mips_exception(4);
      _mips_set_cp0r(8,$593);
      break L3;
     }
     $638 = $593 & 3;
     if ((($638|0) == 0)) {
      $639 = $1 >>> 16;
      $640 = $639 & 31;
      $641 = ((33440 + ($640<<2)|0) + 28|0);
      $642 = HEAP32[$641>>2]|0;
      $643 = $642 & 16777215;
      $644 = (_program_read_byte_32le($593)|0);
      $645 = $644&255;
      $646 = $645 << 24;
      $647 = $646 | $643;
      $n_res$1 = $647;
     } else if ((($638|0) == 1)) {
      $648 = $1 >>> 16;
      $649 = $648 & 31;
      $650 = ((33440 + ($649<<2)|0) + 28|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = $651 & 65535;
      $653 = (($593) + -1)|0;
      $654 = (_program_read_word_32le($653)|0);
      $655 = $654&65535;
      $656 = $655 << 16;
      $657 = $656 | $652;
      $n_res$1 = $657;
     } else if ((($638|0) == 2)) {
      $658 = $1 >>> 16;
      $659 = $658 & 31;
      $660 = ((33440 + ($659<<2)|0) + 28|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = $661 & 255;
      $663 = (($593) + -2)|0;
      $664 = (_program_read_word_32le($663)|0);
      $665 = $664&65535;
      $666 = $665 << 8;
      $667 = $666 | $662;
      $668 = (_program_read_byte_32le($593)|0);
      $669 = $668&255;
      $670 = $669 << 24;
      $671 = $667 | $670;
      $n_res$1 = $671;
     } else {
      $672 = (($593) + -3)|0;
      $673 = (_program_read_dword_32le($672)|0);
      $n_res$1 = $673;
     }
     $674 = HEAP32[33440>>2]|0;
     $675 = $674 >>> 16;
     $676 = $675 & 31;
     _mips_delayed_load($676,$n_res$1);
     break L3;
    }
    break;
   }
   case 35:  {
    $677 = HEAP32[((33440 + 204|0))>>2]|0;
    $678 = $677 & 65536;
    $679 = ($678|0)==(0);
    if ($679) {
     $680 = $1 >>> 21;
     $681 = $680 & 31;
     $682 = ((33440 + ($681<<2)|0) + 28|0);
     $683 = HEAP32[$682>>2]|0;
     $sext15 = $1 << 16;
     $684 = $sext15 >> 16;
     $685 = (($683) + ($684))|0;
     $686 = $1 >>> 16;
     $687 = $686 & 31;
     $688 = (_program_read_dword_32le($685)|0);
     _mips_delayed_load($687,$688);
     break L3;
    } else {
     _mips_advance_pc();
     break L3;
    }
    break;
   }
   case 36:  {
    $689 = HEAP32[((33440 + 204|0))>>2]|0;
    $690 = $689 & 65536;
    $691 = ($690|0)==(0);
    if (!($691)) {
     _mips_advance_pc();
     break L3;
    }
    $692 = $689 & 33554434;
    $693 = ($692|0)==(33554434);
    $694 = $1 >>> 21;
    $695 = $694 & 31;
    $696 = ((33440 + ($695<<2)|0) + 28|0);
    $697 = HEAP32[$696>>2]|0;
    $sext14 = $1 << 16;
    $698 = $sext14 >> 16;
    $699 = (($697) + ($698))|0;
    $700 = $689 << 30;
    $701 = $700 & -2147483648;
    $702 = $701 & $699;
    $703 = ($702|0)==(0);
    if ($693) {
     if ($703) {
      $704 = $1 >>> 16;
      $705 = $704 & 31;
      $706 = $699 ^ 3;
      $707 = (_program_read_byte_32le($706)|0);
      $708 = $707&255;
      _mips_delayed_load($705,$708);
      break L3;
     } else {
      _mips_exception(4);
      _mips_set_cp0r(8,$699);
      break L3;
     }
    } else {
     if ($703) {
      $709 = $1 >>> 16;
      $710 = $709 & 31;
      $711 = (_program_read_byte_32le($699)|0);
      $712 = $711&255;
      _mips_delayed_load($710,$712);
      break L3;
     } else {
      _mips_exception(4);
      _mips_set_cp0r(8,$699);
      break L3;
     }
    }
    break;
   }
   case 37:  {
    $713 = HEAP32[((33440 + 204|0))>>2]|0;
    $714 = $713 & 65536;
    $715 = ($714|0)==(0);
    if (!($715)) {
     _mips_advance_pc();
     break L3;
    }
    $716 = $713 & 33554434;
    $717 = ($716|0)==(33554434);
    $718 = $1 >>> 21;
    $719 = $718 & 31;
    $720 = ((33440 + ($719<<2)|0) + 28|0);
    $721 = HEAP32[$720>>2]|0;
    $sext13 = $1 << 16;
    $722 = $sext13 >> 16;
    $723 = (($721) + ($722))|0;
    $724 = $713 << 30;
    $725 = $724 & -2147483648;
    $726 = $725 | 1;
    $727 = $723 & $726;
    $728 = ($727|0)==(0);
    if ($717) {
     if ($728) {
      $729 = $1 >>> 16;
      $730 = $729 & 31;
      $731 = $723 ^ 2;
      $732 = (_program_read_word_32le($731)|0);
      $733 = $732&65535;
      _mips_delayed_load($730,$733);
      break L3;
     } else {
      _mips_exception(4);
      _mips_set_cp0r(8,$723);
      break L3;
     }
    } else {
     if ($728) {
      $734 = $1 >>> 16;
      $735 = $734 & 31;
      $736 = (_program_read_word_32le($723)|0);
      $737 = $736&65535;
      _mips_delayed_load($735,$737);
      break L3;
     } else {
      _mips_exception(4);
      _mips_set_cp0r(8,$723);
      break L3;
     }
    }
    break;
   }
   case 38:  {
    $738 = HEAP32[((33440 + 204|0))>>2]|0;
    $739 = $738 & 65536;
    $740 = ($739|0)==(0);
    if (!($740)) {
     _mips_advance_pc();
     break L3;
    }
    $741 = $738 & 33554434;
    $742 = ($741|0)==(33554434);
    $743 = $1 >>> 21;
    $744 = $743 & 31;
    $745 = ((33440 + ($744<<2)|0) + 28|0);
    $746 = HEAP32[$745>>2]|0;
    $sext12 = $1 << 16;
    $747 = $sext12 >> 16;
    $748 = (($746) + ($747))|0;
    $749 = $738 << 30;
    $750 = $749 & -2147483648;
    $751 = $750 & $748;
    $752 = ($751|0)==(0);
    if ($742) {
     if (!($752)) {
      _mips_exception(4);
      _mips_set_cp0r(8,$748);
      break L3;
     }
     $753 = $748 & 3;
     if ((($753|0) == 3)) {
      $754 = $1 >>> 16;
      $755 = $754 & 31;
      $756 = ((33440 + ($755<<2)|0) + 28|0);
      $757 = HEAP32[$756>>2]|0;
      $758 = $757 & -256;
      $759 = (($748) + -3)|0;
      $760 = (_program_read_byte_32le($759)|0);
      $761 = $760&255;
      $762 = $761 | $758;
      $n_res$2 = $762;
     } else if ((($753|0) == 2)) {
      $763 = $1 >>> 16;
      $764 = $763 & 31;
      $765 = ((33440 + ($764<<2)|0) + 28|0);
      $766 = HEAP32[$765>>2]|0;
      $767 = $766 & -65536;
      $768 = (($748) + -2)|0;
      $769 = (_program_read_word_32le($768)|0);
      $770 = $769&65535;
      $771 = $770 | $767;
      $n_res$2 = $771;
     } else if ((($753|0) == 1)) {
      $772 = $1 >>> 16;
      $773 = $772 & 31;
      $774 = ((33440 + ($773<<2)|0) + 28|0);
      $775 = HEAP32[$774>>2]|0;
      $776 = $775 & -16777216;
      $777 = (($748) + -1)|0;
      $778 = (_program_read_word_32le($777)|0);
      $779 = $778&65535;
      $780 = $779 | $776;
      $781 = (($748) + 1)|0;
      $782 = (_program_read_byte_32le($781)|0);
      $783 = $782&255;
      $784 = $783 << 16;
      $785 = $780 | $784;
      $n_res$2 = $785;
     } else {
      $786 = (_program_read_dword_32le($748)|0);
      $n_res$2 = $786;
     }
     $787 = HEAP32[33440>>2]|0;
     $788 = $787 >>> 16;
     $789 = $788 & 31;
     _mips_delayed_load($789,$n_res$2);
     break L3;
    } else {
     if (!($752)) {
      _mips_exception(4);
      _mips_set_cp0r(8,$748);
      break L3;
     }
     $790 = $748 & 3;
     if ((($790|0) == 3)) {
      $791 = $1 >>> 16;
      $792 = $791 & 31;
      $793 = ((33440 + ($792<<2)|0) + 28|0);
      $794 = HEAP32[$793>>2]|0;
      $795 = $794 & -256;
      $796 = (_program_read_byte_32le($748)|0);
      $797 = $796&255;
      $798 = $797 | $795;
      $n_res$3 = $798;
     } else if ((($790|0) == 2)) {
      $799 = $1 >>> 16;
      $800 = $799 & 31;
      $801 = ((33440 + ($800<<2)|0) + 28|0);
      $802 = HEAP32[$801>>2]|0;
      $803 = $802 & -65536;
      $804 = (_program_read_word_32le($748)|0);
      $805 = $804&65535;
      $806 = $805 | $803;
      $n_res$3 = $806;
     } else if ((($790|0) == 1)) {
      $807 = $1 >>> 16;
      $808 = $807 & 31;
      $809 = ((33440 + ($808<<2)|0) + 28|0);
      $810 = HEAP32[$809>>2]|0;
      $811 = $810 & -16777216;
      $812 = (_program_read_byte_32le($748)|0);
      $813 = $812&255;
      $814 = $813 | $811;
      $815 = (($748) + 1)|0;
      $816 = (_program_read_word_32le($815)|0);
      $817 = $816&65535;
      $818 = $817 << 8;
      $819 = $814 | $818;
      $n_res$3 = $819;
     } else {
      $820 = (_program_read_dword_32le($748)|0);
      $n_res$3 = $820;
     }
     $821 = HEAP32[33440>>2]|0;
     $822 = $821 >>> 16;
     $823 = $822 & 31;
     _mips_delayed_load($823,$n_res$3);
     break L3;
    }
    break;
   }
   case 40:  {
    $824 = HEAP32[((33440 + 204|0))>>2]|0;
    $825 = $824 & 65536;
    $826 = ($825|0)==(0);
    if (!($826)) {
     _mips_advance_pc();
     break L3;
    }
    $827 = $824 & 33554434;
    $828 = ($827|0)==(33554434);
    $829 = $1 >>> 21;
    $830 = $829 & 31;
    $831 = ((33440 + ($830<<2)|0) + 28|0);
    $832 = HEAP32[$831>>2]|0;
    $sext11 = $1 << 16;
    $833 = $sext11 >> 16;
    $834 = (($832) + ($833))|0;
    $835 = $824 << 30;
    $836 = $835 & -2147483648;
    $837 = $836 & $834;
    $838 = ($837|0)==(0);
    if ($828) {
     if ($838) {
      $839 = $834 ^ 3;
      $840 = $1 >>> 16;
      $841 = $840 & 31;
      $842 = ((33440 + ($841<<2)|0) + 28|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = $843&255;
      _program_write_byte_32le($839,$844);
      _mips_advance_pc();
      break L3;
     } else {
      _mips_exception(5);
      _mips_set_cp0r(8,$834);
      break L3;
     }
    } else {
     if ($838) {
      $845 = $1 >>> 16;
      $846 = $845 & 31;
      $847 = ((33440 + ($846<<2)|0) + 28|0);
      $848 = HEAP32[$847>>2]|0;
      $849 = $848&255;
      _program_write_byte_32le($834,$849);
      _mips_advance_pc();
      break L3;
     } else {
      _mips_exception(5);
      _mips_set_cp0r(8,$834);
      break L3;
     }
    }
    break;
   }
   case 41:  {
    $850 = HEAP32[((33440 + 204|0))>>2]|0;
    $851 = $850 & 65536;
    $852 = ($851|0)==(0);
    if (!($852)) {
     _mips_advance_pc();
     break L3;
    }
    $853 = $850 & 33554434;
    $854 = ($853|0)==(33554434);
    $855 = $1 >>> 21;
    $856 = $855 & 31;
    $857 = ((33440 + ($856<<2)|0) + 28|0);
    $858 = HEAP32[$857>>2]|0;
    $sext10 = $1 << 16;
    $859 = $sext10 >> 16;
    $860 = (($858) + ($859))|0;
    $861 = $850 << 30;
    $862 = $861 & -2147483648;
    $863 = $862 | 1;
    $864 = $860 & $863;
    $865 = ($864|0)==(0);
    if ($854) {
     if ($865) {
      $866 = $860 ^ 2;
      $867 = $1 >>> 16;
      $868 = $867 & 31;
      $869 = ((33440 + ($868<<2)|0) + 28|0);
      $870 = HEAP32[$869>>2]|0;
      $871 = $870&65535;
      _program_write_word_32le($866,$871);
      _mips_advance_pc();
      break L3;
     } else {
      _mips_exception(5);
      _mips_set_cp0r(8,$860);
      break L3;
     }
    } else {
     if ($865) {
      $872 = $1 >>> 16;
      $873 = $872 & 31;
      $874 = ((33440 + ($873<<2)|0) + 28|0);
      $875 = HEAP32[$874>>2]|0;
      $876 = $875&65535;
      _program_write_word_32le($860,$876);
      _mips_advance_pc();
      break L3;
     } else {
      _mips_exception(5);
      _mips_set_cp0r(8,$860);
      break L3;
     }
    }
    break;
   }
   case 42:  {
    $877 = HEAP32[((33440 + 204|0))>>2]|0;
    $878 = $877 & 65536;
    $879 = ($878|0)==(0);
    if (!($879)) {
     (_puts((34728|0))|0);
     _mips_advance_pc();
     break L3;
    }
    $880 = $877 & 33554434;
    $881 = ($880|0)==(33554434);
    $882 = $1 >>> 21;
    $883 = $882 & 31;
    $884 = ((33440 + ($883<<2)|0) + 28|0);
    $885 = HEAP32[$884>>2]|0;
    $sext7 = $1 << 16;
    $886 = $sext7 >> 16;
    $887 = (($885) + ($886))|0;
    $888 = $877 << 30;
    $889 = $888 & -2147483648;
    $890 = $889 & $887;
    $891 = ($890|0)==(0);
    if ($881) {
     if (!($891)) {
      (_puts((34704|0))|0);
      _mips_exception(5);
      _mips_set_cp0r(8,$887);
      break L3;
     }
     $892 = $887 & 3;
     if ((($892|0) == 0)) {
      $893 = (($887) + 3)|0;
      $894 = $1 >>> 16;
      $895 = $894 & 31;
      $896 = ((33440 + ($895<<2)|0) + 28|0);
      $897 = HEAP32[$896>>2]|0;
      $898 = $897 >>> 24;
      $899 = $898&255;
      _program_write_byte_32le($893,$899);
     } else if ((($892|0) == 1)) {
      $900 = (($887) + 1)|0;
      $901 = $1 >>> 16;
      $902 = $901 & 31;
      $903 = ((33440 + ($902<<2)|0) + 28|0);
      $904 = HEAP32[$903>>2]|0;
      $905 = $904 >>> 16;
      $906 = $905&65535;
      _program_write_word_32le($900,$906);
     } else if ((($892|0) == 2)) {
      $907 = (($887) + -1)|0;
      $908 = $1 >>> 16;
      $909 = $908 & 31;
      $910 = ((33440 + ($909<<2)|0) + 28|0);
      $911 = HEAP32[$910>>2]|0;
      $912 = $911 >>> 8;
      $913 = $912&255;
      _program_write_byte_32le($907,$913);
      $914 = HEAP32[33440>>2]|0;
      $915 = $914 >>> 16;
      $916 = $915 & 31;
      $917 = ((33440 + ($916<<2)|0) + 28|0);
      $918 = HEAP32[$917>>2]|0;
      $919 = $918 >>> 16;
      $920 = $919&65535;
      _program_write_word_32le($887,$920);
     } else if ((($892|0) == 3)) {
      $921 = (($887) + -3)|0;
      $922 = $1 >>> 16;
      $923 = $922 & 31;
      $924 = ((33440 + ($923<<2)|0) + 28|0);
      $925 = HEAP32[$924>>2]|0;
      _program_write_dword_32le($921,$925);
     }
     _mips_advance_pc();
     break L3;
    } else {
     if (!($891)) {
      (_puts((34680|0))|0);
      _mips_exception(5);
      _mips_set_cp0r(8,$887);
      break L3;
     }
     $926 = $887 & 3;
     if ((($926|0) == 0)) {
      $927 = $1 >>> 16;
      $928 = $927 & 31;
      $929 = ((33440 + ($928<<2)|0) + 28|0);
      $930 = HEAP32[$929>>2]|0;
      $931 = $930 >>> 24;
      $932 = $931&255;
      _program_write_byte_32le($887,$932);
     } else if ((($926|0) == 1)) {
      $933 = (($887) + -1)|0;
      $934 = $1 >>> 16;
      $935 = $934 & 31;
      $936 = ((33440 + ($935<<2)|0) + 28|0);
      $937 = HEAP32[$936>>2]|0;
      $938 = $937 >>> 16;
      $939 = $938&65535;
      _program_write_word_32le($933,$939);
     } else if ((($926|0) == 2)) {
      $940 = (($887) + -2)|0;
      $941 = $1 >>> 16;
      $942 = $941 & 31;
      $943 = ((33440 + ($942<<2)|0) + 28|0);
      $944 = HEAP32[$943>>2]|0;
      $945 = $944 >>> 8;
      $946 = $945&65535;
      _program_write_word_32le($940,$946);
      $947 = HEAP32[33440>>2]|0;
      $948 = $947 >>> 16;
      $949 = $948 & 31;
      $950 = ((33440 + ($949<<2)|0) + 28|0);
      $951 = HEAP32[$950>>2]|0;
      $952 = $951 >>> 24;
      $953 = $952&255;
      _program_write_byte_32le($887,$953);
     } else if ((($926|0) == 3)) {
      $954 = (($887) + -3)|0;
      $955 = $1 >>> 16;
      $956 = $955 & 31;
      $957 = ((33440 + ($956<<2)|0) + 28|0);
      $958 = HEAP32[$957>>2]|0;
      _program_write_dword_32le($954,$958);
     }
     _mips_advance_pc();
     break L3;
    }
    break;
   }
   case 43:  {
    $959 = HEAP32[((33440 + 204|0))>>2]|0;
    $960 = $959 & 65536;
    $961 = ($960|0)==(0);
    if ($961) {
     $962 = $1 >>> 21;
     $963 = $962 & 31;
     $964 = ((33440 + ($963<<2)|0) + 28|0);
     $965 = HEAP32[$964>>2]|0;
     $sext6 = $1 << 16;
     $966 = $sext6 >> 16;
     $967 = (($965) + ($966))|0;
     $968 = $1 >>> 16;
     $969 = $968 & 31;
     $970 = ((33440 + ($969<<2)|0) + 28|0);
     $971 = HEAP32[$970>>2]|0;
     _program_write_dword_32le($967,$971);
     _mips_advance_pc();
     break L3;
    } else {
     _mips_advance_pc();
     break L3;
    }
    break;
   }
   case 46:  {
    $972 = HEAP32[((33440 + 204|0))>>2]|0;
    $973 = $972 & 65536;
    $974 = ($973|0)==(0);
    if (!($974)) {
     _mips_advance_pc();
     break L3;
    }
    $975 = $972 & 33554434;
    $976 = ($975|0)==(33554434);
    $977 = $1 >>> 21;
    $978 = $977 & 31;
    $979 = ((33440 + ($978<<2)|0) + 28|0);
    $980 = HEAP32[$979>>2]|0;
    $sext5 = $1 << 16;
    $981 = $sext5 >> 16;
    $982 = (($980) + ($981))|0;
    $983 = $972 << 30;
    $984 = $983 & -2147483648;
    $985 = $984 & $982;
    $986 = ($985|0)==(0);
    if ($976) {
     if (!($986)) {
      _mips_exception(5);
      _mips_set_cp0r(8,$982);
      break L3;
     }
     $987 = $982 & 3;
     if ((($987|0) == 0)) {
      $988 = $1 >>> 16;
      $989 = $988 & 31;
      $990 = ((33440 + ($989<<2)|0) + 28|0);
      $991 = HEAP32[$990>>2]|0;
      _program_write_dword_32le($982,$991);
     } else if ((($987|0) == 1)) {
      $992 = (($982) + -1)|0;
      $993 = $1 >>> 16;
      $994 = $993 & 31;
      $995 = ((33440 + ($994<<2)|0) + 28|0);
      $996 = HEAP32[$995>>2]|0;
      $997 = $996&65535;
      _program_write_word_32le($992,$997);
      $998 = (($982) + 1)|0;
      $999 = HEAP32[33440>>2]|0;
      $1000 = $999 >>> 16;
      $1001 = $1000 & 31;
      $1002 = ((33440 + ($1001<<2)|0) + 28|0);
      $1003 = HEAP32[$1002>>2]|0;
      $1004 = $1003 >>> 16;
      $1005 = $1004&255;
      _program_write_byte_32le($998,$1005);
     } else if ((($987|0) == 2)) {
      $1006 = (($982) + -2)|0;
      $1007 = $1 >>> 16;
      $1008 = $1007 & 31;
      $1009 = ((33440 + ($1008<<2)|0) + 28|0);
      $1010 = HEAP32[$1009>>2]|0;
      $1011 = $1010&65535;
      _program_write_word_32le($1006,$1011);
     } else if ((($987|0) == 3)) {
      $1012 = (($982) + -3)|0;
      $1013 = $1 >>> 16;
      $1014 = $1013 & 31;
      $1015 = ((33440 + ($1014<<2)|0) + 28|0);
      $1016 = HEAP32[$1015>>2]|0;
      $1017 = $1016&255;
      _program_write_byte_32le($1012,$1017);
     }
     _mips_advance_pc();
     break L3;
    } else {
     if (!($986)) {
      _mips_exception(5);
      _mips_set_cp0r(8,$982);
      break L3;
     }
     $1018 = $982 & 3;
     if ((($1018|0) == 0)) {
      $1019 = $1 >>> 16;
      $1020 = $1019 & 31;
      $1021 = ((33440 + ($1020<<2)|0) + 28|0);
      $1022 = HEAP32[$1021>>2]|0;
      _program_write_dword_32le($982,$1022);
     } else if ((($1018|0) == 1)) {
      $1023 = $1 >>> 16;
      $1024 = $1023 & 31;
      $1025 = ((33440 + ($1024<<2)|0) + 28|0);
      $1026 = HEAP32[$1025>>2]|0;
      $1027 = $1026&255;
      _program_write_byte_32le($982,$1027);
      $1028 = (($982) + 1)|0;
      $1029 = HEAP32[33440>>2]|0;
      $1030 = $1029 >>> 16;
      $1031 = $1030 & 31;
      $1032 = ((33440 + ($1031<<2)|0) + 28|0);
      $1033 = HEAP32[$1032>>2]|0;
      $1034 = $1033 >>> 8;
      $1035 = $1034&65535;
      _program_write_word_32le($1028,$1035);
     } else if ((($1018|0) == 2)) {
      $1036 = $1 >>> 16;
      $1037 = $1036 & 31;
      $1038 = ((33440 + ($1037<<2)|0) + 28|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = $1039&65535;
      _program_write_word_32le($982,$1040);
     } else if ((($1018|0) == 3)) {
      $1041 = $1 >>> 16;
      $1042 = $1041 & 31;
      $1043 = ((33440 + ($1042<<2)|0) + 28|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = $1044&255;
      _program_write_byte_32le($982,$1045);
     }
     _mips_advance_pc();
     break L3;
    }
    break;
   }
   case 49:  {
    _mips_advance_pc();
    break;
   }
   case 50:  {
    $1046 = HEAP32[((33440 + 204|0))>>2]|0;
    $1047 = $1046 & 1073741824;
    $1048 = ($1047|0)==(0);
    if ($1048) {
     _mips_exception(11);
     $1049 = HEAP32[((33440 + 208|0))>>2]|0;
     $1050 = $1049 & -805306369;
     $1051 = $1050 | 536870912;
     _mips_set_cp0r(13,$1051);
     break L3;
    }
    $1052 = $1046 & 65536;
    $1053 = ($1052|0)==(0);
    if (!($1053)) {
     _mips_advance_pc();
     break L3;
    }
    $1054 = $1 >>> 21;
    $1055 = $1054 & 31;
    $1056 = ((33440 + ($1055<<2)|0) + 28|0);
    $1057 = HEAP32[$1056>>2]|0;
    $sext4 = $1 << 16;
    $1058 = $sext4 >> 16;
    $1059 = (($1057) + ($1058))|0;
    $1060 = $1046 << 30;
    $1061 = $1060 & -2147483648;
    $1062 = $1061 | 3;
    $1063 = $1059 & $1062;
    $1064 = ($1063|0)==(0);
    if ($1064) {
     $1065 = $1 >>> 16;
     $1066 = $1065 & 31;
     $1067 = (_program_read_dword_32le($1059)|0);
     _setcp2dr($1066,$1067);
     _mips_advance_pc();
     break L3;
    } else {
     _mips_exception(4);
     _mips_set_cp0r(8,$1059);
     break L3;
    }
    break;
   }
   case 57:  {
    _mips_advance_pc();
    break;
   }
   case 58:  {
    $1068 = HEAP32[((33440 + 204|0))>>2]|0;
    $1069 = $1068 & 1073741824;
    $1070 = ($1069|0)==(0);
    if ($1070) {
     _mips_exception(11);
     $1071 = HEAP32[((33440 + 208|0))>>2]|0;
     $1072 = $1071 & -805306369;
     $1073 = $1072 | 536870912;
     _mips_set_cp0r(13,$1073);
     break L3;
    }
    $1074 = $1068 & 65536;
    $1075 = ($1074|0)==(0);
    if (!($1075)) {
     _mips_advance_pc();
     break L3;
    }
    $1076 = $1 >>> 21;
    $1077 = $1076 & 31;
    $1078 = ((33440 + ($1077<<2)|0) + 28|0);
    $1079 = HEAP32[$1078>>2]|0;
    $sext = $1 << 16;
    $1080 = $sext >> 16;
    $1081 = (($1079) + ($1080))|0;
    $1082 = $1068 << 30;
    $1083 = $1082 & -2147483648;
    $1084 = $1083 | 3;
    $1085 = $1081 & $1084;
    $1086 = ($1085|0)==(0);
    if ($1086) {
     $1087 = $1 >>> 16;
     $1088 = $1087 & 31;
     $1089 = (_getcp2dr($1088)|0);
     _program_write_dword_32le($1081,$1089);
     _mips_advance_pc();
     break L3;
    } else {
     _mips_exception(5);
     _mips_set_cp0r(8,$1081);
     break L3;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $1090 = HEAP32[33984>>2]|0;
  $1091 = (($1090) + -1)|0;
  HEAP32[33984>>2] = $1091;
  $1092 = ($1091|0)>(0);
  if (!($1092)) {
   $$lcssa = $1091;
   label = 296;
   break;
  }
 }
 if ((label|0) == 17) {
  (_puts((34752|0))|0);
  _exit(-1);
  // unreachable;
 }
 else if ((label|0) == 296) {
  $1093 = (($cycles) - ($$lcssa))|0;
  return ($1093|0);
 }
 return (0)|0;
}
function _mips_dasm($buffer,$pc) {
 $buffer = $buffer|0;
 $pc = $pc|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_program_read_dword_32le($pc)|0);
 HEAP32[$vararg_buffer>>2] = $0;
 (_sprintf($buffer,34120,$vararg_buffer)|0);
 STACKTOP = sp;return 4;
}
function _mips_set_info($state,$info) {
 $state = $state|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  if ((($state|0) == 23)) {
   $6 = $info;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   _set_irq_line(1,$8);
   return;
  } else if ((($state|0) == 24)) {
   $12 = $info;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   _set_irq_line(2,$14);
   return;
  } else if ((($state|0) == 25)) {
   $18 = $info;
   $19 = $18;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($18) + 4)|0;
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   _set_irq_line(3,$20);
   return;
  } else if ((($state|0) == 26)) {
   $24 = $info;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   _set_irq_line(4,$26);
   return;
  } else if ((($state|0) == 27)) {
   $30 = $info;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   _set_irq_line(5,$32);
   return;
  } else if ((($state|0) == 20)) {
   $36 = $info;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (($36) + 4)|0;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   _mips_set_pc($38);
   return;
  } else if ((($state|0) == 90)) {
   $42 = $info;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   _mips_set_pc($44);
   return;
  } else if ((($state|0) == 22)) {
   $0 = $info;
   $1 = $0;
   $2 = HEAP32[$1>>2]|0;
   $3 = (($0) + 4)|0;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   _set_irq_line(0,$2);
   return;
  } else if ((($state|0) == 92)) {
   $54 = $info;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 4)|0;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)<(0);
   $61 = ($56>>>0)<(33);
   $62 = ($59|0)==(0);
   $63 = $62 & $61;
   $64 = $60 | $63;
   if (!($64)) {
    return;
   }
   HEAP32[((33440 + 16|0))>>2] = $56;
   return;
  } else if ((($state|0) == 91)) {
   $48 = $info;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 4)|0;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   HEAP32[((33440 + 12|0))>>2] = $50;
   return;
  } else if ((($state|0) == 93)) {
   $65 = $info;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   $68 = (($65) + 4)|0;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   HEAP32[((33440 + 20|0))>>2] = $67;
   return;
  } else if ((($state|0) == 94)) {
   $71 = $info;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (($71) + 4)|0;
   $75 = $74;
   $76 = HEAP32[$75>>2]|0;
   HEAP32[((33440 + 24|0))>>2] = $73;
   return;
  } else if ((($state|0) == 95)) {
   $77 = $info;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $80 = (($77) + 4)|0;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   HEAP32[((33440 + 28|0))>>2] = $79;
   return;
  } else if ((($state|0) == 96)) {
   $83 = $info;
   $84 = $83;
   $85 = HEAP32[$84>>2]|0;
   $86 = (($83) + 4)|0;
   $87 = $86;
   $88 = HEAP32[$87>>2]|0;
   HEAP32[((33440 + 32|0))>>2] = $85;
   return;
  } else if ((($state|0) == 97)) {
   $89 = $info;
   $90 = $89;
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) + 4)|0;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   HEAP32[((33440 + 36|0))>>2] = $91;
   return;
  } else if ((($state|0) == 98)) {
   $95 = $info;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = (($95) + 4)|0;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   HEAP32[((33440 + 40|0))>>2] = $97;
   return;
  } else if ((($state|0) == 99)) {
   $101 = $info;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = (($101) + 4)|0;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   HEAP32[((33440 + 44|0))>>2] = $103;
   return;
  } else if ((($state|0) == 100)) {
   $107 = $info;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = (($107) + 4)|0;
   $111 = $110;
   $112 = HEAP32[$111>>2]|0;
   HEAP32[((33440 + 48|0))>>2] = $109;
   return;
  } else if ((($state|0) == 101)) {
   $113 = $info;
   $114 = $113;
   $115 = HEAP32[$114>>2]|0;
   $116 = (($113) + 4)|0;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   HEAP32[((33440 + 52|0))>>2] = $115;
   return;
  } else if ((($state|0) == 102)) {
   $119 = $info;
   $120 = $119;
   $121 = HEAP32[$120>>2]|0;
   $122 = (($119) + 4)|0;
   $123 = $122;
   $124 = HEAP32[$123>>2]|0;
   HEAP32[((33440 + 56|0))>>2] = $121;
   return;
  } else if ((($state|0) == 103)) {
   $125 = $info;
   $126 = $125;
   $127 = HEAP32[$126>>2]|0;
   $128 = (($125) + 4)|0;
   $129 = $128;
   $130 = HEAP32[$129>>2]|0;
   HEAP32[((33440 + 60|0))>>2] = $127;
   return;
  } else if ((($state|0) == 104)) {
   $131 = $info;
   $132 = $131;
   $133 = HEAP32[$132>>2]|0;
   $134 = (($131) + 4)|0;
   $135 = $134;
   $136 = HEAP32[$135>>2]|0;
   HEAP32[((33440 + 64|0))>>2] = $133;
   return;
  } else if ((($state|0) == 105)) {
   $137 = $info;
   $138 = $137;
   $139 = HEAP32[$138>>2]|0;
   $140 = (($137) + 4)|0;
   $141 = $140;
   $142 = HEAP32[$141>>2]|0;
   HEAP32[((33440 + 68|0))>>2] = $139;
   return;
  } else if ((($state|0) == 106)) {
   $143 = $info;
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = (($143) + 4)|0;
   $147 = $146;
   $148 = HEAP32[$147>>2]|0;
   HEAP32[((33440 + 72|0))>>2] = $145;
   return;
  } else if ((($state|0) == 107)) {
   $149 = $info;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $152 = (($149) + 4)|0;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   HEAP32[((33440 + 76|0))>>2] = $151;
   return;
  } else if ((($state|0) == 108)) {
   $155 = $info;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = (($155) + 4)|0;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   HEAP32[((33440 + 80|0))>>2] = $157;
   return;
  } else if ((($state|0) == 109)) {
   $161 = $info;
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = (($161) + 4)|0;
   $165 = $164;
   $166 = HEAP32[$165>>2]|0;
   HEAP32[((33440 + 84|0))>>2] = $163;
   return;
  } else if ((($state|0) == 110)) {
   $167 = $info;
   $168 = $167;
   $169 = HEAP32[$168>>2]|0;
   $170 = (($167) + 4)|0;
   $171 = $170;
   $172 = HEAP32[$171>>2]|0;
   HEAP32[((33440 + 88|0))>>2] = $169;
   return;
  } else if ((($state|0) == 111)) {
   $173 = $info;
   $174 = $173;
   $175 = HEAP32[$174>>2]|0;
   $176 = (($173) + 4)|0;
   $177 = $176;
   $178 = HEAP32[$177>>2]|0;
   HEAP32[((33440 + 92|0))>>2] = $175;
   return;
  } else if ((($state|0) == 112)) {
   $179 = $info;
   $180 = $179;
   $181 = HEAP32[$180>>2]|0;
   $182 = (($179) + 4)|0;
   $183 = $182;
   $184 = HEAP32[$183>>2]|0;
   HEAP32[((33440 + 96|0))>>2] = $181;
   return;
  } else if ((($state|0) == 113)) {
   $185 = $info;
   $186 = $185;
   $187 = HEAP32[$186>>2]|0;
   $188 = (($185) + 4)|0;
   $189 = $188;
   $190 = HEAP32[$189>>2]|0;
   HEAP32[((33440 + 100|0))>>2] = $187;
   return;
  } else if ((($state|0) == 114)) {
   $191 = $info;
   $192 = $191;
   $193 = HEAP32[$192>>2]|0;
   $194 = (($191) + 4)|0;
   $195 = $194;
   $196 = HEAP32[$195>>2]|0;
   HEAP32[((33440 + 104|0))>>2] = $193;
   return;
  } else if ((($state|0) == 115)) {
   $197 = $info;
   $198 = $197;
   $199 = HEAP32[$198>>2]|0;
   $200 = (($197) + 4)|0;
   $201 = $200;
   $202 = HEAP32[$201>>2]|0;
   HEAP32[((33440 + 108|0))>>2] = $199;
   return;
  } else if ((($state|0) == 116)) {
   $203 = $info;
   $204 = $203;
   $205 = HEAP32[$204>>2]|0;
   $206 = (($203) + 4)|0;
   $207 = $206;
   $208 = HEAP32[$207>>2]|0;
   HEAP32[((33440 + 112|0))>>2] = $205;
   return;
  } else if ((($state|0) == 117)) {
   $209 = $info;
   $210 = $209;
   $211 = HEAP32[$210>>2]|0;
   $212 = (($209) + 4)|0;
   $213 = $212;
   $214 = HEAP32[$213>>2]|0;
   HEAP32[((33440 + 116|0))>>2] = $211;
   return;
  } else if ((($state|0) == 118)) {
   $215 = $info;
   $216 = $215;
   $217 = HEAP32[$216>>2]|0;
   $218 = (($215) + 4)|0;
   $219 = $218;
   $220 = HEAP32[$219>>2]|0;
   HEAP32[((33440 + 120|0))>>2] = $217;
   return;
  } else if ((($state|0) == 119)) {
   $221 = $info;
   $222 = $221;
   $223 = HEAP32[$222>>2]|0;
   $224 = (($221) + 4)|0;
   $225 = $224;
   $226 = HEAP32[$225>>2]|0;
   HEAP32[((33440 + 124|0))>>2] = $223;
   return;
  } else if ((($state|0) == 120)) {
   $227 = $info;
   $228 = $227;
   $229 = HEAP32[$228>>2]|0;
   $230 = (($227) + 4)|0;
   $231 = $230;
   $232 = HEAP32[$231>>2]|0;
   HEAP32[((33440 + 128|0))>>2] = $229;
   return;
  } else if ((($state|0) == 121)) {
   $233 = $info;
   $234 = $233;
   $235 = HEAP32[$234>>2]|0;
   $236 = (($233) + 4)|0;
   $237 = $236;
   $238 = HEAP32[$237>>2]|0;
   HEAP32[((33440 + 132|0))>>2] = $235;
   return;
  } else if ((($state|0) == 122)) {
   $239 = $info;
   $240 = $239;
   $241 = HEAP32[$240>>2]|0;
   $242 = (($239) + 4)|0;
   $243 = $242;
   $244 = HEAP32[$243>>2]|0;
   HEAP32[((33440 + 136|0))>>2] = $241;
   return;
  } else if ((($state|0) == 123)) {
   $245 = $info;
   $246 = $245;
   $247 = HEAP32[$246>>2]|0;
   $248 = (($245) + 4)|0;
   $249 = $248;
   $250 = HEAP32[$249>>2]|0;
   HEAP32[((33440 + 140|0))>>2] = $247;
   return;
  } else if ((($state|0) == 124)) {
   $251 = $info;
   $252 = $251;
   $253 = HEAP32[$252>>2]|0;
   $254 = (($251) + 4)|0;
   $255 = $254;
   $256 = HEAP32[$255>>2]|0;
   HEAP32[((33440 + 144|0))>>2] = $253;
   return;
  } else if ((($state|0) == 125)) {
   $257 = $info;
   $258 = $257;
   $259 = HEAP32[$258>>2]|0;
   $260 = (($257) + 4)|0;
   $261 = $260;
   $262 = HEAP32[$261>>2]|0;
   HEAP32[((33440 + 148|0))>>2] = $259;
   return;
  } else if ((($state|0) == 126)) {
   $263 = $info;
   $264 = $263;
   $265 = HEAP32[$264>>2]|0;
   $266 = (($263) + 4)|0;
   $267 = $266;
   $268 = HEAP32[$267>>2]|0;
   HEAP32[((33440 + 152|0))>>2] = $265;
   return;
  } else if ((($state|0) == 127)) {
   $269 = $info;
   $270 = $269;
   $271 = HEAP32[$270>>2]|0;
   $272 = (($269) + 4)|0;
   $273 = $272;
   $274 = HEAP32[$273>>2]|0;
   _mips_set_cp0r(0,$271);
   return;
  } else if ((($state|0) == 128)) {
   $275 = $info;
   $276 = $275;
   $277 = HEAP32[$276>>2]|0;
   $278 = (($275) + 4)|0;
   $279 = $278;
   $280 = HEAP32[$279>>2]|0;
   _mips_set_cp0r(1,$277);
   return;
  } else if ((($state|0) == 129)) {
   $281 = $info;
   $282 = $281;
   $283 = HEAP32[$282>>2]|0;
   $284 = (($281) + 4)|0;
   $285 = $284;
   $286 = HEAP32[$285>>2]|0;
   _mips_set_cp0r(2,$283);
   return;
  } else if ((($state|0) == 130)) {
   $287 = $info;
   $288 = $287;
   $289 = HEAP32[$288>>2]|0;
   $290 = (($287) + 4)|0;
   $291 = $290;
   $292 = HEAP32[$291>>2]|0;
   _mips_set_cp0r(3,$289);
   return;
  } else if ((($state|0) == 131)) {
   $293 = $info;
   $294 = $293;
   $295 = HEAP32[$294>>2]|0;
   $296 = (($293) + 4)|0;
   $297 = $296;
   $298 = HEAP32[$297>>2]|0;
   _mips_set_cp0r(4,$295);
   return;
  } else if ((($state|0) == 132)) {
   $299 = $info;
   $300 = $299;
   $301 = HEAP32[$300>>2]|0;
   $302 = (($299) + 4)|0;
   $303 = $302;
   $304 = HEAP32[$303>>2]|0;
   _mips_set_cp0r(5,$301);
   return;
  } else if ((($state|0) == 133)) {
   $305 = $info;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   _mips_set_cp0r(6,$307);
   return;
  } else if ((($state|0) == 134)) {
   $311 = $info;
   $312 = $311;
   $313 = HEAP32[$312>>2]|0;
   $314 = (($311) + 4)|0;
   $315 = $314;
   $316 = HEAP32[$315>>2]|0;
   _mips_set_cp0r(7,$313);
   return;
  } else if ((($state|0) == 135)) {
   $317 = $info;
   $318 = $317;
   $319 = HEAP32[$318>>2]|0;
   $320 = (($317) + 4)|0;
   $321 = $320;
   $322 = HEAP32[$321>>2]|0;
   _mips_set_cp0r(8,$319);
   return;
  } else if ((($state|0) == 136)) {
   $323 = $info;
   $324 = $323;
   $325 = HEAP32[$324>>2]|0;
   $326 = (($323) + 4)|0;
   $327 = $326;
   $328 = HEAP32[$327>>2]|0;
   _mips_set_cp0r(9,$325);
   return;
  } else if ((($state|0) == 137)) {
   $329 = $info;
   $330 = $329;
   $331 = HEAP32[$330>>2]|0;
   $332 = (($329) + 4)|0;
   $333 = $332;
   $334 = HEAP32[$333>>2]|0;
   _mips_set_cp0r(10,$331);
   return;
  } else if ((($state|0) == 138)) {
   $335 = $info;
   $336 = $335;
   $337 = HEAP32[$336>>2]|0;
   $338 = (($335) + 4)|0;
   $339 = $338;
   $340 = HEAP32[$339>>2]|0;
   _mips_set_cp0r(11,$337);
   return;
  } else if ((($state|0) == 139)) {
   $341 = $info;
   $342 = $341;
   $343 = HEAP32[$342>>2]|0;
   $344 = (($341) + 4)|0;
   $345 = $344;
   $346 = HEAP32[$345>>2]|0;
   _mips_set_cp0r(12,$343);
   return;
  } else if ((($state|0) == 140)) {
   $347 = $info;
   $348 = $347;
   $349 = HEAP32[$348>>2]|0;
   $350 = (($347) + 4)|0;
   $351 = $350;
   $352 = HEAP32[$351>>2]|0;
   _mips_set_cp0r(13,$349);
   return;
  } else if ((($state|0) == 141)) {
   $353 = $info;
   $354 = $353;
   $355 = HEAP32[$354>>2]|0;
   $356 = (($353) + 4)|0;
   $357 = $356;
   $358 = HEAP32[$357>>2]|0;
   _mips_set_cp0r(14,$355);
   return;
  } else if ((($state|0) == 142)) {
   $359 = $info;
   $360 = $359;
   $361 = HEAP32[$360>>2]|0;
   $362 = (($359) + 4)|0;
   $363 = $362;
   $364 = HEAP32[$363>>2]|0;
   _mips_set_cp0r(15,$361);
   return;
  } else if ((($state|0) == 143)) {
   $365 = $info;
   $366 = $365;
   $367 = HEAP32[$366>>2]|0;
   $368 = (($365) + 4)|0;
   $369 = $368;
   $370 = HEAP32[$369>>2]|0;
   _mips_set_cp0r(16,$367);
   return;
  } else if ((($state|0) == 144)) {
   $371 = $info;
   $372 = $371;
   $373 = HEAP32[$372>>2]|0;
   $374 = (($371) + 4)|0;
   $375 = $374;
   $376 = HEAP32[$375>>2]|0;
   _mips_set_cp0r(17,$373);
   return;
  } else if ((($state|0) == 145)) {
   $377 = $info;
   $378 = $377;
   $379 = HEAP32[$378>>2]|0;
   $380 = (($377) + 4)|0;
   $381 = $380;
   $382 = HEAP32[$381>>2]|0;
   _mips_set_cp0r(18,$379);
   return;
  } else if ((($state|0) == 146)) {
   $383 = $info;
   $384 = $383;
   $385 = HEAP32[$384>>2]|0;
   $386 = (($383) + 4)|0;
   $387 = $386;
   $388 = HEAP32[$387>>2]|0;
   _mips_set_cp0r(19,$385);
   return;
  } else if ((($state|0) == 147)) {
   $389 = $info;
   $390 = $389;
   $391 = HEAP32[$390>>2]|0;
   $392 = (($389) + 4)|0;
   $393 = $392;
   $394 = HEAP32[$393>>2]|0;
   _mips_set_cp0r(20,$391);
   return;
  } else if ((($state|0) == 148)) {
   $395 = $info;
   $396 = $395;
   $397 = HEAP32[$396>>2]|0;
   $398 = (($395) + 4)|0;
   $399 = $398;
   $400 = HEAP32[$399>>2]|0;
   _mips_set_cp0r(21,$397);
   return;
  } else if ((($state|0) == 149)) {
   $401 = $info;
   $402 = $401;
   $403 = HEAP32[$402>>2]|0;
   $404 = (($401) + 4)|0;
   $405 = $404;
   $406 = HEAP32[$405>>2]|0;
   _mips_set_cp0r(22,$403);
   return;
  } else if ((($state|0) == 150)) {
   $407 = $info;
   $408 = $407;
   $409 = HEAP32[$408>>2]|0;
   $410 = (($407) + 4)|0;
   $411 = $410;
   $412 = HEAP32[$411>>2]|0;
   _mips_set_cp0r(23,$409);
   return;
  } else if ((($state|0) == 151)) {
   $413 = $info;
   $414 = $413;
   $415 = HEAP32[$414>>2]|0;
   $416 = (($413) + 4)|0;
   $417 = $416;
   $418 = HEAP32[$417>>2]|0;
   _mips_set_cp0r(24,$415);
   return;
  } else if ((($state|0) == 152)) {
   $419 = $info;
   $420 = $419;
   $421 = HEAP32[$420>>2]|0;
   $422 = (($419) + 4)|0;
   $423 = $422;
   $424 = HEAP32[$423>>2]|0;
   _mips_set_cp0r(25,$421);
   return;
  } else if ((($state|0) == 153)) {
   $425 = $info;
   $426 = $425;
   $427 = HEAP32[$426>>2]|0;
   $428 = (($425) + 4)|0;
   $429 = $428;
   $430 = HEAP32[$429>>2]|0;
   _mips_set_cp0r(26,$427);
   return;
  } else if ((($state|0) == 154)) {
   $431 = $info;
   $432 = $431;
   $433 = HEAP32[$432>>2]|0;
   $434 = (($431) + 4)|0;
   $435 = $434;
   $436 = HEAP32[$435>>2]|0;
   _mips_set_cp0r(27,$433);
   return;
  } else if ((($state|0) == 155)) {
   $437 = $info;
   $438 = $437;
   $439 = HEAP32[$438>>2]|0;
   $440 = (($437) + 4)|0;
   $441 = $440;
   $442 = HEAP32[$441>>2]|0;
   _mips_set_cp0r(28,$439);
   return;
  } else if ((($state|0) == 156)) {
   $443 = $info;
   $444 = $443;
   $445 = HEAP32[$444>>2]|0;
   $446 = (($443) + 4)|0;
   $447 = $446;
   $448 = HEAP32[$447>>2]|0;
   _mips_set_cp0r(29,$445);
   return;
  } else if ((($state|0) == 157)) {
   $449 = $info;
   $450 = $449;
   $451 = HEAP32[$450>>2]|0;
   $452 = (($449) + 4)|0;
   $453 = $452;
   $454 = HEAP32[$453>>2]|0;
   _mips_set_cp0r(30,$451);
   return;
  } else if ((($state|0) == 158)) {
   $455 = $info;
   $456 = $455;
   $457 = HEAP32[$456>>2]|0;
   $458 = (($455) + 4)|0;
   $459 = $458;
   $460 = HEAP32[$459>>2]|0;
   _mips_set_cp0r(31,$457);
   return;
  } else if ((($state|0) == 159)) {
   $461 = $info;
   $462 = $461;
   $463 = HEAP32[$462>>2]|0;
   $464 = (($461) + 4)|0;
   $465 = $464;
   $466 = HEAP32[$465>>2]|0;
   HEAP32[((33440 + 412|0))>>2] = $463;
   return;
  } else if ((($state|0) == 160)) {
   $467 = $info;
   $468 = $467;
   $469 = HEAP32[$468>>2]|0;
   $470 = (($467) + 4)|0;
   $471 = $470;
   $472 = HEAP32[$471>>2]|0;
   HEAP32[((33440 + 416|0))>>2] = $469;
   return;
  } else if ((($state|0) == 161)) {
   $473 = $info;
   $474 = $473;
   $475 = HEAP32[$474>>2]|0;
   $476 = (($473) + 4)|0;
   $477 = $476;
   $478 = HEAP32[$477>>2]|0;
   HEAP32[((33440 + 420|0))>>2] = $475;
   return;
  } else if ((($state|0) == 162)) {
   $479 = $info;
   $480 = $479;
   $481 = HEAP32[$480>>2]|0;
   $482 = (($479) + 4)|0;
   $483 = $482;
   $484 = HEAP32[$483>>2]|0;
   HEAP32[((33440 + 424|0))>>2] = $481;
   return;
  } else if ((($state|0) == 163)) {
   $485 = $info;
   $486 = $485;
   $487 = HEAP32[$486>>2]|0;
   $488 = (($485) + 4)|0;
   $489 = $488;
   $490 = HEAP32[$489>>2]|0;
   HEAP32[((33440 + 428|0))>>2] = $487;
   return;
  } else if ((($state|0) == 164)) {
   $491 = $info;
   $492 = $491;
   $493 = HEAP32[$492>>2]|0;
   $494 = (($491) + 4)|0;
   $495 = $494;
   $496 = HEAP32[$495>>2]|0;
   HEAP32[((33440 + 432|0))>>2] = $493;
   return;
  } else if ((($state|0) == 165)) {
   $497 = $info;
   $498 = $497;
   $499 = HEAP32[$498>>2]|0;
   $500 = (($497) + 4)|0;
   $501 = $500;
   $502 = HEAP32[$501>>2]|0;
   HEAP32[((33440 + 436|0))>>2] = $499;
   return;
  } else if ((($state|0) == 166)) {
   $503 = $info;
   $504 = $503;
   $505 = HEAP32[$504>>2]|0;
   $506 = (($503) + 4)|0;
   $507 = $506;
   $508 = HEAP32[$507>>2]|0;
   HEAP32[((33440 + 440|0))>>2] = $505;
   return;
  } else if ((($state|0) == 167)) {
   $509 = $info;
   $510 = $509;
   $511 = HEAP32[$510>>2]|0;
   $512 = (($509) + 4)|0;
   $513 = $512;
   $514 = HEAP32[$513>>2]|0;
   HEAP32[((33440 + 444|0))>>2] = $511;
   return;
  } else if ((($state|0) == 168)) {
   $515 = $info;
   $516 = $515;
   $517 = HEAP32[$516>>2]|0;
   $518 = (($515) + 4)|0;
   $519 = $518;
   $520 = HEAP32[$519>>2]|0;
   HEAP32[((33440 + 448|0))>>2] = $517;
   return;
  } else if ((($state|0) == 169)) {
   $521 = $info;
   $522 = $521;
   $523 = HEAP32[$522>>2]|0;
   $524 = (($521) + 4)|0;
   $525 = $524;
   $526 = HEAP32[$525>>2]|0;
   HEAP32[((33440 + 452|0))>>2] = $523;
   return;
  } else if ((($state|0) == 170)) {
   $527 = $info;
   $528 = $527;
   $529 = HEAP32[$528>>2]|0;
   $530 = (($527) + 4)|0;
   $531 = $530;
   $532 = HEAP32[$531>>2]|0;
   HEAP32[((33440 + 456|0))>>2] = $529;
   return;
  } else if ((($state|0) == 171)) {
   $533 = $info;
   $534 = $533;
   $535 = HEAP32[$534>>2]|0;
   $536 = (($533) + 4)|0;
   $537 = $536;
   $538 = HEAP32[$537>>2]|0;
   HEAP32[((33440 + 460|0))>>2] = $535;
   return;
  } else if ((($state|0) == 172)) {
   $539 = $info;
   $540 = $539;
   $541 = HEAP32[$540>>2]|0;
   $542 = (($539) + 4)|0;
   $543 = $542;
   $544 = HEAP32[$543>>2]|0;
   HEAP32[((33440 + 464|0))>>2] = $541;
   return;
  } else if ((($state|0) == 173)) {
   $545 = $info;
   $546 = $545;
   $547 = HEAP32[$546>>2]|0;
   $548 = (($545) + 4)|0;
   $549 = $548;
   $550 = HEAP32[$549>>2]|0;
   HEAP32[((33440 + 468|0))>>2] = $547;
   return;
  } else if ((($state|0) == 174)) {
   $551 = $info;
   $552 = $551;
   $553 = HEAP32[$552>>2]|0;
   $554 = (($551) + 4)|0;
   $555 = $554;
   $556 = HEAP32[$555>>2]|0;
   HEAP32[((33440 + 472|0))>>2] = $553;
   return;
  } else if ((($state|0) == 175)) {
   $557 = $info;
   $558 = $557;
   $559 = HEAP32[$558>>2]|0;
   $560 = (($557) + 4)|0;
   $561 = $560;
   $562 = HEAP32[$561>>2]|0;
   HEAP32[((33440 + 476|0))>>2] = $559;
   return;
  } else if ((($state|0) == 176)) {
   $563 = $info;
   $564 = $563;
   $565 = HEAP32[$564>>2]|0;
   $566 = (($563) + 4)|0;
   $567 = $566;
   $568 = HEAP32[$567>>2]|0;
   HEAP32[((33440 + 480|0))>>2] = $565;
   return;
  } else if ((($state|0) == 177)) {
   $569 = $info;
   $570 = $569;
   $571 = HEAP32[$570>>2]|0;
   $572 = (($569) + 4)|0;
   $573 = $572;
   $574 = HEAP32[$573>>2]|0;
   HEAP32[((33440 + 484|0))>>2] = $571;
   return;
  } else if ((($state|0) == 178)) {
   $575 = $info;
   $576 = $575;
   $577 = HEAP32[$576>>2]|0;
   $578 = (($575) + 4)|0;
   $579 = $578;
   $580 = HEAP32[$579>>2]|0;
   HEAP32[((33440 + 488|0))>>2] = $577;
   return;
  } else if ((($state|0) == 179)) {
   $581 = $info;
   $582 = $581;
   $583 = HEAP32[$582>>2]|0;
   $584 = (($581) + 4)|0;
   $585 = $584;
   $586 = HEAP32[$585>>2]|0;
   HEAP32[((33440 + 492|0))>>2] = $583;
   return;
  } else if ((($state|0) == 180)) {
   $587 = $info;
   $588 = $587;
   $589 = HEAP32[$588>>2]|0;
   $590 = (($587) + 4)|0;
   $591 = $590;
   $592 = HEAP32[$591>>2]|0;
   HEAP32[((33440 + 496|0))>>2] = $589;
   return;
  } else if ((($state|0) == 181)) {
   $593 = $info;
   $594 = $593;
   $595 = HEAP32[$594>>2]|0;
   $596 = (($593) + 4)|0;
   $597 = $596;
   $598 = HEAP32[$597>>2]|0;
   HEAP32[((33440 + 500|0))>>2] = $595;
   return;
  } else if ((($state|0) == 182)) {
   $599 = $info;
   $600 = $599;
   $601 = HEAP32[$600>>2]|0;
   $602 = (($599) + 4)|0;
   $603 = $602;
   $604 = HEAP32[$603>>2]|0;
   HEAP32[((33440 + 504|0))>>2] = $601;
   return;
  } else if ((($state|0) == 183)) {
   $605 = $info;
   $606 = $605;
   $607 = HEAP32[$606>>2]|0;
   $608 = (($605) + 4)|0;
   $609 = $608;
   $610 = HEAP32[$609>>2]|0;
   HEAP32[((33440 + 508|0))>>2] = $607;
   return;
  } else if ((($state|0) == 184)) {
   $611 = $info;
   $612 = $611;
   $613 = HEAP32[$612>>2]|0;
   $614 = (($611) + 4)|0;
   $615 = $614;
   $616 = HEAP32[$615>>2]|0;
   HEAP32[((33440 + 512|0))>>2] = $613;
   return;
  } else if ((($state|0) == 185)) {
   $617 = $info;
   $618 = $617;
   $619 = HEAP32[$618>>2]|0;
   $620 = (($617) + 4)|0;
   $621 = $620;
   $622 = HEAP32[$621>>2]|0;
   HEAP32[((33440 + 516|0))>>2] = $619;
   return;
  } else if ((($state|0) == 186)) {
   $623 = $info;
   $624 = $623;
   $625 = HEAP32[$624>>2]|0;
   $626 = (($623) + 4)|0;
   $627 = $626;
   $628 = HEAP32[$627>>2]|0;
   HEAP32[((33440 + 520|0))>>2] = $625;
   return;
  } else if ((($state|0) == 187)) {
   $629 = $info;
   $630 = $629;
   $631 = HEAP32[$630>>2]|0;
   $632 = (($629) + 4)|0;
   $633 = $632;
   $634 = HEAP32[$633>>2]|0;
   HEAP32[((33440 + 524|0))>>2] = $631;
   return;
  } else if ((($state|0) == 188)) {
   $635 = $info;
   $636 = $635;
   $637 = HEAP32[$636>>2]|0;
   $638 = (($635) + 4)|0;
   $639 = $638;
   $640 = HEAP32[$639>>2]|0;
   HEAP32[((33440 + 528|0))>>2] = $637;
   return;
  } else if ((($state|0) == 189)) {
   $641 = $info;
   $642 = $641;
   $643 = HEAP32[$642>>2]|0;
   $644 = (($641) + 4)|0;
   $645 = $644;
   $646 = HEAP32[$645>>2]|0;
   HEAP32[((33440 + 532|0))>>2] = $643;
   return;
  } else if ((($state|0) == 190)) {
   $647 = $info;
   $648 = $647;
   $649 = HEAP32[$648>>2]|0;
   $650 = (($647) + 4)|0;
   $651 = $650;
   $652 = HEAP32[$651>>2]|0;
   HEAP32[((33440 + 536|0))>>2] = $649;
   return;
  } else if ((($state|0) == 191)) {
   $653 = $info;
   $654 = $653;
   $655 = HEAP32[$654>>2]|0;
   $656 = (($653) + 4)|0;
   $657 = $656;
   $658 = HEAP32[$657>>2]|0;
   HEAP32[((33440 + 284|0))>>2] = $655;
   return;
  } else if ((($state|0) == 192)) {
   $659 = $info;
   $660 = $659;
   $661 = HEAP32[$660>>2]|0;
   $662 = (($659) + 4)|0;
   $663 = $662;
   $664 = HEAP32[$663>>2]|0;
   HEAP32[((33440 + 288|0))>>2] = $661;
   return;
  } else if ((($state|0) == 193)) {
   $665 = $info;
   $666 = $665;
   $667 = HEAP32[$666>>2]|0;
   $668 = (($665) + 4)|0;
   $669 = $668;
   $670 = HEAP32[$669>>2]|0;
   HEAP32[((33440 + 292|0))>>2] = $667;
   return;
  } else if ((($state|0) == 194)) {
   $671 = $info;
   $672 = $671;
   $673 = HEAP32[$672>>2]|0;
   $674 = (($671) + 4)|0;
   $675 = $674;
   $676 = HEAP32[$675>>2]|0;
   HEAP32[((33440 + 296|0))>>2] = $673;
   return;
  } else if ((($state|0) == 195)) {
   $677 = $info;
   $678 = $677;
   $679 = HEAP32[$678>>2]|0;
   $680 = (($677) + 4)|0;
   $681 = $680;
   $682 = HEAP32[$681>>2]|0;
   HEAP32[((33440 + 300|0))>>2] = $679;
   return;
  } else if ((($state|0) == 196)) {
   $683 = $info;
   $684 = $683;
   $685 = HEAP32[$684>>2]|0;
   $686 = (($683) + 4)|0;
   $687 = $686;
   $688 = HEAP32[$687>>2]|0;
   HEAP32[((33440 + 304|0))>>2] = $685;
   return;
  } else if ((($state|0) == 197)) {
   $689 = $info;
   $690 = $689;
   $691 = HEAP32[$690>>2]|0;
   $692 = (($689) + 4)|0;
   $693 = $692;
   $694 = HEAP32[$693>>2]|0;
   HEAP32[((33440 + 308|0))>>2] = $691;
   return;
  } else if ((($state|0) == 198)) {
   $695 = $info;
   $696 = $695;
   $697 = HEAP32[$696>>2]|0;
   $698 = (($695) + 4)|0;
   $699 = $698;
   $700 = HEAP32[$699>>2]|0;
   HEAP32[((33440 + 312|0))>>2] = $697;
   return;
  } else if ((($state|0) == 199)) {
   $701 = $info;
   $702 = $701;
   $703 = HEAP32[$702>>2]|0;
   $704 = (($701) + 4)|0;
   $705 = $704;
   $706 = HEAP32[$705>>2]|0;
   HEAP32[((33440 + 316|0))>>2] = $703;
   return;
  } else if ((($state|0) == 200)) {
   $707 = $info;
   $708 = $707;
   $709 = HEAP32[$708>>2]|0;
   $710 = (($707) + 4)|0;
   $711 = $710;
   $712 = HEAP32[$711>>2]|0;
   HEAP32[((33440 + 320|0))>>2] = $709;
   return;
  } else if ((($state|0) == 201)) {
   $713 = $info;
   $714 = $713;
   $715 = HEAP32[$714>>2]|0;
   $716 = (($713) + 4)|0;
   $717 = $716;
   $718 = HEAP32[$717>>2]|0;
   HEAP32[((33440 + 324|0))>>2] = $715;
   return;
  } else if ((($state|0) == 202)) {
   $719 = $info;
   $720 = $719;
   $721 = HEAP32[$720>>2]|0;
   $722 = (($719) + 4)|0;
   $723 = $722;
   $724 = HEAP32[$723>>2]|0;
   HEAP32[((33440 + 328|0))>>2] = $721;
   return;
  } else if ((($state|0) == 203)) {
   $725 = $info;
   $726 = $725;
   $727 = HEAP32[$726>>2]|0;
   $728 = (($725) + 4)|0;
   $729 = $728;
   $730 = HEAP32[$729>>2]|0;
   HEAP32[((33440 + 332|0))>>2] = $727;
   return;
  } else if ((($state|0) == 204)) {
   $731 = $info;
   $732 = $731;
   $733 = HEAP32[$732>>2]|0;
   $734 = (($731) + 4)|0;
   $735 = $734;
   $736 = HEAP32[$735>>2]|0;
   HEAP32[((33440 + 336|0))>>2] = $733;
   return;
  } else if ((($state|0) == 205)) {
   $737 = $info;
   $738 = $737;
   $739 = HEAP32[$738>>2]|0;
   $740 = (($737) + 4)|0;
   $741 = $740;
   $742 = HEAP32[$741>>2]|0;
   HEAP32[((33440 + 340|0))>>2] = $739;
   return;
  } else if ((($state|0) == 206)) {
   $743 = $info;
   $744 = $743;
   $745 = HEAP32[$744>>2]|0;
   $746 = (($743) + 4)|0;
   $747 = $746;
   $748 = HEAP32[$747>>2]|0;
   HEAP32[((33440 + 344|0))>>2] = $745;
   return;
  } else if ((($state|0) == 207)) {
   $749 = $info;
   $750 = $749;
   $751 = HEAP32[$750>>2]|0;
   $752 = (($749) + 4)|0;
   $753 = $752;
   $754 = HEAP32[$753>>2]|0;
   HEAP32[((33440 + 348|0))>>2] = $751;
   return;
  } else if ((($state|0) == 208)) {
   $755 = $info;
   $756 = $755;
   $757 = HEAP32[$756>>2]|0;
   $758 = (($755) + 4)|0;
   $759 = $758;
   $760 = HEAP32[$759>>2]|0;
   HEAP32[((33440 + 352|0))>>2] = $757;
   return;
  } else if ((($state|0) == 209)) {
   $761 = $info;
   $762 = $761;
   $763 = HEAP32[$762>>2]|0;
   $764 = (($761) + 4)|0;
   $765 = $764;
   $766 = HEAP32[$765>>2]|0;
   HEAP32[((33440 + 356|0))>>2] = $763;
   return;
  } else if ((($state|0) == 210)) {
   $767 = $info;
   $768 = $767;
   $769 = HEAP32[$768>>2]|0;
   $770 = (($767) + 4)|0;
   $771 = $770;
   $772 = HEAP32[$771>>2]|0;
   HEAP32[((33440 + 360|0))>>2] = $769;
   return;
  } else if ((($state|0) == 211)) {
   $773 = $info;
   $774 = $773;
   $775 = HEAP32[$774>>2]|0;
   $776 = (($773) + 4)|0;
   $777 = $776;
   $778 = HEAP32[$777>>2]|0;
   HEAP32[((33440 + 364|0))>>2] = $775;
   return;
  } else if ((($state|0) == 212)) {
   $779 = $info;
   $780 = $779;
   $781 = HEAP32[$780>>2]|0;
   $782 = (($779) + 4)|0;
   $783 = $782;
   $784 = HEAP32[$783>>2]|0;
   HEAP32[((33440 + 368|0))>>2] = $781;
   return;
  } else if ((($state|0) == 213)) {
   $785 = $info;
   $786 = $785;
   $787 = HEAP32[$786>>2]|0;
   $788 = (($785) + 4)|0;
   $789 = $788;
   $790 = HEAP32[$789>>2]|0;
   HEAP32[((33440 + 372|0))>>2] = $787;
   return;
  } else if ((($state|0) == 214)) {
   $791 = $info;
   $792 = $791;
   $793 = HEAP32[$792>>2]|0;
   $794 = (($791) + 4)|0;
   $795 = $794;
   $796 = HEAP32[$795>>2]|0;
   HEAP32[((33440 + 376|0))>>2] = $793;
   return;
  } else if ((($state|0) == 215)) {
   $797 = $info;
   $798 = $797;
   $799 = HEAP32[$798>>2]|0;
   $800 = (($797) + 4)|0;
   $801 = $800;
   $802 = HEAP32[$801>>2]|0;
   HEAP32[((33440 + 380|0))>>2] = $799;
   return;
  } else if ((($state|0) == 216)) {
   $803 = $info;
   $804 = $803;
   $805 = HEAP32[$804>>2]|0;
   $806 = (($803) + 4)|0;
   $807 = $806;
   $808 = HEAP32[$807>>2]|0;
   HEAP32[((33440 + 384|0))>>2] = $805;
   return;
  } else if ((($state|0) == 217)) {
   $809 = $info;
   $810 = $809;
   $811 = HEAP32[$810>>2]|0;
   $812 = (($809) + 4)|0;
   $813 = $812;
   $814 = HEAP32[$813>>2]|0;
   HEAP32[((33440 + 388|0))>>2] = $811;
   return;
  } else if ((($state|0) == 218)) {
   $815 = $info;
   $816 = $815;
   $817 = HEAP32[$816>>2]|0;
   $818 = (($815) + 4)|0;
   $819 = $818;
   $820 = HEAP32[$819>>2]|0;
   HEAP32[((33440 + 392|0))>>2] = $817;
   return;
  } else if ((($state|0) == 219)) {
   $821 = $info;
   $822 = $821;
   $823 = HEAP32[$822>>2]|0;
   $824 = (($821) + 4)|0;
   $825 = $824;
   $826 = HEAP32[$825>>2]|0;
   HEAP32[((33440 + 396|0))>>2] = $823;
   return;
  } else if ((($state|0) == 220)) {
   $827 = $info;
   $828 = $827;
   $829 = HEAP32[$828>>2]|0;
   $830 = (($827) + 4)|0;
   $831 = $830;
   $832 = HEAP32[$831>>2]|0;
   HEAP32[((33440 + 400|0))>>2] = $829;
   return;
  } else if ((($state|0) == 221)) {
   $833 = $info;
   $834 = $833;
   $835 = HEAP32[$834>>2]|0;
   $836 = (($833) + 4)|0;
   $837 = $836;
   $838 = HEAP32[$837>>2]|0;
   HEAP32[((33440 + 404|0))>>2] = $835;
   return;
  } else if ((($state|0) == 222)) {
   $839 = $info;
   $840 = $839;
   $841 = HEAP32[$840>>2]|0;
   $842 = (($839) + 4)|0;
   $843 = $842;
   $844 = HEAP32[$843>>2]|0;
   HEAP32[((33440 + 408|0))>>2] = $841;
   return;
  } else if ((($state|0) == 65545)) {
   $845 = HEAP32[$info>>2]|0;
   HEAP32[((33440 + 540|0))>>2] = $845;
   return;
  } else {
   return;
  }
 } while(0);
}
function _mips_get_info($state,$info) {
 $state = $state|0;
 $info = $info|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $$lobit3 = 0, $$lobit4 = 0, $$lobit5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  if ((($state|0) == 189)) {
   $612 = HEAP32[((33440 + 532|0))>>2]|0;
   $613 = $info;
   $614 = $613;
   HEAP32[$614>>2] = $612;
   $615 = (($613) + 4)|0;
   $616 = $615;
   HEAP32[$616>>2] = 0;
   return;
  } else if ((($state|0) == 190)) {
   $617 = HEAP32[((33440 + 536|0))>>2]|0;
   $618 = $info;
   $619 = $618;
   HEAP32[$619>>2] = $617;
   $620 = (($618) + 4)|0;
   $621 = $620;
   HEAP32[$621>>2] = 0;
   return;
  } else if ((($state|0) == 191)) {
   $622 = HEAP32[((33440 + 284|0))>>2]|0;
   $623 = $info;
   $624 = $623;
   HEAP32[$624>>2] = $622;
   $625 = (($623) + 4)|0;
   $626 = $625;
   HEAP32[$626>>2] = 0;
   return;
  } else if ((($state|0) == 192)) {
   $627 = HEAP32[((33440 + 288|0))>>2]|0;
   $628 = $info;
   $629 = $628;
   HEAP32[$629>>2] = $627;
   $630 = (($628) + 4)|0;
   $631 = $630;
   HEAP32[$631>>2] = 0;
   return;
  } else if ((($state|0) == 185)) {
   $592 = HEAP32[((33440 + 516|0))>>2]|0;
   $593 = $info;
   $594 = $593;
   HEAP32[$594>>2] = $592;
   $595 = (($593) + 4)|0;
   $596 = $595;
   HEAP32[$596>>2] = 0;
   return;
  } else if ((($state|0) == 186)) {
   $597 = HEAP32[((33440 + 520|0))>>2]|0;
   $598 = $info;
   $599 = $598;
   HEAP32[$599>>2] = $597;
   $600 = (($598) + 4)|0;
   $601 = $600;
   HEAP32[$601>>2] = 0;
   return;
  } else if ((($state|0) == 187)) {
   $602 = HEAP32[((33440 + 524|0))>>2]|0;
   $603 = $info;
   $604 = $603;
   HEAP32[$604>>2] = $602;
   $605 = (($603) + 4)|0;
   $606 = $605;
   HEAP32[$606>>2] = 0;
   return;
  } else if ((($state|0) == 188)) {
   $607 = HEAP32[((33440 + 528|0))>>2]|0;
   $608 = $info;
   $609 = $608;
   HEAP32[$609>>2] = $607;
   $610 = (($608) + 4)|0;
   $611 = $610;
   HEAP32[$611>>2] = 0;
   return;
  } else if ((($state|0) == 0)) {
   $0 = $info;
   $1 = $0;
   HEAP32[$1>>2] = 544;
   $2 = (($0) + 4)|0;
   $3 = $2;
   HEAP32[$3>>2] = 0;
   return;
  } else if ((($state|0) == 215)) {
   $742 = HEAP32[((33440 + 380|0))>>2]|0;
   $743 = $info;
   $744 = $743;
   HEAP32[$744>>2] = $742;
   $745 = (($743) + 4)|0;
   $746 = $745;
   HEAP32[$746>>2] = 0;
   return;
  } else if ((($state|0) == 216)) {
   $747 = HEAP32[((33440 + 384|0))>>2]|0;
   $748 = $info;
   $749 = $748;
   HEAP32[$749>>2] = $747;
   $750 = (($748) + 4)|0;
   $751 = $750;
   HEAP32[$751>>2] = 0;
   return;
  } else if ((($state|0) == 217)) {
   $752 = HEAP32[((33440 + 388|0))>>2]|0;
   $753 = $info;
   $754 = $753;
   HEAP32[$754>>2] = $752;
   $755 = (($753) + 4)|0;
   $756 = $755;
   HEAP32[$756>>2] = 0;
   return;
  } else if ((($state|0) == 218)) {
   $757 = HEAP32[((33440 + 392|0))>>2]|0;
   $758 = $info;
   $759 = $758;
   HEAP32[$759>>2] = $757;
   $760 = (($758) + 4)|0;
   $761 = $760;
   HEAP32[$761>>2] = 0;
   return;
  } else if ((($state|0) == 219)) {
   $762 = HEAP32[((33440 + 396|0))>>2]|0;
   $763 = $info;
   $764 = $763;
   HEAP32[$764>>2] = $762;
   $765 = (($763) + 4)|0;
   $766 = $765;
   HEAP32[$766>>2] = 0;
   return;
  } else if ((($state|0) == 220)) {
   $767 = HEAP32[((33440 + 400|0))>>2]|0;
   $768 = $info;
   $769 = $768;
   HEAP32[$769>>2] = $767;
   $770 = (($768) + 4)|0;
   $771 = $770;
   HEAP32[$771>>2] = 0;
   return;
  } else if ((($state|0) == 221)) {
   $772 = HEAP32[((33440 + 404|0))>>2]|0;
   $773 = $info;
   $774 = $773;
   HEAP32[$774>>2] = $772;
   $775 = (($773) + 4)|0;
   $776 = $775;
   HEAP32[$776>>2] = 0;
   return;
  } else if ((($state|0) == 222)) {
   $777 = HEAP32[((33440 + 408|0))>>2]|0;
   $778 = $info;
   $779 = $778;
   HEAP32[$779>>2] = $777;
   $780 = (($778) + 4)|0;
   $781 = $780;
   HEAP32[$781>>2] = 0;
   return;
  } else if ((($state|0) == 65536)) {
   HEAP32[$info>>2] = 1;
   return;
  } else if ((($state|0) == 65537)) {
   HEAP32[$info>>2] = 1;
   return;
  } else if ((($state|0) == 65538)) {
   HEAP32[$info>>2] = 2;
   return;
  } else if ((($state|0) == 65539)) {
   HEAP32[$info>>2] = 1;
   return;
  } else if ((($state|0) == 65540)) {
   HEAP32[$info>>2] = 3;
   return;
  } else if ((($state|0) == 65541)) {
   HEAP32[$info>>2] = 2;
   return;
  } else if ((($state|0) == 65542)) {
   HEAP32[$info>>2] = 1;
   return;
  } else if ((($state|0) == 65543)) {
   HEAP32[$info>>2] = 0;
   return;
  } else if ((($state|0) == 203)) {
   $682 = HEAP32[((33440 + 332|0))>>2]|0;
   $683 = $info;
   $684 = $683;
   HEAP32[$684>>2] = $682;
   $685 = (($683) + 4)|0;
   $686 = $685;
   HEAP32[$686>>2] = 0;
   return;
  } else if ((($state|0) == 204)) {
   $687 = HEAP32[((33440 + 336|0))>>2]|0;
   $688 = $info;
   $689 = $688;
   HEAP32[$689>>2] = $687;
   $690 = (($688) + 4)|0;
   $691 = $690;
   HEAP32[$691>>2] = 0;
   return;
  } else if ((($state|0) == 205)) {
   $692 = HEAP32[((33440 + 340|0))>>2]|0;
   $693 = $info;
   $694 = $693;
   HEAP32[$694>>2] = $692;
   $695 = (($693) + 4)|0;
   $696 = $695;
   HEAP32[$696>>2] = 0;
   return;
  } else if ((($state|0) == 206)) {
   $697 = HEAP32[((33440 + 344|0))>>2]|0;
   $698 = $info;
   $699 = $698;
   HEAP32[$699>>2] = $697;
   $700 = (($698) + 4)|0;
   $701 = $700;
   HEAP32[$701>>2] = 0;
   return;
  } else if ((($state|0) == 207)) {
   $702 = HEAP32[((33440 + 348|0))>>2]|0;
   $703 = $info;
   $704 = $703;
   HEAP32[$704>>2] = $702;
   $705 = (($703) + 4)|0;
   $706 = $705;
   HEAP32[$706>>2] = 0;
   return;
  } else if ((($state|0) == 208)) {
   $707 = HEAP32[((33440 + 352|0))>>2]|0;
   $708 = $info;
   $709 = $708;
   HEAP32[$709>>2] = $707;
   $710 = (($708) + 4)|0;
   $711 = $710;
   HEAP32[$711>>2] = 0;
   return;
  } else if ((($state|0) == 209)) {
   $712 = HEAP32[((33440 + 356|0))>>2]|0;
   $713 = $info;
   $714 = $713;
   HEAP32[$714>>2] = $712;
   $715 = (($713) + 4)|0;
   $716 = $715;
   HEAP32[$716>>2] = 0;
   return;
  } else if ((($state|0) == 210)) {
   $717 = HEAP32[((33440 + 360|0))>>2]|0;
   $718 = $info;
   $719 = $718;
   HEAP32[$719>>2] = $717;
   $720 = (($718) + 4)|0;
   $721 = $720;
   HEAP32[$721>>2] = 0;
   return;
  } else if ((($state|0) == 211)) {
   $722 = HEAP32[((33440 + 364|0))>>2]|0;
   $723 = $info;
   $724 = $723;
   HEAP32[$724>>2] = $722;
   $725 = (($723) + 4)|0;
   $726 = $725;
   HEAP32[$726>>2] = 0;
   return;
  } else if ((($state|0) == 212)) {
   $727 = HEAP32[((33440 + 368|0))>>2]|0;
   $728 = $info;
   $729 = $728;
   HEAP32[$729>>2] = $727;
   $730 = (($728) + 4)|0;
   $731 = $730;
   HEAP32[$731>>2] = 0;
   return;
  } else if ((($state|0) == 213)) {
   $732 = HEAP32[((33440 + 372|0))>>2]|0;
   $733 = $info;
   $734 = $733;
   HEAP32[$734>>2] = $732;
   $735 = (($733) + 4)|0;
   $736 = $735;
   HEAP32[$736>>2] = 0;
   return;
  } else if ((($state|0) == 214)) {
   $737 = HEAP32[((33440 + 376|0))>>2]|0;
   $738 = $info;
   $739 = $738;
   HEAP32[$739>>2] = $737;
   $740 = (($738) + 4)|0;
   $741 = $740;
   HEAP32[$741>>2] = 0;
   return;
  } else if ((($state|0) == 193)) {
   $632 = HEAP32[((33440 + 292|0))>>2]|0;
   $633 = $info;
   $634 = $633;
   HEAP32[$634>>2] = $632;
   $635 = (($633) + 4)|0;
   $636 = $635;
   HEAP32[$636>>2] = 0;
   return;
  } else if ((($state|0) == 194)) {
   $637 = HEAP32[((33440 + 296|0))>>2]|0;
   $638 = $info;
   $639 = $638;
   HEAP32[$639>>2] = $637;
   $640 = (($638) + 4)|0;
   $641 = $640;
   HEAP32[$641>>2] = 0;
   return;
  } else if ((($state|0) == 195)) {
   $642 = HEAP32[((33440 + 300|0))>>2]|0;
   $643 = $info;
   $644 = $643;
   HEAP32[$644>>2] = $642;
   $645 = (($643) + 4)|0;
   $646 = $645;
   HEAP32[$646>>2] = 0;
   return;
  } else if ((($state|0) == 196)) {
   $647 = HEAP32[((33440 + 304|0))>>2]|0;
   $648 = $info;
   $649 = $648;
   HEAP32[$649>>2] = $647;
   $650 = (($648) + 4)|0;
   $651 = $650;
   HEAP32[$651>>2] = 0;
   return;
  } else if ((($state|0) == 197)) {
   $652 = HEAP32[((33440 + 308|0))>>2]|0;
   $653 = $info;
   $654 = $653;
   HEAP32[$654>>2] = $652;
   $655 = (($653) + 4)|0;
   $656 = $655;
   HEAP32[$656>>2] = 0;
   return;
  } else if ((($state|0) == 198)) {
   $657 = HEAP32[((33440 + 312|0))>>2]|0;
   $658 = $info;
   $659 = $658;
   HEAP32[$659>>2] = $657;
   $660 = (($658) + 4)|0;
   $661 = $660;
   HEAP32[$661>>2] = 0;
   return;
  } else if ((($state|0) == 199)) {
   $662 = HEAP32[((33440 + 316|0))>>2]|0;
   $663 = $info;
   $664 = $663;
   HEAP32[$664>>2] = $662;
   $665 = (($663) + 4)|0;
   $666 = $665;
   HEAP32[$666>>2] = 0;
   return;
  } else if ((($state|0) == 200)) {
   $667 = HEAP32[((33440 + 320|0))>>2]|0;
   $668 = $info;
   $669 = $668;
   HEAP32[$669>>2] = $667;
   $670 = (($668) + 4)|0;
   $671 = $670;
   HEAP32[$671>>2] = 0;
   return;
  } else if ((($state|0) == 201)) {
   $672 = HEAP32[((33440 + 324|0))>>2]|0;
   $673 = $info;
   $674 = $673;
   HEAP32[$674>>2] = $672;
   $675 = (($673) + 4)|0;
   $676 = $675;
   HEAP32[$676>>2] = 0;
   return;
  } else if ((($state|0) == 202)) {
   $677 = HEAP32[((33440 + 328|0))>>2]|0;
   $678 = $info;
   $679 = $678;
   HEAP32[$679>>2] = $677;
   $680 = (($678) + 4)|0;
   $681 = $680;
   HEAP32[$681>>2] = 0;
   return;
  } else if ((($state|0) == 3)) {
   $8 = $info;
   $9 = $8;
   HEAP32[$9>>2] = 0;
   $10 = (($8) + 4)|0;
   $11 = $10;
   HEAP32[$11>>2] = 0;
   return;
  } else if ((($state|0) == 4)) {
   $12 = $info;
   $13 = $12;
   HEAP32[$13>>2] = 0;
   $14 = (($12) + 4)|0;
   $15 = $14;
   HEAP32[$15>>2] = 0;
   return;
  } else if ((($state|0) == 5)) {
   $16 = $info;
   $17 = $16;
   HEAP32[$17>>2] = 1;
   $18 = (($16) + 4)|0;
   $19 = $18;
   HEAP32[$19>>2] = 0;
   return;
  } else if ((($state|0) == 6)) {
   $20 = $info;
   $21 = $20;
   HEAP32[$21>>2] = 4;
   $22 = (($20) + 4)|0;
   $23 = $22;
   HEAP32[$23>>2] = 0;
   return;
  } else if ((($state|0) == 7)) {
   $24 = $info;
   $25 = $24;
   HEAP32[$25>>2] = 4;
   $26 = (($24) + 4)|0;
   $27 = $26;
   HEAP32[$27>>2] = 0;
   return;
  } else if ((($state|0) == 8)) {
   $28 = $info;
   $29 = $28;
   HEAP32[$29>>2] = 1;
   $30 = (($28) + 4)|0;
   $31 = $30;
   HEAP32[$31>>2] = 0;
   return;
  } else if ((($state|0) == 9)) {
   $32 = $info;
   $33 = $32;
   HEAP32[$33>>2] = 40;
   $34 = (($32) + 4)|0;
   $35 = $34;
   HEAP32[$35>>2] = 0;
   return;
  } else if ((($state|0) == 10)) {
   $36 = $info;
   $37 = $36;
   HEAP32[$37>>2] = 32;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = 0;
   return;
  } else if ((($state|0) == 13)) {
   $40 = $info;
   $41 = $40;
   HEAP32[$41>>2] = 32;
   $42 = (($40) + 4)|0;
   $43 = $42;
   HEAP32[$43>>2] = 0;
   return;
  } else if ((($state|0) == 16)) {
   $44 = $info;
   $45 = $44;
   HEAP32[$45>>2] = 0;
   $46 = (($44) + 4)|0;
   $47 = $46;
   HEAP32[$47>>2] = 0;
   return;
  } else if ((($state|0) == 11)) {
   $48 = $info;
   $49 = $48;
   HEAP32[$49>>2] = 0;
   $50 = (($48) + 4)|0;
   $51 = $50;
   HEAP32[$51>>2] = 0;
   return;
  } else if ((($state|0) == 14)) {
   $52 = $info;
   $53 = $52;
   HEAP32[$53>>2] = 0;
   $54 = (($52) + 4)|0;
   $55 = $54;
   HEAP32[$55>>2] = 0;
   return;
  } else if ((($state|0) == 17)) {
   $56 = $info;
   $57 = $56;
   HEAP32[$57>>2] = 0;
   $58 = (($56) + 4)|0;
   $59 = $58;
   HEAP32[$59>>2] = 0;
   return;
  } else if ((($state|0) == 12)) {
   $60 = $info;
   $61 = $60;
   HEAP32[$61>>2] = 0;
   $62 = (($60) + 4)|0;
   $63 = $62;
   HEAP32[$63>>2] = 0;
   return;
  } else if ((($state|0) == 15)) {
   $64 = $info;
   $65 = $64;
   HEAP32[$65>>2] = 0;
   $66 = (($64) + 4)|0;
   $67 = $66;
   HEAP32[$67>>2] = 0;
   return;
  } else if ((($state|0) == 18)) {
   $68 = $info;
   $69 = $68;
   HEAP32[$69>>2] = 0;
   $70 = (($68) + 4)|0;
   $71 = $70;
   HEAP32[$71>>2] = 0;
   return;
  } else if ((($state|0) == 22)) {
   $72 = HEAP32[((33440 + 208|0))>>2]|0;
   $73 = $72 >>> 10;
   $$lobit5 = $73 & 1;
   $74 = $info;
   $75 = $74;
   HEAP32[$75>>2] = $$lobit5;
   $76 = (($74) + 4)|0;
   $77 = $76;
   HEAP32[$77>>2] = 0;
   return;
  } else if ((($state|0) == 23)) {
   $78 = HEAP32[((33440 + 208|0))>>2]|0;
   $79 = $78 >>> 11;
   $$lobit4 = $79 & 1;
   $80 = $info;
   $81 = $80;
   HEAP32[$81>>2] = $$lobit4;
   $82 = (($80) + 4)|0;
   $83 = $82;
   HEAP32[$83>>2] = 0;
   return;
  } else if ((($state|0) == 24)) {
   $84 = HEAP32[((33440 + 208|0))>>2]|0;
   $85 = $84 >>> 12;
   $$lobit3 = $85 & 1;
   $86 = $info;
   $87 = $86;
   HEAP32[$87>>2] = $$lobit3;
   $88 = (($86) + 4)|0;
   $89 = $88;
   HEAP32[$89>>2] = 0;
   return;
  } else if ((($state|0) == 25)) {
   $90 = HEAP32[((33440 + 208|0))>>2]|0;
   $91 = $90 >>> 13;
   $$lobit2 = $91 & 1;
   $92 = $info;
   $93 = $92;
   HEAP32[$93>>2] = $$lobit2;
   $94 = (($92) + 4)|0;
   $95 = $94;
   HEAP32[$95>>2] = 0;
   return;
  } else if ((($state|0) == 26)) {
   $96 = HEAP32[((33440 + 208|0))>>2]|0;
   $97 = $96 >>> 14;
   $$lobit1 = $97 & 1;
   $98 = $info;
   $99 = $98;
   HEAP32[$99>>2] = $$lobit1;
   $100 = (($98) + 4)|0;
   $101 = $100;
   HEAP32[$101>>2] = 0;
   return;
  } else if ((($state|0) == 27)) {
   $102 = HEAP32[((33440 + 208|0))>>2]|0;
   $103 = $102 >>> 15;
   $$lobit = $103 & 1;
   $104 = $info;
   $105 = $104;
   HEAP32[$105>>2] = $$lobit;
   $106 = (($104) + 4)|0;
   $107 = $106;
   HEAP32[$107>>2] = 0;
   return;
  } else if ((($state|0) == 20)) {
   $108 = HEAP32[((33440 + 4|0))>>2]|0;
   $109 = $info;
   $110 = $109;
   HEAP32[$110>>2] = $108;
   $111 = (($109) + 4)|0;
   $112 = $111;
   HEAP32[$112>>2] = 0;
   return;
  } else if ((($state|0) == 90)) {
   $113 = HEAP32[((33440 + 4|0))>>2]|0;
   $114 = $info;
   $115 = $114;
   HEAP32[$115>>2] = $113;
   $116 = (($114) + 4)|0;
   $117 = $116;
   HEAP32[$117>>2] = 0;
   return;
  } else if ((($state|0) == 19)) {
   $118 = $info;
   $119 = $118;
   HEAP32[$119>>2] = 0;
   $120 = (($118) + 4)|0;
   $121 = $120;
   HEAP32[$121>>2] = 0;
   return;
  } else if ((($state|0) == 91)) {
   $122 = HEAP32[((33440 + 12|0))>>2]|0;
   $123 = $info;
   $124 = $123;
   HEAP32[$124>>2] = $122;
   $125 = (($123) + 4)|0;
   $126 = $125;
   HEAP32[$126>>2] = 0;
   return;
  } else if ((($state|0) == 92)) {
   $127 = HEAP32[((33440 + 16|0))>>2]|0;
   $128 = $info;
   $129 = $128;
   HEAP32[$129>>2] = $127;
   $130 = (($128) + 4)|0;
   $131 = $130;
   HEAP32[$131>>2] = 0;
   return;
  } else if ((($state|0) == 93)) {
   $132 = HEAP32[((33440 + 20|0))>>2]|0;
   $133 = $info;
   $134 = $133;
   HEAP32[$134>>2] = $132;
   $135 = (($133) + 4)|0;
   $136 = $135;
   HEAP32[$136>>2] = 0;
   return;
  } else if ((($state|0) == 94)) {
   $137 = HEAP32[((33440 + 24|0))>>2]|0;
   $138 = $info;
   $139 = $138;
   HEAP32[$139>>2] = $137;
   $140 = (($138) + 4)|0;
   $141 = $140;
   HEAP32[$141>>2] = 0;
   return;
  } else if ((($state|0) == 95)) {
   $142 = HEAP32[((33440 + 28|0))>>2]|0;
   $143 = $info;
   $144 = $143;
   HEAP32[$144>>2] = $142;
   $145 = (($143) + 4)|0;
   $146 = $145;
   HEAP32[$146>>2] = 0;
   return;
  } else if ((($state|0) == 96)) {
   $147 = HEAP32[((33440 + 32|0))>>2]|0;
   $148 = $info;
   $149 = $148;
   HEAP32[$149>>2] = $147;
   $150 = (($148) + 4)|0;
   $151 = $150;
   HEAP32[$151>>2] = 0;
   return;
  } else if ((($state|0) == 97)) {
   $152 = HEAP32[((33440 + 36|0))>>2]|0;
   $153 = $info;
   $154 = $153;
   HEAP32[$154>>2] = $152;
   $155 = (($153) + 4)|0;
   $156 = $155;
   HEAP32[$156>>2] = 0;
   return;
  } else if ((($state|0) == 98)) {
   $157 = HEAP32[((33440 + 40|0))>>2]|0;
   $158 = $info;
   $159 = $158;
   HEAP32[$159>>2] = $157;
   $160 = (($158) + 4)|0;
   $161 = $160;
   HEAP32[$161>>2] = 0;
   return;
  } else if ((($state|0) == 99)) {
   $162 = HEAP32[((33440 + 44|0))>>2]|0;
   $163 = $info;
   $164 = $163;
   HEAP32[$164>>2] = $162;
   $165 = (($163) + 4)|0;
   $166 = $165;
   HEAP32[$166>>2] = 0;
   return;
  } else if ((($state|0) == 100)) {
   $167 = HEAP32[((33440 + 48|0))>>2]|0;
   $168 = $info;
   $169 = $168;
   HEAP32[$169>>2] = $167;
   $170 = (($168) + 4)|0;
   $171 = $170;
   HEAP32[$171>>2] = 0;
   return;
  } else if ((($state|0) == 101)) {
   $172 = HEAP32[((33440 + 52|0))>>2]|0;
   $173 = $info;
   $174 = $173;
   HEAP32[$174>>2] = $172;
   $175 = (($173) + 4)|0;
   $176 = $175;
   HEAP32[$176>>2] = 0;
   return;
  } else if ((($state|0) == 102)) {
   $177 = HEAP32[((33440 + 56|0))>>2]|0;
   $178 = $info;
   $179 = $178;
   HEAP32[$179>>2] = $177;
   $180 = (($178) + 4)|0;
   $181 = $180;
   HEAP32[$181>>2] = 0;
   return;
  } else if ((($state|0) == 103)) {
   $182 = HEAP32[((33440 + 60|0))>>2]|0;
   $183 = $info;
   $184 = $183;
   HEAP32[$184>>2] = $182;
   $185 = (($183) + 4)|0;
   $186 = $185;
   HEAP32[$186>>2] = 0;
   return;
  } else if ((($state|0) == 104)) {
   $187 = HEAP32[((33440 + 64|0))>>2]|0;
   $188 = $info;
   $189 = $188;
   HEAP32[$189>>2] = $187;
   $190 = (($188) + 4)|0;
   $191 = $190;
   HEAP32[$191>>2] = 0;
   return;
  } else if ((($state|0) == 105)) {
   $192 = HEAP32[((33440 + 68|0))>>2]|0;
   $193 = $info;
   $194 = $193;
   HEAP32[$194>>2] = $192;
   $195 = (($193) + 4)|0;
   $196 = $195;
   HEAP32[$196>>2] = 0;
   return;
  } else if ((($state|0) == 106)) {
   $197 = HEAP32[((33440 + 72|0))>>2]|0;
   $198 = $info;
   $199 = $198;
   HEAP32[$199>>2] = $197;
   $200 = (($198) + 4)|0;
   $201 = $200;
   HEAP32[$201>>2] = 0;
   return;
  } else if ((($state|0) == 107)) {
   $202 = HEAP32[((33440 + 76|0))>>2]|0;
   $203 = $info;
   $204 = $203;
   HEAP32[$204>>2] = $202;
   $205 = (($203) + 4)|0;
   $206 = $205;
   HEAP32[$206>>2] = 0;
   return;
  } else if ((($state|0) == 108)) {
   $207 = HEAP32[((33440 + 80|0))>>2]|0;
   $208 = $info;
   $209 = $208;
   HEAP32[$209>>2] = $207;
   $210 = (($208) + 4)|0;
   $211 = $210;
   HEAP32[$211>>2] = 0;
   return;
  } else if ((($state|0) == 109)) {
   $212 = HEAP32[((33440 + 84|0))>>2]|0;
   $213 = $info;
   $214 = $213;
   HEAP32[$214>>2] = $212;
   $215 = (($213) + 4)|0;
   $216 = $215;
   HEAP32[$216>>2] = 0;
   return;
  } else if ((($state|0) == 110)) {
   $217 = HEAP32[((33440 + 88|0))>>2]|0;
   $218 = $info;
   $219 = $218;
   HEAP32[$219>>2] = $217;
   $220 = (($218) + 4)|0;
   $221 = $220;
   HEAP32[$221>>2] = 0;
   return;
  } else if ((($state|0) == 111)) {
   $222 = HEAP32[((33440 + 92|0))>>2]|0;
   $223 = $info;
   $224 = $223;
   HEAP32[$224>>2] = $222;
   $225 = (($223) + 4)|0;
   $226 = $225;
   HEAP32[$226>>2] = 0;
   return;
  } else if ((($state|0) == 112)) {
   $227 = HEAP32[((33440 + 96|0))>>2]|0;
   $228 = $info;
   $229 = $228;
   HEAP32[$229>>2] = $227;
   $230 = (($228) + 4)|0;
   $231 = $230;
   HEAP32[$231>>2] = 0;
   return;
  } else if ((($state|0) == 113)) {
   $232 = HEAP32[((33440 + 100|0))>>2]|0;
   $233 = $info;
   $234 = $233;
   HEAP32[$234>>2] = $232;
   $235 = (($233) + 4)|0;
   $236 = $235;
   HEAP32[$236>>2] = 0;
   return;
  } else if ((($state|0) == 114)) {
   $237 = HEAP32[((33440 + 104|0))>>2]|0;
   $238 = $info;
   $239 = $238;
   HEAP32[$239>>2] = $237;
   $240 = (($238) + 4)|0;
   $241 = $240;
   HEAP32[$241>>2] = 0;
   return;
  } else if ((($state|0) == 115)) {
   $242 = HEAP32[((33440 + 108|0))>>2]|0;
   $243 = $info;
   $244 = $243;
   HEAP32[$244>>2] = $242;
   $245 = (($243) + 4)|0;
   $246 = $245;
   HEAP32[$246>>2] = 0;
   return;
  } else if ((($state|0) == 116)) {
   $247 = HEAP32[((33440 + 112|0))>>2]|0;
   $248 = $info;
   $249 = $248;
   HEAP32[$249>>2] = $247;
   $250 = (($248) + 4)|0;
   $251 = $250;
   HEAP32[$251>>2] = 0;
   return;
  } else if ((($state|0) == 117)) {
   $252 = HEAP32[((33440 + 116|0))>>2]|0;
   $253 = $info;
   $254 = $253;
   HEAP32[$254>>2] = $252;
   $255 = (($253) + 4)|0;
   $256 = $255;
   HEAP32[$256>>2] = 0;
   return;
  } else if ((($state|0) == 118)) {
   $257 = HEAP32[((33440 + 120|0))>>2]|0;
   $258 = $info;
   $259 = $258;
   HEAP32[$259>>2] = $257;
   $260 = (($258) + 4)|0;
   $261 = $260;
   HEAP32[$261>>2] = 0;
   return;
  } else if ((($state|0) == 119)) {
   $262 = HEAP32[((33440 + 124|0))>>2]|0;
   $263 = $info;
   $264 = $263;
   HEAP32[$264>>2] = $262;
   $265 = (($263) + 4)|0;
   $266 = $265;
   HEAP32[$266>>2] = 0;
   return;
  } else if ((($state|0) == 120)) {
   $267 = HEAP32[((33440 + 128|0))>>2]|0;
   $268 = $info;
   $269 = $268;
   HEAP32[$269>>2] = $267;
   $270 = (($268) + 4)|0;
   $271 = $270;
   HEAP32[$271>>2] = 0;
   return;
  } else if ((($state|0) == 121)) {
   $272 = HEAP32[((33440 + 132|0))>>2]|0;
   $273 = $info;
   $274 = $273;
   HEAP32[$274>>2] = $272;
   $275 = (($273) + 4)|0;
   $276 = $275;
   HEAP32[$276>>2] = 0;
   return;
  } else if ((($state|0) == 122)) {
   $277 = HEAP32[((33440 + 136|0))>>2]|0;
   $278 = $info;
   $279 = $278;
   HEAP32[$279>>2] = $277;
   $280 = (($278) + 4)|0;
   $281 = $280;
   HEAP32[$281>>2] = 0;
   return;
  } else if ((($state|0) == 123)) {
   $282 = HEAP32[((33440 + 140|0))>>2]|0;
   $283 = $info;
   $284 = $283;
   HEAP32[$284>>2] = $282;
   $285 = (($283) + 4)|0;
   $286 = $285;
   HEAP32[$286>>2] = 0;
   return;
  } else if ((($state|0) == 124)) {
   $287 = HEAP32[((33440 + 144|0))>>2]|0;
   $288 = $info;
   $289 = $288;
   HEAP32[$289>>2] = $287;
   $290 = (($288) + 4)|0;
   $291 = $290;
   HEAP32[$291>>2] = 0;
   return;
  } else if ((($state|0) == 125)) {
   $292 = HEAP32[((33440 + 148|0))>>2]|0;
   $293 = $info;
   $294 = $293;
   HEAP32[$294>>2] = $292;
   $295 = (($293) + 4)|0;
   $296 = $295;
   HEAP32[$296>>2] = 0;
   return;
  } else if ((($state|0) == 126)) {
   $297 = HEAP32[((33440 + 152|0))>>2]|0;
   $298 = $info;
   $299 = $298;
   HEAP32[$299>>2] = $297;
   $300 = (($298) + 4)|0;
   $301 = $300;
   HEAP32[$301>>2] = 0;
   return;
  } else if ((($state|0) == 127)) {
   $302 = HEAP32[((33440 + 156|0))>>2]|0;
   $303 = $info;
   $304 = $303;
   HEAP32[$304>>2] = $302;
   $305 = (($303) + 4)|0;
   $306 = $305;
   HEAP32[$306>>2] = 0;
   return;
  } else if ((($state|0) == 128)) {
   $307 = HEAP32[((33440 + 160|0))>>2]|0;
   $308 = $info;
   $309 = $308;
   HEAP32[$309>>2] = $307;
   $310 = (($308) + 4)|0;
   $311 = $310;
   HEAP32[$311>>2] = 0;
   return;
  } else if ((($state|0) == 129)) {
   $312 = HEAP32[((33440 + 164|0))>>2]|0;
   $313 = $info;
   $314 = $313;
   HEAP32[$314>>2] = $312;
   $315 = (($313) + 4)|0;
   $316 = $315;
   HEAP32[$316>>2] = 0;
   return;
  } else if ((($state|0) == 130)) {
   $317 = HEAP32[((33440 + 168|0))>>2]|0;
   $318 = $info;
   $319 = $318;
   HEAP32[$319>>2] = $317;
   $320 = (($318) + 4)|0;
   $321 = $320;
   HEAP32[$321>>2] = 0;
   return;
  } else if ((($state|0) == 131)) {
   $322 = HEAP32[((33440 + 172|0))>>2]|0;
   $323 = $info;
   $324 = $323;
   HEAP32[$324>>2] = $322;
   $325 = (($323) + 4)|0;
   $326 = $325;
   HEAP32[$326>>2] = 0;
   return;
  } else if ((($state|0) == 132)) {
   $327 = HEAP32[((33440 + 176|0))>>2]|0;
   $328 = $info;
   $329 = $328;
   HEAP32[$329>>2] = $327;
   $330 = (($328) + 4)|0;
   $331 = $330;
   HEAP32[$331>>2] = 0;
   return;
  } else if ((($state|0) == 133)) {
   $332 = HEAP32[((33440 + 180|0))>>2]|0;
   $333 = $info;
   $334 = $333;
   HEAP32[$334>>2] = $332;
   $335 = (($333) + 4)|0;
   $336 = $335;
   HEAP32[$336>>2] = 0;
   return;
  } else if ((($state|0) == 134)) {
   $337 = HEAP32[((33440 + 184|0))>>2]|0;
   $338 = $info;
   $339 = $338;
   HEAP32[$339>>2] = $337;
   $340 = (($338) + 4)|0;
   $341 = $340;
   HEAP32[$341>>2] = 0;
   return;
  } else if ((($state|0) == 135)) {
   $342 = HEAP32[((33440 + 188|0))>>2]|0;
   $343 = $info;
   $344 = $343;
   HEAP32[$344>>2] = $342;
   $345 = (($343) + 4)|0;
   $346 = $345;
   HEAP32[$346>>2] = 0;
   return;
  } else if ((($state|0) == 136)) {
   $347 = HEAP32[((33440 + 192|0))>>2]|0;
   $348 = $info;
   $349 = $348;
   HEAP32[$349>>2] = $347;
   $350 = (($348) + 4)|0;
   $351 = $350;
   HEAP32[$351>>2] = 0;
   return;
  } else if ((($state|0) == 137)) {
   $352 = HEAP32[((33440 + 196|0))>>2]|0;
   $353 = $info;
   $354 = $353;
   HEAP32[$354>>2] = $352;
   $355 = (($353) + 4)|0;
   $356 = $355;
   HEAP32[$356>>2] = 0;
   return;
  } else if ((($state|0) == 138)) {
   $357 = HEAP32[((33440 + 200|0))>>2]|0;
   $358 = $info;
   $359 = $358;
   HEAP32[$359>>2] = $357;
   $360 = (($358) + 4)|0;
   $361 = $360;
   HEAP32[$361>>2] = 0;
   return;
  } else if ((($state|0) == 139)) {
   $362 = HEAP32[((33440 + 204|0))>>2]|0;
   $363 = $info;
   $364 = $363;
   HEAP32[$364>>2] = $362;
   $365 = (($363) + 4)|0;
   $366 = $365;
   HEAP32[$366>>2] = 0;
   return;
  } else if ((($state|0) == 140)) {
   $367 = HEAP32[((33440 + 208|0))>>2]|0;
   $368 = $info;
   $369 = $368;
   HEAP32[$369>>2] = $367;
   $370 = (($368) + 4)|0;
   $371 = $370;
   HEAP32[$371>>2] = 0;
   return;
  } else if ((($state|0) == 141)) {
   $372 = HEAP32[((33440 + 212|0))>>2]|0;
   $373 = $info;
   $374 = $373;
   HEAP32[$374>>2] = $372;
   $375 = (($373) + 4)|0;
   $376 = $375;
   HEAP32[$376>>2] = 0;
   return;
  } else if ((($state|0) == 142)) {
   $377 = HEAP32[((33440 + 216|0))>>2]|0;
   $378 = $info;
   $379 = $378;
   HEAP32[$379>>2] = $377;
   $380 = (($378) + 4)|0;
   $381 = $380;
   HEAP32[$381>>2] = 0;
   return;
  } else if ((($state|0) == 143)) {
   $382 = HEAP32[((33440 + 220|0))>>2]|0;
   $383 = $info;
   $384 = $383;
   HEAP32[$384>>2] = $382;
   $385 = (($383) + 4)|0;
   $386 = $385;
   HEAP32[$386>>2] = 0;
   return;
  } else if ((($state|0) == 144)) {
   $387 = HEAP32[((33440 + 224|0))>>2]|0;
   $388 = $info;
   $389 = $388;
   HEAP32[$389>>2] = $387;
   $390 = (($388) + 4)|0;
   $391 = $390;
   HEAP32[$391>>2] = 0;
   return;
  } else if ((($state|0) == 145)) {
   $392 = HEAP32[((33440 + 228|0))>>2]|0;
   $393 = $info;
   $394 = $393;
   HEAP32[$394>>2] = $392;
   $395 = (($393) + 4)|0;
   $396 = $395;
   HEAP32[$396>>2] = 0;
   return;
  } else if ((($state|0) == 146)) {
   $397 = HEAP32[((33440 + 232|0))>>2]|0;
   $398 = $info;
   $399 = $398;
   HEAP32[$399>>2] = $397;
   $400 = (($398) + 4)|0;
   $401 = $400;
   HEAP32[$401>>2] = 0;
   return;
  } else if ((($state|0) == 147)) {
   $402 = HEAP32[((33440 + 236|0))>>2]|0;
   $403 = $info;
   $404 = $403;
   HEAP32[$404>>2] = $402;
   $405 = (($403) + 4)|0;
   $406 = $405;
   HEAP32[$406>>2] = 0;
   return;
  } else if ((($state|0) == 148)) {
   $407 = HEAP32[((33440 + 240|0))>>2]|0;
   $408 = $info;
   $409 = $408;
   HEAP32[$409>>2] = $407;
   $410 = (($408) + 4)|0;
   $411 = $410;
   HEAP32[$411>>2] = 0;
   return;
  } else if ((($state|0) == 149)) {
   $412 = HEAP32[((33440 + 244|0))>>2]|0;
   $413 = $info;
   $414 = $413;
   HEAP32[$414>>2] = $412;
   $415 = (($413) + 4)|0;
   $416 = $415;
   HEAP32[$416>>2] = 0;
   return;
  } else if ((($state|0) == 150)) {
   $417 = HEAP32[((33440 + 248|0))>>2]|0;
   $418 = $info;
   $419 = $418;
   HEAP32[$419>>2] = $417;
   $420 = (($418) + 4)|0;
   $421 = $420;
   HEAP32[$421>>2] = 0;
   return;
  } else if ((($state|0) == 151)) {
   $422 = HEAP32[((33440 + 252|0))>>2]|0;
   $423 = $info;
   $424 = $423;
   HEAP32[$424>>2] = $422;
   $425 = (($423) + 4)|0;
   $426 = $425;
   HEAP32[$426>>2] = 0;
   return;
  } else if ((($state|0) == 152)) {
   $427 = HEAP32[((33440 + 256|0))>>2]|0;
   $428 = $info;
   $429 = $428;
   HEAP32[$429>>2] = $427;
   $430 = (($428) + 4)|0;
   $431 = $430;
   HEAP32[$431>>2] = 0;
   return;
  } else if ((($state|0) == 153)) {
   $432 = HEAP32[((33440 + 260|0))>>2]|0;
   $433 = $info;
   $434 = $433;
   HEAP32[$434>>2] = $432;
   $435 = (($433) + 4)|0;
   $436 = $435;
   HEAP32[$436>>2] = 0;
   return;
  } else if ((($state|0) == 154)) {
   $437 = HEAP32[((33440 + 264|0))>>2]|0;
   $438 = $info;
   $439 = $438;
   HEAP32[$439>>2] = $437;
   $440 = (($438) + 4)|0;
   $441 = $440;
   HEAP32[$441>>2] = 0;
   return;
  } else if ((($state|0) == 155)) {
   $442 = HEAP32[((33440 + 268|0))>>2]|0;
   $443 = $info;
   $444 = $443;
   HEAP32[$444>>2] = $442;
   $445 = (($443) + 4)|0;
   $446 = $445;
   HEAP32[$446>>2] = 0;
   return;
  } else if ((($state|0) == 156)) {
   $447 = HEAP32[((33440 + 272|0))>>2]|0;
   $448 = $info;
   $449 = $448;
   HEAP32[$449>>2] = $447;
   $450 = (($448) + 4)|0;
   $451 = $450;
   HEAP32[$451>>2] = 0;
   return;
  } else if ((($state|0) == 157)) {
   $452 = HEAP32[((33440 + 276|0))>>2]|0;
   $453 = $info;
   $454 = $453;
   HEAP32[$454>>2] = $452;
   $455 = (($453) + 4)|0;
   $456 = $455;
   HEAP32[$456>>2] = 0;
   return;
  } else if ((($state|0) == 158)) {
   $457 = HEAP32[((33440 + 280|0))>>2]|0;
   $458 = $info;
   $459 = $458;
   HEAP32[$459>>2] = $457;
   $460 = (($458) + 4)|0;
   $461 = $460;
   HEAP32[$461>>2] = 0;
   return;
  } else if ((($state|0) == 159)) {
   $462 = HEAP32[((33440 + 412|0))>>2]|0;
   $463 = $info;
   $464 = $463;
   HEAP32[$464>>2] = $462;
   $465 = (($463) + 4)|0;
   $466 = $465;
   HEAP32[$466>>2] = 0;
   return;
  } else if ((($state|0) == 160)) {
   $467 = HEAP32[((33440 + 416|0))>>2]|0;
   $468 = $info;
   $469 = $468;
   HEAP32[$469>>2] = $467;
   $470 = (($468) + 4)|0;
   $471 = $470;
   HEAP32[$471>>2] = 0;
   return;
  } else if ((($state|0) == 161)) {
   $472 = HEAP32[((33440 + 420|0))>>2]|0;
   $473 = $info;
   $474 = $473;
   HEAP32[$474>>2] = $472;
   $475 = (($473) + 4)|0;
   $476 = $475;
   HEAP32[$476>>2] = 0;
   return;
  } else if ((($state|0) == 162)) {
   $477 = HEAP32[((33440 + 424|0))>>2]|0;
   $478 = $info;
   $479 = $478;
   HEAP32[$479>>2] = $477;
   $480 = (($478) + 4)|0;
   $481 = $480;
   HEAP32[$481>>2] = 0;
   return;
  } else if ((($state|0) == 163)) {
   $482 = HEAP32[((33440 + 428|0))>>2]|0;
   $483 = $info;
   $484 = $483;
   HEAP32[$484>>2] = $482;
   $485 = (($483) + 4)|0;
   $486 = $485;
   HEAP32[$486>>2] = 0;
   return;
  } else if ((($state|0) == 164)) {
   $487 = HEAP32[((33440 + 432|0))>>2]|0;
   $488 = $info;
   $489 = $488;
   HEAP32[$489>>2] = $487;
   $490 = (($488) + 4)|0;
   $491 = $490;
   HEAP32[$491>>2] = 0;
   return;
  } else if ((($state|0) == 165)) {
   $492 = HEAP32[((33440 + 436|0))>>2]|0;
   $493 = $info;
   $494 = $493;
   HEAP32[$494>>2] = $492;
   $495 = (($493) + 4)|0;
   $496 = $495;
   HEAP32[$496>>2] = 0;
   return;
  } else if ((($state|0) == 166)) {
   $497 = HEAP32[((33440 + 440|0))>>2]|0;
   $498 = $info;
   $499 = $498;
   HEAP32[$499>>2] = $497;
   $500 = (($498) + 4)|0;
   $501 = $500;
   HEAP32[$501>>2] = 0;
   return;
  } else if ((($state|0) == 167)) {
   $502 = HEAP32[((33440 + 444|0))>>2]|0;
   $503 = $info;
   $504 = $503;
   HEAP32[$504>>2] = $502;
   $505 = (($503) + 4)|0;
   $506 = $505;
   HEAP32[$506>>2] = 0;
   return;
  } else if ((($state|0) == 168)) {
   $507 = HEAP32[((33440 + 448|0))>>2]|0;
   $508 = $info;
   $509 = $508;
   HEAP32[$509>>2] = $507;
   $510 = (($508) + 4)|0;
   $511 = $510;
   HEAP32[$511>>2] = 0;
   return;
  } else if ((($state|0) == 169)) {
   $512 = HEAP32[((33440 + 452|0))>>2]|0;
   $513 = $info;
   $514 = $513;
   HEAP32[$514>>2] = $512;
   $515 = (($513) + 4)|0;
   $516 = $515;
   HEAP32[$516>>2] = 0;
   return;
  } else if ((($state|0) == 170)) {
   $517 = HEAP32[((33440 + 456|0))>>2]|0;
   $518 = $info;
   $519 = $518;
   HEAP32[$519>>2] = $517;
   $520 = (($518) + 4)|0;
   $521 = $520;
   HEAP32[$521>>2] = 0;
   return;
  } else if ((($state|0) == 171)) {
   $522 = HEAP32[((33440 + 460|0))>>2]|0;
   $523 = $info;
   $524 = $523;
   HEAP32[$524>>2] = $522;
   $525 = (($523) + 4)|0;
   $526 = $525;
   HEAP32[$526>>2] = 0;
   return;
  } else if ((($state|0) == 172)) {
   $527 = HEAP32[((33440 + 464|0))>>2]|0;
   $528 = $info;
   $529 = $528;
   HEAP32[$529>>2] = $527;
   $530 = (($528) + 4)|0;
   $531 = $530;
   HEAP32[$531>>2] = 0;
   return;
  } else if ((($state|0) == 173)) {
   $532 = HEAP32[((33440 + 468|0))>>2]|0;
   $533 = $info;
   $534 = $533;
   HEAP32[$534>>2] = $532;
   $535 = (($533) + 4)|0;
   $536 = $535;
   HEAP32[$536>>2] = 0;
   return;
  } else if ((($state|0) == 174)) {
   $537 = HEAP32[((33440 + 472|0))>>2]|0;
   $538 = $info;
   $539 = $538;
   HEAP32[$539>>2] = $537;
   $540 = (($538) + 4)|0;
   $541 = $540;
   HEAP32[$541>>2] = 0;
   return;
  } else if ((($state|0) == 175)) {
   $542 = HEAP32[((33440 + 476|0))>>2]|0;
   $543 = $info;
   $544 = $543;
   HEAP32[$544>>2] = $542;
   $545 = (($543) + 4)|0;
   $546 = $545;
   HEAP32[$546>>2] = 0;
   return;
  } else if ((($state|0) == 176)) {
   $547 = HEAP32[((33440 + 480|0))>>2]|0;
   $548 = $info;
   $549 = $548;
   HEAP32[$549>>2] = $547;
   $550 = (($548) + 4)|0;
   $551 = $550;
   HEAP32[$551>>2] = 0;
   return;
  } else if ((($state|0) == 177)) {
   $552 = HEAP32[((33440 + 484|0))>>2]|0;
   $553 = $info;
   $554 = $553;
   HEAP32[$554>>2] = $552;
   $555 = (($553) + 4)|0;
   $556 = $555;
   HEAP32[$556>>2] = 0;
   return;
  } else if ((($state|0) == 178)) {
   $557 = HEAP32[((33440 + 488|0))>>2]|0;
   $558 = $info;
   $559 = $558;
   HEAP32[$559>>2] = $557;
   $560 = (($558) + 4)|0;
   $561 = $560;
   HEAP32[$561>>2] = 0;
   return;
  } else if ((($state|0) == 179)) {
   $562 = HEAP32[((33440 + 492|0))>>2]|0;
   $563 = $info;
   $564 = $563;
   HEAP32[$564>>2] = $562;
   $565 = (($563) + 4)|0;
   $566 = $565;
   HEAP32[$566>>2] = 0;
   return;
  } else if ((($state|0) == 180)) {
   $567 = HEAP32[((33440 + 496|0))>>2]|0;
   $568 = $info;
   $569 = $568;
   HEAP32[$569>>2] = $567;
   $570 = (($568) + 4)|0;
   $571 = $570;
   HEAP32[$571>>2] = 0;
   return;
  } else if ((($state|0) == 181)) {
   $572 = HEAP32[((33440 + 500|0))>>2]|0;
   $573 = $info;
   $574 = $573;
   HEAP32[$574>>2] = $572;
   $575 = (($573) + 4)|0;
   $576 = $575;
   HEAP32[$576>>2] = 0;
   return;
  } else if ((($state|0) == 182)) {
   $577 = HEAP32[((33440 + 504|0))>>2]|0;
   $578 = $info;
   $579 = $578;
   HEAP32[$579>>2] = $577;
   $580 = (($578) + 4)|0;
   $581 = $580;
   HEAP32[$581>>2] = 0;
   return;
  } else if ((($state|0) == 183)) {
   $582 = HEAP32[((33440 + 508|0))>>2]|0;
   $583 = $info;
   $584 = $583;
   HEAP32[$584>>2] = $582;
   $585 = (($583) + 4)|0;
   $586 = $585;
   HEAP32[$586>>2] = 0;
   return;
  } else if ((($state|0) == 184)) {
   $587 = HEAP32[((33440 + 512|0))>>2]|0;
   $588 = $info;
   $589 = $588;
   HEAP32[$589>>2] = $587;
   $590 = (($588) + 4)|0;
   $591 = $590;
   HEAP32[$591>>2] = 0;
   return;
  } else if ((($state|0) == 1)) {
   $4 = $info;
   $5 = $4;
   HEAP32[$5>>2] = 6;
   $6 = (($4) + 4)|0;
   $7 = $6;
   HEAP32[$7>>2] = 0;
   return;
  } else if ((($state|0) == 65544)) {
   HEAP32[$info>>2] = 1;
   return;
  } else if ((($state|0) == 65545)) {
   $782 = HEAP32[((33440 + 540|0))>>2]|0;
   HEAP32[$info>>2] = $782;
   return;
  } else if ((($state|0) == 65546)) {
   HEAP32[$info>>2] = 33984;
   return;
  } else if ((($state|0) == 65547)) {
   HEAP32[$info>>2] = 34128;
   return;
  } else if ((($state|0) == 65548)) {
   HEAP32[$info>>2] = 34336;
   return;
  } else {
   return;
  }
 } while(0);
}
function _mips_get_cause() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((33440 + 208|0))>>2]|0;
 return ($0|0);
}
function _mips_get_status() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((33440 + 204|0))>>2]|0;
 return ($0|0);
}
function _mips_set_status($status) {
 $status = $status|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[((33440 + 204|0))>>2] = $status;
 return;
}
function _mips_get_ePC() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((33440 + 212|0))>>2]|0;
 return ($0|0);
}
function _mips_get_icount() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[33984>>2]|0;
 return ($0|0);
}
function _mips_set_icount($count) {
 $count = $count|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[33984>>2] = $count;
 return;
}
function _mips_set_cp0r($reg,$value) {
 $reg = $reg|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((33440 + ($reg<<2)|0) + 156|0);
 HEAP32[$0>>2] = $value;
 $1 = $reg & -2;
 $2 = ($1|0)==(12);
 if (!($2)) {
  return;
 }
 $3 = HEAP32[((33440 + 204|0))>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP32[((33440 + 208|0))>>2]|0;
  $7 = $3 & 65280;
  $8 = $7 & $6;
  $9 = ($8|0)==(0);
  if (!($9)) {
   _mips_exception(0);
   return;
  }
 }
 $10 = HEAP32[((33440 + 16|0))>>2]|0;
 $11 = ($10|0)==(32);
 if ($11) {
  return;
 }
 $12 = HEAP32[((33440 + 4|0))>>2]|0;
 $13 = HEAP32[((33440 + 204|0))>>2]|0;
 $14 = $13 << 30;
 $15 = $14 & -2147483648;
 $16 = $15 | 3;
 $17 = $16 & $12;
 $18 = ($17|0)==(0);
 if ($18) {
  return;
 }
 _mips_exception(4);
 $19 = HEAP32[((33440 + 4|0))>>2]|0;
 HEAP32[((33440 + 188|0))>>2] = $19;
 return;
}
function _mips_set_pc($val) {
 $val = $val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[((33440 + 4|0))>>2] = $val;
 HEAP32[((33440 + 16|0))>>2] = 0;
 HEAP32[((33440 + 12|0))>>2] = 0;
 return;
}
function _mips_load($n_r,$n_v) {
 $n_r = $n_r|0;
 $n_v = $n_v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _mips_advance_pc();
 $0 = ($n_r|0)==(0);
 if ($0) {
  return;
 }
 $1 = ((33440 + ($n_r<<2)|0) + 28|0);
 HEAP32[$1>>2] = $n_v;
 return;
}
function _mips_exception($exception) {
 $exception = $exception|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((33440 + 204|0))>>2]|0;
 $1 = $0 & -64;
 $2 = $0 << 2;
 $3 = $2 & 60;
 $4 = $3 | $1;
 _mips_set_cp0r(12,$4);
 $5 = HEAP32[((33440 + 16|0))>>2]|0;
 $6 = ($5|0)==(32);
 if ($6) {
  $7 = HEAP32[((33440 + 4|0))>>2]|0;
  $8 = (($7) + -4)|0;
  _mips_set_cp0r(14,$8);
  $9 = HEAP32[((33440 + 208|0))>>2]|0;
  $10 = $9 & 2147483523;
  $11 = $exception << 2;
  $12 = $11 | $10;
  $13 = $12 | -2147483648;
  _mips_set_cp0r(13,$13);
 } else {
  _mips_commit_delayed_load();
  $14 = HEAP32[((33440 + 4|0))>>2]|0;
  _mips_set_cp0r(14,$14);
  $15 = HEAP32[((33440 + 208|0))>>2]|0;
  $16 = $15 & 2147483523;
  $17 = $exception << 2;
  $18 = $16 | $17;
  _mips_set_cp0r(13,$18);
 }
 $19 = HEAP32[((33440 + 204|0))>>2]|0;
 $20 = $19 & 4194304;
 $21 = ($20|0)==(0);
 if ($21) {
  _mips_set_pc(-2147483520);
  return;
 } else {
  _mips_set_pc(-1077935744);
  return;
 }
}
function _mips_delayed_branch($n_adr) {
 $n_adr = $n_adr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((33440 + 204|0))>>2]|0;
 $1 = $0 << 30;
 $2 = $1 & -2147483648;
 $3 = $2 | 3;
 $4 = $3 & $n_adr;
 $5 = ($4|0)==(0);
 if ($5) {
  _mips_commit_delayed_load();
  HEAP32[((33440 + 16|0))>>2] = 32;
  HEAP32[((33440 + 12|0))>>2] = $n_adr;
  $6 = HEAP32[((33440 + 4|0))>>2]|0;
  $7 = (($6) + 4)|0;
  HEAP32[((33440 + 4|0))>>2] = $7;
  return;
 } else {
  _mips_exception(4);
  _mips_set_cp0r(8,$n_adr);
  return;
 }
}
function _mips_advance_pc() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((33440 + 16|0))>>2]|0;
 $1 = ($0|0)==(32);
 if ($1) {
  $2 = HEAP32[((33440 + 12|0))>>2]|0;
  _mips_set_pc($2);
  return;
 } else {
  _mips_commit_delayed_load();
  $3 = HEAP32[((33440 + 4|0))>>2]|0;
  $4 = (($3) + 4)|0;
  HEAP32[((33440 + 4|0))>>2] = $4;
  return;
 }
}
function _mips_delayed_load($n_r,$n_v) {
 $n_r = $n_r|0;
 $n_v = $n_v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((33440 + 16|0))>>2]|0;
 $1 = ($0|0)==(32);
 if ($1) {
  $2 = HEAP32[((33440 + 12|0))>>2]|0;
  _mips_set_pc($2);
  HEAP32[((33440 + 16|0))>>2] = $n_r;
  HEAP32[((33440 + 12|0))>>2] = $n_v;
  return;
 }
 _mips_commit_delayed_load();
 $3 = HEAP32[((33440 + 4|0))>>2]|0;
 $4 = (($3) + 4)|0;
 HEAP32[((33440 + 4|0))>>2] = $4;
 $5 = ($n_r|0)==(0);
 if ($5) {
  return;
 }
 $6 = ((33440 + ($n_r<<2)|0) + 28|0);
 HEAP32[$6>>2] = $n_v;
 return;
}
function _getcp2dr($n_reg) {
 $n_reg = $n_reg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n_reg$off = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: do {
  switch ($n_reg|0) {
  case 1: case 3: case 5: case 8: case 9: case 10: case 11:  {
   $0 = ((33440 + ($n_reg<<2)|0) + 412|0);
   $1 = HEAP32[$0>>2]|0;
   $sext = $1 << 16;
   $2 = $sext >> 16;
   HEAP32[$0>>2] = $2;
   break;
  }
  default: {
   $n_reg$off = (($n_reg) + -17)|0;
   $3 = ($n_reg$off>>>0)<(3);
   if ($3) {
    $4 = ((33440 + ($n_reg<<2)|0) + 412|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5 & 65535;
    HEAP32[$4>>2] = $6;
    break L1;
   }
   $7 = ($n_reg|0)==(29);
   if ($7) {
    $8 = HEAP32[((33440 + 448|0))>>2]|0;
    $9 = $8 >>> 7;
    $10 = $9 & 31;
    $11 = HEAP32[((33440 + 452|0))>>2]|0;
    $12 = $11 >>> 2;
    $13 = $12 & 992;
    $14 = $13 | $10;
    $15 = HEAP32[((33440 + 456|0))>>2]|0;
    $16 = $15 << 3;
    $17 = $16 & 31744;
    $18 = $14 | $17;
    HEAP32[((33440 + 528|0))>>2] = $18;
   }
  }
  }
 } while(0);
 $19 = ((33440 + ($n_reg<<2)|0) + 412|0);
 $20 = HEAP32[$19>>2]|0;
 return ($20|0);
}
function _getcp2cr($n_reg) {
 $n_reg = $n_reg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((33440 + ($n_reg<<2)|0) + 284|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _setcp2dr($n_reg,$n_value) {
 $n_reg = $n_reg|0;
 $n_value = $n_value|0;
 var $$ = 0, $$lobit = 0, $$lobit$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n_lzcr$0$lcssa = 0, $n_lzcr$02 = 0, $n_lzcs$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((33440 + ($n_reg<<2)|0) + 412|0);
 HEAP32[$0>>2] = $n_value;
 if ((($n_reg|0) == 30)) {
  $13 = HEAP32[((33440 + 532|0))>>2]|0;
  $$lobit = $13 >> 31;
  $$lobit$not = $13 ^ -1;
  $$ = $$lobit ^ $$lobit$not;
  $14 = ($$|0)<(0);
  if ($14) {
   $n_lzcr$02 = 0;$n_lzcs$01 = $$;
   while(1) {
    $15 = (($n_lzcr$02) + 1)|0;
    $16 = $n_lzcs$01 << 1;
    $17 = ($16|0)<(0);
    if ($17) {
     $n_lzcr$02 = $15;$n_lzcs$01 = $16;
    } else {
     $n_lzcr$0$lcssa = $15;
     break;
    }
   }
  } else {
   $n_lzcr$0$lcssa = 0;
  }
  HEAP32[((33440 + 536|0))>>2] = $n_lzcr$0$lcssa;
  return;
 } else if ((($n_reg|0) == 28)) {
  $4 = HEAP32[((33440 + 524|0))>>2]|0;
  $5 = $4 << 4;
  $6 = $5 & 496;
  HEAP32[((33440 + 448|0))>>2] = $6;
  $7 = HEAP32[((33440 + 524|0))>>2]|0;
  $8 = $7 >>> 1;
  $9 = $8 & 496;
  HEAP32[((33440 + 452|0))>>2] = $9;
  $10 = HEAP32[((33440 + 524|0))>>2]|0;
  $11 = $10 >>> 6;
  $12 = $11 & 496;
  HEAP32[((33440 + 456|0))>>2] = $12;
  return;
 } else if ((($n_reg|0) == 15)) {
  $1 = HEAP32[((33440 + 464|0))>>2]|0;
  HEAP32[((33440 + 460|0))>>2] = $1;
  $2 = HEAP32[((33440 + 468|0))>>2]|0;
  HEAP32[((33440 + 464|0))>>2] = $2;
  $3 = HEAP32[((33440 + 472|0))>>2]|0;
  HEAP32[((33440 + 468|0))>>2] = $3;
  return;
 } else {
  return;
 }
}
function _setcp2cr($n_reg,$n_value) {
 $n_reg = $n_reg|0;
 $n_value = $n_value|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((33440 + ($n_reg<<2)|0) + 284|0);
 HEAP32[$0>>2] = $n_value;
 return;
}
function _docop2($gteop) {
 $gteop = $gteop|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0;
 var $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0;
 var $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0;
 var $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0;
 var $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0;
 var $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0;
 var $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0;
 var $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0;
 var $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0;
 var $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0;
 var $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0;
 var $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0;
 var $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0;
 var $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0;
 var $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0;
 var $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0;
 var $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0;
 var $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0;
 var $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0;
 var $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0;
 var $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0;
 var $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0;
 var $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0;
 var $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0;
 var $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0;
 var $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0;
 var $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0;
 var $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0;
 var $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0;
 var $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0;
 var $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0;
 var $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0;
 var $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0;
 var $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0;
 var $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0;
 var $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0;
 var $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0;
 var $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0;
 var $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0;
 var $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0;
 var $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0;
 var $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0;
 var $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0;
 var $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0;
 var $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0;
 var $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0;
 var $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0;
 var $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0;
 var $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0;
 var $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0;
 var $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0;
 var $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0;
 var $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0;
 var $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0;
 var $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0;
 var $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0;
 var $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0;
 var $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0;
 var $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0;
 var $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0;
 var $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0;
 var $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0;
 var $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0;
 var $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0;
 var $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0;
 var $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0;
 var $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0;
 var $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0;
 var $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0;
 var $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0;
 var $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0;
 var $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0;
 var $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0;
 var $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0;
 var $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0;
 var $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0;
 var $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0;
 var $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0;
 var $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0;
 var $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0;
 var $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0;
 var $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0;
 var $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0;
 var $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0;
 var $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0;
 var $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0;
 var $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0;
 var $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0;
 var $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0;
 var $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0;
 var $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0;
 var $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0;
 var $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0;
 var $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $exitcond = 0, $exitcond116 = 0, $exitcond117 = 0, $exitcond118 = 0, $exitcond119 = 0, $n_pass$0113 = 0, $n_v$0111 = 0, $n_v$1112 = 0, $n_v$2114 = 0, $n_v$3115 = 0, $n_v1$0 = 0, $n_v2$0 = 0, $n_v3$0 = 0, $sext = 0, $sext10 = 0, $sext100 = 0, $sext101 = 0, $sext102 = 0, $sext103 = 0;
 var $sext11 = 0, $sext12 = 0, $sext13 = 0, $sext14 = 0, $sext15 = 0, $sext16 = 0, $sext17 = 0, $sext18 = 0, $sext19 = 0, $sext20 = 0, $sext21 = 0, $sext22 = 0, $sext23 = 0, $sext24 = 0, $sext25 = 0, $sext26 = 0, $sext27 = 0, $sext28 = 0, $sext29 = 0, $sext30 = 0;
 var $sext31 = 0, $sext32 = 0, $sext33 = 0, $sext34 = 0, $sext35 = 0, $sext36 = 0, $sext37 = 0, $sext38 = 0, $sext39 = 0, $sext40 = 0, $sext41 = 0, $sext42 = 0, $sext43 = 0, $sext44 = 0, $sext45 = 0, $sext46 = 0, $sext47 = 0, $sext48 = 0, $sext49 = 0, $sext50 = 0;
 var $sext51 = 0, $sext52 = 0, $sext53 = 0, $sext54 = 0, $sext55 = 0, $sext56 = 0, $sext57 = 0, $sext58 = 0, $sext59 = 0, $sext6 = 0, $sext60 = 0, $sext61 = 0, $sext62 = 0, $sext63 = 0, $sext64 = 0, $sext65 = 0, $sext66 = 0, $sext67 = 0, $sext68 = 0, $sext69 = 0;
 var $sext7 = 0, $sext70 = 0, $sext71 = 0, $sext72 = 0, $sext73 = 0, $sext74 = 0, $sext75 = 0, $sext76 = 0, $sext77 = 0, $sext78 = 0, $sext79 = 0, $sext8 = 0, $sext80 = 0, $sext81 = 0, $sext82 = 0, $sext83 = 0, $sext84 = 0, $sext85 = 0, $sext86 = 0, $sext87 = 0;
 var $sext88 = 0, $sext89 = 0, $sext9 = 0, $sext90 = 0, $sext91 = 0, $sext92 = 0, $sext93 = 0, $sext94 = 0, $sext95 = 0, $sext96 = 0, $sext97 = 0, $sext98 = 0, $sext99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $gteop & 63;
 do {
  switch ($0|0) {
  case 28:  {
   $1853 = ($gteop|0)==(20448284);
   if (!($1853)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $1854 = HEAP32[((33440 + 336|0))>>2]|0;
   $1855 = (_bitshift64Shl(($1854|0),0,12)|0);
   $1856 = tempRet0;
   $1857 = HEAP16[((33440 + 348|0))>>1]|0;
   $1858 = $1857 << 16 >> 16;
   $1859 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext38 = $1859 << 16;
   $1860 = $sext38 >> 16;
   $1861 = Math_imul($1860, $1858)|0;
   $1862 = ($1861|0)<(0);
   $1863 = $1862 << 31 >> 31;
   $1864 = (_i64Add(($1861|0),($1863|0),($1855|0),($1856|0))|0);
   $1865 = tempRet0;
   $1866 = HEAP16[((((33440 + 348|0)) + 2|0))>>1]|0;
   $1867 = $1866 << 16 >> 16;
   $1868 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext39 = $1868 << 16;
   $1869 = $sext39 >> 16;
   $1870 = Math_imul($1869, $1867)|0;
   $1871 = ($1870|0)<(0);
   $1872 = $1871 << 31 >> 31;
   $1873 = (_i64Add(($1864|0),($1865|0),($1870|0),($1872|0))|0);
   $1874 = tempRet0;
   $1875 = HEAP16[((33440 + 352|0))>>1]|0;
   $1876 = $1875 << 16 >> 16;
   $1877 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext40 = $1877 << 16;
   $1878 = $sext40 >> 16;
   $1879 = Math_imul($1878, $1876)|0;
   $1880 = ($1879|0)<(0);
   $1881 = $1880 << 31 >> 31;
   $1882 = (_i64Add(($1873|0),($1874|0),($1879|0),($1881|0))|0);
   $1883 = tempRet0;
   $1884 = (_bitshift64Ashr(($1882|0),($1883|0),12)|0);
   $1885 = tempRet0;
   $1886 = (_BOUNDS($1884,$1885,2147483647,0,30,-2147483648,-1,134217728)|0);
   $1887 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $1886;
   $1888 = HEAP32[((33440 + 340|0))>>2]|0;
   $1889 = (_bitshift64Shl(($1888|0),0,12)|0);
   $1890 = tempRet0;
   $1891 = HEAP16[((((33440 + 352|0)) + 2|0))>>1]|0;
   $1892 = $1891 << 16 >> 16;
   $1893 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext41 = $1893 << 16;
   $1894 = $sext41 >> 16;
   $1895 = Math_imul($1894, $1892)|0;
   $1896 = ($1895|0)<(0);
   $1897 = $1896 << 31 >> 31;
   $1898 = (_i64Add(($1895|0),($1897|0),($1889|0),($1890|0))|0);
   $1899 = tempRet0;
   $1900 = HEAP16[((33440 + 356|0))>>1]|0;
   $1901 = $1900 << 16 >> 16;
   $1902 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext42 = $1902 << 16;
   $1903 = $sext42 >> 16;
   $1904 = Math_imul($1903, $1901)|0;
   $1905 = ($1904|0)<(0);
   $1906 = $1905 << 31 >> 31;
   $1907 = (_i64Add(($1898|0),($1899|0),($1904|0),($1906|0))|0);
   $1908 = tempRet0;
   $1909 = HEAP16[((((33440 + 356|0)) + 2|0))>>1]|0;
   $1910 = $1909 << 16 >> 16;
   $1911 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext43 = $1911 << 16;
   $1912 = $sext43 >> 16;
   $1913 = Math_imul($1912, $1910)|0;
   $1914 = ($1913|0)<(0);
   $1915 = $1914 << 31 >> 31;
   $1916 = (_i64Add(($1907|0),($1908|0),($1913|0),($1915|0))|0);
   $1917 = tempRet0;
   $1918 = (_bitshift64Ashr(($1916|0),($1917|0),12)|0);
   $1919 = tempRet0;
   $1920 = (_BOUNDS($1918,$1919,2147483647,0,29,-2147483648,-1,67108864)|0);
   $1921 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $1920;
   $1922 = HEAP32[((33440 + 344|0))>>2]|0;
   $1923 = (_bitshift64Shl(($1922|0),0,12)|0);
   $1924 = tempRet0;
   $1925 = HEAP16[((33440 + 360|0))>>1]|0;
   $1926 = $1925 << 16 >> 16;
   $1927 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext44 = $1927 << 16;
   $1928 = $sext44 >> 16;
   $1929 = Math_imul($1928, $1926)|0;
   $1930 = ($1929|0)<(0);
   $1931 = $1930 << 31 >> 31;
   $1932 = (_i64Add(($1929|0),($1931|0),($1923|0),($1924|0))|0);
   $1933 = tempRet0;
   $1934 = HEAP16[((((33440 + 360|0)) + 2|0))>>1]|0;
   $1935 = $1934 << 16 >> 16;
   $1936 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext45 = $1936 << 16;
   $1937 = $sext45 >> 16;
   $1938 = Math_imul($1937, $1935)|0;
   $1939 = ($1938|0)<(0);
   $1940 = $1939 << 31 >> 31;
   $1941 = (_i64Add(($1932|0),($1933|0),($1938|0),($1940|0))|0);
   $1942 = tempRet0;
   $1943 = HEAP16[((33440 + 364|0))>>1]|0;
   $1944 = $1943 << 16 >> 16;
   $1945 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext46 = $1945 << 16;
   $1946 = $sext46 >> 16;
   $1947 = Math_imul($1946, $1944)|0;
   $1948 = ($1947|0)<(0);
   $1949 = $1948 << 31 >> 31;
   $1950 = (_i64Add(($1941|0),($1942|0),($1947|0),($1949|0))|0);
   $1951 = tempRet0;
   $1952 = (_bitshift64Ashr(($1950|0),($1951|0),12)|0);
   $1953 = tempRet0;
   $1954 = (_BOUNDS($1952,$1953,2147483647,0,28,-2147483648,-1,33554432)|0);
   $1955 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $1954;
   $1956 = HEAP32[((33440 + 512|0))>>2]|0;
   $1957 = (_LIM($1956,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $1957;
   $1958 = HEAP32[((33440 + 516|0))>>2]|0;
   $1959 = (_LIM($1958,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $1959;
   $1960 = HEAP32[((33440 + 520|0))>>2]|0;
   $1961 = (_LIM($1960,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $1961;
   $1962 = HEAP8[((33440 + 436|0))>>0]|0;
   $1963 = $1962&255;
   $1964 = HEAP32[((33440 + 448|0))>>2]|0;
   $1965 = $1964&65535;
   $1966 = $1965 << 16 >> 16;
   $1967 = ($1966|0)<(0);
   $1968 = $1967 << 31 >> 31;
   $1969 = (___muldi3(($1966|0),($1968|0),($1963|0),0)|0);
   $1970 = tempRet0;
   $1971 = (_bitshift64Ashr(($1969|0),($1970|0),8)|0);
   $1972 = tempRet0;
   $1973 = (_BOUNDS($1971,$1972,2147483647,0,30,-2147483648,-1,134217728)|0);
   $1974 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $1973;
   $1975 = HEAP8[((((33440 + 436|0)) + 1|0))>>0]|0;
   $1976 = $1975&255;
   $1977 = HEAP32[((33440 + 452|0))>>2]|0;
   $1978 = $1977&65535;
   $1979 = $1978 << 16 >> 16;
   $1980 = ($1979|0)<(0);
   $1981 = $1980 << 31 >> 31;
   $1982 = (___muldi3(($1979|0),($1981|0),($1976|0),0)|0);
   $1983 = tempRet0;
   $1984 = (_bitshift64Ashr(($1982|0),($1983|0),8)|0);
   $1985 = tempRet0;
   $1986 = (_BOUNDS($1984,$1985,2147483647,0,29,-2147483648,-1,67108864)|0);
   $1987 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $1986;
   $1988 = HEAP8[((((33440 + 436|0)) + 2|0))>>0]|0;
   $1989 = $1988&255;
   $1990 = HEAP32[((33440 + 456|0))>>2]|0;
   $1991 = $1990&65535;
   $1992 = $1991 << 16 >> 16;
   $1993 = ($1992|0)<(0);
   $1994 = $1993 << 31 >> 31;
   $1995 = (___muldi3(($1992|0),($1994|0),($1989|0),0)|0);
   $1996 = tempRet0;
   $1997 = (_bitshift64Ashr(($1995|0),($1996|0),8)|0);
   $1998 = tempRet0;
   $1999 = (_BOUNDS($1997,$1998,2147483647,0,28,-2147483648,-1,33554432)|0);
   $2000 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $1999;
   $2001 = HEAP32[((33440 + 512|0))>>2]|0;
   $2002 = (_LIM($2001,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $2002;
   $2003 = HEAP32[((33440 + 516|0))>>2]|0;
   $2004 = (_LIM($2003,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $2004;
   $2005 = HEAP32[((33440 + 520|0))>>2]|0;
   $2006 = (_LIM($2005,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $2006;
   $2007 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $2007;
   $2008 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $2008;
   $2009 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $2009;
   $2010 = HEAP8[((33440 + 496|0))>>0]|0;
   HEAP8[((33440 + 492|0))>>0] = $2010;
   $2011 = HEAP8[((33440 + 500|0))>>0]|0;
   HEAP8[((33440 + 496|0))>>0] = $2011;
   $2012 = HEAP32[((33440 + 512|0))>>2]|0;
   $2013 = $2012 >> 4;
   $2014 = (_LIM($2013,255,0,2097152)|0);
   $2015 = $2014&255;
   HEAP8[((33440 + 500|0))>>0] = $2015;
   $2016 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $2016;
   $2017 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $2017;
   $2018 = HEAP32[((33440 + 516|0))>>2]|0;
   $2019 = $2018 >> 4;
   $2020 = (_LIM($2019,255,0,1048576)|0);
   $2021 = $2020&255;
   HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $2021;
   $2022 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $2022;
   $2023 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $2023;
   $2024 = HEAP32[((33440 + 520|0))>>2]|0;
   $2025 = $2024 >> 4;
   $2026 = (_LIM($2025,255,0,524288)|0);
   $2027 = $2026&255;
   HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $2027;
   return;
   break;
  }
  case 30:  {
   $2028 = ($gteop|0)==(13108254);
   if (!($2028)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $2029 = HEAP16[((33440 + 316|0))>>1]|0;
   $2030 = $2029 << 16 >> 16;
   $2031 = ($2030|0)<(0);
   $2032 = $2031 << 31 >> 31;
   $2033 = HEAP16[((33440 + 412|0))>>1]|0;
   $2034 = $2033 << 16 >> 16;
   $2035 = ($2034|0)<(0);
   $2036 = $2035 << 31 >> 31;
   $2037 = (___muldi3(($2034|0),($2036|0),($2030|0),($2032|0))|0);
   $2038 = tempRet0;
   $2039 = HEAP16[((((33440 + 316|0)) + 2|0))>>1]|0;
   $2040 = $2039 << 16 >> 16;
   $2041 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $2042 = $2041 << 16 >> 16;
   $2043 = Math_imul($2042, $2040)|0;
   $2044 = ($2043|0)<(0);
   $2045 = $2044 << 31 >> 31;
   $2046 = (_i64Add(($2043|0),($2045|0),($2037|0),($2038|0))|0);
   $2047 = tempRet0;
   $2048 = HEAP16[((33440 + 320|0))>>1]|0;
   $2049 = $2048 << 16 >> 16;
   $2050 = HEAP16[((33440 + 416|0))>>1]|0;
   $2051 = $2050 << 16 >> 16;
   $2052 = Math_imul($2051, $2049)|0;
   $2053 = ($2052|0)<(0);
   $2054 = $2053 << 31 >> 31;
   $2055 = (_i64Add(($2046|0),($2047|0),($2052|0),($2054|0))|0);
   $2056 = tempRet0;
   $2057 = (_bitshift64Ashr(($2055|0),($2056|0),12)|0);
   $2058 = tempRet0;
   $2059 = (_BOUNDS($2057,$2058,2147483647,0,30,-2147483648,-1,134217728)|0);
   $2060 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $2059;
   $2061 = HEAP16[((((33440 + 320|0)) + 2|0))>>1]|0;
   $2062 = $2061 << 16 >> 16;
   $2063 = ($2062|0)<(0);
   $2064 = $2063 << 31 >> 31;
   $2065 = HEAP16[((33440 + 412|0))>>1]|0;
   $2066 = $2065 << 16 >> 16;
   $2067 = ($2066|0)<(0);
   $2068 = $2067 << 31 >> 31;
   $2069 = (___muldi3(($2066|0),($2068|0),($2062|0),($2064|0))|0);
   $2070 = tempRet0;
   $2071 = HEAP16[((33440 + 324|0))>>1]|0;
   $2072 = $2071 << 16 >> 16;
   $2073 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $2074 = $2073 << 16 >> 16;
   $2075 = Math_imul($2074, $2072)|0;
   $2076 = ($2075|0)<(0);
   $2077 = $2076 << 31 >> 31;
   $2078 = (_i64Add(($2075|0),($2077|0),($2069|0),($2070|0))|0);
   $2079 = tempRet0;
   $2080 = HEAP16[((((33440 + 324|0)) + 2|0))>>1]|0;
   $2081 = $2080 << 16 >> 16;
   $2082 = HEAP16[((33440 + 416|0))>>1]|0;
   $2083 = $2082 << 16 >> 16;
   $2084 = Math_imul($2083, $2081)|0;
   $2085 = ($2084|0)<(0);
   $2086 = $2085 << 31 >> 31;
   $2087 = (_i64Add(($2078|0),($2079|0),($2084|0),($2086|0))|0);
   $2088 = tempRet0;
   $2089 = (_bitshift64Ashr(($2087|0),($2088|0),12)|0);
   $2090 = tempRet0;
   $2091 = (_BOUNDS($2089,$2090,2147483647,0,29,-2147483648,-1,67108864)|0);
   $2092 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $2091;
   $2093 = HEAP16[((33440 + 328|0))>>1]|0;
   $2094 = $2093 << 16 >> 16;
   $2095 = ($2094|0)<(0);
   $2096 = $2095 << 31 >> 31;
   $2097 = HEAP16[((33440 + 412|0))>>1]|0;
   $2098 = $2097 << 16 >> 16;
   $2099 = ($2098|0)<(0);
   $2100 = $2099 << 31 >> 31;
   $2101 = (___muldi3(($2098|0),($2100|0),($2094|0),($2096|0))|0);
   $2102 = tempRet0;
   $2103 = HEAP16[((((33440 + 328|0)) + 2|0))>>1]|0;
   $2104 = $2103 << 16 >> 16;
   $2105 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $2106 = $2105 << 16 >> 16;
   $2107 = Math_imul($2106, $2104)|0;
   $2108 = ($2107|0)<(0);
   $2109 = $2108 << 31 >> 31;
   $2110 = (_i64Add(($2107|0),($2109|0),($2101|0),($2102|0))|0);
   $2111 = tempRet0;
   $2112 = HEAP16[((33440 + 332|0))>>1]|0;
   $2113 = $2112 << 16 >> 16;
   $2114 = HEAP16[((33440 + 416|0))>>1]|0;
   $2115 = $2114 << 16 >> 16;
   $2116 = Math_imul($2115, $2113)|0;
   $2117 = ($2116|0)<(0);
   $2118 = $2117 << 31 >> 31;
   $2119 = (_i64Add(($2110|0),($2111|0),($2116|0),($2118|0))|0);
   $2120 = tempRet0;
   $2121 = (_bitshift64Ashr(($2119|0),($2120|0),12)|0);
   $2122 = tempRet0;
   $2123 = (_BOUNDS($2121,$2122,2147483647,0,28,-2147483648,-1,33554432)|0);
   $2124 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $2123;
   $2125 = HEAP32[((33440 + 512|0))>>2]|0;
   $2126 = (_LIM($2125,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $2126;
   $2127 = HEAP32[((33440 + 516|0))>>2]|0;
   $2128 = (_LIM($2127,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $2128;
   $2129 = HEAP32[((33440 + 520|0))>>2]|0;
   $2130 = (_LIM($2129,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $2130;
   $2131 = HEAP32[((33440 + 336|0))>>2]|0;
   $2132 = (_bitshift64Shl(($2131|0),0,12)|0);
   $2133 = tempRet0;
   $2134 = HEAP16[((33440 + 348|0))>>1]|0;
   $2135 = $2134 << 16 >> 16;
   $2136 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext29 = $2136 << 16;
   $2137 = $sext29 >> 16;
   $2138 = Math_imul($2137, $2135)|0;
   $2139 = ($2138|0)<(0);
   $2140 = $2139 << 31 >> 31;
   $2141 = (_i64Add(($2138|0),($2140|0),($2132|0),($2133|0))|0);
   $2142 = tempRet0;
   $2143 = HEAP16[((((33440 + 348|0)) + 2|0))>>1]|0;
   $2144 = $2143 << 16 >> 16;
   $2145 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext30 = $2145 << 16;
   $2146 = $sext30 >> 16;
   $2147 = Math_imul($2146, $2144)|0;
   $2148 = ($2147|0)<(0);
   $2149 = $2148 << 31 >> 31;
   $2150 = (_i64Add(($2141|0),($2142|0),($2147|0),($2149|0))|0);
   $2151 = tempRet0;
   $2152 = HEAP16[((33440 + 352|0))>>1]|0;
   $2153 = $2152 << 16 >> 16;
   $sext31 = $2130 << 16;
   $2154 = $sext31 >> 16;
   $2155 = Math_imul($2153, $2154)|0;
   $2156 = ($2155|0)<(0);
   $2157 = $2156 << 31 >> 31;
   $2158 = (_i64Add(($2150|0),($2151|0),($2155|0),($2157|0))|0);
   $2159 = tempRet0;
   $2160 = (_bitshift64Ashr(($2158|0),($2159|0),12)|0);
   $2161 = tempRet0;
   $2162 = (_BOUNDS($2160,$2161,2147483647,0,30,-2147483648,-1,134217728)|0);
   $2163 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $2162;
   $2164 = HEAP32[((33440 + 340|0))>>2]|0;
   $2165 = (_bitshift64Shl(($2164|0),0,12)|0);
   $2166 = tempRet0;
   $2167 = HEAP16[((((33440 + 352|0)) + 2|0))>>1]|0;
   $2168 = $2167 << 16 >> 16;
   $2169 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext32 = $2169 << 16;
   $2170 = $sext32 >> 16;
   $2171 = Math_imul($2170, $2168)|0;
   $2172 = ($2171|0)<(0);
   $2173 = $2172 << 31 >> 31;
   $2174 = (_i64Add(($2171|0),($2173|0),($2165|0),($2166|0))|0);
   $2175 = tempRet0;
   $2176 = HEAP16[((33440 + 356|0))>>1]|0;
   $2177 = $2176 << 16 >> 16;
   $2178 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext33 = $2178 << 16;
   $2179 = $sext33 >> 16;
   $2180 = Math_imul($2179, $2177)|0;
   $2181 = ($2180|0)<(0);
   $2182 = $2181 << 31 >> 31;
   $2183 = (_i64Add(($2174|0),($2175|0),($2180|0),($2182|0))|0);
   $2184 = tempRet0;
   $2185 = HEAP16[((((33440 + 356|0)) + 2|0))>>1]|0;
   $2186 = $2185 << 16 >> 16;
   $2187 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext34 = $2187 << 16;
   $2188 = $sext34 >> 16;
   $2189 = Math_imul($2188, $2186)|0;
   $2190 = ($2189|0)<(0);
   $2191 = $2190 << 31 >> 31;
   $2192 = (_i64Add(($2183|0),($2184|0),($2189|0),($2191|0))|0);
   $2193 = tempRet0;
   $2194 = (_bitshift64Ashr(($2192|0),($2193|0),12)|0);
   $2195 = tempRet0;
   $2196 = (_BOUNDS($2194,$2195,2147483647,0,29,-2147483648,-1,67108864)|0);
   $2197 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $2196;
   $2198 = HEAP32[((33440 + 344|0))>>2]|0;
   $2199 = (_bitshift64Shl(($2198|0),0,12)|0);
   $2200 = tempRet0;
   $2201 = HEAP16[((33440 + 360|0))>>1]|0;
   $2202 = $2201 << 16 >> 16;
   $2203 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext35 = $2203 << 16;
   $2204 = $sext35 >> 16;
   $2205 = Math_imul($2204, $2202)|0;
   $2206 = ($2205|0)<(0);
   $2207 = $2206 << 31 >> 31;
   $2208 = (_i64Add(($2205|0),($2207|0),($2199|0),($2200|0))|0);
   $2209 = tempRet0;
   $2210 = HEAP16[((((33440 + 360|0)) + 2|0))>>1]|0;
   $2211 = $2210 << 16 >> 16;
   $2212 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext36 = $2212 << 16;
   $2213 = $sext36 >> 16;
   $2214 = Math_imul($2213, $2211)|0;
   $2215 = ($2214|0)<(0);
   $2216 = $2215 << 31 >> 31;
   $2217 = (_i64Add(($2208|0),($2209|0),($2214|0),($2216|0))|0);
   $2218 = tempRet0;
   $2219 = HEAP16[((33440 + 364|0))>>1]|0;
   $2220 = $2219 << 16 >> 16;
   $2221 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext37 = $2221 << 16;
   $2222 = $sext37 >> 16;
   $2223 = Math_imul($2222, $2220)|0;
   $2224 = ($2223|0)<(0);
   $2225 = $2224 << 31 >> 31;
   $2226 = (_i64Add(($2217|0),($2218|0),($2223|0),($2225|0))|0);
   $2227 = tempRet0;
   $2228 = (_bitshift64Ashr(($2226|0),($2227|0),12)|0);
   $2229 = tempRet0;
   $2230 = (_BOUNDS($2228,$2229,2147483647,0,28,-2147483648,-1,33554432)|0);
   $2231 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $2230;
   $2232 = HEAP32[((33440 + 512|0))>>2]|0;
   $2233 = (_LIM($2232,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $2233;
   $2234 = HEAP32[((33440 + 516|0))>>2]|0;
   $2235 = (_LIM($2234,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $2235;
   $2236 = HEAP32[((33440 + 520|0))>>2]|0;
   $2237 = (_LIM($2236,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $2237;
   $2238 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $2238;
   $2239 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $2239;
   $2240 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $2240;
   $2241 = HEAP8[((33440 + 496|0))>>0]|0;
   HEAP8[((33440 + 492|0))>>0] = $2241;
   $2242 = HEAP8[((33440 + 500|0))>>0]|0;
   HEAP8[((33440 + 496|0))>>0] = $2242;
   $2243 = HEAP32[((33440 + 512|0))>>2]|0;
   $2244 = $2243 >> 4;
   $2245 = (_LIM($2244,255,0,2097152)|0);
   $2246 = $2245&255;
   HEAP8[((33440 + 500|0))>>0] = $2246;
   $2247 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $2247;
   $2248 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $2248;
   $2249 = HEAP32[((33440 + 516|0))>>2]|0;
   $2250 = $2249 >> 4;
   $2251 = (_LIM($2250,255,0,1048576)|0);
   $2252 = $2251&255;
   HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $2252;
   $2253 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $2253;
   $2254 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $2254;
   $2255 = HEAP32[((33440 + 520|0))>>2]|0;
   $2256 = $2255 >> 4;
   $2257 = (_LIM($2256,255,0,524288)|0);
   $2258 = $2257&255;
   HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $2258;
   return;
   break;
  }
  case 32:  {
   $2259 = ($gteop|0)==(14156832);
   if (!($2259)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $n_v$1112 = 0;
   while(1) {
    $2260 = HEAP16[((33440 + 316|0))>>1]|0;
    $2261 = $2260 << 16 >> 16;
    $2262 = ($2261|0)<(0);
    $2263 = $2262 << 31 >> 31;
    $2264 = (34376 + ($n_v$1112<<2)|0);
    $2265 = HEAP32[$2264>>2]|0;
    $2266 = HEAP16[$2265>>1]|0;
    $2267 = $2266 << 16 >> 16;
    $2268 = ($2267|0)<(0);
    $2269 = $2268 << 31 >> 31;
    $2270 = (___muldi3(($2267|0),($2269|0),($2261|0),($2263|0))|0);
    $2271 = tempRet0;
    $2272 = HEAP16[((((33440 + 316|0)) + 2|0))>>1]|0;
    $2273 = $2272 << 16 >> 16;
    $2274 = (34392 + ($n_v$1112<<2)|0);
    $2275 = HEAP32[$2274>>2]|0;
    $2276 = HEAP16[$2275>>1]|0;
    $2277 = $2276 << 16 >> 16;
    $2278 = Math_imul($2277, $2273)|0;
    $2279 = ($2278|0)<(0);
    $2280 = $2279 << 31 >> 31;
    $2281 = (_i64Add(($2278|0),($2280|0),($2270|0),($2271|0))|0);
    $2282 = tempRet0;
    $2283 = HEAP16[((33440 + 320|0))>>1]|0;
    $2284 = $2283 << 16 >> 16;
    $2285 = (34408 + ($n_v$1112<<2)|0);
    $2286 = HEAP32[$2285>>2]|0;
    $2287 = HEAP16[$2286>>1]|0;
    $2288 = $2287 << 16 >> 16;
    $2289 = Math_imul($2288, $2284)|0;
    $2290 = ($2289|0)<(0);
    $2291 = $2290 << 31 >> 31;
    $2292 = (_i64Add(($2281|0),($2282|0),($2289|0),($2291|0))|0);
    $2293 = tempRet0;
    $2294 = (_bitshift64Ashr(($2292|0),($2293|0),12)|0);
    $2295 = tempRet0;
    $2296 = (_BOUNDS($2294,$2295,2147483647,0,30,-2147483648,-1,134217728)|0);
    $2297 = tempRet0;
    HEAP32[((33440 + 512|0))>>2] = $2296;
    $2298 = HEAP16[((((33440 + 320|0)) + 2|0))>>1]|0;
    $2299 = $2298 << 16 >> 16;
    $2300 = ($2299|0)<(0);
    $2301 = $2300 << 31 >> 31;
    $2302 = HEAP32[$2264>>2]|0;
    $2303 = HEAP16[$2302>>1]|0;
    $2304 = $2303 << 16 >> 16;
    $2305 = ($2304|0)<(0);
    $2306 = $2305 << 31 >> 31;
    $2307 = (___muldi3(($2304|0),($2306|0),($2299|0),($2301|0))|0);
    $2308 = tempRet0;
    $2309 = HEAP16[((33440 + 324|0))>>1]|0;
    $2310 = $2309 << 16 >> 16;
    $2311 = HEAP32[$2274>>2]|0;
    $2312 = HEAP16[$2311>>1]|0;
    $2313 = $2312 << 16 >> 16;
    $2314 = Math_imul($2313, $2310)|0;
    $2315 = ($2314|0)<(0);
    $2316 = $2315 << 31 >> 31;
    $2317 = (_i64Add(($2314|0),($2316|0),($2307|0),($2308|0))|0);
    $2318 = tempRet0;
    $2319 = HEAP16[((((33440 + 324|0)) + 2|0))>>1]|0;
    $2320 = $2319 << 16 >> 16;
    $2321 = HEAP32[$2285>>2]|0;
    $2322 = HEAP16[$2321>>1]|0;
    $2323 = $2322 << 16 >> 16;
    $2324 = Math_imul($2323, $2320)|0;
    $2325 = ($2324|0)<(0);
    $2326 = $2325 << 31 >> 31;
    $2327 = (_i64Add(($2317|0),($2318|0),($2324|0),($2326|0))|0);
    $2328 = tempRet0;
    $2329 = (_bitshift64Ashr(($2327|0),($2328|0),12)|0);
    $2330 = tempRet0;
    $2331 = (_BOUNDS($2329,$2330,2147483647,0,29,-2147483648,-1,67108864)|0);
    $2332 = tempRet0;
    HEAP32[((33440 + 516|0))>>2] = $2331;
    $2333 = HEAP16[((33440 + 328|0))>>1]|0;
    $2334 = $2333 << 16 >> 16;
    $2335 = ($2334|0)<(0);
    $2336 = $2335 << 31 >> 31;
    $2337 = HEAP32[$2264>>2]|0;
    $2338 = HEAP16[$2337>>1]|0;
    $2339 = $2338 << 16 >> 16;
    $2340 = ($2339|0)<(0);
    $2341 = $2340 << 31 >> 31;
    $2342 = (___muldi3(($2339|0),($2341|0),($2334|0),($2336|0))|0);
    $2343 = tempRet0;
    $2344 = HEAP16[((((33440 + 328|0)) + 2|0))>>1]|0;
    $2345 = $2344 << 16 >> 16;
    $2346 = HEAP32[$2274>>2]|0;
    $2347 = HEAP16[$2346>>1]|0;
    $2348 = $2347 << 16 >> 16;
    $2349 = Math_imul($2348, $2345)|0;
    $2350 = ($2349|0)<(0);
    $2351 = $2350 << 31 >> 31;
    $2352 = (_i64Add(($2349|0),($2351|0),($2342|0),($2343|0))|0);
    $2353 = tempRet0;
    $2354 = HEAP16[((33440 + 332|0))>>1]|0;
    $2355 = $2354 << 16 >> 16;
    $2356 = HEAP32[$2285>>2]|0;
    $2357 = HEAP16[$2356>>1]|0;
    $2358 = $2357 << 16 >> 16;
    $2359 = Math_imul($2358, $2355)|0;
    $2360 = ($2359|0)<(0);
    $2361 = $2360 << 31 >> 31;
    $2362 = (_i64Add(($2352|0),($2353|0),($2359|0),($2361|0))|0);
    $2363 = tempRet0;
    $2364 = (_bitshift64Ashr(($2362|0),($2363|0),12)|0);
    $2365 = tempRet0;
    $2366 = (_BOUNDS($2364,$2365,2147483647,0,28,-2147483648,-1,33554432)|0);
    $2367 = tempRet0;
    HEAP32[((33440 + 520|0))>>2] = $2366;
    $2368 = HEAP32[((33440 + 512|0))>>2]|0;
    $2369 = (_LIM($2368,32767,0,-2130706432)|0);
    HEAP32[((33440 + 448|0))>>2] = $2369;
    $2370 = HEAP32[((33440 + 516|0))>>2]|0;
    $2371 = (_LIM($2370,32767,0,-2139095040)|0);
    HEAP32[((33440 + 452|0))>>2] = $2371;
    $2372 = HEAP32[((33440 + 520|0))>>2]|0;
    $2373 = (_LIM($2372,32767,0,4194304)|0);
    HEAP32[((33440 + 456|0))>>2] = $2373;
    $2374 = HEAP32[((33440 + 336|0))>>2]|0;
    $2375 = (_bitshift64Shl(($2374|0),0,12)|0);
    $2376 = tempRet0;
    $2377 = HEAP16[((33440 + 348|0))>>1]|0;
    $2378 = $2377 << 16 >> 16;
    $2379 = HEAP32[((33440 + 448|0))>>2]|0;
    $sext20 = $2379 << 16;
    $2380 = $sext20 >> 16;
    $2381 = Math_imul($2380, $2378)|0;
    $2382 = ($2381|0)<(0);
    $2383 = $2382 << 31 >> 31;
    $2384 = (_i64Add(($2381|0),($2383|0),($2375|0),($2376|0))|0);
    $2385 = tempRet0;
    $2386 = HEAP16[((((33440 + 348|0)) + 2|0))>>1]|0;
    $2387 = $2386 << 16 >> 16;
    $2388 = HEAP32[((33440 + 452|0))>>2]|0;
    $sext21 = $2388 << 16;
    $2389 = $sext21 >> 16;
    $2390 = Math_imul($2389, $2387)|0;
    $2391 = ($2390|0)<(0);
    $2392 = $2391 << 31 >> 31;
    $2393 = (_i64Add(($2384|0),($2385|0),($2390|0),($2392|0))|0);
    $2394 = tempRet0;
    $2395 = HEAP16[((33440 + 352|0))>>1]|0;
    $2396 = $2395 << 16 >> 16;
    $sext22 = $2373 << 16;
    $2397 = $sext22 >> 16;
    $2398 = Math_imul($2396, $2397)|0;
    $2399 = ($2398|0)<(0);
    $2400 = $2399 << 31 >> 31;
    $2401 = (_i64Add(($2393|0),($2394|0),($2398|0),($2400|0))|0);
    $2402 = tempRet0;
    $2403 = (_bitshift64Ashr(($2401|0),($2402|0),12)|0);
    $2404 = tempRet0;
    $2405 = (_BOUNDS($2403,$2404,2147483647,0,30,-2147483648,-1,134217728)|0);
    $2406 = tempRet0;
    HEAP32[((33440 + 512|0))>>2] = $2405;
    $2407 = HEAP32[((33440 + 340|0))>>2]|0;
    $2408 = (_bitshift64Shl(($2407|0),0,12)|0);
    $2409 = tempRet0;
    $2410 = HEAP16[((((33440 + 352|0)) + 2|0))>>1]|0;
    $2411 = $2410 << 16 >> 16;
    $2412 = HEAP32[((33440 + 448|0))>>2]|0;
    $sext23 = $2412 << 16;
    $2413 = $sext23 >> 16;
    $2414 = Math_imul($2413, $2411)|0;
    $2415 = ($2414|0)<(0);
    $2416 = $2415 << 31 >> 31;
    $2417 = (_i64Add(($2414|0),($2416|0),($2408|0),($2409|0))|0);
    $2418 = tempRet0;
    $2419 = HEAP16[((33440 + 356|0))>>1]|0;
    $2420 = $2419 << 16 >> 16;
    $2421 = HEAP32[((33440 + 452|0))>>2]|0;
    $sext24 = $2421 << 16;
    $2422 = $sext24 >> 16;
    $2423 = Math_imul($2422, $2420)|0;
    $2424 = ($2423|0)<(0);
    $2425 = $2424 << 31 >> 31;
    $2426 = (_i64Add(($2417|0),($2418|0),($2423|0),($2425|0))|0);
    $2427 = tempRet0;
    $2428 = HEAP16[((((33440 + 356|0)) + 2|0))>>1]|0;
    $2429 = $2428 << 16 >> 16;
    $2430 = HEAP32[((33440 + 456|0))>>2]|0;
    $sext25 = $2430 << 16;
    $2431 = $sext25 >> 16;
    $2432 = Math_imul($2431, $2429)|0;
    $2433 = ($2432|0)<(0);
    $2434 = $2433 << 31 >> 31;
    $2435 = (_i64Add(($2426|0),($2427|0),($2432|0),($2434|0))|0);
    $2436 = tempRet0;
    $2437 = (_bitshift64Ashr(($2435|0),($2436|0),12)|0);
    $2438 = tempRet0;
    $2439 = (_BOUNDS($2437,$2438,2147483647,0,29,-2147483648,-1,67108864)|0);
    $2440 = tempRet0;
    HEAP32[((33440 + 516|0))>>2] = $2439;
    $2441 = HEAP32[((33440 + 344|0))>>2]|0;
    $2442 = (_bitshift64Shl(($2441|0),0,12)|0);
    $2443 = tempRet0;
    $2444 = HEAP16[((33440 + 360|0))>>1]|0;
    $2445 = $2444 << 16 >> 16;
    $2446 = HEAP32[((33440 + 448|0))>>2]|0;
    $sext26 = $2446 << 16;
    $2447 = $sext26 >> 16;
    $2448 = Math_imul($2447, $2445)|0;
    $2449 = ($2448|0)<(0);
    $2450 = $2449 << 31 >> 31;
    $2451 = (_i64Add(($2448|0),($2450|0),($2442|0),($2443|0))|0);
    $2452 = tempRet0;
    $2453 = HEAP16[((((33440 + 360|0)) + 2|0))>>1]|0;
    $2454 = $2453 << 16 >> 16;
    $2455 = HEAP32[((33440 + 452|0))>>2]|0;
    $sext27 = $2455 << 16;
    $2456 = $sext27 >> 16;
    $2457 = Math_imul($2456, $2454)|0;
    $2458 = ($2457|0)<(0);
    $2459 = $2458 << 31 >> 31;
    $2460 = (_i64Add(($2451|0),($2452|0),($2457|0),($2459|0))|0);
    $2461 = tempRet0;
    $2462 = HEAP16[((33440 + 364|0))>>1]|0;
    $2463 = $2462 << 16 >> 16;
    $2464 = HEAP32[((33440 + 456|0))>>2]|0;
    $sext28 = $2464 << 16;
    $2465 = $sext28 >> 16;
    $2466 = Math_imul($2465, $2463)|0;
    $2467 = ($2466|0)<(0);
    $2468 = $2467 << 31 >> 31;
    $2469 = (_i64Add(($2460|0),($2461|0),($2466|0),($2468|0))|0);
    $2470 = tempRet0;
    $2471 = (_bitshift64Ashr(($2469|0),($2470|0),12)|0);
    $2472 = tempRet0;
    $2473 = (_BOUNDS($2471,$2472,2147483647,0,28,-2147483648,-1,33554432)|0);
    $2474 = tempRet0;
    HEAP32[((33440 + 520|0))>>2] = $2473;
    $2475 = HEAP32[((33440 + 512|0))>>2]|0;
    $2476 = (_LIM($2475,32767,0,-2130706432)|0);
    HEAP32[((33440 + 448|0))>>2] = $2476;
    $2477 = HEAP32[((33440 + 516|0))>>2]|0;
    $2478 = (_LIM($2477,32767,0,-2139095040)|0);
    HEAP32[((33440 + 452|0))>>2] = $2478;
    $2479 = HEAP32[((33440 + 520|0))>>2]|0;
    $2480 = (_LIM($2479,32767,0,4194304)|0);
    HEAP32[((33440 + 456|0))>>2] = $2480;
    $2481 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $2481;
    $2482 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $2482;
    $2483 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $2483;
    $2484 = HEAP8[((33440 + 496|0))>>0]|0;
    HEAP8[((33440 + 492|0))>>0] = $2484;
    $2485 = HEAP8[((33440 + 500|0))>>0]|0;
    HEAP8[((33440 + 496|0))>>0] = $2485;
    $2486 = HEAP32[((33440 + 512|0))>>2]|0;
    $2487 = $2486 >> 4;
    $2488 = (_LIM($2487,255,0,2097152)|0);
    $2489 = $2488&255;
    HEAP8[((33440 + 500|0))>>0] = $2489;
    $2490 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $2490;
    $2491 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $2491;
    $2492 = HEAP32[((33440 + 516|0))>>2]|0;
    $2493 = $2492 >> 4;
    $2494 = (_LIM($2493,255,0,1048576)|0);
    $2495 = $2494&255;
    HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $2495;
    $2496 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $2496;
    $2497 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $2497;
    $2498 = HEAP32[((33440 + 520|0))>>2]|0;
    $2499 = $2498 >> 4;
    $2500 = (_LIM($2499,255,0,524288)|0);
    $2501 = $2500&255;
    HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $2501;
    $2502 = (($n_v$1112) + 1)|0;
    $exitcond116 = ($2502|0)==(3);
    if ($exitcond116) {
     break;
    } else {
     $n_v$1112 = $2502;
    }
   }
   return;
   break;
  }
  case 40:  {
   $2503 = $gteop & 32506880;
   $2504 = ($2503|0)==(10486784);
   if (!($2504)) {
    return;
   }
   $2505 = $gteop >>> 19;
   $2506 = $2505 & 1;
   $2507 = (0 - ($2506))|0;
   $2508 = $2507 & 12;
   HEAP32[((33440 + 408|0))>>2] = 0;
   $2509 = HEAP32[((33440 + 448|0))>>2]|0;
   $2510 = $2509&65535;
   $2511 = $2510 << 16 >> 16;
   $2512 = ($2511|0)<(0);
   $2513 = $2512 << 31 >> 31;
   $2514 = (___muldi3(($2511|0),($2513|0),($2511|0),($2513|0))|0);
   $2515 = tempRet0;
   $2516 = (_bitshift64Lshr(($2514|0),($2515|0),($2508|0))|0);
   $2517 = tempRet0;
   $2518 = (_BOUNDS($2516,$2517,2147483647,0,30,-2147483648,-1,134217728)|0);
   $2519 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $2518;
   $2520 = HEAP32[((33440 + 452|0))>>2]|0;
   $2521 = $2520&65535;
   $2522 = $2521 << 16 >> 16;
   $2523 = ($2522|0)<(0);
   $2524 = $2523 << 31 >> 31;
   $2525 = (___muldi3(($2522|0),($2524|0),($2522|0),($2524|0))|0);
   $2526 = tempRet0;
   $2527 = (_bitshift64Lshr(($2525|0),($2526|0),($2508|0))|0);
   $2528 = tempRet0;
   $2529 = (_BOUNDS($2527,$2528,2147483647,0,29,-2147483648,-1,67108864)|0);
   $2530 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $2529;
   $2531 = HEAP32[((33440 + 456|0))>>2]|0;
   $2532 = $2531&65535;
   $2533 = $2532 << 16 >> 16;
   $2534 = ($2533|0)<(0);
   $2535 = $2534 << 31 >> 31;
   $2536 = (___muldi3(($2533|0),($2535|0),($2533|0),($2535|0))|0);
   $2537 = tempRet0;
   $2538 = (_bitshift64Lshr(($2536|0),($2537|0),($2508|0))|0);
   $2539 = tempRet0;
   $2540 = (_BOUNDS($2538,$2539,2147483647,0,28,-2147483648,-1,33554432)|0);
   $2541 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $2540;
   $2542 = HEAP32[((33440 + 512|0))>>2]|0;
   $2543 = (_LIM($2542,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $2543;
   $2544 = HEAP32[((33440 + 516|0))>>2]|0;
   $2545 = (_LIM($2544,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $2545;
   $2546 = HEAP32[((33440 + 520|0))>>2]|0;
   $2547 = (_LIM($2546,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $2547;
   return;
   break;
  }
  case 42:  {
   $2548 = ($gteop|0)==(16252970);
   if (!($2548)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $n_pass$0113 = 0;
   while(1) {
    $2549 = HEAP8[((33440 + 492|0))>>0]|0;
    $2550 = $2549&255;
    $2551 = (_bitshift64Shl(($2550|0),0,16)|0);
    $2552 = tempRet0;
    $2553 = HEAP32[((33440 + 444|0))>>2]|0;
    $2554 = $2553&65535;
    $2555 = $2554 << 16 >> 16;
    $2556 = ($2555|0)<(0);
    $2557 = $2556 << 31 >> 31;
    $2558 = HEAP32[((33440 + 368|0))>>2]|0;
    $2559 = $2549&255;
    $2560 = $2559 << 4;
    $2561 = (($2558) - ($2560))|0;
    $2562 = (_LIM($2561,32767,-32768,-2130706432)|0);
    $2563 = ($2562|0)<(0);
    $2564 = $2563 << 31 >> 31;
    $2565 = (___muldi3(($2562|0),($2564|0),($2555|0),($2557|0))|0);
    $2566 = tempRet0;
    $2567 = (_i64Add(($2565|0),($2566|0),($2551|0),($2552|0))|0);
    $2568 = tempRet0;
    $2569 = (_bitshift64Ashr(($2567|0),($2568|0),12)|0);
    $2570 = tempRet0;
    $2571 = (_BOUNDS($2569,$2570,2147483647,0,30,-2147483648,-1,134217728)|0);
    $2572 = tempRet0;
    HEAP32[((33440 + 512|0))>>2] = $2571;
    $2573 = HEAP8[((((33440 + 492|0)) + 1|0))>>0]|0;
    $2574 = $2573&255;
    $2575 = (_bitshift64Shl(($2574|0),0,16)|0);
    $2576 = tempRet0;
    $2577 = HEAP32[((33440 + 444|0))>>2]|0;
    $2578 = $2577&65535;
    $2579 = $2578 << 16 >> 16;
    $2580 = ($2579|0)<(0);
    $2581 = $2580 << 31 >> 31;
    $2582 = HEAP32[((33440 + 372|0))>>2]|0;
    $2583 = $2573&255;
    $2584 = $2583 << 4;
    $2585 = (($2582) - ($2584))|0;
    $2586 = (_LIM($2585,32767,-32768,-2130706432)|0);
    $2587 = ($2586|0)<(0);
    $2588 = $2587 << 31 >> 31;
    $2589 = (___muldi3(($2586|0),($2588|0),($2579|0),($2581|0))|0);
    $2590 = tempRet0;
    $2591 = (_i64Add(($2589|0),($2590|0),($2575|0),($2576|0))|0);
    $2592 = tempRet0;
    $2593 = (_bitshift64Ashr(($2591|0),($2592|0),12)|0);
    $2594 = tempRet0;
    $2595 = (_BOUNDS($2593,$2594,2147483647,0,29,-2147483648,-1,67108864)|0);
    $2596 = tempRet0;
    HEAP32[((33440 + 516|0))>>2] = $2595;
    $2597 = HEAP8[((((33440 + 492|0)) + 2|0))>>0]|0;
    $2598 = $2597&255;
    $2599 = (_bitshift64Shl(($2598|0),0,16)|0);
    $2600 = tempRet0;
    $2601 = HEAP32[((33440 + 444|0))>>2]|0;
    $2602 = $2601&65535;
    $2603 = $2602 << 16 >> 16;
    $2604 = ($2603|0)<(0);
    $2605 = $2604 << 31 >> 31;
    $2606 = HEAP32[((33440 + 376|0))>>2]|0;
    $2607 = $2597&255;
    $2608 = $2607 << 4;
    $2609 = (($2606) - ($2608))|0;
    $2610 = (_LIM($2609,32767,-32768,-2130706432)|0);
    $2611 = ($2610|0)<(0);
    $2612 = $2611 << 31 >> 31;
    $2613 = (___muldi3(($2610|0),($2612|0),($2603|0),($2605|0))|0);
    $2614 = tempRet0;
    $2615 = (_i64Add(($2613|0),($2614|0),($2599|0),($2600|0))|0);
    $2616 = tempRet0;
    $2617 = (_bitshift64Ashr(($2615|0),($2616|0),12)|0);
    $2618 = tempRet0;
    $2619 = (_BOUNDS($2617,$2618,2147483647,0,28,-2147483648,-1,33554432)|0);
    $2620 = tempRet0;
    HEAP32[((33440 + 520|0))>>2] = $2619;
    $2621 = HEAP32[((33440 + 512|0))>>2]|0;
    $2622 = (_LIM($2621,32767,-32768,-2130706432)|0);
    HEAP32[((33440 + 448|0))>>2] = $2622;
    $2623 = HEAP32[((33440 + 516|0))>>2]|0;
    $2624 = (_LIM($2623,32767,-32768,-2139095040)|0);
    HEAP32[((33440 + 452|0))>>2] = $2624;
    $2625 = HEAP32[((33440 + 520|0))>>2]|0;
    $2626 = (_LIM($2625,32767,-32768,4194304)|0);
    HEAP32[((33440 + 456|0))>>2] = $2626;
    $2627 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $2627;
    $2628 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $2628;
    $2629 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $2629;
    $2630 = HEAP8[((33440 + 496|0))>>0]|0;
    HEAP8[((33440 + 492|0))>>0] = $2630;
    $2631 = HEAP8[((33440 + 500|0))>>0]|0;
    HEAP8[((33440 + 496|0))>>0] = $2631;
    $2632 = HEAP32[((33440 + 512|0))>>2]|0;
    $2633 = $2632 >> 4;
    $2634 = (_LIM($2633,255,0,2097152)|0);
    $2635 = $2634&255;
    HEAP8[((33440 + 500|0))>>0] = $2635;
    $2636 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $2636;
    $2637 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $2637;
    $2638 = HEAP32[((33440 + 516|0))>>2]|0;
    $2639 = $2638 >> 4;
    $2640 = (_LIM($2639,255,0,1048576)|0);
    $2641 = $2640&255;
    HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $2641;
    $2642 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $2642;
    $2643 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $2643;
    $2644 = HEAP32[((33440 + 520|0))>>2]|0;
    $2645 = $2644 >> 4;
    $2646 = (_LIM($2645,255,0,524288)|0);
    $2647 = $2646&255;
    HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $2647;
    $2648 = (($n_pass$0113) + 1)|0;
    $exitcond117 = ($2648|0)==(3);
    if ($exitcond117) {
     break;
    } else {
     $n_pass$0113 = $2648;
    }
   }
   return;
   break;
  }
  case 45:  {
   $2649 = ($gteop|0)==(22544429);
   if (!($2649)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $2650 = HEAP16[((33440 + 400|0))>>1]|0;
   $2651 = $2650 << 16 >> 16;
   $2652 = ($2651|0)<(0);
   $2653 = $2652 << 31 >> 31;
   $2654 = HEAP16[((33440 + 480|0))>>1]|0;
   $2655 = $2654&65535;
   $2656 = (___muldi3(($2655|0),0,($2651|0),($2653|0))|0);
   $2657 = tempRet0;
   $2658 = $2650 << 16 >> 16;
   $2659 = HEAP16[((33440 + 484|0))>>1]|0;
   $2660 = $2659&65535;
   $2661 = Math_imul($2660, $2658)|0;
   $2662 = ($2661|0)<(0);
   $2663 = $2662 << 31 >> 31;
   $2664 = (_i64Add(($2661|0),($2663|0),($2656|0),($2657|0))|0);
   $2665 = tempRet0;
   $2666 = HEAP16[((33440 + 488|0))>>1]|0;
   $2667 = $2666&65535;
   $2668 = Math_imul($2667, $2658)|0;
   $2669 = ($2668|0)<(0);
   $2670 = $2669 << 31 >> 31;
   $2671 = (_i64Add(($2664|0),($2665|0),($2668|0),($2670|0))|0);
   $2672 = tempRet0;
   $2673 = (_BOUNDS($2671,$2672,2147483647,0,-2147418112,-2147483648,-1,-2147450880)|0);
   $2674 = tempRet0;
   HEAP32[((33440 + 508|0))>>2] = $2673;
   $2675 = $2673 >> 12;
   $2676 = (_LIM($2675,65535,0,-2147221504)|0);
   $2677 = $2676&65535;
   HEAP16[((33440 + 440|0))>>1] = $2677;
   return;
   break;
  }
  case 46:  {
   $2678 = ($gteop|0)==(23593006);
   if (!($2678)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $2679 = HEAP16[((33440 + 404|0))>>1]|0;
   $2680 = $2679 << 16 >> 16;
   $2681 = ($2680|0)<(0);
   $2682 = $2681 << 31 >> 31;
   $2683 = HEAP16[((33440 + 476|0))>>1]|0;
   $2684 = $2683&65535;
   $2685 = (___muldi3(($2684|0),0,($2680|0),($2682|0))|0);
   $2686 = tempRet0;
   $2687 = $2679 << 16 >> 16;
   $2688 = HEAP16[((33440 + 480|0))>>1]|0;
   $2689 = $2688&65535;
   $2690 = Math_imul($2689, $2687)|0;
   $2691 = ($2690|0)<(0);
   $2692 = $2691 << 31 >> 31;
   $2693 = (_i64Add(($2690|0),($2692|0),($2685|0),($2686|0))|0);
   $2694 = tempRet0;
   $2695 = HEAP16[((33440 + 484|0))>>1]|0;
   $2696 = $2695&65535;
   $2697 = Math_imul($2696, $2687)|0;
   $2698 = ($2697|0)<(0);
   $2699 = $2698 << 31 >> 31;
   $2700 = (_i64Add(($2693|0),($2694|0),($2697|0),($2699|0))|0);
   $2701 = tempRet0;
   $2702 = HEAP16[((33440 + 488|0))>>1]|0;
   $2703 = $2702&65535;
   $2704 = Math_imul($2703, $2687)|0;
   $2705 = ($2704|0)<(0);
   $2706 = $2705 << 31 >> 31;
   $2707 = (_i64Add(($2700|0),($2701|0),($2704|0),($2706|0))|0);
   $2708 = tempRet0;
   $2709 = (_BOUNDS($2707,$2708,2147483647,0,-2147418112,-2147483648,-1,-2147450880)|0);
   $2710 = tempRet0;
   HEAP32[((33440 + 508|0))>>2] = $2709;
   $2711 = $2709 >> 12;
   $2712 = (_LIM($2711,65535,0,-2147221504)|0);
   $2713 = $2712&65535;
   HEAP16[((33440 + 440|0))>>1] = $2713;
   return;
   break;
  }
  case 48:  {
   $2714 = ($gteop|0)==(2621488);
   if (!($2714)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $n_v$2114 = 0;
   while(1) {
    $2715 = HEAP32[((33440 + 304|0))>>2]|0;
    $2716 = ($2715|0)<(0);
    $2717 = $2716 << 31 >> 31;
    $2718 = (_bitshift64Shl(($2715|0),($2717|0),12)|0);
    $2719 = tempRet0;
    $2720 = HEAP16[((33440 + 284|0))>>1]|0;
    $2721 = $2720 << 16 >> 16;
    $2722 = (34376 + ($n_v$2114<<2)|0);
    $2723 = HEAP32[$2722>>2]|0;
    $2724 = HEAP16[$2723>>1]|0;
    $2725 = $2724 << 16 >> 16;
    $2726 = Math_imul($2725, $2721)|0;
    $2727 = ($2726|0)<(0);
    $2728 = $2727 << 31 >> 31;
    $2729 = (_i64Add(($2726|0),($2728|0),($2718|0),($2719|0))|0);
    $2730 = tempRet0;
    $2731 = HEAP16[((((33440 + 284|0)) + 2|0))>>1]|0;
    $2732 = $2731 << 16 >> 16;
    $2733 = (34392 + ($n_v$2114<<2)|0);
    $2734 = HEAP32[$2733>>2]|0;
    $2735 = HEAP16[$2734>>1]|0;
    $2736 = $2735 << 16 >> 16;
    $2737 = Math_imul($2736, $2732)|0;
    $2738 = ($2737|0)<(0);
    $2739 = $2738 << 31 >> 31;
    $2740 = (_i64Add(($2729|0),($2730|0),($2737|0),($2739|0))|0);
    $2741 = tempRet0;
    $2742 = HEAP16[((33440 + 288|0))>>1]|0;
    $2743 = $2742 << 16 >> 16;
    $2744 = (34408 + ($n_v$2114<<2)|0);
    $2745 = HEAP32[$2744>>2]|0;
    $2746 = HEAP16[$2745>>1]|0;
    $2747 = $2746 << 16 >> 16;
    $2748 = Math_imul($2747, $2743)|0;
    $2749 = ($2748|0)<(0);
    $2750 = $2749 << 31 >> 31;
    $2751 = (_i64Add(($2740|0),($2741|0),($2748|0),($2750|0))|0);
    $2752 = tempRet0;
    $2753 = (_bitshift64Ashr(($2751|0),($2752|0),12)|0);
    $2754 = tempRet0;
    $2755 = (_BOUNDS($2753,$2754,2147483647,0,30,-2147483648,-1,134217728)|0);
    $2756 = tempRet0;
    HEAP32[((33440 + 512|0))>>2] = $2755;
    $2757 = HEAP32[((33440 + 308|0))>>2]|0;
    $2758 = ($2757|0)<(0);
    $2759 = $2758 << 31 >> 31;
    $2760 = (_bitshift64Shl(($2757|0),($2759|0),12)|0);
    $2761 = tempRet0;
    $2762 = HEAP16[((((33440 + 288|0)) + 2|0))>>1]|0;
    $2763 = $2762 << 16 >> 16;
    $2764 = HEAP32[$2722>>2]|0;
    $2765 = HEAP16[$2764>>1]|0;
    $2766 = $2765 << 16 >> 16;
    $2767 = Math_imul($2766, $2763)|0;
    $2768 = ($2767|0)<(0);
    $2769 = $2768 << 31 >> 31;
    $2770 = (_i64Add(($2767|0),($2769|0),($2760|0),($2761|0))|0);
    $2771 = tempRet0;
    $2772 = HEAP16[((33440 + 292|0))>>1]|0;
    $2773 = $2772 << 16 >> 16;
    $2774 = HEAP32[$2733>>2]|0;
    $2775 = HEAP16[$2774>>1]|0;
    $2776 = $2775 << 16 >> 16;
    $2777 = Math_imul($2776, $2773)|0;
    $2778 = ($2777|0)<(0);
    $2779 = $2778 << 31 >> 31;
    $2780 = (_i64Add(($2770|0),($2771|0),($2777|0),($2779|0))|0);
    $2781 = tempRet0;
    $2782 = HEAP16[((((33440 + 292|0)) + 2|0))>>1]|0;
    $2783 = $2782 << 16 >> 16;
    $2784 = HEAP32[$2744>>2]|0;
    $2785 = HEAP16[$2784>>1]|0;
    $2786 = $2785 << 16 >> 16;
    $2787 = Math_imul($2786, $2783)|0;
    $2788 = ($2787|0)<(0);
    $2789 = $2788 << 31 >> 31;
    $2790 = (_i64Add(($2780|0),($2781|0),($2787|0),($2789|0))|0);
    $2791 = tempRet0;
    $2792 = (_bitshift64Ashr(($2790|0),($2791|0),12)|0);
    $2793 = tempRet0;
    $2794 = (_BOUNDS($2792,$2793,2147483647,0,29,-2147483648,-1,67108864)|0);
    $2795 = tempRet0;
    HEAP32[((33440 + 516|0))>>2] = $2794;
    $2796 = HEAP32[((33440 + 312|0))>>2]|0;
    $2797 = ($2796|0)<(0);
    $2798 = $2797 << 31 >> 31;
    $2799 = (_bitshift64Shl(($2796|0),($2798|0),12)|0);
    $2800 = tempRet0;
    $2801 = HEAP16[((33440 + 296|0))>>1]|0;
    $2802 = $2801 << 16 >> 16;
    $2803 = HEAP32[$2722>>2]|0;
    $2804 = HEAP16[$2803>>1]|0;
    $2805 = $2804 << 16 >> 16;
    $2806 = Math_imul($2805, $2802)|0;
    $2807 = ($2806|0)<(0);
    $2808 = $2807 << 31 >> 31;
    $2809 = (_i64Add(($2806|0),($2808|0),($2799|0),($2800|0))|0);
    $2810 = tempRet0;
    $2811 = HEAP16[((((33440 + 296|0)) + 2|0))>>1]|0;
    $2812 = $2811 << 16 >> 16;
    $2813 = HEAP32[$2733>>2]|0;
    $2814 = HEAP16[$2813>>1]|0;
    $2815 = $2814 << 16 >> 16;
    $2816 = Math_imul($2815, $2812)|0;
    $2817 = ($2816|0)<(0);
    $2818 = $2817 << 31 >> 31;
    $2819 = (_i64Add(($2809|0),($2810|0),($2816|0),($2818|0))|0);
    $2820 = tempRet0;
    $2821 = HEAP16[((33440 + 300|0))>>1]|0;
    $2822 = $2821 << 16 >> 16;
    $2823 = HEAP32[$2744>>2]|0;
    $2824 = HEAP16[$2823>>1]|0;
    $2825 = $2824 << 16 >> 16;
    $2826 = Math_imul($2825, $2822)|0;
    $2827 = ($2826|0)<(0);
    $2828 = $2827 << 31 >> 31;
    $2829 = (_i64Add(($2819|0),($2820|0),($2826|0),($2828|0))|0);
    $2830 = tempRet0;
    $2831 = (_bitshift64Ashr(($2829|0),($2830|0),12)|0);
    $2832 = tempRet0;
    $2833 = (_BOUNDS($2831,$2832,2147483647,0,28,-2147483648,-1,33554432)|0);
    $2834 = tempRet0;
    HEAP32[((33440 + 520|0))>>2] = $2833;
    $2835 = HEAP32[((33440 + 512|0))>>2]|0;
    $2836 = (_LIM($2835,32767,-32768,-2130706432)|0);
    HEAP32[((33440 + 448|0))>>2] = $2836;
    $2837 = HEAP32[((33440 + 516|0))>>2]|0;
    $2838 = (_LIM($2837,32767,-32768,-2139095040)|0);
    HEAP32[((33440 + 452|0))>>2] = $2838;
    $2839 = HEAP32[((33440 + 520|0))>>2]|0;
    $2840 = (_LIM($2839,32767,-32768,4194304)|0);
    HEAP32[((33440 + 456|0))>>2] = $2840;
    $2841 = HEAP16[((33440 + 480|0))>>1]|0;
    HEAP16[((33440 + 476|0))>>1] = $2841;
    $2842 = HEAP16[((33440 + 484|0))>>1]|0;
    HEAP16[((33440 + 480|0))>>1] = $2842;
    $2843 = HEAP16[((33440 + 488|0))>>1]|0;
    HEAP16[((33440 + 484|0))>>1] = $2843;
    $2844 = HEAP32[((33440 + 520|0))>>2]|0;
    $2845 = (_LIM($2844,65535,0,-2147221504)|0);
    $2846 = $2845&65535;
    HEAP16[((33440 + 488|0))>>1] = $2846;
    $2847 = HEAP32[((33440 + 464|0))>>2]|0;
    HEAP32[((33440 + 460|0))>>2] = $2847;
    $2848 = HEAP32[((33440 + 468|0))>>2]|0;
    HEAP32[((33440 + 464|0))>>2] = $2848;
    $2849 = HEAP32[((33440 + 380|0))>>2]|0;
    $2850 = ($2849|0)<(0);
    $2851 = $2850 << 31 >> 31;
    $2852 = HEAP32[((33440 + 448|0))>>2]|0;
    $2853 = $2852&65535;
    $2854 = $2853 << 16 >> 16;
    $2855 = ($2854|0)<(0);
    $2856 = $2855 << 31 >> 31;
    $2857 = HEAP16[((33440 + 388|0))>>1]|0;
    $2858 = $2857&65535;
    $2859 = $2858 << 16;
    $2860 = HEAP16[((33440 + 488|0))>>1]|0;
    $2861 = $2860&65535;
    $2862 = (_Lm_E($2861)|0);
    $2863 = (($2859>>>0) / ($2862>>>0))&-1;
    $2864 = (___muldi3(($2863|0),0,($2854|0),($2856|0))|0);
    $2865 = tempRet0;
    $2866 = (_i64Add(($2864|0),($2865|0),($2849|0),($2851|0))|0);
    $2867 = tempRet0;
    $2868 = (_bitshift64Ashr(($2866|0),($2867|0),16)|0);
    $2869 = tempRet0;
    $2870 = (_BOUNDS($2868,$2869,2147483647,0,-2147418112,-2147483648,-1,-2147450880)|0);
    $2871 = tempRet0;
    $2872 = (_LIM($2870,1023,-1024,-2147467264)|0);
    $2873 = $2872&65535;
    HEAP16[((33440 + 468|0))>>1] = $2873;
    $2874 = HEAP32[((33440 + 384|0))>>2]|0;
    $2875 = ($2874|0)<(0);
    $2876 = $2875 << 31 >> 31;
    $2877 = HEAP32[((33440 + 452|0))>>2]|0;
    $2878 = $2877&65535;
    $2879 = $2878 << 16 >> 16;
    $2880 = ($2879|0)<(0);
    $2881 = $2880 << 31 >> 31;
    $2882 = HEAP16[((33440 + 388|0))>>1]|0;
    $2883 = $2882&65535;
    $2884 = $2883 << 16;
    $2885 = HEAP16[((33440 + 488|0))>>1]|0;
    $2886 = $2885&65535;
    $2887 = (_Lm_E($2886)|0);
    $2888 = (($2884>>>0) / ($2887>>>0))&-1;
    $2889 = (___muldi3(($2888|0),0,($2879|0),($2881|0))|0);
    $2890 = tempRet0;
    $2891 = (_i64Add(($2889|0),($2890|0),($2874|0),($2876|0))|0);
    $2892 = tempRet0;
    $2893 = (_bitshift64Ashr(($2891|0),($2892|0),16)|0);
    $2894 = tempRet0;
    $2895 = (_BOUNDS($2893,$2894,2147483647,0,-2147418112,-2147483648,-1,-2147450880)|0);
    $2896 = tempRet0;
    $2897 = (_LIM($2895,1023,-1024,-2147475456)|0);
    $2898 = $2897&65535;
    HEAP16[((((33440 + 468|0)) + 2|0))>>1] = $2898;
    $2899 = HEAP32[((33440 + 396|0))>>2]|0;
    $2900 = ($2899|0)<(0);
    $2901 = $2900 << 31 >> 31;
    $2902 = HEAP16[((33440 + 392|0))>>1]|0;
    $2903 = $2902 << 16 >> 16;
    $2904 = ($2903|0)<(0);
    $2905 = $2904 << 31 >> 31;
    $2906 = HEAP16[((33440 + 388|0))>>1]|0;
    $2907 = $2906&65535;
    $2908 = $2907 << 16;
    $2909 = HEAP16[((33440 + 488|0))>>1]|0;
    $2910 = $2909&65535;
    $2911 = (_Lm_E($2910)|0);
    $2912 = (($2908>>>0) / ($2911>>>0))&-1;
    $2913 = (___muldi3(($2912|0),0,($2903|0),($2905|0))|0);
    $2914 = tempRet0;
    $2915 = (_i64Add(($2913|0),($2914|0),($2899|0),($2901|0))|0);
    $2916 = tempRet0;
    $2917 = (_BOUNDS($2915,$2916,2147483647,0,-2147418112,-2147483648,-1,-2147450880)|0);
    $2918 = tempRet0;
    HEAP32[((33440 + 508|0))>>2] = $2917;
    $2919 = $2917 >> 12;
    $2920 = (_LIM($2919,4095,0,4096)|0);
    HEAP32[((33440 + 444|0))>>2] = $2920;
    $2921 = (($n_v$2114) + 1)|0;
    $exitcond118 = ($2921|0)==(3);
    if ($exitcond118) {
     break;
    } else {
     $n_v$2114 = $2921;
    }
   }
   return;
   break;
  }
  case 61:  {
   $2922 = $gteop >>> 20;
   $2923 = $2922 & 31;
   if (!((($2923|0) == 25) | (($2923|0) == 9))) {
    return;
   }
   $2924 = $gteop >>> 19;
   $2925 = $2924 & 1;
   $2926 = (0 - ($2925))|0;
   $2927 = $2926 & 12;
   HEAP32[((33440 + 408|0))>>2] = 0;
   $2928 = HEAP32[((33440 + 444|0))>>2]|0;
   $2929 = $2928&65535;
   $2930 = $2929 << 16 >> 16;
   $2931 = ($2930|0)<(0);
   $2932 = $2931 << 31 >> 31;
   $2933 = HEAP32[((33440 + 448|0))>>2]|0;
   $2934 = $2933&65535;
   $2935 = $2934 << 16 >> 16;
   $2936 = ($2935|0)<(0);
   $2937 = $2936 << 31 >> 31;
   $2938 = (___muldi3(($2935|0),($2937|0),($2930|0),($2932|0))|0);
   $2939 = tempRet0;
   $2940 = (_bitshift64Ashr(($2938|0),($2939|0),($2927|0))|0);
   $2941 = tempRet0;
   $2942 = (_BOUNDS($2940,$2941,2147483647,0,30,-2147483648,-1,134217728)|0);
   $2943 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $2942;
   $2944 = HEAP32[((33440 + 444|0))>>2]|0;
   $2945 = $2944&65535;
   $2946 = $2945 << 16 >> 16;
   $2947 = ($2946|0)<(0);
   $2948 = $2947 << 31 >> 31;
   $2949 = HEAP32[((33440 + 452|0))>>2]|0;
   $2950 = $2949&65535;
   $2951 = $2950 << 16 >> 16;
   $2952 = ($2951|0)<(0);
   $2953 = $2952 << 31 >> 31;
   $2954 = (___muldi3(($2951|0),($2953|0),($2946|0),($2948|0))|0);
   $2955 = tempRet0;
   $2956 = (_bitshift64Ashr(($2954|0),($2955|0),($2927|0))|0);
   $2957 = tempRet0;
   $2958 = (_BOUNDS($2956,$2957,2147483647,0,29,-2147483648,-1,67108864)|0);
   $2959 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $2958;
   $2960 = HEAP32[((33440 + 444|0))>>2]|0;
   $2961 = $2960&65535;
   $2962 = $2961 << 16 >> 16;
   $2963 = ($2962|0)<(0);
   $2964 = $2963 << 31 >> 31;
   $2965 = HEAP32[((33440 + 456|0))>>2]|0;
   $2966 = $2965&65535;
   $2967 = $2966 << 16 >> 16;
   $2968 = ($2967|0)<(0);
   $2969 = $2968 << 31 >> 31;
   $2970 = (___muldi3(($2967|0),($2969|0),($2962|0),($2964|0))|0);
   $2971 = tempRet0;
   $2972 = (_bitshift64Ashr(($2970|0),($2971|0),($2927|0))|0);
   $2973 = tempRet0;
   $2974 = (_BOUNDS($2972,$2973,2147483647,0,28,-2147483648,-1,33554432)|0);
   $2975 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $2974;
   $2976 = HEAP32[((33440 + 512|0))>>2]|0;
   $2977 = (_LIM($2976,32767,-32768,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $2977;
   $2978 = HEAP32[((33440 + 516|0))>>2]|0;
   $2979 = (_LIM($2978,32767,-32768,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $2979;
   $2980 = HEAP32[((33440 + 520|0))>>2]|0;
   $2981 = (_LIM($2980,32767,-32768,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $2981;
   $2982 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $2982;
   $2983 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $2983;
   $2984 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $2984;
   $2985 = HEAP8[((33440 + 496|0))>>0]|0;
   HEAP8[((33440 + 492|0))>>0] = $2985;
   $2986 = HEAP8[((33440 + 500|0))>>0]|0;
   HEAP8[((33440 + 496|0))>>0] = $2986;
   $2987 = HEAP32[((33440 + 512|0))>>2]|0;
   $2988 = $2987 >> 4;
   $2989 = (_LIM($2988,255,0,2097152)|0);
   $2990 = $2989&255;
   HEAP8[((33440 + 500|0))>>0] = $2990;
   $2991 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $2991;
   $2992 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $2992;
   $2993 = HEAP32[((33440 + 516|0))>>2]|0;
   $2994 = $2993 >> 4;
   $2995 = (_LIM($2994,255,0,1048576)|0);
   $2996 = $2995&255;
   HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $2996;
   $2997 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $2997;
   $2998 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $2998;
   $2999 = HEAP32[((33440 + 520|0))>>2]|0;
   $3000 = $2999 >> 4;
   $3001 = (_LIM($3000,255,0,524288)|0);
   $3002 = $3001&255;
   HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $3002;
   return;
   break;
  }
  case 62:  {
   $3003 = $gteop & 32505856;
   $3004 = ($3003|0)==(27262976);
   if (!($3004)) {
    return;
   }
   $3005 = $gteop >>> 19;
   $3006 = $3005 & 1;
   $3007 = (0 - ($3006))|0;
   $3008 = $3007 & 12;
   HEAP32[((33440 + 408|0))>>2] = 0;
   $3009 = HEAP32[((33440 + 512|0))>>2]|0;
   $3010 = ($3009|0)<(0);
   $3011 = $3010 << 31 >> 31;
   $3012 = (_bitshift64Shl(($3009|0),($3011|0),($3008|0))|0);
   $3013 = tempRet0;
   $3014 = HEAP32[((33440 + 444|0))>>2]|0;
   $sext14 = $3014 << 16;
   $3015 = $sext14 >> 16;
   $3016 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext15 = $3016 << 16;
   $3017 = $sext15 >> 16;
   $3018 = Math_imul($3017, $3015)|0;
   $3019 = ($3018|0)<(0);
   $3020 = $3019 << 31 >> 31;
   $3021 = (_i64Add(($3018|0),($3020|0),($3012|0),($3013|0))|0);
   $3022 = tempRet0;
   $3023 = (_bitshift64Ashr(($3021|0),($3022|0),($3008|0))|0);
   $3024 = tempRet0;
   $3025 = (_BOUNDS($3023,$3024,2147483647,0,30,-2147483648,-1,134217728)|0);
   $3026 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $3025;
   $3027 = HEAP32[((33440 + 516|0))>>2]|0;
   $3028 = ($3027|0)<(0);
   $3029 = $3028 << 31 >> 31;
   $3030 = (_bitshift64Shl(($3027|0),($3029|0),($3008|0))|0);
   $3031 = tempRet0;
   $3032 = HEAP32[((33440 + 444|0))>>2]|0;
   $sext16 = $3032 << 16;
   $3033 = $sext16 >> 16;
   $3034 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext17 = $3034 << 16;
   $3035 = $sext17 >> 16;
   $3036 = Math_imul($3035, $3033)|0;
   $3037 = ($3036|0)<(0);
   $3038 = $3037 << 31 >> 31;
   $3039 = (_i64Add(($3036|0),($3038|0),($3030|0),($3031|0))|0);
   $3040 = tempRet0;
   $3041 = (_bitshift64Ashr(($3039|0),($3040|0),($3008|0))|0);
   $3042 = tempRet0;
   $3043 = (_BOUNDS($3041,$3042,2147483647,0,29,-2147483648,-1,67108864)|0);
   $3044 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $3043;
   $3045 = HEAP32[((33440 + 520|0))>>2]|0;
   $3046 = ($3045|0)<(0);
   $3047 = $3046 << 31 >> 31;
   $3048 = (_bitshift64Shl(($3045|0),($3047|0),($3008|0))|0);
   $3049 = tempRet0;
   $3050 = HEAP32[((33440 + 444|0))>>2]|0;
   $sext18 = $3050 << 16;
   $3051 = $sext18 >> 16;
   $3052 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext19 = $3052 << 16;
   $3053 = $sext19 >> 16;
   $3054 = Math_imul($3053, $3051)|0;
   $3055 = ($3054|0)<(0);
   $3056 = $3055 << 31 >> 31;
   $3057 = (_i64Add(($3054|0),($3056|0),($3048|0),($3049|0))|0);
   $3058 = tempRet0;
   $3059 = (_bitshift64Ashr(($3057|0),($3058|0),($3008|0))|0);
   $3060 = tempRet0;
   $3061 = (_BOUNDS($3059,$3060,2147483647,0,28,-2147483648,-1,33554432)|0);
   $3062 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $3061;
   $3063 = HEAP32[((33440 + 512|0))>>2]|0;
   $3064 = (_LIM($3063,32767,-32768,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $3064;
   $3065 = HEAP32[((33440 + 516|0))>>2]|0;
   $3066 = (_LIM($3065,32767,-32768,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $3066;
   $3067 = HEAP32[((33440 + 520|0))>>2]|0;
   $3068 = (_LIM($3067,32767,-32768,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $3068;
   $3069 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $3069;
   $3070 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $3070;
   $3071 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $3071;
   $3072 = HEAP8[((33440 + 496|0))>>0]|0;
   HEAP8[((33440 + 492|0))>>0] = $3072;
   $3073 = HEAP8[((33440 + 500|0))>>0]|0;
   HEAP8[((33440 + 496|0))>>0] = $3073;
   $3074 = HEAP32[((33440 + 512|0))>>2]|0;
   $3075 = $3074 >> 4;
   $3076 = (_LIM($3075,255,0,2097152)|0);
   $3077 = $3076&255;
   HEAP8[((33440 + 500|0))>>0] = $3077;
   $3078 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $3078;
   $3079 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $3079;
   $3080 = HEAP32[((33440 + 516|0))>>2]|0;
   $3081 = $3080 >> 4;
   $3082 = (_LIM($3081,255,0,1048576)|0);
   $3083 = $3082&255;
   HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $3083;
   $3084 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $3084;
   $3085 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $3085;
   $3086 = HEAP32[((33440 + 520|0))>>2]|0;
   $3087 = $3086 >> 4;
   $3088 = (_LIM($3087,255,0,524288)|0);
   $3089 = $3088&255;
   HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $3089;
   return;
   break;
  }
  case 63:  {
   $3090 = $gteop & -1048577;
   $3091 = ($3090|0)==(17302591);
   if (!($3091)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $n_v$3115 = 0;
   while(1) {
    $3092 = HEAP16[((33440 + 316|0))>>1]|0;
    $3093 = $3092 << 16 >> 16;
    $3094 = ($3093|0)<(0);
    $3095 = $3094 << 31 >> 31;
    $3096 = (34376 + ($n_v$3115<<2)|0);
    $3097 = HEAP32[$3096>>2]|0;
    $3098 = HEAP16[$3097>>1]|0;
    $3099 = $3098 << 16 >> 16;
    $3100 = ($3099|0)<(0);
    $3101 = $3100 << 31 >> 31;
    $3102 = (___muldi3(($3099|0),($3101|0),($3093|0),($3095|0))|0);
    $3103 = tempRet0;
    $3104 = HEAP16[((((33440 + 316|0)) + 2|0))>>1]|0;
    $3105 = $3104 << 16 >> 16;
    $3106 = (34392 + ($n_v$3115<<2)|0);
    $3107 = HEAP32[$3106>>2]|0;
    $3108 = HEAP16[$3107>>1]|0;
    $3109 = $3108 << 16 >> 16;
    $3110 = Math_imul($3109, $3105)|0;
    $3111 = ($3110|0)<(0);
    $3112 = $3111 << 31 >> 31;
    $3113 = (_i64Add(($3110|0),($3112|0),($3102|0),($3103|0))|0);
    $3114 = tempRet0;
    $3115 = HEAP16[((33440 + 320|0))>>1]|0;
    $3116 = $3115 << 16 >> 16;
    $3117 = (34408 + ($n_v$3115<<2)|0);
    $3118 = HEAP32[$3117>>2]|0;
    $3119 = HEAP16[$3118>>1]|0;
    $3120 = $3119 << 16 >> 16;
    $3121 = Math_imul($3120, $3116)|0;
    $3122 = ($3121|0)<(0);
    $3123 = $3122 << 31 >> 31;
    $3124 = (_i64Add(($3113|0),($3114|0),($3121|0),($3123|0))|0);
    $3125 = tempRet0;
    $3126 = (_bitshift64Ashr(($3124|0),($3125|0),12)|0);
    $3127 = tempRet0;
    $3128 = (_BOUNDS($3126,$3127,2147483647,0,30,-2147483648,-1,134217728)|0);
    $3129 = tempRet0;
    HEAP32[((33440 + 512|0))>>2] = $3128;
    $3130 = HEAP16[((((33440 + 320|0)) + 2|0))>>1]|0;
    $3131 = $3130 << 16 >> 16;
    $3132 = ($3131|0)<(0);
    $3133 = $3132 << 31 >> 31;
    $3134 = HEAP32[$3096>>2]|0;
    $3135 = HEAP16[$3134>>1]|0;
    $3136 = $3135 << 16 >> 16;
    $3137 = ($3136|0)<(0);
    $3138 = $3137 << 31 >> 31;
    $3139 = (___muldi3(($3136|0),($3138|0),($3131|0),($3133|0))|0);
    $3140 = tempRet0;
    $3141 = HEAP16[((33440 + 324|0))>>1]|0;
    $3142 = $3141 << 16 >> 16;
    $3143 = HEAP32[$3106>>2]|0;
    $3144 = HEAP16[$3143>>1]|0;
    $3145 = $3144 << 16 >> 16;
    $3146 = Math_imul($3145, $3142)|0;
    $3147 = ($3146|0)<(0);
    $3148 = $3147 << 31 >> 31;
    $3149 = (_i64Add(($3146|0),($3148|0),($3139|0),($3140|0))|0);
    $3150 = tempRet0;
    $3151 = HEAP16[((((33440 + 324|0)) + 2|0))>>1]|0;
    $3152 = $3151 << 16 >> 16;
    $3153 = HEAP32[$3117>>2]|0;
    $3154 = HEAP16[$3153>>1]|0;
    $3155 = $3154 << 16 >> 16;
    $3156 = Math_imul($3155, $3152)|0;
    $3157 = ($3156|0)<(0);
    $3158 = $3157 << 31 >> 31;
    $3159 = (_i64Add(($3149|0),($3150|0),($3156|0),($3158|0))|0);
    $3160 = tempRet0;
    $3161 = (_bitshift64Ashr(($3159|0),($3160|0),12)|0);
    $3162 = tempRet0;
    $3163 = (_BOUNDS($3161,$3162,2147483647,0,29,-2147483648,-1,67108864)|0);
    $3164 = tempRet0;
    HEAP32[((33440 + 516|0))>>2] = $3163;
    $3165 = HEAP16[((33440 + 328|0))>>1]|0;
    $3166 = $3165 << 16 >> 16;
    $3167 = ($3166|0)<(0);
    $3168 = $3167 << 31 >> 31;
    $3169 = HEAP32[$3096>>2]|0;
    $3170 = HEAP16[$3169>>1]|0;
    $3171 = $3170 << 16 >> 16;
    $3172 = ($3171|0)<(0);
    $3173 = $3172 << 31 >> 31;
    $3174 = (___muldi3(($3171|0),($3173|0),($3166|0),($3168|0))|0);
    $3175 = tempRet0;
    $3176 = HEAP16[((((33440 + 328|0)) + 2|0))>>1]|0;
    $3177 = $3176 << 16 >> 16;
    $3178 = HEAP32[$3106>>2]|0;
    $3179 = HEAP16[$3178>>1]|0;
    $3180 = $3179 << 16 >> 16;
    $3181 = Math_imul($3180, $3177)|0;
    $3182 = ($3181|0)<(0);
    $3183 = $3182 << 31 >> 31;
    $3184 = (_i64Add(($3181|0),($3183|0),($3174|0),($3175|0))|0);
    $3185 = tempRet0;
    $3186 = HEAP16[((33440 + 332|0))>>1]|0;
    $3187 = $3186 << 16 >> 16;
    $3188 = HEAP32[$3117>>2]|0;
    $3189 = HEAP16[$3188>>1]|0;
    $3190 = $3189 << 16 >> 16;
    $3191 = Math_imul($3190, $3187)|0;
    $3192 = ($3191|0)<(0);
    $3193 = $3192 << 31 >> 31;
    $3194 = (_i64Add(($3184|0),($3185|0),($3191|0),($3193|0))|0);
    $3195 = tempRet0;
    $3196 = (_bitshift64Ashr(($3194|0),($3195|0),12)|0);
    $3197 = tempRet0;
    $3198 = (_BOUNDS($3196,$3197,2147483647,0,28,-2147483648,-1,33554432)|0);
    $3199 = tempRet0;
    HEAP32[((33440 + 520|0))>>2] = $3198;
    $3200 = HEAP32[((33440 + 512|0))>>2]|0;
    $3201 = (_LIM($3200,32767,0,-2130706432)|0);
    HEAP32[((33440 + 448|0))>>2] = $3201;
    $3202 = HEAP32[((33440 + 516|0))>>2]|0;
    $3203 = (_LIM($3202,32767,0,-2139095040)|0);
    HEAP32[((33440 + 452|0))>>2] = $3203;
    $3204 = HEAP32[((33440 + 520|0))>>2]|0;
    $3205 = (_LIM($3204,32767,0,4194304)|0);
    HEAP32[((33440 + 456|0))>>2] = $3205;
    $3206 = HEAP32[((33440 + 336|0))>>2]|0;
    $3207 = (_bitshift64Shl(($3206|0),0,12)|0);
    $3208 = tempRet0;
    $3209 = HEAP16[((33440 + 348|0))>>1]|0;
    $3210 = $3209 << 16 >> 16;
    $3211 = HEAP32[((33440 + 448|0))>>2]|0;
    $sext = $3211 << 16;
    $3212 = $sext >> 16;
    $3213 = Math_imul($3212, $3210)|0;
    $3214 = ($3213|0)<(0);
    $3215 = $3214 << 31 >> 31;
    $3216 = (_i64Add(($3213|0),($3215|0),($3207|0),($3208|0))|0);
    $3217 = tempRet0;
    $3218 = HEAP16[((((33440 + 348|0)) + 2|0))>>1]|0;
    $3219 = $3218 << 16 >> 16;
    $3220 = HEAP32[((33440 + 452|0))>>2]|0;
    $sext6 = $3220 << 16;
    $3221 = $sext6 >> 16;
    $3222 = Math_imul($3221, $3219)|0;
    $3223 = ($3222|0)<(0);
    $3224 = $3223 << 31 >> 31;
    $3225 = (_i64Add(($3216|0),($3217|0),($3222|0),($3224|0))|0);
    $3226 = tempRet0;
    $3227 = HEAP16[((33440 + 352|0))>>1]|0;
    $3228 = $3227 << 16 >> 16;
    $sext7 = $3205 << 16;
    $3229 = $sext7 >> 16;
    $3230 = Math_imul($3228, $3229)|0;
    $3231 = ($3230|0)<(0);
    $3232 = $3231 << 31 >> 31;
    $3233 = (_i64Add(($3225|0),($3226|0),($3230|0),($3232|0))|0);
    $3234 = tempRet0;
    $3235 = (_bitshift64Ashr(($3233|0),($3234|0),12)|0);
    $3236 = tempRet0;
    $3237 = (_BOUNDS($3235,$3236,2147483647,0,30,-2147483648,-1,134217728)|0);
    $3238 = tempRet0;
    HEAP32[((33440 + 512|0))>>2] = $3237;
    $3239 = HEAP32[((33440 + 340|0))>>2]|0;
    $3240 = (_bitshift64Shl(($3239|0),0,12)|0);
    $3241 = tempRet0;
    $3242 = HEAP16[((((33440 + 352|0)) + 2|0))>>1]|0;
    $3243 = $3242 << 16 >> 16;
    $3244 = HEAP32[((33440 + 448|0))>>2]|0;
    $sext8 = $3244 << 16;
    $3245 = $sext8 >> 16;
    $3246 = Math_imul($3245, $3243)|0;
    $3247 = ($3246|0)<(0);
    $3248 = $3247 << 31 >> 31;
    $3249 = (_i64Add(($3246|0),($3248|0),($3240|0),($3241|0))|0);
    $3250 = tempRet0;
    $3251 = HEAP16[((33440 + 356|0))>>1]|0;
    $3252 = $3251 << 16 >> 16;
    $3253 = HEAP32[((33440 + 452|0))>>2]|0;
    $sext9 = $3253 << 16;
    $3254 = $sext9 >> 16;
    $3255 = Math_imul($3254, $3252)|0;
    $3256 = ($3255|0)<(0);
    $3257 = $3256 << 31 >> 31;
    $3258 = (_i64Add(($3249|0),($3250|0),($3255|0),($3257|0))|0);
    $3259 = tempRet0;
    $3260 = HEAP16[((((33440 + 356|0)) + 2|0))>>1]|0;
    $3261 = $3260 << 16 >> 16;
    $3262 = HEAP32[((33440 + 456|0))>>2]|0;
    $sext10 = $3262 << 16;
    $3263 = $sext10 >> 16;
    $3264 = Math_imul($3263, $3261)|0;
    $3265 = ($3264|0)<(0);
    $3266 = $3265 << 31 >> 31;
    $3267 = (_i64Add(($3258|0),($3259|0),($3264|0),($3266|0))|0);
    $3268 = tempRet0;
    $3269 = (_bitshift64Ashr(($3267|0),($3268|0),12)|0);
    $3270 = tempRet0;
    $3271 = (_BOUNDS($3269,$3270,2147483647,0,29,-2147483648,-1,67108864)|0);
    $3272 = tempRet0;
    HEAP32[((33440 + 516|0))>>2] = $3271;
    $3273 = HEAP32[((33440 + 344|0))>>2]|0;
    $3274 = (_bitshift64Shl(($3273|0),0,12)|0);
    $3275 = tempRet0;
    $3276 = HEAP16[((33440 + 360|0))>>1]|0;
    $3277 = $3276 << 16 >> 16;
    $3278 = HEAP32[((33440 + 448|0))>>2]|0;
    $sext11 = $3278 << 16;
    $3279 = $sext11 >> 16;
    $3280 = Math_imul($3279, $3277)|0;
    $3281 = ($3280|0)<(0);
    $3282 = $3281 << 31 >> 31;
    $3283 = (_i64Add(($3280|0),($3282|0),($3274|0),($3275|0))|0);
    $3284 = tempRet0;
    $3285 = HEAP16[((((33440 + 360|0)) + 2|0))>>1]|0;
    $3286 = $3285 << 16 >> 16;
    $3287 = HEAP32[((33440 + 452|0))>>2]|0;
    $sext12 = $3287 << 16;
    $3288 = $sext12 >> 16;
    $3289 = Math_imul($3288, $3286)|0;
    $3290 = ($3289|0)<(0);
    $3291 = $3290 << 31 >> 31;
    $3292 = (_i64Add(($3283|0),($3284|0),($3289|0),($3291|0))|0);
    $3293 = tempRet0;
    $3294 = HEAP16[((33440 + 364|0))>>1]|0;
    $3295 = $3294 << 16 >> 16;
    $3296 = HEAP32[((33440 + 456|0))>>2]|0;
    $sext13 = $3296 << 16;
    $3297 = $sext13 >> 16;
    $3298 = Math_imul($3297, $3295)|0;
    $3299 = ($3298|0)<(0);
    $3300 = $3299 << 31 >> 31;
    $3301 = (_i64Add(($3292|0),($3293|0),($3298|0),($3300|0))|0);
    $3302 = tempRet0;
    $3303 = (_bitshift64Ashr(($3301|0),($3302|0),12)|0);
    $3304 = tempRet0;
    $3305 = (_BOUNDS($3303,$3304,2147483647,0,28,-2147483648,-1,33554432)|0);
    $3306 = tempRet0;
    HEAP32[((33440 + 520|0))>>2] = $3305;
    $3307 = HEAP32[((33440 + 512|0))>>2]|0;
    $3308 = (_LIM($3307,32767,0,-2130706432)|0);
    HEAP32[((33440 + 448|0))>>2] = $3308;
    $3309 = HEAP32[((33440 + 516|0))>>2]|0;
    $3310 = (_LIM($3309,32767,0,-2139095040)|0);
    HEAP32[((33440 + 452|0))>>2] = $3310;
    $3311 = HEAP32[((33440 + 520|0))>>2]|0;
    $3312 = (_LIM($3311,32767,0,4194304)|0);
    HEAP32[((33440 + 456|0))>>2] = $3312;
    $3313 = HEAP8[((33440 + 436|0))>>0]|0;
    $3314 = $3313&255;
    $3315 = HEAP32[((33440 + 448|0))>>2]|0;
    $3316 = $3315&65535;
    $3317 = $3316 << 16 >> 16;
    $3318 = ($3317|0)<(0);
    $3319 = $3318 << 31 >> 31;
    $3320 = (___muldi3(($3317|0),($3319|0),($3314|0),0)|0);
    $3321 = tempRet0;
    $3322 = (_bitshift64Ashr(($3320|0),($3321|0),8)|0);
    $3323 = tempRet0;
    $3324 = (_BOUNDS($3322,$3323,2147483647,0,30,-2147483648,-1,134217728)|0);
    $3325 = tempRet0;
    HEAP32[((33440 + 512|0))>>2] = $3324;
    $3326 = HEAP8[((((33440 + 436|0)) + 1|0))>>0]|0;
    $3327 = $3326&255;
    $3328 = HEAP32[((33440 + 452|0))>>2]|0;
    $3329 = $3328&65535;
    $3330 = $3329 << 16 >> 16;
    $3331 = ($3330|0)<(0);
    $3332 = $3331 << 31 >> 31;
    $3333 = (___muldi3(($3330|0),($3332|0),($3327|0),0)|0);
    $3334 = tempRet0;
    $3335 = (_bitshift64Ashr(($3333|0),($3334|0),8)|0);
    $3336 = tempRet0;
    $3337 = (_BOUNDS($3335,$3336,2147483647,0,29,-2147483648,-1,67108864)|0);
    $3338 = tempRet0;
    HEAP32[((33440 + 516|0))>>2] = $3337;
    $3339 = HEAP8[((((33440 + 436|0)) + 2|0))>>0]|0;
    $3340 = $3339&255;
    $3341 = HEAP32[((33440 + 456|0))>>2]|0;
    $3342 = $3341&65535;
    $3343 = $3342 << 16 >> 16;
    $3344 = ($3343|0)<(0);
    $3345 = $3344 << 31 >> 31;
    $3346 = (___muldi3(($3343|0),($3345|0),($3340|0),0)|0);
    $3347 = tempRet0;
    $3348 = (_bitshift64Ashr(($3346|0),($3347|0),8)|0);
    $3349 = tempRet0;
    $3350 = (_BOUNDS($3348,$3349,2147483647,0,28,-2147483648,-1,33554432)|0);
    $3351 = tempRet0;
    HEAP32[((33440 + 520|0))>>2] = $3350;
    $3352 = HEAP32[((33440 + 512|0))>>2]|0;
    $3353 = (_LIM($3352,32767,0,-2130706432)|0);
    HEAP32[((33440 + 448|0))>>2] = $3353;
    $3354 = HEAP32[((33440 + 516|0))>>2]|0;
    $3355 = (_LIM($3354,32767,0,-2139095040)|0);
    HEAP32[((33440 + 452|0))>>2] = $3355;
    $3356 = HEAP32[((33440 + 520|0))>>2]|0;
    $3357 = (_LIM($3356,32767,0,4194304)|0);
    HEAP32[((33440 + 456|0))>>2] = $3357;
    $3358 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $3358;
    $3359 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $3359;
    $3360 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $3360;
    $3361 = HEAP8[((33440 + 496|0))>>0]|0;
    HEAP8[((33440 + 492|0))>>0] = $3361;
    $3362 = HEAP8[((33440 + 500|0))>>0]|0;
    HEAP8[((33440 + 496|0))>>0] = $3362;
    $3363 = HEAP32[((33440 + 512|0))>>2]|0;
    $3364 = $3363 >> 4;
    $3365 = (_LIM($3364,255,0,2097152)|0);
    $3366 = $3365&255;
    HEAP8[((33440 + 500|0))>>0] = $3366;
    $3367 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $3367;
    $3368 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $3368;
    $3369 = HEAP32[((33440 + 516|0))>>2]|0;
    $3370 = $3369 >> 4;
    $3371 = (_LIM($3370,255,0,1048576)|0);
    $3372 = $3371&255;
    HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $3372;
    $3373 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $3373;
    $3374 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $3374;
    $3375 = HEAP32[((33440 + 520|0))>>2]|0;
    $3376 = $3375 >> 4;
    $3377 = (_LIM($3376,255,0,524288)|0);
    $3378 = $3377&255;
    HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $3378;
    $3379 = (($n_v$3115) + 1)|0;
    $exitcond119 = ($3379|0)==(3);
    if ($exitcond119) {
     break;
    } else {
     $n_v$3115 = $3379;
    }
   }
   return;
   break;
  }
  case 6:  {
   if (!((($gteop|0) == 1400006) | (($gteop|0) == 4194310) | (($gteop|0) == 20971526))) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $196 = HEAP16[((33440 + 460|0))>>1]|0;
   $197 = $196 << 16 >> 16;
   $198 = ($197|0)<(0);
   $199 = $198 << 31 >> 31;
   $200 = HEAP16[((((33440 + 464|0)) + 2|0))>>1]|0;
   $201 = $200 << 16 >> 16;
   $202 = ($201|0)<(0);
   $203 = $202 << 31 >> 31;
   $204 = (___muldi3(($201|0),($203|0),($197|0),($199|0))|0);
   $205 = tempRet0;
   $206 = HEAP16[((33440 + 464|0))>>1]|0;
   $207 = $206 << 16 >> 16;
   $208 = HEAP16[((((33440 + 468|0)) + 2|0))>>1]|0;
   $209 = $208 << 16 >> 16;
   $210 = Math_imul($209, $207)|0;
   $211 = ($210|0)<(0);
   $212 = $211 << 31 >> 31;
   $213 = (_i64Add(($210|0),($212|0),($204|0),($205|0))|0);
   $214 = tempRet0;
   $215 = HEAP16[((33440 + 468|0))>>1]|0;
   $216 = $215 << 16 >> 16;
   $217 = HEAP16[((((33440 + 460|0)) + 2|0))>>1]|0;
   $218 = $217 << 16 >> 16;
   $219 = Math_imul($218, $216)|0;
   $220 = ($219|0)<(0);
   $221 = $220 << 31 >> 31;
   $222 = $196 << 16 >> 16;
   $223 = Math_imul($209, $222)|0;
   $224 = ($223|0)<(0);
   $225 = $224 << 31 >> 31;
   $226 = Math_imul($218, $207)|0;
   $227 = ($226|0)<(0);
   $228 = $227 << 31 >> 31;
   $229 = $200 << 16 >> 16;
   $230 = Math_imul($216, $229)|0;
   $231 = ($230|0)<(0);
   $232 = $231 << 31 >> 31;
   $233 = (_i64Subtract(($213|0),($214|0),($223|0),($225|0))|0);
   $234 = tempRet0;
   $235 = (_i64Subtract(($233|0),($234|0),($230|0),($232|0))|0);
   $236 = tempRet0;
   $237 = (_i64Add(($235|0),($236|0),($219|0),($221|0))|0);
   $238 = tempRet0;
   $239 = (_i64Subtract(($237|0),($238|0),($226|0),($228|0))|0);
   $240 = tempRet0;
   $241 = (_BOUNDS($239,$240,2147483647,0,-2147418112,-2147483648,-1,-2147450880)|0);
   $242 = tempRet0;
   HEAP32[((33440 + 508|0))>>2] = $241;
   return;
   break;
  }
  case 12:  {
   $243 = $gteop & 32505856;
   $244 = ($243|0)==(24117248);
   if (!($244)) {
    return;
   }
   $245 = $gteop >>> 19;
   $246 = $245 & 1;
   $247 = (0 - ($246))|0;
   $248 = $247 & 12;
   HEAP32[((33440 + 408|0))>>2] = 0;
   $249 = HEAP32[((33440 + 292|0))>>2]|0;
   $250 = ($249|0)<(0);
   $251 = $250 << 31 >> 31;
   $252 = HEAP32[((33440 + 456|0))>>2]|0;
   $253 = $252&65535;
   $254 = $253 << 16 >> 16;
   $255 = ($254|0)<(0);
   $256 = $255 << 31 >> 31;
   $257 = (___muldi3(($254|0),($256|0),($249|0),($251|0))|0);
   $258 = tempRet0;
   $259 = HEAP32[((33440 + 300|0))>>2]|0;
   $260 = ($259|0)<(0);
   $261 = $260 << 31 >> 31;
   $262 = HEAP32[((33440 + 452|0))>>2]|0;
   $263 = $262&65535;
   $264 = $263 << 16 >> 16;
   $265 = ($264|0)<(0);
   $266 = $265 << 31 >> 31;
   $267 = (___muldi3(($264|0),($266|0),($259|0),($261|0))|0);
   $268 = tempRet0;
   $269 = (_i64Subtract(($257|0),($258|0),($267|0),($268|0))|0);
   $270 = tempRet0;
   $271 = (_bitshift64Ashr(($269|0),($270|0),($248|0))|0);
   $272 = tempRet0;
   $273 = (_BOUNDS($271,$272,2147483647,0,30,-2147483648,-1,134217728)|0);
   $274 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $273;
   $275 = HEAP32[((33440 + 300|0))>>2]|0;
   $276 = ($275|0)<(0);
   $277 = $276 << 31 >> 31;
   $278 = HEAP32[((33440 + 448|0))>>2]|0;
   $279 = $278&65535;
   $280 = $279 << 16 >> 16;
   $281 = ($280|0)<(0);
   $282 = $281 << 31 >> 31;
   $283 = (___muldi3(($280|0),($282|0),($275|0),($277|0))|0);
   $284 = tempRet0;
   $285 = HEAP32[((33440 + 284|0))>>2]|0;
   $286 = ($285|0)<(0);
   $287 = $286 << 31 >> 31;
   $288 = HEAP32[((33440 + 456|0))>>2]|0;
   $289 = $288&65535;
   $290 = $289 << 16 >> 16;
   $291 = ($290|0)<(0);
   $292 = $291 << 31 >> 31;
   $293 = (___muldi3(($290|0),($292|0),($285|0),($287|0))|0);
   $294 = tempRet0;
   $295 = (_i64Subtract(($283|0),($284|0),($293|0),($294|0))|0);
   $296 = tempRet0;
   $297 = (_bitshift64Ashr(($295|0),($296|0),($248|0))|0);
   $298 = tempRet0;
   $299 = (_BOUNDS($297,$298,2147483647,0,29,-2147483648,-1,67108864)|0);
   $300 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $299;
   $301 = HEAP32[((33440 + 284|0))>>2]|0;
   $302 = ($301|0)<(0);
   $303 = $302 << 31 >> 31;
   $304 = HEAP32[((33440 + 452|0))>>2]|0;
   $305 = $304&65535;
   $306 = $305 << 16 >> 16;
   $307 = ($306|0)<(0);
   $308 = $307 << 31 >> 31;
   $309 = (___muldi3(($306|0),($308|0),($301|0),($303|0))|0);
   $310 = tempRet0;
   $311 = HEAP32[((33440 + 292|0))>>2]|0;
   $312 = ($311|0)<(0);
   $313 = $312 << 31 >> 31;
   $314 = HEAP32[((33440 + 448|0))>>2]|0;
   $315 = $314&65535;
   $316 = $315 << 16 >> 16;
   $317 = ($316|0)<(0);
   $318 = $317 << 31 >> 31;
   $319 = (___muldi3(($316|0),($318|0),($311|0),($313|0))|0);
   $320 = tempRet0;
   $321 = (_i64Subtract(($309|0),($310|0),($319|0),($320|0))|0);
   $322 = tempRet0;
   $323 = (_bitshift64Ashr(($321|0),($322|0),($248|0))|0);
   $324 = tempRet0;
   $325 = (_BOUNDS($323,$324,2147483647,0,28,-2147483648,-1,33554432)|0);
   $326 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $325;
   $327 = HEAP32[((33440 + 512|0))>>2]|0;
   $328 = (_LIM($327,32767,-32768,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $328;
   $329 = HEAP32[((33440 + 516|0))>>2]|0;
   $330 = (_LIM($329,32767,-32768,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $330;
   $331 = HEAP32[((33440 + 520|0))>>2]|0;
   $332 = (_LIM($331,32767,-32768,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $332;
   return;
   break;
  }
  case 16:  {
   $333 = ($gteop|0)==(7864336);
   if (!($333)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $334 = HEAP8[((33440 + 436|0))>>0]|0;
   $335 = $334&255;
   $336 = (_bitshift64Shl(($335|0),0,16)|0);
   $337 = tempRet0;
   $338 = HEAP32[((33440 + 444|0))>>2]|0;
   $339 = $338&65535;
   $340 = $339 << 16 >> 16;
   $341 = ($340|0)<(0);
   $342 = $341 << 31 >> 31;
   $343 = HEAP32[((33440 + 368|0))>>2]|0;
   $344 = $334&255;
   $345 = $344 << 4;
   $346 = (($343) - ($345))|0;
   $347 = (_LIM($346,32767,-32768,-2130706432)|0);
   $348 = ($347|0)<(0);
   $349 = $348 << 31 >> 31;
   $350 = (___muldi3(($347|0),($349|0),($340|0),($342|0))|0);
   $351 = tempRet0;
   $352 = (_i64Add(($350|0),($351|0),($336|0),($337|0))|0);
   $353 = tempRet0;
   $354 = (_bitshift64Ashr(($352|0),($353|0),12)|0);
   $355 = tempRet0;
   $356 = (_BOUNDS($354,$355,2147483647,0,30,-2147483648,-1,134217728)|0);
   $357 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $356;
   $358 = HEAP8[((((33440 + 436|0)) + 1|0))>>0]|0;
   $359 = $358&255;
   $360 = (_bitshift64Shl(($359|0),0,16)|0);
   $361 = tempRet0;
   $362 = HEAP32[((33440 + 444|0))>>2]|0;
   $363 = $362&65535;
   $364 = $363 << 16 >> 16;
   $365 = ($364|0)<(0);
   $366 = $365 << 31 >> 31;
   $367 = HEAP32[((33440 + 372|0))>>2]|0;
   $368 = $358&255;
   $369 = $368 << 4;
   $370 = (($367) - ($369))|0;
   $371 = (_LIM($370,32767,-32768,-2130706432)|0);
   $372 = ($371|0)<(0);
   $373 = $372 << 31 >> 31;
   $374 = (___muldi3(($371|0),($373|0),($364|0),($366|0))|0);
   $375 = tempRet0;
   $376 = (_i64Add(($374|0),($375|0),($360|0),($361|0))|0);
   $377 = tempRet0;
   $378 = (_bitshift64Ashr(($376|0),($377|0),12)|0);
   $379 = tempRet0;
   $380 = (_BOUNDS($378,$379,2147483647,0,29,-2147483648,-1,67108864)|0);
   $381 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $380;
   $382 = HEAP8[((((33440 + 436|0)) + 2|0))>>0]|0;
   $383 = $382&255;
   $384 = (_bitshift64Shl(($383|0),0,16)|0);
   $385 = tempRet0;
   $386 = HEAP32[((33440 + 444|0))>>2]|0;
   $387 = $386&65535;
   $388 = $387 << 16 >> 16;
   $389 = ($388|0)<(0);
   $390 = $389 << 31 >> 31;
   $391 = HEAP32[((33440 + 376|0))>>2]|0;
   $392 = $382&255;
   $393 = $392 << 4;
   $394 = (($391) - ($393))|0;
   $395 = (_LIM($394,32767,-32768,-2130706432)|0);
   $396 = ($395|0)<(0);
   $397 = $396 << 31 >> 31;
   $398 = (___muldi3(($395|0),($397|0),($388|0),($390|0))|0);
   $399 = tempRet0;
   $400 = (_i64Add(($398|0),($399|0),($384|0),($385|0))|0);
   $401 = tempRet0;
   $402 = (_bitshift64Ashr(($400|0),($401|0),12)|0);
   $403 = tempRet0;
   $404 = (_BOUNDS($402,$403,2147483647,0,28,-2147483648,-1,33554432)|0);
   $405 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $404;
   $406 = HEAP32[((33440 + 512|0))>>2]|0;
   $407 = (_LIM($406,32767,-32768,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $407;
   $408 = HEAP32[((33440 + 516|0))>>2]|0;
   $409 = (_LIM($408,32767,-32768,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $409;
   $410 = HEAP32[((33440 + 520|0))>>2]|0;
   $411 = (_LIM($410,32767,-32768,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $411;
   $412 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $412;
   $413 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $413;
   $414 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $414;
   $415 = HEAP8[((33440 + 496|0))>>0]|0;
   HEAP8[((33440 + 492|0))>>0] = $415;
   $416 = HEAP8[((33440 + 500|0))>>0]|0;
   HEAP8[((33440 + 496|0))>>0] = $416;
   $417 = HEAP32[((33440 + 512|0))>>2]|0;
   $418 = $417 >> 4;
   $419 = (_LIM($418,255,0,2097152)|0);
   $420 = $419&255;
   HEAP8[((33440 + 500|0))>>0] = $420;
   $421 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $421;
   $422 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $422;
   $423 = HEAP32[((33440 + 516|0))>>2]|0;
   $424 = $423 >> 4;
   $425 = (_LIM($424,255,0,1048576)|0);
   $426 = $425&255;
   HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $426;
   $427 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $427;
   $428 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $428;
   $429 = HEAP32[((33440 + 520|0))>>2]|0;
   $430 = $429 >> 4;
   $431 = (_LIM($430,255,0,524288)|0);
   $432 = $431&255;
   HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $432;
   return;
   break;
  }
  case 17:  {
   $433 = ($gteop|0)==(9961489);
   if (!($433)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $434 = HEAP32[((33440 + 448|0))>>2]|0;
   $435 = $434&65535;
   $436 = $435 << 16 >> 16;
   $437 = ($436|0)<(0);
   $438 = $437 << 31 >> 31;
   $439 = (_bitshift64Shl(($436|0),($438|0),12)|0);
   $440 = tempRet0;
   $441 = HEAP32[((33440 + 444|0))>>2]|0;
   $442 = $441&65535;
   $443 = $442 << 16 >> 16;
   $444 = ($443|0)<(0);
   $445 = $444 << 31 >> 31;
   $446 = HEAP32[((33440 + 368|0))>>2]|0;
   $sext101 = $434 << 16;
   $447 = $sext101 >> 16;
   $448 = (($446) - ($447))|0;
   $449 = (_LIM($448,32767,-32768,-2130706432)|0);
   $450 = ($449|0)<(0);
   $451 = $450 << 31 >> 31;
   $452 = (___muldi3(($449|0),($451|0),($443|0),($445|0))|0);
   $453 = tempRet0;
   $454 = (_i64Add(($452|0),($453|0),($439|0),($440|0))|0);
   $455 = tempRet0;
   $456 = (_bitshift64Ashr(($454|0),($455|0),12)|0);
   $457 = tempRet0;
   $458 = (_BOUNDS($456,$457,2147483647,0,30,-2147483648,-1,134217728)|0);
   $459 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $458;
   $460 = HEAP32[((33440 + 452|0))>>2]|0;
   $461 = $460&65535;
   $462 = $461 << 16 >> 16;
   $463 = ($462|0)<(0);
   $464 = $463 << 31 >> 31;
   $465 = (_bitshift64Shl(($462|0),($464|0),12)|0);
   $466 = tempRet0;
   $467 = HEAP32[((33440 + 444|0))>>2]|0;
   $468 = $467&65535;
   $469 = $468 << 16 >> 16;
   $470 = ($469|0)<(0);
   $471 = $470 << 31 >> 31;
   $472 = HEAP32[((33440 + 372|0))>>2]|0;
   $sext102 = $460 << 16;
   $473 = $sext102 >> 16;
   $474 = (($472) - ($473))|0;
   $475 = (_LIM($474,32767,-32768,-2130706432)|0);
   $476 = ($475|0)<(0);
   $477 = $476 << 31 >> 31;
   $478 = (___muldi3(($475|0),($477|0),($469|0),($471|0))|0);
   $479 = tempRet0;
   $480 = (_i64Add(($478|0),($479|0),($465|0),($466|0))|0);
   $481 = tempRet0;
   $482 = (_bitshift64Ashr(($480|0),($481|0),12)|0);
   $483 = tempRet0;
   $484 = (_BOUNDS($482,$483,2147483647,0,29,-2147483648,-1,67108864)|0);
   $485 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $484;
   $486 = HEAP32[((33440 + 456|0))>>2]|0;
   $487 = $486&65535;
   $488 = $487 << 16 >> 16;
   $489 = ($488|0)<(0);
   $490 = $489 << 31 >> 31;
   $491 = (_bitshift64Shl(($488|0),($490|0),12)|0);
   $492 = tempRet0;
   $493 = HEAP32[((33440 + 444|0))>>2]|0;
   $494 = $493&65535;
   $495 = $494 << 16 >> 16;
   $496 = ($495|0)<(0);
   $497 = $496 << 31 >> 31;
   $498 = HEAP32[((33440 + 376|0))>>2]|0;
   $sext103 = $486 << 16;
   $499 = $sext103 >> 16;
   $500 = (($498) - ($499))|0;
   $501 = (_LIM($500,32767,-32768,-2130706432)|0);
   $502 = ($501|0)<(0);
   $503 = $502 << 31 >> 31;
   $504 = (___muldi3(($501|0),($503|0),($495|0),($497|0))|0);
   $505 = tempRet0;
   $506 = (_i64Add(($504|0),($505|0),($491|0),($492|0))|0);
   $507 = tempRet0;
   $508 = (_bitshift64Ashr(($506|0),($507|0),12)|0);
   $509 = tempRet0;
   $510 = (_BOUNDS($508,$509,2147483647,0,28,-2147483648,-1,33554432)|0);
   $511 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $510;
   $512 = HEAP32[((33440 + 512|0))>>2]|0;
   $513 = (_LIM($512,32767,-32768,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $513;
   $514 = HEAP32[((33440 + 516|0))>>2]|0;
   $515 = (_LIM($514,32767,-32768,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $515;
   $516 = HEAP32[((33440 + 520|0))>>2]|0;
   $517 = (_LIM($516,32767,-32768,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $517;
   $518 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $518;
   $519 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $519;
   $520 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $520;
   $521 = HEAP8[((33440 + 496|0))>>0]|0;
   HEAP8[((33440 + 492|0))>>0] = $521;
   $522 = HEAP8[((33440 + 500|0))>>0]|0;
   HEAP8[((33440 + 496|0))>>0] = $522;
   $523 = HEAP32[((33440 + 512|0))>>2]|0;
   $524 = (_LIM($523,255,0,2097152)|0);
   $525 = $524&255;
   HEAP8[((33440 + 500|0))>>0] = $525;
   $526 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $526;
   $527 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $527;
   $528 = HEAP32[((33440 + 516|0))>>2]|0;
   $529 = (_LIM($528,255,0,1048576)|0);
   $530 = $529&255;
   HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $530;
   $531 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $531;
   $532 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $532;
   $533 = HEAP32[((33440 + 520|0))>>2]|0;
   $534 = (_LIM($533,255,0,524288)|0);
   $535 = $534&255;
   HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $535;
   return;
   break;
  }
  case 18:  {
   $536 = $gteop & 32505856;
   $537 = ($536|0)==(4194304);
   if (!($537)) {
    return;
   }
   $538 = $gteop >>> 19;
   $539 = $538 & 1;
   $540 = (0 - ($539))|0;
   $541 = $540 & 12;
   $542 = $gteop >>> 17;
   $543 = $542 & 3;
   $544 = (34584 + ($543<<2)|0);
   $545 = HEAP32[$544>>2]|0;
   $546 = $gteop >>> 15;
   $547 = $546 & 3;
   $548 = ($547|0)==(3);
   if ($548) {
    $558 = HEAP32[((33440 + 448|0))>>2]|0;
    $559 = $558&65535;
    $560 = HEAP32[((33440 + 452|0))>>2]|0;
    $561 = $560&65535;
    $562 = HEAP32[((33440 + 456|0))>>2]|0;
    $563 = $562&65535;
    $n_v1$0 = $559;$n_v2$0 = $561;$n_v3$0 = $563;
   } else {
    $549 = (34376 + ($547<<2)|0);
    $550 = HEAP32[$549>>2]|0;
    $551 = HEAP16[$550>>1]|0;
    $552 = (34392 + ($547<<2)|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = HEAP16[$553>>1]|0;
    $555 = (34408 + ($547<<2)|0);
    $556 = HEAP32[$555>>2]|0;
    $557 = HEAP16[$556>>1]|0;
    $n_v1$0 = $551;$n_v2$0 = $554;$n_v3$0 = $557;
   }
   $564 = $gteop >>> 13;
   $565 = $564 & 3;
   $566 = (34664 + ($565<<2)|0);
   $567 = HEAP32[$566>>2]|0;
   HEAP32[((33440 + 408|0))>>2] = 0;
   $568 = HEAP32[$567>>2]|0;
   $569 = HEAP32[$568>>2]|0;
   $570 = ($569|0)<(0);
   $571 = $570 << 31 >> 31;
   $572 = (_bitshift64Shl(($569|0),($571|0),12)|0);
   $573 = tempRet0;
   $574 = HEAP32[$545>>2]|0;
   $575 = HEAP16[$574>>1]|0;
   $576 = $575 << 16 >> 16;
   $577 = $n_v1$0 << 16 >> 16;
   $578 = Math_imul($576, $577)|0;
   $579 = ($578|0)<(0);
   $580 = $579 << 31 >> 31;
   $581 = (_i64Add(($578|0),($580|0),($572|0),($573|0))|0);
   $582 = tempRet0;
   $583 = (($545) + 4|0);
   $584 = HEAP32[$583>>2]|0;
   $585 = HEAP16[$584>>1]|0;
   $586 = $585 << 16 >> 16;
   $587 = $n_v2$0 << 16 >> 16;
   $588 = Math_imul($586, $587)|0;
   $589 = ($588|0)<(0);
   $590 = $589 << 31 >> 31;
   $591 = (_i64Add(($581|0),($582|0),($588|0),($590|0))|0);
   $592 = tempRet0;
   $593 = (($545) + 8|0);
   $594 = HEAP32[$593>>2]|0;
   $595 = HEAP16[$594>>1]|0;
   $596 = $595 << 16 >> 16;
   $597 = $n_v3$0 << 16 >> 16;
   $598 = Math_imul($596, $597)|0;
   $599 = ($598|0)<(0);
   $600 = $599 << 31 >> 31;
   $601 = (_i64Add(($591|0),($592|0),($598|0),($600|0))|0);
   $602 = tempRet0;
   $603 = (_bitshift64Ashr(($601|0),($602|0),($541|0))|0);
   $604 = tempRet0;
   $605 = (_BOUNDS($603,$604,2147483647,0,30,-2147483648,-1,134217728)|0);
   $606 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $605;
   $607 = (($567) + 4|0);
   $608 = HEAP32[$607>>2]|0;
   $609 = HEAP32[$608>>2]|0;
   $610 = ($609|0)<(0);
   $611 = $610 << 31 >> 31;
   $612 = (_bitshift64Shl(($609|0),($611|0),12)|0);
   $613 = tempRet0;
   $614 = (($545) + 12|0);
   $615 = HEAP32[$614>>2]|0;
   $616 = HEAP16[$615>>1]|0;
   $617 = $616 << 16 >> 16;
   $618 = Math_imul($617, $577)|0;
   $619 = ($618|0)<(0);
   $620 = $619 << 31 >> 31;
   $621 = (_i64Add(($618|0),($620|0),($612|0),($613|0))|0);
   $622 = tempRet0;
   $623 = (($545) + 16|0);
   $624 = HEAP32[$623>>2]|0;
   $625 = HEAP16[$624>>1]|0;
   $626 = $625 << 16 >> 16;
   $627 = Math_imul($626, $587)|0;
   $628 = ($627|0)<(0);
   $629 = $628 << 31 >> 31;
   $630 = (_i64Add(($621|0),($622|0),($627|0),($629|0))|0);
   $631 = tempRet0;
   $632 = (($545) + 20|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = HEAP16[$633>>1]|0;
   $635 = $634 << 16 >> 16;
   $636 = Math_imul($635, $597)|0;
   $637 = ($636|0)<(0);
   $638 = $637 << 31 >> 31;
   $639 = (_i64Add(($630|0),($631|0),($636|0),($638|0))|0);
   $640 = tempRet0;
   $641 = (_bitshift64Ashr(($639|0),($640|0),($541|0))|0);
   $642 = tempRet0;
   $643 = (_BOUNDS($641,$642,2147483647,0,29,-2147483648,-1,67108864)|0);
   $644 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $643;
   $645 = (($567) + 8|0);
   $646 = HEAP32[$645>>2]|0;
   $647 = HEAP32[$646>>2]|0;
   $648 = ($647|0)<(0);
   $649 = $648 << 31 >> 31;
   $650 = (_bitshift64Shl(($647|0),($649|0),12)|0);
   $651 = tempRet0;
   $652 = (($545) + 24|0);
   $653 = HEAP32[$652>>2]|0;
   $654 = HEAP16[$653>>1]|0;
   $655 = $654 << 16 >> 16;
   $656 = Math_imul($655, $577)|0;
   $657 = ($656|0)<(0);
   $658 = $657 << 31 >> 31;
   $659 = (_i64Add(($656|0),($658|0),($650|0),($651|0))|0);
   $660 = tempRet0;
   $661 = (($545) + 28|0);
   $662 = HEAP32[$661>>2]|0;
   $663 = HEAP16[$662>>1]|0;
   $664 = $663 << 16 >> 16;
   $665 = Math_imul($664, $587)|0;
   $666 = ($665|0)<(0);
   $667 = $666 << 31 >> 31;
   $668 = (_i64Add(($659|0),($660|0),($665|0),($667|0))|0);
   $669 = tempRet0;
   $670 = (($545) + 32|0);
   $671 = HEAP32[$670>>2]|0;
   $672 = HEAP16[$671>>1]|0;
   $673 = $672 << 16 >> 16;
   $674 = Math_imul($673, $597)|0;
   $675 = ($674|0)<(0);
   $676 = $675 << 31 >> 31;
   $677 = (_i64Add(($668|0),($669|0),($674|0),($676|0))|0);
   $678 = tempRet0;
   $679 = (_bitshift64Ashr(($677|0),($678|0),($541|0))|0);
   $680 = tempRet0;
   $681 = (_BOUNDS($679,$680,2147483647,0,28,-2147483648,-1,33554432)|0);
   $682 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $681;
   $683 = HEAP32[((33440 + 512|0))>>2]|0;
   $684 = $gteop >>> 10;
   $$lobit = $684 & 1;
   $685 = $$lobit ^ 1;
   $686 = (0 - ($685))|0;
   $687 = $686 & -32768;
   $688 = (_LIM($683,32767,$687,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $688;
   $689 = HEAP32[((33440 + 516|0))>>2]|0;
   $690 = (_LIM($689,32767,$687,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $690;
   $691 = HEAP32[((33440 + 520|0))>>2]|0;
   $692 = (_LIM($691,32767,$687,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $692;
   return;
   break;
  }
  case 19:  {
   $693 = ($gteop|0)==(15205395);
   if (!($693)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $694 = HEAP16[((33440 + 316|0))>>1]|0;
   $695 = $694 << 16 >> 16;
   $696 = ($695|0)<(0);
   $697 = $696 << 31 >> 31;
   $698 = HEAP16[((33440 + 412|0))>>1]|0;
   $699 = $698 << 16 >> 16;
   $700 = ($699|0)<(0);
   $701 = $700 << 31 >> 31;
   $702 = (___muldi3(($699|0),($701|0),($695|0),($697|0))|0);
   $703 = tempRet0;
   $704 = HEAP16[((((33440 + 316|0)) + 2|0))>>1]|0;
   $705 = $704 << 16 >> 16;
   $706 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $707 = $706 << 16 >> 16;
   $708 = Math_imul($707, $705)|0;
   $709 = ($708|0)<(0);
   $710 = $709 << 31 >> 31;
   $711 = (_i64Add(($708|0),($710|0),($702|0),($703|0))|0);
   $712 = tempRet0;
   $713 = HEAP16[((33440 + 320|0))>>1]|0;
   $714 = $713 << 16 >> 16;
   $715 = HEAP16[((33440 + 416|0))>>1]|0;
   $716 = $715 << 16 >> 16;
   $717 = Math_imul($716, $714)|0;
   $718 = ($717|0)<(0);
   $719 = $718 << 31 >> 31;
   $720 = (_i64Add(($711|0),($712|0),($717|0),($719|0))|0);
   $721 = tempRet0;
   $722 = (_bitshift64Ashr(($720|0),($721|0),12)|0);
   $723 = tempRet0;
   $724 = (_BOUNDS($722,$723,2147483647,0,30,-2147483648,-1,134217728)|0);
   $725 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $724;
   $726 = HEAP16[((((33440 + 320|0)) + 2|0))>>1]|0;
   $727 = $726 << 16 >> 16;
   $728 = ($727|0)<(0);
   $729 = $728 << 31 >> 31;
   $730 = HEAP16[((33440 + 412|0))>>1]|0;
   $731 = $730 << 16 >> 16;
   $732 = ($731|0)<(0);
   $733 = $732 << 31 >> 31;
   $734 = (___muldi3(($731|0),($733|0),($727|0),($729|0))|0);
   $735 = tempRet0;
   $736 = HEAP16[((33440 + 324|0))>>1]|0;
   $737 = $736 << 16 >> 16;
   $738 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $739 = $738 << 16 >> 16;
   $740 = Math_imul($739, $737)|0;
   $741 = ($740|0)<(0);
   $742 = $741 << 31 >> 31;
   $743 = (_i64Add(($740|0),($742|0),($734|0),($735|0))|0);
   $744 = tempRet0;
   $745 = HEAP16[((((33440 + 324|0)) + 2|0))>>1]|0;
   $746 = $745 << 16 >> 16;
   $747 = HEAP16[((33440 + 416|0))>>1]|0;
   $748 = $747 << 16 >> 16;
   $749 = Math_imul($748, $746)|0;
   $750 = ($749|0)<(0);
   $751 = $750 << 31 >> 31;
   $752 = (_i64Add(($743|0),($744|0),($749|0),($751|0))|0);
   $753 = tempRet0;
   $754 = (_bitshift64Ashr(($752|0),($753|0),12)|0);
   $755 = tempRet0;
   $756 = (_BOUNDS($754,$755,2147483647,0,29,-2147483648,-1,67108864)|0);
   $757 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $756;
   $758 = HEAP16[((33440 + 328|0))>>1]|0;
   $759 = $758 << 16 >> 16;
   $760 = ($759|0)<(0);
   $761 = $760 << 31 >> 31;
   $762 = HEAP16[((33440 + 412|0))>>1]|0;
   $763 = $762 << 16 >> 16;
   $764 = ($763|0)<(0);
   $765 = $764 << 31 >> 31;
   $766 = (___muldi3(($763|0),($765|0),($759|0),($761|0))|0);
   $767 = tempRet0;
   $768 = HEAP16[((((33440 + 328|0)) + 2|0))>>1]|0;
   $769 = $768 << 16 >> 16;
   $770 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $771 = $770 << 16 >> 16;
   $772 = Math_imul($771, $769)|0;
   $773 = ($772|0)<(0);
   $774 = $773 << 31 >> 31;
   $775 = (_i64Add(($772|0),($774|0),($766|0),($767|0))|0);
   $776 = tempRet0;
   $777 = HEAP16[((33440 + 332|0))>>1]|0;
   $778 = $777 << 16 >> 16;
   $779 = HEAP16[((33440 + 416|0))>>1]|0;
   $780 = $779 << 16 >> 16;
   $781 = Math_imul($780, $778)|0;
   $782 = ($781|0)<(0);
   $783 = $782 << 31 >> 31;
   $784 = (_i64Add(($775|0),($776|0),($781|0),($783|0))|0);
   $785 = tempRet0;
   $786 = (_bitshift64Ashr(($784|0),($785|0),12)|0);
   $787 = tempRet0;
   $788 = (_BOUNDS($786,$787,2147483647,0,28,-2147483648,-1,33554432)|0);
   $789 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $788;
   $790 = HEAP32[((33440 + 512|0))>>2]|0;
   $791 = (_LIM($790,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $791;
   $792 = HEAP32[((33440 + 516|0))>>2]|0;
   $793 = (_LIM($792,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $793;
   $794 = HEAP32[((33440 + 520|0))>>2]|0;
   $795 = (_LIM($794,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $795;
   $796 = HEAP32[((33440 + 336|0))>>2]|0;
   $797 = (_bitshift64Shl(($796|0),0,12)|0);
   $798 = tempRet0;
   $799 = HEAP16[((33440 + 348|0))>>1]|0;
   $800 = $799 << 16 >> 16;
   $801 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext86 = $801 << 16;
   $802 = $sext86 >> 16;
   $803 = Math_imul($802, $800)|0;
   $804 = ($803|0)<(0);
   $805 = $804 << 31 >> 31;
   $806 = (_i64Add(($803|0),($805|0),($797|0),($798|0))|0);
   $807 = tempRet0;
   $808 = HEAP16[((((33440 + 348|0)) + 2|0))>>1]|0;
   $809 = $808 << 16 >> 16;
   $810 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext87 = $810 << 16;
   $811 = $sext87 >> 16;
   $812 = Math_imul($811, $809)|0;
   $813 = ($812|0)<(0);
   $814 = $813 << 31 >> 31;
   $815 = (_i64Add(($806|0),($807|0),($812|0),($814|0))|0);
   $816 = tempRet0;
   $817 = HEAP16[((33440 + 352|0))>>1]|0;
   $818 = $817 << 16 >> 16;
   $sext88 = $795 << 16;
   $819 = $sext88 >> 16;
   $820 = Math_imul($818, $819)|0;
   $821 = ($820|0)<(0);
   $822 = $821 << 31 >> 31;
   $823 = (_i64Add(($815|0),($816|0),($820|0),($822|0))|0);
   $824 = tempRet0;
   $825 = (_bitshift64Ashr(($823|0),($824|0),12)|0);
   $826 = tempRet0;
   $827 = (_BOUNDS($825,$826,2147483647,0,30,-2147483648,-1,134217728)|0);
   $828 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $827;
   $829 = HEAP32[((33440 + 340|0))>>2]|0;
   $830 = (_bitshift64Shl(($829|0),0,12)|0);
   $831 = tempRet0;
   $832 = HEAP16[((((33440 + 352|0)) + 2|0))>>1]|0;
   $833 = $832 << 16 >> 16;
   $834 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext89 = $834 << 16;
   $835 = $sext89 >> 16;
   $836 = Math_imul($835, $833)|0;
   $837 = ($836|0)<(0);
   $838 = $837 << 31 >> 31;
   $839 = (_i64Add(($836|0),($838|0),($830|0),($831|0))|0);
   $840 = tempRet0;
   $841 = HEAP16[((33440 + 356|0))>>1]|0;
   $842 = $841 << 16 >> 16;
   $843 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext90 = $843 << 16;
   $844 = $sext90 >> 16;
   $845 = Math_imul($844, $842)|0;
   $846 = ($845|0)<(0);
   $847 = $846 << 31 >> 31;
   $848 = (_i64Add(($839|0),($840|0),($845|0),($847|0))|0);
   $849 = tempRet0;
   $850 = HEAP16[((((33440 + 356|0)) + 2|0))>>1]|0;
   $851 = $850 << 16 >> 16;
   $852 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext91 = $852 << 16;
   $853 = $sext91 >> 16;
   $854 = Math_imul($853, $851)|0;
   $855 = ($854|0)<(0);
   $856 = $855 << 31 >> 31;
   $857 = (_i64Add(($848|0),($849|0),($854|0),($856|0))|0);
   $858 = tempRet0;
   $859 = (_bitshift64Ashr(($857|0),($858|0),12)|0);
   $860 = tempRet0;
   $861 = (_BOUNDS($859,$860,2147483647,0,29,-2147483648,-1,67108864)|0);
   $862 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $861;
   $863 = HEAP32[((33440 + 344|0))>>2]|0;
   $864 = (_bitshift64Shl(($863|0),0,12)|0);
   $865 = tempRet0;
   $866 = HEAP16[((33440 + 360|0))>>1]|0;
   $867 = $866 << 16 >> 16;
   $868 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext92 = $868 << 16;
   $869 = $sext92 >> 16;
   $870 = Math_imul($869, $867)|0;
   $871 = ($870|0)<(0);
   $872 = $871 << 31 >> 31;
   $873 = (_i64Add(($870|0),($872|0),($864|0),($865|0))|0);
   $874 = tempRet0;
   $875 = HEAP16[((((33440 + 360|0)) + 2|0))>>1]|0;
   $876 = $875 << 16 >> 16;
   $877 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext93 = $877 << 16;
   $878 = $sext93 >> 16;
   $879 = Math_imul($878, $876)|0;
   $880 = ($879|0)<(0);
   $881 = $880 << 31 >> 31;
   $882 = (_i64Add(($873|0),($874|0),($879|0),($881|0))|0);
   $883 = tempRet0;
   $884 = HEAP16[((33440 + 364|0))>>1]|0;
   $885 = $884 << 16 >> 16;
   $886 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext94 = $886 << 16;
   $887 = $sext94 >> 16;
   $888 = Math_imul($887, $885)|0;
   $889 = ($888|0)<(0);
   $890 = $889 << 31 >> 31;
   $891 = (_i64Add(($882|0),($883|0),($888|0),($890|0))|0);
   $892 = tempRet0;
   $893 = (_bitshift64Ashr(($891|0),($892|0),12)|0);
   $894 = tempRet0;
   $895 = (_BOUNDS($893,$894,2147483647,0,28,-2147483648,-1,33554432)|0);
   $896 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $895;
   $897 = HEAP32[((33440 + 512|0))>>2]|0;
   $898 = (_LIM($897,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $898;
   $899 = HEAP32[((33440 + 516|0))>>2]|0;
   $900 = (_LIM($899,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $900;
   $901 = HEAP32[((33440 + 520|0))>>2]|0;
   $902 = (_LIM($901,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $902;
   $903 = HEAP8[((33440 + 436|0))>>0]|0;
   $904 = $903&255;
   $905 = (_bitshift64Shl(($904|0),0,4)|0);
   $906 = tempRet0;
   $907 = HEAP32[((33440 + 448|0))>>2]|0;
   $908 = $907&65535;
   $909 = $908 << 16 >> 16;
   $910 = ($909|0)<(0);
   $911 = $910 << 31 >> 31;
   $912 = (___muldi3(($905|0),($906|0),($909|0),($911|0))|0);
   $913 = tempRet0;
   $914 = HEAP32[((33440 + 444|0))>>2]|0;
   $sext95 = $914 << 16;
   $915 = $sext95 >> 16;
   $916 = HEAP32[((33440 + 368|0))>>2]|0;
   $917 = $903&255;
   $sext96 = $907 << 16;
   $918 = $sext96 >> 16;
   $919 = Math_imul($918, $917)|0;
   $920 = $919 >> 8;
   $921 = (($916) - ($920))|0;
   $922 = (_LIM($921,32767,-32768,-2130706432)|0);
   $923 = Math_imul($915, $922)|0;
   $924 = ($923|0)<(0);
   $925 = $924 << 31 >> 31;
   $926 = (_i64Add(($923|0),($925|0),($912|0),($913|0))|0);
   $927 = tempRet0;
   $928 = (_bitshift64Ashr(($926|0),($927|0),12)|0);
   $929 = tempRet0;
   $930 = (_BOUNDS($928,$929,2147483647,0,30,-2147483648,-1,134217728)|0);
   $931 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $930;
   $932 = HEAP8[((((33440 + 436|0)) + 1|0))>>0]|0;
   $933 = $932&255;
   $934 = (_bitshift64Shl(($933|0),0,4)|0);
   $935 = tempRet0;
   $936 = HEAP32[((33440 + 452|0))>>2]|0;
   $937 = $936&65535;
   $938 = $937 << 16 >> 16;
   $939 = ($938|0)<(0);
   $940 = $939 << 31 >> 31;
   $941 = (___muldi3(($934|0),($935|0),($938|0),($940|0))|0);
   $942 = tempRet0;
   $943 = HEAP32[((33440 + 444|0))>>2]|0;
   $sext97 = $943 << 16;
   $944 = $sext97 >> 16;
   $945 = HEAP32[((33440 + 372|0))>>2]|0;
   $946 = $932&255;
   $sext98 = $936 << 16;
   $947 = $sext98 >> 16;
   $948 = Math_imul($947, $946)|0;
   $949 = $948 >> 8;
   $950 = (($945) - ($949))|0;
   $951 = (_LIM($950,32767,-32768,-2139095040)|0);
   $952 = Math_imul($944, $951)|0;
   $953 = ($952|0)<(0);
   $954 = $953 << 31 >> 31;
   $955 = (_i64Add(($952|0),($954|0),($941|0),($942|0))|0);
   $956 = tempRet0;
   $957 = (_bitshift64Ashr(($955|0),($956|0),12)|0);
   $958 = tempRet0;
   $959 = (_BOUNDS($957,$958,2147483647,0,29,-2147483648,-1,67108864)|0);
   $960 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $959;
   $961 = HEAP8[((((33440 + 436|0)) + 2|0))>>0]|0;
   $962 = $961&255;
   $963 = (_bitshift64Shl(($962|0),0,4)|0);
   $964 = tempRet0;
   $965 = HEAP32[((33440 + 456|0))>>2]|0;
   $966 = $965&65535;
   $967 = $966 << 16 >> 16;
   $968 = ($967|0)<(0);
   $969 = $968 << 31 >> 31;
   $970 = (___muldi3(($963|0),($964|0),($967|0),($969|0))|0);
   $971 = tempRet0;
   $972 = HEAP32[((33440 + 444|0))>>2]|0;
   $sext99 = $972 << 16;
   $973 = $sext99 >> 16;
   $974 = HEAP32[((33440 + 376|0))>>2]|0;
   $975 = $961&255;
   $sext100 = $965 << 16;
   $976 = $sext100 >> 16;
   $977 = Math_imul($976, $975)|0;
   $978 = $977 >> 8;
   $979 = (($974) - ($978))|0;
   $980 = (_LIM($979,32767,-32768,4194304)|0);
   $981 = Math_imul($973, $980)|0;
   $982 = ($981|0)<(0);
   $983 = $982 << 31 >> 31;
   $984 = (_i64Add(($981|0),($983|0),($970|0),($971|0))|0);
   $985 = tempRet0;
   $986 = (_bitshift64Ashr(($984|0),($985|0),12)|0);
   $987 = tempRet0;
   $988 = (_BOUNDS($986,$987,2147483647,0,28,-2147483648,-1,33554432)|0);
   $989 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $988;
   $990 = HEAP32[((33440 + 512|0))>>2]|0;
   $991 = (_LIM($990,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $991;
   $992 = HEAP32[((33440 + 516|0))>>2]|0;
   $993 = (_LIM($992,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $993;
   $994 = HEAP32[((33440 + 520|0))>>2]|0;
   $995 = (_LIM($994,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $995;
   $996 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $996;
   $997 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $997;
   $998 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $998;
   $999 = HEAP8[((33440 + 496|0))>>0]|0;
   HEAP8[((33440 + 492|0))>>0] = $999;
   $1000 = HEAP8[((33440 + 500|0))>>0]|0;
   HEAP8[((33440 + 496|0))>>0] = $1000;
   $1001 = HEAP32[((33440 + 512|0))>>2]|0;
   $1002 = $1001 >> 4;
   $1003 = (_LIM($1002,255,0,2097152)|0);
   $1004 = $1003&255;
   HEAP8[((33440 + 500|0))>>0] = $1004;
   $1005 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $1005;
   $1006 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $1006;
   $1007 = HEAP32[((33440 + 516|0))>>2]|0;
   $1008 = $1007 >> 4;
   $1009 = (_LIM($1008,255,0,1048576)|0);
   $1010 = $1009&255;
   HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $1010;
   $1011 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $1011;
   $1012 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $1012;
   $1013 = HEAP32[((33440 + 520|0))>>2]|0;
   $1014 = $1013 >> 4;
   $1015 = (_LIM($1014,255,0,524288)|0);
   $1016 = $1015&255;
   HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $1016;
   return;
   break;
  }
  case 20:  {
   $1017 = ($gteop|0)==(19399700);
   if (!($1017)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $1018 = HEAP32[((33440 + 336|0))>>2]|0;
   $1019 = (_bitshift64Shl(($1018|0),0,12)|0);
   $1020 = tempRet0;
   $1021 = HEAP16[((33440 + 348|0))>>1]|0;
   $1022 = $1021 << 16 >> 16;
   $1023 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext71 = $1023 << 16;
   $1024 = $sext71 >> 16;
   $1025 = Math_imul($1024, $1022)|0;
   $1026 = ($1025|0)<(0);
   $1027 = $1026 << 31 >> 31;
   $1028 = (_i64Add(($1025|0),($1027|0),($1019|0),($1020|0))|0);
   $1029 = tempRet0;
   $1030 = HEAP16[((((33440 + 348|0)) + 2|0))>>1]|0;
   $1031 = $1030 << 16 >> 16;
   $1032 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext72 = $1032 << 16;
   $1033 = $sext72 >> 16;
   $1034 = Math_imul($1033, $1031)|0;
   $1035 = ($1034|0)<(0);
   $1036 = $1035 << 31 >> 31;
   $1037 = (_i64Add(($1028|0),($1029|0),($1034|0),($1036|0))|0);
   $1038 = tempRet0;
   $1039 = HEAP16[((33440 + 352|0))>>1]|0;
   $1040 = $1039 << 16 >> 16;
   $1041 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext73 = $1041 << 16;
   $1042 = $sext73 >> 16;
   $1043 = Math_imul($1042, $1040)|0;
   $1044 = ($1043|0)<(0);
   $1045 = $1044 << 31 >> 31;
   $1046 = (_i64Add(($1037|0),($1038|0),($1043|0),($1045|0))|0);
   $1047 = tempRet0;
   $1048 = (_bitshift64Ashr(($1046|0),($1047|0),12)|0);
   $1049 = tempRet0;
   $1050 = (_BOUNDS($1048,$1049,2147483647,0,30,-2147483648,-1,134217728)|0);
   $1051 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $1050;
   $1052 = HEAP32[((33440 + 340|0))>>2]|0;
   $1053 = (_bitshift64Shl(($1052|0),0,12)|0);
   $1054 = tempRet0;
   $1055 = HEAP16[((((33440 + 352|0)) + 2|0))>>1]|0;
   $1056 = $1055 << 16 >> 16;
   $1057 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext74 = $1057 << 16;
   $1058 = $sext74 >> 16;
   $1059 = Math_imul($1058, $1056)|0;
   $1060 = ($1059|0)<(0);
   $1061 = $1060 << 31 >> 31;
   $1062 = (_i64Add(($1059|0),($1061|0),($1053|0),($1054|0))|0);
   $1063 = tempRet0;
   $1064 = HEAP16[((33440 + 356|0))>>1]|0;
   $1065 = $1064 << 16 >> 16;
   $1066 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext75 = $1066 << 16;
   $1067 = $sext75 >> 16;
   $1068 = Math_imul($1067, $1065)|0;
   $1069 = ($1068|0)<(0);
   $1070 = $1069 << 31 >> 31;
   $1071 = (_i64Add(($1062|0),($1063|0),($1068|0),($1070|0))|0);
   $1072 = tempRet0;
   $1073 = HEAP16[((((33440 + 356|0)) + 2|0))>>1]|0;
   $1074 = $1073 << 16 >> 16;
   $1075 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext76 = $1075 << 16;
   $1076 = $sext76 >> 16;
   $1077 = Math_imul($1076, $1074)|0;
   $1078 = ($1077|0)<(0);
   $1079 = $1078 << 31 >> 31;
   $1080 = (_i64Add(($1071|0),($1072|0),($1077|0),($1079|0))|0);
   $1081 = tempRet0;
   $1082 = (_bitshift64Ashr(($1080|0),($1081|0),12)|0);
   $1083 = tempRet0;
   $1084 = (_BOUNDS($1082,$1083,2147483647,0,29,-2147483648,-1,67108864)|0);
   $1085 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $1084;
   $1086 = HEAP32[((33440 + 344|0))>>2]|0;
   $1087 = (_bitshift64Shl(($1086|0),0,12)|0);
   $1088 = tempRet0;
   $1089 = HEAP16[((33440 + 360|0))>>1]|0;
   $1090 = $1089 << 16 >> 16;
   $1091 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext77 = $1091 << 16;
   $1092 = $sext77 >> 16;
   $1093 = Math_imul($1092, $1090)|0;
   $1094 = ($1093|0)<(0);
   $1095 = $1094 << 31 >> 31;
   $1096 = (_i64Add(($1093|0),($1095|0),($1087|0),($1088|0))|0);
   $1097 = tempRet0;
   $1098 = HEAP16[((((33440 + 360|0)) + 2|0))>>1]|0;
   $1099 = $1098 << 16 >> 16;
   $1100 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext78 = $1100 << 16;
   $1101 = $sext78 >> 16;
   $1102 = Math_imul($1101, $1099)|0;
   $1103 = ($1102|0)<(0);
   $1104 = $1103 << 31 >> 31;
   $1105 = (_i64Add(($1096|0),($1097|0),($1102|0),($1104|0))|0);
   $1106 = tempRet0;
   $1107 = HEAP16[((33440 + 364|0))>>1]|0;
   $1108 = $1107 << 16 >> 16;
   $1109 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext79 = $1109 << 16;
   $1110 = $sext79 >> 16;
   $1111 = Math_imul($1110, $1108)|0;
   $1112 = ($1111|0)<(0);
   $1113 = $1112 << 31 >> 31;
   $1114 = (_i64Add(($1105|0),($1106|0),($1111|0),($1113|0))|0);
   $1115 = tempRet0;
   $1116 = (_bitshift64Ashr(($1114|0),($1115|0),12)|0);
   $1117 = tempRet0;
   $1118 = (_BOUNDS($1116,$1117,2147483647,0,28,-2147483648,-1,33554432)|0);
   $1119 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $1118;
   $1120 = HEAP32[((33440 + 512|0))>>2]|0;
   $1121 = (_LIM($1120,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $1121;
   $1122 = HEAP32[((33440 + 516|0))>>2]|0;
   $1123 = (_LIM($1122,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $1123;
   $1124 = HEAP32[((33440 + 520|0))>>2]|0;
   $1125 = (_LIM($1124,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $1125;
   $1126 = HEAP8[((33440 + 436|0))>>0]|0;
   $1127 = $1126&255;
   $1128 = (_bitshift64Shl(($1127|0),0,4)|0);
   $1129 = tempRet0;
   $1130 = HEAP32[((33440 + 448|0))>>2]|0;
   $1131 = $1130&65535;
   $1132 = $1131 << 16 >> 16;
   $1133 = ($1132|0)<(0);
   $1134 = $1133 << 31 >> 31;
   $1135 = (___muldi3(($1128|0),($1129|0),($1132|0),($1134|0))|0);
   $1136 = tempRet0;
   $1137 = HEAP32[((33440 + 444|0))>>2]|0;
   $sext80 = $1137 << 16;
   $1138 = $sext80 >> 16;
   $1139 = HEAP32[((33440 + 368|0))>>2]|0;
   $1140 = $1126&255;
   $sext81 = $1130 << 16;
   $1141 = $sext81 >> 16;
   $1142 = Math_imul($1141, $1140)|0;
   $1143 = $1142 >> 8;
   $1144 = (($1139) - ($1143))|0;
   $1145 = (_LIM($1144,32767,-32768,-2130706432)|0);
   $1146 = Math_imul($1138, $1145)|0;
   $1147 = ($1146|0)<(0);
   $1148 = $1147 << 31 >> 31;
   $1149 = (_i64Add(($1146|0),($1148|0),($1135|0),($1136|0))|0);
   $1150 = tempRet0;
   $1151 = (_bitshift64Ashr(($1149|0),($1150|0),12)|0);
   $1152 = tempRet0;
   $1153 = (_BOUNDS($1151,$1152,2147483647,0,30,-2147483648,-1,134217728)|0);
   $1154 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $1153;
   $1155 = HEAP8[((((33440 + 436|0)) + 1|0))>>0]|0;
   $1156 = $1155&255;
   $1157 = (_bitshift64Shl(($1156|0),0,4)|0);
   $1158 = tempRet0;
   $1159 = HEAP32[((33440 + 452|0))>>2]|0;
   $1160 = $1159&65535;
   $1161 = $1160 << 16 >> 16;
   $1162 = ($1161|0)<(0);
   $1163 = $1162 << 31 >> 31;
   $1164 = (___muldi3(($1157|0),($1158|0),($1161|0),($1163|0))|0);
   $1165 = tempRet0;
   $1166 = HEAP32[((33440 + 444|0))>>2]|0;
   $sext82 = $1166 << 16;
   $1167 = $sext82 >> 16;
   $1168 = HEAP32[((33440 + 372|0))>>2]|0;
   $1169 = $1155&255;
   $sext83 = $1159 << 16;
   $1170 = $sext83 >> 16;
   $1171 = Math_imul($1170, $1169)|0;
   $1172 = $1171 >> 8;
   $1173 = (($1168) - ($1172))|0;
   $1174 = (_LIM($1173,32767,-32768,-2139095040)|0);
   $1175 = Math_imul($1167, $1174)|0;
   $1176 = ($1175|0)<(0);
   $1177 = $1176 << 31 >> 31;
   $1178 = (_i64Add(($1175|0),($1177|0),($1164|0),($1165|0))|0);
   $1179 = tempRet0;
   $1180 = (_bitshift64Ashr(($1178|0),($1179|0),12)|0);
   $1181 = tempRet0;
   $1182 = (_BOUNDS($1180,$1181,2147483647,0,29,-2147483648,-1,67108864)|0);
   $1183 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $1182;
   $1184 = HEAP8[((((33440 + 436|0)) + 2|0))>>0]|0;
   $1185 = $1184&255;
   $1186 = (_bitshift64Shl(($1185|0),0,4)|0);
   $1187 = tempRet0;
   $1188 = HEAP32[((33440 + 456|0))>>2]|0;
   $1189 = $1188&65535;
   $1190 = $1189 << 16 >> 16;
   $1191 = ($1190|0)<(0);
   $1192 = $1191 << 31 >> 31;
   $1193 = (___muldi3(($1186|0),($1187|0),($1190|0),($1192|0))|0);
   $1194 = tempRet0;
   $1195 = HEAP32[((33440 + 444|0))>>2]|0;
   $sext84 = $1195 << 16;
   $1196 = $sext84 >> 16;
   $1197 = HEAP32[((33440 + 376|0))>>2]|0;
   $1198 = $1184&255;
   $sext85 = $1188 << 16;
   $1199 = $sext85 >> 16;
   $1200 = Math_imul($1199, $1198)|0;
   $1201 = $1200 >> 8;
   $1202 = (($1197) - ($1201))|0;
   $1203 = (_LIM($1202,32767,-32768,4194304)|0);
   $1204 = Math_imul($1196, $1203)|0;
   $1205 = ($1204|0)<(0);
   $1206 = $1205 << 31 >> 31;
   $1207 = (_i64Add(($1204|0),($1206|0),($1193|0),($1194|0))|0);
   $1208 = tempRet0;
   $1209 = (_bitshift64Ashr(($1207|0),($1208|0),12)|0);
   $1210 = tempRet0;
   $1211 = (_BOUNDS($1209,$1210,2147483647,0,28,-2147483648,-1,33554432)|0);
   $1212 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $1211;
   $1213 = HEAP32[((33440 + 512|0))>>2]|0;
   $1214 = (_LIM($1213,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $1214;
   $1215 = HEAP32[((33440 + 516|0))>>2]|0;
   $1216 = (_LIM($1215,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $1216;
   $1217 = HEAP32[((33440 + 520|0))>>2]|0;
   $1218 = (_LIM($1217,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $1218;
   $1219 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $1219;
   $1220 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $1220;
   $1221 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $1221;
   $1222 = HEAP8[((33440 + 496|0))>>0]|0;
   HEAP8[((33440 + 492|0))>>0] = $1222;
   $1223 = HEAP8[((33440 + 500|0))>>0]|0;
   HEAP8[((33440 + 496|0))>>0] = $1223;
   $1224 = HEAP32[((33440 + 512|0))>>2]|0;
   $1225 = $1224 >> 4;
   $1226 = (_LIM($1225,255,0,2097152)|0);
   $1227 = $1226&255;
   HEAP8[((33440 + 500|0))>>0] = $1227;
   $1228 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $1228;
   $1229 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $1229;
   $1230 = HEAP32[((33440 + 516|0))>>2]|0;
   $1231 = $1230 >> 4;
   $1232 = (_LIM($1231,255,0,1048576)|0);
   $1233 = $1232&255;
   HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $1233;
   $1234 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $1234;
   $1235 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $1235;
   $1236 = HEAP32[((33440 + 520|0))>>2]|0;
   $1237 = $1236 >> 4;
   $1238 = (_LIM($1237,255,0,524288)|0);
   $1239 = $1238&255;
   HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $1239;
   return;
   break;
  }
  case 1:  {
   $1 = ($gteop|0)==(1572865);
   if (!($1)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $2 = HEAP32[((33440 + 304|0))>>2]|0;
   $3 = ($2|0)<(0);
   $4 = $3 << 31 >> 31;
   $5 = (_bitshift64Shl(($2|0),($4|0),12)|0);
   $6 = tempRet0;
   $7 = HEAP16[((33440 + 284|0))>>1]|0;
   $8 = $7 << 16 >> 16;
   $9 = HEAP16[((33440 + 412|0))>>1]|0;
   $10 = $9 << 16 >> 16;
   $11 = Math_imul($10, $8)|0;
   $12 = ($11|0)<(0);
   $13 = $12 << 31 >> 31;
   $14 = (_i64Add(($11|0),($13|0),($5|0),($6|0))|0);
   $15 = tempRet0;
   $16 = HEAP16[((((33440 + 284|0)) + 2|0))>>1]|0;
   $17 = $16 << 16 >> 16;
   $18 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $19 = $18 << 16 >> 16;
   $20 = Math_imul($19, $17)|0;
   $21 = ($20|0)<(0);
   $22 = $21 << 31 >> 31;
   $23 = (_i64Add(($14|0),($15|0),($20|0),($22|0))|0);
   $24 = tempRet0;
   $25 = HEAP16[((33440 + 288|0))>>1]|0;
   $26 = $25 << 16 >> 16;
   $27 = HEAP16[((33440 + 416|0))>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = Math_imul($28, $26)|0;
   $30 = ($29|0)<(0);
   $31 = $30 << 31 >> 31;
   $32 = (_i64Add(($23|0),($24|0),($29|0),($31|0))|0);
   $33 = tempRet0;
   $34 = (_bitshift64Ashr(($32|0),($33|0),12)|0);
   $35 = tempRet0;
   $36 = (_BOUNDS($34,$35,2147483647,0,30,-2147483648,-1,134217728)|0);
   $37 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $36;
   $38 = HEAP32[((33440 + 308|0))>>2]|0;
   $39 = ($38|0)<(0);
   $40 = $39 << 31 >> 31;
   $41 = (_bitshift64Shl(($38|0),($40|0),12)|0);
   $42 = tempRet0;
   $43 = HEAP16[((((33440 + 288|0)) + 2|0))>>1]|0;
   $44 = $43 << 16 >> 16;
   $45 = HEAP16[((33440 + 412|0))>>1]|0;
   $46 = $45 << 16 >> 16;
   $47 = Math_imul($46, $44)|0;
   $48 = ($47|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = (_i64Add(($47|0),($49|0),($41|0),($42|0))|0);
   $51 = tempRet0;
   $52 = HEAP16[((33440 + 292|0))>>1]|0;
   $53 = $52 << 16 >> 16;
   $54 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $55 = $54 << 16 >> 16;
   $56 = Math_imul($55, $53)|0;
   $57 = ($56|0)<(0);
   $58 = $57 << 31 >> 31;
   $59 = (_i64Add(($50|0),($51|0),($56|0),($58|0))|0);
   $60 = tempRet0;
   $61 = HEAP16[((((33440 + 292|0)) + 2|0))>>1]|0;
   $62 = $61 << 16 >> 16;
   $63 = HEAP16[((33440 + 416|0))>>1]|0;
   $64 = $63 << 16 >> 16;
   $65 = Math_imul($64, $62)|0;
   $66 = ($65|0)<(0);
   $67 = $66 << 31 >> 31;
   $68 = (_i64Add(($59|0),($60|0),($65|0),($67|0))|0);
   $69 = tempRet0;
   $70 = (_bitshift64Ashr(($68|0),($69|0),12)|0);
   $71 = tempRet0;
   $72 = (_BOUNDS($70,$71,2147483647,0,29,-2147483648,-1,67108864)|0);
   $73 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $72;
   $74 = HEAP32[((33440 + 312|0))>>2]|0;
   $75 = ($74|0)<(0);
   $76 = $75 << 31 >> 31;
   $77 = (_bitshift64Shl(($74|0),($76|0),12)|0);
   $78 = tempRet0;
   $79 = HEAP16[((33440 + 296|0))>>1]|0;
   $80 = $79 << 16 >> 16;
   $81 = HEAP16[((33440 + 412|0))>>1]|0;
   $82 = $81 << 16 >> 16;
   $83 = Math_imul($82, $80)|0;
   $84 = ($83|0)<(0);
   $85 = $84 << 31 >> 31;
   $86 = (_i64Add(($83|0),($85|0),($77|0),($78|0))|0);
   $87 = tempRet0;
   $88 = HEAP16[((((33440 + 296|0)) + 2|0))>>1]|0;
   $89 = $88 << 16 >> 16;
   $90 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $91 = $90 << 16 >> 16;
   $92 = Math_imul($91, $89)|0;
   $93 = ($92|0)<(0);
   $94 = $93 << 31 >> 31;
   $95 = (_i64Add(($86|0),($87|0),($92|0),($94|0))|0);
   $96 = tempRet0;
   $97 = HEAP16[((33440 + 300|0))>>1]|0;
   $98 = $97 << 16 >> 16;
   $99 = HEAP16[((33440 + 416|0))>>1]|0;
   $100 = $99 << 16 >> 16;
   $101 = Math_imul($100, $98)|0;
   $102 = ($101|0)<(0);
   $103 = $102 << 31 >> 31;
   $104 = (_i64Add(($95|0),($96|0),($101|0),($103|0))|0);
   $105 = tempRet0;
   $106 = (_bitshift64Ashr(($104|0),($105|0),12)|0);
   $107 = tempRet0;
   $108 = (_BOUNDS($106,$107,2147483647,0,28,-2147483648,-1,33554432)|0);
   $109 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $108;
   $110 = HEAP32[((33440 + 512|0))>>2]|0;
   $111 = (_LIM($110,32767,-32768,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $111;
   $112 = HEAP32[((33440 + 516|0))>>2]|0;
   $113 = (_LIM($112,32767,-32768,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $113;
   $114 = HEAP32[((33440 + 520|0))>>2]|0;
   $115 = (_LIM($114,32767,-32768,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $115;
   $116 = HEAP16[((33440 + 480|0))>>1]|0;
   HEAP16[((33440 + 476|0))>>1] = $116;
   $117 = HEAP16[((33440 + 484|0))>>1]|0;
   HEAP16[((33440 + 480|0))>>1] = $117;
   $118 = HEAP16[((33440 + 488|0))>>1]|0;
   HEAP16[((33440 + 484|0))>>1] = $118;
   $119 = HEAP32[((33440 + 520|0))>>2]|0;
   $120 = (_LIM($119,65535,0,-2147221504)|0);
   $121 = $120&65535;
   HEAP16[((33440 + 488|0))>>1] = $121;
   $122 = HEAP32[((33440 + 464|0))>>2]|0;
   HEAP32[((33440 + 460|0))>>2] = $122;
   $123 = HEAP32[((33440 + 468|0))>>2]|0;
   HEAP32[((33440 + 464|0))>>2] = $123;
   $124 = HEAP32[((33440 + 380|0))>>2]|0;
   $125 = ($124|0)<(0);
   $126 = $125 << 31 >> 31;
   $127 = HEAP32[((33440 + 448|0))>>2]|0;
   $128 = $127&65535;
   $129 = $128 << 16 >> 16;
   $130 = ($129|0)<(0);
   $131 = $130 << 31 >> 31;
   $132 = HEAP16[((33440 + 388|0))>>1]|0;
   $133 = $132&65535;
   $134 = $133 << 16;
   $135 = HEAP16[((33440 + 488|0))>>1]|0;
   $136 = $135&65535;
   $137 = (_Lm_E($136)|0);
   $138 = (($134>>>0) / ($137>>>0))&-1;
   $139 = (___muldi3(($138|0),0,($129|0),($131|0))|0);
   $140 = tempRet0;
   $141 = (_i64Add(($139|0),($140|0),($124|0),($126|0))|0);
   $142 = tempRet0;
   $143 = (_BOUNDS($141,$142,2147483647,0,-2147418112,-2147483648,-1,-2147450880)|0);
   $144 = tempRet0;
   $145 = (_bitshift64Lshr(($143|0),($144|0),16)|0);
   $146 = tempRet0;
   $147 = (_LIM($145,1023,-1024,-2147467264)|0);
   $148 = $147&65535;
   HEAP16[((33440 + 468|0))>>1] = $148;
   $149 = HEAP32[((33440 + 384|0))>>2]|0;
   $150 = ($149|0)<(0);
   $151 = $150 << 31 >> 31;
   $152 = HEAP32[((33440 + 452|0))>>2]|0;
   $153 = $152&65535;
   $154 = $153 << 16 >> 16;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = HEAP16[((33440 + 388|0))>>1]|0;
   $158 = $157&65535;
   $159 = $158 << 16;
   $160 = HEAP16[((33440 + 488|0))>>1]|0;
   $161 = $160&65535;
   $162 = (_Lm_E($161)|0);
   $163 = (($159>>>0) / ($162>>>0))&-1;
   $164 = (___muldi3(($163|0),0,($154|0),($156|0))|0);
   $165 = tempRet0;
   $166 = (_i64Add(($164|0),($165|0),($149|0),($151|0))|0);
   $167 = tempRet0;
   $168 = (_BOUNDS($166,$167,2147483647,0,-2147418112,-2147483648,-1,-2147450880)|0);
   $169 = tempRet0;
   $170 = (_bitshift64Lshr(($168|0),($169|0),16)|0);
   $171 = tempRet0;
   $172 = (_LIM($170,1023,-1024,-2147475456)|0);
   $173 = $172&65535;
   HEAP16[((((33440 + 468|0)) + 2|0))>>1] = $173;
   $174 = HEAP32[((33440 + 396|0))>>2]|0;
   $175 = ($174|0)<(0);
   $176 = $175 << 31 >> 31;
   $177 = HEAP16[((33440 + 392|0))>>1]|0;
   $178 = $177 << 16 >> 16;
   $179 = ($178|0)<(0);
   $180 = $179 << 31 >> 31;
   $181 = HEAP16[((33440 + 388|0))>>1]|0;
   $182 = $181&65535;
   $183 = $182 << 16;
   $184 = HEAP16[((33440 + 488|0))>>1]|0;
   $185 = $184&65535;
   $186 = (_Lm_E($185)|0);
   $187 = (($183>>>0) / ($186>>>0))&-1;
   $188 = (___muldi3(($187|0),0,($178|0),($180|0))|0);
   $189 = tempRet0;
   $190 = (_i64Add(($188|0),($189|0),($174|0),($176|0))|0);
   $191 = tempRet0;
   $192 = (_BOUNDS($190,$191,2147483647,0,-2147418112,-2147483648,-1,-2147450880)|0);
   $193 = tempRet0;
   HEAP32[((33440 + 508|0))>>2] = $192;
   $194 = $192 >> 12;
   $195 = (_LIM($194,4095,0,4096)|0);
   HEAP32[((33440 + 444|0))>>2] = $195;
   return;
   break;
  }
  case 22:  {
   $1240 = ($gteop|0)==(16253974);
   if (!($1240)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $n_v$0111 = 0;
   while(1) {
    $1241 = HEAP16[((33440 + 316|0))>>1]|0;
    $1242 = $1241 << 16 >> 16;
    $1243 = ($1242|0)<(0);
    $1244 = $1243 << 31 >> 31;
    $1245 = (34376 + ($n_v$0111<<2)|0);
    $1246 = HEAP32[$1245>>2]|0;
    $1247 = HEAP16[$1246>>1]|0;
    $1248 = $1247 << 16 >> 16;
    $1249 = ($1248|0)<(0);
    $1250 = $1249 << 31 >> 31;
    $1251 = (___muldi3(($1248|0),($1250|0),($1242|0),($1244|0))|0);
    $1252 = tempRet0;
    $1253 = HEAP16[((((33440 + 316|0)) + 2|0))>>1]|0;
    $1254 = $1253 << 16 >> 16;
    $1255 = (34392 + ($n_v$0111<<2)|0);
    $1256 = HEAP32[$1255>>2]|0;
    $1257 = HEAP16[$1256>>1]|0;
    $1258 = $1257 << 16 >> 16;
    $1259 = Math_imul($1258, $1254)|0;
    $1260 = ($1259|0)<(0);
    $1261 = $1260 << 31 >> 31;
    $1262 = (_i64Add(($1259|0),($1261|0),($1251|0),($1252|0))|0);
    $1263 = tempRet0;
    $1264 = HEAP16[((33440 + 320|0))>>1]|0;
    $1265 = $1264 << 16 >> 16;
    $1266 = (34408 + ($n_v$0111<<2)|0);
    $1267 = HEAP32[$1266>>2]|0;
    $1268 = HEAP16[$1267>>1]|0;
    $1269 = $1268 << 16 >> 16;
    $1270 = Math_imul($1269, $1265)|0;
    $1271 = ($1270|0)<(0);
    $1272 = $1271 << 31 >> 31;
    $1273 = (_i64Add(($1262|0),($1263|0),($1270|0),($1272|0))|0);
    $1274 = tempRet0;
    $1275 = (_bitshift64Ashr(($1273|0),($1274|0),12)|0);
    $1276 = tempRet0;
    $1277 = (_BOUNDS($1275,$1276,2147483647,0,30,-2147483648,-1,134217728)|0);
    $1278 = tempRet0;
    HEAP32[((33440 + 512|0))>>2] = $1277;
    $1279 = HEAP16[((((33440 + 320|0)) + 2|0))>>1]|0;
    $1280 = $1279 << 16 >> 16;
    $1281 = ($1280|0)<(0);
    $1282 = $1281 << 31 >> 31;
    $1283 = HEAP32[$1245>>2]|0;
    $1284 = HEAP16[$1283>>1]|0;
    $1285 = $1284 << 16 >> 16;
    $1286 = ($1285|0)<(0);
    $1287 = $1286 << 31 >> 31;
    $1288 = (___muldi3(($1285|0),($1287|0),($1280|0),($1282|0))|0);
    $1289 = tempRet0;
    $1290 = HEAP16[((33440 + 324|0))>>1]|0;
    $1291 = $1290 << 16 >> 16;
    $1292 = HEAP32[$1255>>2]|0;
    $1293 = HEAP16[$1292>>1]|0;
    $1294 = $1293 << 16 >> 16;
    $1295 = Math_imul($1294, $1291)|0;
    $1296 = ($1295|0)<(0);
    $1297 = $1296 << 31 >> 31;
    $1298 = (_i64Add(($1295|0),($1297|0),($1288|0),($1289|0))|0);
    $1299 = tempRet0;
    $1300 = HEAP16[((((33440 + 324|0)) + 2|0))>>1]|0;
    $1301 = $1300 << 16 >> 16;
    $1302 = HEAP32[$1266>>2]|0;
    $1303 = HEAP16[$1302>>1]|0;
    $1304 = $1303 << 16 >> 16;
    $1305 = Math_imul($1304, $1301)|0;
    $1306 = ($1305|0)<(0);
    $1307 = $1306 << 31 >> 31;
    $1308 = (_i64Add(($1298|0),($1299|0),($1305|0),($1307|0))|0);
    $1309 = tempRet0;
    $1310 = (_bitshift64Ashr(($1308|0),($1309|0),12)|0);
    $1311 = tempRet0;
    $1312 = (_BOUNDS($1310,$1311,2147483647,0,29,-2147483648,-1,67108864)|0);
    $1313 = tempRet0;
    HEAP32[((33440 + 516|0))>>2] = $1312;
    $1314 = HEAP16[((33440 + 328|0))>>1]|0;
    $1315 = $1314 << 16 >> 16;
    $1316 = ($1315|0)<(0);
    $1317 = $1316 << 31 >> 31;
    $1318 = HEAP32[$1245>>2]|0;
    $1319 = HEAP16[$1318>>1]|0;
    $1320 = $1319 << 16 >> 16;
    $1321 = ($1320|0)<(0);
    $1322 = $1321 << 31 >> 31;
    $1323 = (___muldi3(($1320|0),($1322|0),($1315|0),($1317|0))|0);
    $1324 = tempRet0;
    $1325 = HEAP16[((((33440 + 328|0)) + 2|0))>>1]|0;
    $1326 = $1325 << 16 >> 16;
    $1327 = HEAP32[$1255>>2]|0;
    $1328 = HEAP16[$1327>>1]|0;
    $1329 = $1328 << 16 >> 16;
    $1330 = Math_imul($1329, $1326)|0;
    $1331 = ($1330|0)<(0);
    $1332 = $1331 << 31 >> 31;
    $1333 = (_i64Add(($1330|0),($1332|0),($1323|0),($1324|0))|0);
    $1334 = tempRet0;
    $1335 = HEAP16[((33440 + 332|0))>>1]|0;
    $1336 = $1335 << 16 >> 16;
    $1337 = HEAP32[$1266>>2]|0;
    $1338 = HEAP16[$1337>>1]|0;
    $1339 = $1338 << 16 >> 16;
    $1340 = Math_imul($1339, $1336)|0;
    $1341 = ($1340|0)<(0);
    $1342 = $1341 << 31 >> 31;
    $1343 = (_i64Add(($1333|0),($1334|0),($1340|0),($1342|0))|0);
    $1344 = tempRet0;
    $1345 = (_bitshift64Ashr(($1343|0),($1344|0),12)|0);
    $1346 = tempRet0;
    $1347 = (_BOUNDS($1345,$1346,2147483647,0,28,-2147483648,-1,33554432)|0);
    $1348 = tempRet0;
    HEAP32[((33440 + 520|0))>>2] = $1347;
    $1349 = HEAP32[((33440 + 512|0))>>2]|0;
    $1350 = (_LIM($1349,32767,0,-2130706432)|0);
    HEAP32[((33440 + 448|0))>>2] = $1350;
    $1351 = HEAP32[((33440 + 516|0))>>2]|0;
    $1352 = (_LIM($1351,32767,0,-2139095040)|0);
    HEAP32[((33440 + 452|0))>>2] = $1352;
    $1353 = HEAP32[((33440 + 520|0))>>2]|0;
    $1354 = (_LIM($1353,32767,0,4194304)|0);
    HEAP32[((33440 + 456|0))>>2] = $1354;
    $1355 = HEAP32[((33440 + 336|0))>>2]|0;
    $1356 = (_bitshift64Shl(($1355|0),0,12)|0);
    $1357 = tempRet0;
    $1358 = HEAP16[((33440 + 348|0))>>1]|0;
    $1359 = $1358 << 16 >> 16;
    $1360 = HEAP32[((33440 + 448|0))>>2]|0;
    $sext56 = $1360 << 16;
    $1361 = $sext56 >> 16;
    $1362 = Math_imul($1361, $1359)|0;
    $1363 = ($1362|0)<(0);
    $1364 = $1363 << 31 >> 31;
    $1365 = (_i64Add(($1362|0),($1364|0),($1356|0),($1357|0))|0);
    $1366 = tempRet0;
    $1367 = HEAP16[((((33440 + 348|0)) + 2|0))>>1]|0;
    $1368 = $1367 << 16 >> 16;
    $1369 = HEAP32[((33440 + 452|0))>>2]|0;
    $sext57 = $1369 << 16;
    $1370 = $sext57 >> 16;
    $1371 = Math_imul($1370, $1368)|0;
    $1372 = ($1371|0)<(0);
    $1373 = $1372 << 31 >> 31;
    $1374 = (_i64Add(($1365|0),($1366|0),($1371|0),($1373|0))|0);
    $1375 = tempRet0;
    $1376 = HEAP16[((33440 + 352|0))>>1]|0;
    $1377 = $1376 << 16 >> 16;
    $sext58 = $1354 << 16;
    $1378 = $sext58 >> 16;
    $1379 = Math_imul($1377, $1378)|0;
    $1380 = ($1379|0)<(0);
    $1381 = $1380 << 31 >> 31;
    $1382 = (_i64Add(($1374|0),($1375|0),($1379|0),($1381|0))|0);
    $1383 = tempRet0;
    $1384 = (_bitshift64Ashr(($1382|0),($1383|0),12)|0);
    $1385 = tempRet0;
    $1386 = (_BOUNDS($1384,$1385,2147483647,0,30,-2147483648,-1,134217728)|0);
    $1387 = tempRet0;
    HEAP32[((33440 + 512|0))>>2] = $1386;
    $1388 = HEAP32[((33440 + 340|0))>>2]|0;
    $1389 = (_bitshift64Shl(($1388|0),0,12)|0);
    $1390 = tempRet0;
    $1391 = HEAP16[((((33440 + 352|0)) + 2|0))>>1]|0;
    $1392 = $1391 << 16 >> 16;
    $1393 = HEAP32[((33440 + 448|0))>>2]|0;
    $sext59 = $1393 << 16;
    $1394 = $sext59 >> 16;
    $1395 = Math_imul($1394, $1392)|0;
    $1396 = ($1395|0)<(0);
    $1397 = $1396 << 31 >> 31;
    $1398 = (_i64Add(($1395|0),($1397|0),($1389|0),($1390|0))|0);
    $1399 = tempRet0;
    $1400 = HEAP16[((33440 + 356|0))>>1]|0;
    $1401 = $1400 << 16 >> 16;
    $1402 = HEAP32[((33440 + 452|0))>>2]|0;
    $sext60 = $1402 << 16;
    $1403 = $sext60 >> 16;
    $1404 = Math_imul($1403, $1401)|0;
    $1405 = ($1404|0)<(0);
    $1406 = $1405 << 31 >> 31;
    $1407 = (_i64Add(($1398|0),($1399|0),($1404|0),($1406|0))|0);
    $1408 = tempRet0;
    $1409 = HEAP16[((((33440 + 356|0)) + 2|0))>>1]|0;
    $1410 = $1409 << 16 >> 16;
    $1411 = HEAP32[((33440 + 456|0))>>2]|0;
    $sext61 = $1411 << 16;
    $1412 = $sext61 >> 16;
    $1413 = Math_imul($1412, $1410)|0;
    $1414 = ($1413|0)<(0);
    $1415 = $1414 << 31 >> 31;
    $1416 = (_i64Add(($1407|0),($1408|0),($1413|0),($1415|0))|0);
    $1417 = tempRet0;
    $1418 = (_bitshift64Ashr(($1416|0),($1417|0),12)|0);
    $1419 = tempRet0;
    $1420 = (_BOUNDS($1418,$1419,2147483647,0,29,-2147483648,-1,67108864)|0);
    $1421 = tempRet0;
    HEAP32[((33440 + 516|0))>>2] = $1420;
    $1422 = HEAP32[((33440 + 344|0))>>2]|0;
    $1423 = (_bitshift64Shl(($1422|0),0,12)|0);
    $1424 = tempRet0;
    $1425 = HEAP16[((33440 + 360|0))>>1]|0;
    $1426 = $1425 << 16 >> 16;
    $1427 = HEAP32[((33440 + 448|0))>>2]|0;
    $sext62 = $1427 << 16;
    $1428 = $sext62 >> 16;
    $1429 = Math_imul($1428, $1426)|0;
    $1430 = ($1429|0)<(0);
    $1431 = $1430 << 31 >> 31;
    $1432 = (_i64Add(($1429|0),($1431|0),($1423|0),($1424|0))|0);
    $1433 = tempRet0;
    $1434 = HEAP16[((((33440 + 360|0)) + 2|0))>>1]|0;
    $1435 = $1434 << 16 >> 16;
    $1436 = HEAP32[((33440 + 452|0))>>2]|0;
    $sext63 = $1436 << 16;
    $1437 = $sext63 >> 16;
    $1438 = Math_imul($1437, $1435)|0;
    $1439 = ($1438|0)<(0);
    $1440 = $1439 << 31 >> 31;
    $1441 = (_i64Add(($1432|0),($1433|0),($1438|0),($1440|0))|0);
    $1442 = tempRet0;
    $1443 = HEAP16[((33440 + 364|0))>>1]|0;
    $1444 = $1443 << 16 >> 16;
    $1445 = HEAP32[((33440 + 456|0))>>2]|0;
    $sext64 = $1445 << 16;
    $1446 = $sext64 >> 16;
    $1447 = Math_imul($1446, $1444)|0;
    $1448 = ($1447|0)<(0);
    $1449 = $1448 << 31 >> 31;
    $1450 = (_i64Add(($1441|0),($1442|0),($1447|0),($1449|0))|0);
    $1451 = tempRet0;
    $1452 = (_bitshift64Ashr(($1450|0),($1451|0),12)|0);
    $1453 = tempRet0;
    $1454 = (_BOUNDS($1452,$1453,2147483647,0,28,-2147483648,-1,33554432)|0);
    $1455 = tempRet0;
    HEAP32[((33440 + 520|0))>>2] = $1454;
    $1456 = HEAP32[((33440 + 512|0))>>2]|0;
    $1457 = (_LIM($1456,32767,0,-2130706432)|0);
    HEAP32[((33440 + 448|0))>>2] = $1457;
    $1458 = HEAP32[((33440 + 516|0))>>2]|0;
    $1459 = (_LIM($1458,32767,0,-2139095040)|0);
    HEAP32[((33440 + 452|0))>>2] = $1459;
    $1460 = HEAP32[((33440 + 520|0))>>2]|0;
    $1461 = (_LIM($1460,32767,0,4194304)|0);
    HEAP32[((33440 + 456|0))>>2] = $1461;
    $1462 = HEAP8[((33440 + 436|0))>>0]|0;
    $1463 = $1462&255;
    $1464 = (_bitshift64Shl(($1463|0),0,4)|0);
    $1465 = tempRet0;
    $1466 = HEAP32[((33440 + 448|0))>>2]|0;
    $1467 = $1466&65535;
    $1468 = $1467 << 16 >> 16;
    $1469 = ($1468|0)<(0);
    $1470 = $1469 << 31 >> 31;
    $1471 = (___muldi3(($1464|0),($1465|0),($1468|0),($1470|0))|0);
    $1472 = tempRet0;
    $1473 = HEAP32[((33440 + 444|0))>>2]|0;
    $sext65 = $1473 << 16;
    $1474 = $sext65 >> 16;
    $1475 = HEAP32[((33440 + 368|0))>>2]|0;
    $1476 = $1462&255;
    $sext66 = $1466 << 16;
    $1477 = $sext66 >> 16;
    $1478 = Math_imul($1477, $1476)|0;
    $1479 = $1478 >> 8;
    $1480 = (($1475) - ($1479))|0;
    $1481 = (_LIM($1480,32767,-32768,-2130706432)|0);
    $1482 = Math_imul($1474, $1481)|0;
    $1483 = ($1482|0)<(0);
    $1484 = $1483 << 31 >> 31;
    $1485 = (_i64Add(($1482|0),($1484|0),($1471|0),($1472|0))|0);
    $1486 = tempRet0;
    $1487 = (_bitshift64Ashr(($1485|0),($1486|0),12)|0);
    $1488 = tempRet0;
    $1489 = (_BOUNDS($1487,$1488,2147483647,0,30,-2147483648,-1,134217728)|0);
    $1490 = tempRet0;
    HEAP32[((33440 + 512|0))>>2] = $1489;
    $1491 = HEAP8[((((33440 + 436|0)) + 1|0))>>0]|0;
    $1492 = $1491&255;
    $1493 = (_bitshift64Shl(($1492|0),0,4)|0);
    $1494 = tempRet0;
    $1495 = HEAP32[((33440 + 452|0))>>2]|0;
    $1496 = $1495&65535;
    $1497 = $1496 << 16 >> 16;
    $1498 = ($1497|0)<(0);
    $1499 = $1498 << 31 >> 31;
    $1500 = (___muldi3(($1493|0),($1494|0),($1497|0),($1499|0))|0);
    $1501 = tempRet0;
    $1502 = HEAP32[((33440 + 444|0))>>2]|0;
    $sext67 = $1502 << 16;
    $1503 = $sext67 >> 16;
    $1504 = HEAP32[((33440 + 372|0))>>2]|0;
    $1505 = $1491&255;
    $sext68 = $1495 << 16;
    $1506 = $sext68 >> 16;
    $1507 = Math_imul($1506, $1505)|0;
    $1508 = $1507 >> 8;
    $1509 = (($1504) - ($1508))|0;
    $1510 = (_LIM($1509,32767,-32768,-2139095040)|0);
    $1511 = Math_imul($1503, $1510)|0;
    $1512 = ($1511|0)<(0);
    $1513 = $1512 << 31 >> 31;
    $1514 = (_i64Add(($1511|0),($1513|0),($1500|0),($1501|0))|0);
    $1515 = tempRet0;
    $1516 = (_bitshift64Ashr(($1514|0),($1515|0),12)|0);
    $1517 = tempRet0;
    $1518 = (_BOUNDS($1516,$1517,2147483647,0,29,-2147483648,-1,67108864)|0);
    $1519 = tempRet0;
    HEAP32[((33440 + 516|0))>>2] = $1518;
    $1520 = HEAP8[((((33440 + 436|0)) + 2|0))>>0]|0;
    $1521 = $1520&255;
    $1522 = (_bitshift64Shl(($1521|0),0,4)|0);
    $1523 = tempRet0;
    $1524 = HEAP32[((33440 + 456|0))>>2]|0;
    $1525 = $1524&65535;
    $1526 = $1525 << 16 >> 16;
    $1527 = ($1526|0)<(0);
    $1528 = $1527 << 31 >> 31;
    $1529 = (___muldi3(($1522|0),($1523|0),($1526|0),($1528|0))|0);
    $1530 = tempRet0;
    $1531 = HEAP32[((33440 + 444|0))>>2]|0;
    $sext69 = $1531 << 16;
    $1532 = $sext69 >> 16;
    $1533 = HEAP32[((33440 + 376|0))>>2]|0;
    $1534 = $1520&255;
    $sext70 = $1524 << 16;
    $1535 = $sext70 >> 16;
    $1536 = Math_imul($1535, $1534)|0;
    $1537 = $1536 >> 8;
    $1538 = (($1533) - ($1537))|0;
    $1539 = (_LIM($1538,32767,-32768,4194304)|0);
    $1540 = Math_imul($1532, $1539)|0;
    $1541 = ($1540|0)<(0);
    $1542 = $1541 << 31 >> 31;
    $1543 = (_i64Add(($1540|0),($1542|0),($1529|0),($1530|0))|0);
    $1544 = tempRet0;
    $1545 = (_bitshift64Ashr(($1543|0),($1544|0),12)|0);
    $1546 = tempRet0;
    $1547 = (_BOUNDS($1545,$1546,2147483647,0,28,-2147483648,-1,33554432)|0);
    $1548 = tempRet0;
    HEAP32[((33440 + 520|0))>>2] = $1547;
    $1549 = HEAP32[((33440 + 512|0))>>2]|0;
    $1550 = (_LIM($1549,32767,0,-2130706432)|0);
    HEAP32[((33440 + 448|0))>>2] = $1550;
    $1551 = HEAP32[((33440 + 516|0))>>2]|0;
    $1552 = (_LIM($1551,32767,0,-2139095040)|0);
    HEAP32[((33440 + 452|0))>>2] = $1552;
    $1553 = HEAP32[((33440 + 520|0))>>2]|0;
    $1554 = (_LIM($1553,32767,0,4194304)|0);
    HEAP32[((33440 + 456|0))>>2] = $1554;
    $1555 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $1555;
    $1556 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $1556;
    $1557 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
    HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $1557;
    $1558 = HEAP8[((33440 + 496|0))>>0]|0;
    HEAP8[((33440 + 492|0))>>0] = $1558;
    $1559 = HEAP8[((33440 + 500|0))>>0]|0;
    HEAP8[((33440 + 496|0))>>0] = $1559;
    $1560 = HEAP32[((33440 + 512|0))>>2]|0;
    $1561 = $1560 >> 4;
    $1562 = (_LIM($1561,255,0,2097152)|0);
    $1563 = $1562&255;
    HEAP8[((33440 + 500|0))>>0] = $1563;
    $1564 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $1564;
    $1565 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $1565;
    $1566 = HEAP32[((33440 + 516|0))>>2]|0;
    $1567 = $1566 >> 4;
    $1568 = (_LIM($1567,255,0,1048576)|0);
    $1569 = $1568&255;
    HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $1569;
    $1570 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
    HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $1570;
    $1571 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
    HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $1571;
    $1572 = HEAP32[((33440 + 520|0))>>2]|0;
    $1573 = $1572 >> 4;
    $1574 = (_LIM($1573,255,0,524288)|0);
    $1575 = $1574&255;
    HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $1575;
    $1576 = (($n_v$0111) + 1)|0;
    $exitcond = ($1576|0)==(3);
    if ($exitcond) {
     break;
    } else {
     $n_v$0111 = $1576;
    }
   }
   return;
   break;
  }
  case 27:  {
   $1577 = ($gteop|0)==(17302555);
   if (!($1577)) {
    return;
   }
   HEAP32[((33440 + 408|0))>>2] = 0;
   $1578 = HEAP16[((33440 + 316|0))>>1]|0;
   $1579 = $1578 << 16 >> 16;
   $1580 = ($1579|0)<(0);
   $1581 = $1580 << 31 >> 31;
   $1582 = HEAP16[((33440 + 412|0))>>1]|0;
   $1583 = $1582 << 16 >> 16;
   $1584 = ($1583|0)<(0);
   $1585 = $1584 << 31 >> 31;
   $1586 = (___muldi3(($1583|0),($1585|0),($1579|0),($1581|0))|0);
   $1587 = tempRet0;
   $1588 = HEAP16[((((33440 + 316|0)) + 2|0))>>1]|0;
   $1589 = $1588 << 16 >> 16;
   $1590 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $1591 = $1590 << 16 >> 16;
   $1592 = Math_imul($1591, $1589)|0;
   $1593 = ($1592|0)<(0);
   $1594 = $1593 << 31 >> 31;
   $1595 = (_i64Add(($1592|0),($1594|0),($1586|0),($1587|0))|0);
   $1596 = tempRet0;
   $1597 = HEAP16[((33440 + 320|0))>>1]|0;
   $1598 = $1597 << 16 >> 16;
   $1599 = HEAP16[((33440 + 416|0))>>1]|0;
   $1600 = $1599 << 16 >> 16;
   $1601 = Math_imul($1600, $1598)|0;
   $1602 = ($1601|0)<(0);
   $1603 = $1602 << 31 >> 31;
   $1604 = (_i64Add(($1595|0),($1596|0),($1601|0),($1603|0))|0);
   $1605 = tempRet0;
   $1606 = (_bitshift64Ashr(($1604|0),($1605|0),12)|0);
   $1607 = tempRet0;
   $1608 = (_BOUNDS($1606,$1607,2147483647,0,30,-2147483648,-1,134217728)|0);
   $1609 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $1608;
   $1610 = HEAP16[((((33440 + 320|0)) + 2|0))>>1]|0;
   $1611 = $1610 << 16 >> 16;
   $1612 = ($1611|0)<(0);
   $1613 = $1612 << 31 >> 31;
   $1614 = HEAP16[((33440 + 412|0))>>1]|0;
   $1615 = $1614 << 16 >> 16;
   $1616 = ($1615|0)<(0);
   $1617 = $1616 << 31 >> 31;
   $1618 = (___muldi3(($1615|0),($1617|0),($1611|0),($1613|0))|0);
   $1619 = tempRet0;
   $1620 = HEAP16[((33440 + 324|0))>>1]|0;
   $1621 = $1620 << 16 >> 16;
   $1622 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $1623 = $1622 << 16 >> 16;
   $1624 = Math_imul($1623, $1621)|0;
   $1625 = ($1624|0)<(0);
   $1626 = $1625 << 31 >> 31;
   $1627 = (_i64Add(($1624|0),($1626|0),($1618|0),($1619|0))|0);
   $1628 = tempRet0;
   $1629 = HEAP16[((((33440 + 324|0)) + 2|0))>>1]|0;
   $1630 = $1629 << 16 >> 16;
   $1631 = HEAP16[((33440 + 416|0))>>1]|0;
   $1632 = $1631 << 16 >> 16;
   $1633 = Math_imul($1632, $1630)|0;
   $1634 = ($1633|0)<(0);
   $1635 = $1634 << 31 >> 31;
   $1636 = (_i64Add(($1627|0),($1628|0),($1633|0),($1635|0))|0);
   $1637 = tempRet0;
   $1638 = (_bitshift64Ashr(($1636|0),($1637|0),12)|0);
   $1639 = tempRet0;
   $1640 = (_BOUNDS($1638,$1639,2147483647,0,29,-2147483648,-1,67108864)|0);
   $1641 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $1640;
   $1642 = HEAP16[((33440 + 328|0))>>1]|0;
   $1643 = $1642 << 16 >> 16;
   $1644 = ($1643|0)<(0);
   $1645 = $1644 << 31 >> 31;
   $1646 = HEAP16[((33440 + 412|0))>>1]|0;
   $1647 = $1646 << 16 >> 16;
   $1648 = ($1647|0)<(0);
   $1649 = $1648 << 31 >> 31;
   $1650 = (___muldi3(($1647|0),($1649|0),($1643|0),($1645|0))|0);
   $1651 = tempRet0;
   $1652 = HEAP16[((((33440 + 328|0)) + 2|0))>>1]|0;
   $1653 = $1652 << 16 >> 16;
   $1654 = HEAP16[((((33440 + 412|0)) + 2|0))>>1]|0;
   $1655 = $1654 << 16 >> 16;
   $1656 = Math_imul($1655, $1653)|0;
   $1657 = ($1656|0)<(0);
   $1658 = $1657 << 31 >> 31;
   $1659 = (_i64Add(($1656|0),($1658|0),($1650|0),($1651|0))|0);
   $1660 = tempRet0;
   $1661 = HEAP16[((33440 + 332|0))>>1]|0;
   $1662 = $1661 << 16 >> 16;
   $1663 = HEAP16[((33440 + 416|0))>>1]|0;
   $1664 = $1663 << 16 >> 16;
   $1665 = Math_imul($1664, $1662)|0;
   $1666 = ($1665|0)<(0);
   $1667 = $1666 << 31 >> 31;
   $1668 = (_i64Add(($1659|0),($1660|0),($1665|0),($1667|0))|0);
   $1669 = tempRet0;
   $1670 = (_bitshift64Ashr(($1668|0),($1669|0),12)|0);
   $1671 = tempRet0;
   $1672 = (_BOUNDS($1670,$1671,2147483647,0,28,-2147483648,-1,33554432)|0);
   $1673 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $1672;
   $1674 = HEAP32[((33440 + 512|0))>>2]|0;
   $1675 = (_LIM($1674,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $1675;
   $1676 = HEAP32[((33440 + 516|0))>>2]|0;
   $1677 = (_LIM($1676,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $1677;
   $1678 = HEAP32[((33440 + 520|0))>>2]|0;
   $1679 = (_LIM($1678,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $1679;
   $1680 = HEAP32[((33440 + 336|0))>>2]|0;
   $1681 = (_bitshift64Shl(($1680|0),0,12)|0);
   $1682 = tempRet0;
   $1683 = HEAP16[((33440 + 348|0))>>1]|0;
   $1684 = $1683 << 16 >> 16;
   $1685 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext47 = $1685 << 16;
   $1686 = $sext47 >> 16;
   $1687 = Math_imul($1686, $1684)|0;
   $1688 = ($1687|0)<(0);
   $1689 = $1688 << 31 >> 31;
   $1690 = (_i64Add(($1687|0),($1689|0),($1681|0),($1682|0))|0);
   $1691 = tempRet0;
   $1692 = HEAP16[((((33440 + 348|0)) + 2|0))>>1]|0;
   $1693 = $1692 << 16 >> 16;
   $1694 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext48 = $1694 << 16;
   $1695 = $sext48 >> 16;
   $1696 = Math_imul($1695, $1693)|0;
   $1697 = ($1696|0)<(0);
   $1698 = $1697 << 31 >> 31;
   $1699 = (_i64Add(($1690|0),($1691|0),($1696|0),($1698|0))|0);
   $1700 = tempRet0;
   $1701 = HEAP16[((33440 + 352|0))>>1]|0;
   $1702 = $1701 << 16 >> 16;
   $sext49 = $1679 << 16;
   $1703 = $sext49 >> 16;
   $1704 = Math_imul($1702, $1703)|0;
   $1705 = ($1704|0)<(0);
   $1706 = $1705 << 31 >> 31;
   $1707 = (_i64Add(($1699|0),($1700|0),($1704|0),($1706|0))|0);
   $1708 = tempRet0;
   $1709 = (_bitshift64Ashr(($1707|0),($1708|0),12)|0);
   $1710 = tempRet0;
   $1711 = (_BOUNDS($1709,$1710,2147483647,0,30,-2147483648,-1,134217728)|0);
   $1712 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $1711;
   $1713 = HEAP32[((33440 + 340|0))>>2]|0;
   $1714 = (_bitshift64Shl(($1713|0),0,12)|0);
   $1715 = tempRet0;
   $1716 = HEAP16[((((33440 + 352|0)) + 2|0))>>1]|0;
   $1717 = $1716 << 16 >> 16;
   $1718 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext50 = $1718 << 16;
   $1719 = $sext50 >> 16;
   $1720 = Math_imul($1719, $1717)|0;
   $1721 = ($1720|0)<(0);
   $1722 = $1721 << 31 >> 31;
   $1723 = (_i64Add(($1720|0),($1722|0),($1714|0),($1715|0))|0);
   $1724 = tempRet0;
   $1725 = HEAP16[((33440 + 356|0))>>1]|0;
   $1726 = $1725 << 16 >> 16;
   $1727 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext51 = $1727 << 16;
   $1728 = $sext51 >> 16;
   $1729 = Math_imul($1728, $1726)|0;
   $1730 = ($1729|0)<(0);
   $1731 = $1730 << 31 >> 31;
   $1732 = (_i64Add(($1723|0),($1724|0),($1729|0),($1731|0))|0);
   $1733 = tempRet0;
   $1734 = HEAP16[((((33440 + 356|0)) + 2|0))>>1]|0;
   $1735 = $1734 << 16 >> 16;
   $1736 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext52 = $1736 << 16;
   $1737 = $sext52 >> 16;
   $1738 = Math_imul($1737, $1735)|0;
   $1739 = ($1738|0)<(0);
   $1740 = $1739 << 31 >> 31;
   $1741 = (_i64Add(($1732|0),($1733|0),($1738|0),($1740|0))|0);
   $1742 = tempRet0;
   $1743 = (_bitshift64Ashr(($1741|0),($1742|0),12)|0);
   $1744 = tempRet0;
   $1745 = (_BOUNDS($1743,$1744,2147483647,0,29,-2147483648,-1,67108864)|0);
   $1746 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $1745;
   $1747 = HEAP32[((33440 + 344|0))>>2]|0;
   $1748 = (_bitshift64Shl(($1747|0),0,12)|0);
   $1749 = tempRet0;
   $1750 = HEAP16[((33440 + 360|0))>>1]|0;
   $1751 = $1750 << 16 >> 16;
   $1752 = HEAP32[((33440 + 448|0))>>2]|0;
   $sext53 = $1752 << 16;
   $1753 = $sext53 >> 16;
   $1754 = Math_imul($1753, $1751)|0;
   $1755 = ($1754|0)<(0);
   $1756 = $1755 << 31 >> 31;
   $1757 = (_i64Add(($1754|0),($1756|0),($1748|0),($1749|0))|0);
   $1758 = tempRet0;
   $1759 = HEAP16[((((33440 + 360|0)) + 2|0))>>1]|0;
   $1760 = $1759 << 16 >> 16;
   $1761 = HEAP32[((33440 + 452|0))>>2]|0;
   $sext54 = $1761 << 16;
   $1762 = $sext54 >> 16;
   $1763 = Math_imul($1762, $1760)|0;
   $1764 = ($1763|0)<(0);
   $1765 = $1764 << 31 >> 31;
   $1766 = (_i64Add(($1757|0),($1758|0),($1763|0),($1765|0))|0);
   $1767 = tempRet0;
   $1768 = HEAP16[((33440 + 364|0))>>1]|0;
   $1769 = $1768 << 16 >> 16;
   $1770 = HEAP32[((33440 + 456|0))>>2]|0;
   $sext55 = $1770 << 16;
   $1771 = $sext55 >> 16;
   $1772 = Math_imul($1771, $1769)|0;
   $1773 = ($1772|0)<(0);
   $1774 = $1773 << 31 >> 31;
   $1775 = (_i64Add(($1766|0),($1767|0),($1772|0),($1774|0))|0);
   $1776 = tempRet0;
   $1777 = (_bitshift64Ashr(($1775|0),($1776|0),12)|0);
   $1778 = tempRet0;
   $1779 = (_BOUNDS($1777,$1778,2147483647,0,28,-2147483648,-1,33554432)|0);
   $1780 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $1779;
   $1781 = HEAP32[((33440 + 512|0))>>2]|0;
   $1782 = (_LIM($1781,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $1782;
   $1783 = HEAP32[((33440 + 516|0))>>2]|0;
   $1784 = (_LIM($1783,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $1784;
   $1785 = HEAP32[((33440 + 520|0))>>2]|0;
   $1786 = (_LIM($1785,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $1786;
   $1787 = HEAP8[((33440 + 436|0))>>0]|0;
   $1788 = $1787&255;
   $1789 = HEAP32[((33440 + 448|0))>>2]|0;
   $1790 = $1789&65535;
   $1791 = $1790 << 16 >> 16;
   $1792 = ($1791|0)<(0);
   $1793 = $1792 << 31 >> 31;
   $1794 = (___muldi3(($1791|0),($1793|0),($1788|0),0)|0);
   $1795 = tempRet0;
   $1796 = (_bitshift64Ashr(($1794|0),($1795|0),8)|0);
   $1797 = tempRet0;
   $1798 = (_BOUNDS($1796,$1797,2147483647,0,30,-2147483648,-1,134217728)|0);
   $1799 = tempRet0;
   HEAP32[((33440 + 512|0))>>2] = $1798;
   $1800 = HEAP8[((((33440 + 436|0)) + 1|0))>>0]|0;
   $1801 = $1800&255;
   $1802 = HEAP32[((33440 + 452|0))>>2]|0;
   $1803 = $1802&65535;
   $1804 = $1803 << 16 >> 16;
   $1805 = ($1804|0)<(0);
   $1806 = $1805 << 31 >> 31;
   $1807 = (___muldi3(($1804|0),($1806|0),($1801|0),0)|0);
   $1808 = tempRet0;
   $1809 = (_bitshift64Ashr(($1807|0),($1808|0),8)|0);
   $1810 = tempRet0;
   $1811 = (_BOUNDS($1809,$1810,2147483647,0,29,-2147483648,-1,67108864)|0);
   $1812 = tempRet0;
   HEAP32[((33440 + 516|0))>>2] = $1811;
   $1813 = HEAP8[((((33440 + 436|0)) + 2|0))>>0]|0;
   $1814 = $1813&255;
   $1815 = HEAP32[((33440 + 456|0))>>2]|0;
   $1816 = $1815&65535;
   $1817 = $1816 << 16 >> 16;
   $1818 = ($1817|0)<(0);
   $1819 = $1818 << 31 >> 31;
   $1820 = (___muldi3(($1817|0),($1819|0),($1814|0),0)|0);
   $1821 = tempRet0;
   $1822 = (_bitshift64Ashr(($1820|0),($1821|0),8)|0);
   $1823 = tempRet0;
   $1824 = (_BOUNDS($1822,$1823,2147483647,0,28,-2147483648,-1,33554432)|0);
   $1825 = tempRet0;
   HEAP32[((33440 + 520|0))>>2] = $1824;
   $1826 = HEAP32[((33440 + 512|0))>>2]|0;
   $1827 = (_LIM($1826,32767,0,-2130706432)|0);
   HEAP32[((33440 + 448|0))>>2] = $1827;
   $1828 = HEAP32[((33440 + 516|0))>>2]|0;
   $1829 = (_LIM($1828,32767,0,-2139095040)|0);
   HEAP32[((33440 + 452|0))>>2] = $1829;
   $1830 = HEAP32[((33440 + 520|0))>>2]|0;
   $1831 = (_LIM($1830,32767,0,4194304)|0);
   HEAP32[((33440 + 456|0))>>2] = $1831;
   $1832 = HEAP8[((((33440 + 496|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 3|0))>>0] = $1832;
   $1833 = HEAP8[((((33440 + 500|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 3|0))>>0] = $1833;
   $1834 = HEAP8[((((33440 + 436|0)) + 3|0))>>0]|0;
   HEAP8[((((33440 + 500|0)) + 3|0))>>0] = $1834;
   $1835 = HEAP8[((33440 + 496|0))>>0]|0;
   HEAP8[((33440 + 492|0))>>0] = $1835;
   $1836 = HEAP8[((33440 + 500|0))>>0]|0;
   HEAP8[((33440 + 496|0))>>0] = $1836;
   $1837 = HEAP32[((33440 + 512|0))>>2]|0;
   $1838 = $1837 >> 4;
   $1839 = (_LIM($1838,255,0,2097152)|0);
   $1840 = $1839&255;
   HEAP8[((33440 + 500|0))>>0] = $1840;
   $1841 = HEAP8[((((33440 + 496|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 1|0))>>0] = $1841;
   $1842 = HEAP8[((((33440 + 500|0)) + 1|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 1|0))>>0] = $1842;
   $1843 = HEAP32[((33440 + 516|0))>>2]|0;
   $1844 = $1843 >> 4;
   $1845 = (_LIM($1844,255,0,1048576)|0);
   $1846 = $1845&255;
   HEAP8[((((33440 + 500|0)) + 1|0))>>0] = $1846;
   $1847 = HEAP8[((((33440 + 496|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 492|0)) + 2|0))>>0] = $1847;
   $1848 = HEAP8[((((33440 + 500|0)) + 2|0))>>0]|0;
   HEAP8[((((33440 + 496|0)) + 2|0))>>0] = $1848;
   $1849 = HEAP32[((33440 + 520|0))>>2]|0;
   $1850 = $1849 >> 4;
   $1851 = (_LIM($1850,255,0,524288)|0);
   $1852 = $1851&255;
   HEAP8[((((33440 + 500|0)) + 2|0))>>0] = $1852;
   return;
   break;
  }
  default: {
   return;
  }
  }
 } while(0);
}
function _set_irq_line($irqline,$state) {
 $irqline = $irqline|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ip$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($irqline|0) {
 case 1:  {
  $ip$0 = 2048;
  break;
 }
 case 0:  {
  $ip$0 = 1024;
  break;
 }
 case 4:  {
  $ip$0 = 16384;
  break;
 }
 case 5:  {
  $ip$0 = 32768;
  break;
 }
 case 3:  {
  $ip$0 = 8192;
  break;
 }
 case 2:  {
  $ip$0 = 4096;
  break;
 }
 default: {
  return;
 }
 }
 if ((($state|0) == 1)) {
  $3 = HEAP32[((33440 + 208|0))>>2]|0;
  $4 = $3 | $ip$0;
  HEAP32[((33440 + 208|0))>>2] = $4;
  _mips_set_cp0r(13,$4);
  $5 = HEAP32[((33440 + 540|0))>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   return;
  }
  (FUNCTION_TABLE_ii[$5 & 1]($irqline)|0);
  return;
 } else if ((($state|0) == 0)) {
  $0 = HEAP32[((33440 + 208|0))>>2]|0;
  $1 = $ip$0 ^ -1;
  $2 = $0 & $1;
  _mips_set_cp0r(13,$2);
  return;
 } else {
  return;
 }
}
function _mips_get_context($dst) {
 $dst = $dst|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dst|0)==(0|0);
 if ($0) {
  return;
 }
 _memcpy(($dst|0),(33440|0),544)|0;
 return;
}
function _mips_set_context($src) {
 $src = $src|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($src|0)==(0|0);
 if ($0) {
  return;
 }
 _memcpy((33440|0),($src|0),544)|0;
 return;
}
function _mips_exit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _mips_commit_delayed_load() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((33440 + 16|0))>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[((33440 + 12|0))>>2]|0;
 $3 = ((33440 + ($0<<2)|0) + 28|0);
 HEAP32[$3>>2] = $2;
 HEAP32[((33440 + 16|0))>>2] = 0;
 HEAP32[((33440 + 12|0))>>2] = 0;
 return;
}
function _BOUNDS($0,$1,$2,$3,$n_maxflag,$4,$5,$n_minflag) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $n_maxflag = $n_maxflag|0;
 $4 = $4|0;
 $5 = $5|0;
 $n_minflag = $n_minflag|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($1|0)>($3|0);
 $7 = ($0>>>0)>($2>>>0);
 $8 = ($1|0)==($3|0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $11 = HEAP32[((33440 + 408|0))>>2]|0;
  $12 = $11 | $n_maxflag;
  HEAP32[((33440 + 408|0))>>2] = $12;
  tempRet0 = $1;
  return ($0|0);
 }
 $13 = ($1|0)<($5|0);
 $14 = ($0>>>0)<($4>>>0);
 $15 = ($1|0)==($5|0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 if (!($17)) {
  tempRet0 = $1;
  return ($0|0);
 }
 $18 = HEAP32[((33440 + 408|0))>>2]|0;
 $19 = $18 | $n_minflag;
 HEAP32[((33440 + 408|0))>>2] = $19;
 tempRet0 = $1;
 return ($0|0);
}
function _LIM($n_value,$n_max,$n_min,$n_flag) {
 $n_value = $n_value|0;
 $n_max = $n_max|0;
 $n_min = $n_min|0;
 $n_flag = $n_flag|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_value|0)>($n_max|0);
 if ($0) {
  $1 = HEAP32[((33440 + 408|0))>>2]|0;
  $2 = $1 | $n_flag;
  HEAP32[((33440 + 408|0))>>2] = $2;
  $$0 = $n_max;
  return ($$0|0);
 }
 $3 = ($n_value|0)<($n_min|0);
 if (!($3)) {
  $$0 = $n_value;
  return ($$0|0);
 }
 $4 = HEAP32[((33440 + 408|0))>>2]|0;
 $5 = $4 | $n_flag;
 HEAP32[((33440 + 408|0))>>2] = $5;
 $$0 = $n_min;
 return ($$0|0);
}
function _Lm_E($n_z) {
 $n_z = $n_z|0;
 var $$$0 = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[((33440 + 388|0))>>1]|0;
 $div = ($0&65535) >>> 1;
 $1 = $div&65535;
 $2 = ($1>>>0)<($n_z>>>0);
 if ($2) {
  $$0 = $n_z;
 } else {
  $3 = HEAP32[((33440 + 408|0))>>2]|0;
  $4 = $3 | -2147352576;
  HEAP32[((33440 + 408|0))>>2] = $4;
  $$0 = $1;
 }
 $5 = ($$0|0)==(0);
 $$$0 = $5 ? 1 : $$0;
 return ($$$0|0);
}
function _psx_irq_set($irq) {
 $irq = $irq|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[34760>>2]|0;
 $1 = $0 | $irq;
 HEAP32[34760>>2] = $1;
 _psx_irq_update();
 return;
}
function _psx_hw_read($offset,$mem_mask) {
 $offset = $offset|0;
 $mem_mask = $mem_mask|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset$off = 0, $or$cond3 = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $0 = ($offset>>>0)<(8388608);
 L1: do {
  if ($0) {
   $1 = $offset >>> 2;
   $2 = $1 & 524287;
   $3 = (34768 + ($2<<2)|0);
   $4 = HEAP32[$3>>2]|0;
   $$0 = $4;
  } else {
   $5 = ($offset|0)<(0);
   $6 = ($offset>>>0)<(2155872256);
   $or$cond3 = $5 & $6;
   if ($or$cond3) {
    $7 = $offset >>> 2;
    $8 = $7 & 524287;
    $9 = (34768 + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $$0 = $10;
    break;
   }
   $11 = $offset & -5;
   $12 = ($11|0)==(-1077935744);
   if ($12) {
    $$0 = 11;
   } else {
    if ((($offset|0) == 528486420)) {
     $13 = HEAP32[2131920>>2]|0;
     $$0 = $13;
     break;
    } else if ((($offset|0) == -1082126316)) {
     $14 = HEAP32[2131920>>2]|0;
     $$0 = $14;
     break;
    } else if ((($offset|0) == 528488468)) {
     $15 = HEAP32[2131928>>2]|0;
     $16 = $15 ^ -1;
     HEAP32[2131928>>2] = $16;
     $$0 = $16;
     break;
    } else {
     $17 = $offset & -512;
     $18 = ($17|0)==(528489472);
     do {
      if ($18) {
       if ((($mem_mask|0) == -65536) | (($mem_mask|0) == -256)) {
        $19 = (_SPUreadRegister($offset)|0);
        $20 = $19&65535;
        $21 = $mem_mask ^ -1;
        $22 = $20 & $21;
        $$0 = $22;
        break L1;
       } else if ((($mem_mask|0) == 65535)) {
        $23 = (_SPUreadRegister($offset)|0);
        $24 = $23&65535;
        $25 = $24 << 16;
        $$0 = $25;
        break L1;
       } else {
        HEAP32[$vararg_buffer1>>2] = $mem_mask;
        (_printf((2131936|0),($vararg_buffer1|0))|0);
        break;
       }
      }
     } while(0);
     $26 = $offset & -2048;
     $27 = ($26|0)==(-1081081856);
     do {
      if ($27) {
       if ((($mem_mask|0) == -65536) | (($mem_mask|0) == -256)) {
        $28 = (_SPU2read($offset)|0);
        $29 = $28&65535;
        $30 = $mem_mask ^ -1;
        $31 = $29 & $30;
        $$0 = $31;
        break L1;
       } else if ((($mem_mask|0) == 65535)) {
        $32 = (_SPU2read($offset)|0);
        $33 = $32&65535;
        $34 = $33 << 16;
        $$0 = $34;
        break L1;
       } else if ((($mem_mask|0) == 0)) {
        $35 = (_SPU2read($offset)|0);
        $36 = $35&65535;
        $37 = (($offset) + 2)|0;
        $38 = (_SPU2read($37)|0);
        $39 = $38&65535;
        $40 = $39 << 16;
        $41 = $40 | $36;
        $$0 = $41;
        break L1;
       } else {
        HEAP32[$vararg_buffer1>>2] = $mem_mask;
        (_printf((2131968|0),($vararg_buffer1|0))|0);
        break;
       }
      }
     } while(0);
     $offset$off = (($offset) + -528486656)|0;
     $42 = ($offset$off>>>0)<(41);
     if ($42) {
      $43 = $offset >>> 4;
      $44 = $43 & 15;
      $45 = $offset & 15;
      if ((($45|0) == 4)) {
       $48 = ((2132000 + ($44<<4)|0) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $$0 = $49;
       break;
      } else if ((($45|0) == 8)) {
       $50 = ((2132000 + ($44<<4)|0) + 8|0);
       $51 = HEAP32[$50>>2]|0;
       $$0 = $51;
       break;
      } else if ((($45|0) == 0)) {
       $46 = (2132000 + ($44<<4)|0);
       $47 = HEAP32[$46>>2]|0;
       $$0 = $47;
       break;
      } else {
       $$0 = 0;
       break;
      }
     }
     if ((($offset|0) == 528486644)) {
      $52 = HEAP32[2132048>>2]|0;
      $$0 = $52;
      break;
     } else if ((($offset|0) == 528486512)) {
      $53 = HEAP32[34760>>2]|0;
      $$0 = $53;
      break;
     } else if ((($offset|0) == 528486516)) {
      $54 = HEAP32[2132056>>2]|0;
      $$0 = $54;
      break;
     } else if ((($offset|0) == -1080949948)) {
      $$0 = -2139062144;
      break;
     } else {
      $$0 = 0;
      break;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _psx_hw_write($offset,$data,$mem_mask) {
 $offset = $offset|0;
 $data = $data|0;
 $mem_mask = $mem_mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $mipsinfo = 0, $offset$off = 0, $or$cond3 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $mipsinfo = sp;
 $0 = ($offset>>>0)<(8388608);
 if ($0) {
  _mips_get_info(20,$mipsinfo);
  $1 = $offset >>> 2;
  $2 = $1 & 524287;
  $3 = (34768 + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & $mem_mask;
  $6 = $5 | $data;
  HEAP32[$3>>2] = $6;
  STACKTOP = sp;return;
 }
 $7 = ($offset|0)<(0);
 $8 = ($offset>>>0)<(2155872256);
 $or$cond3 = $7 & $8;
 if ($or$cond3) {
  _mips_get_info(20,$mipsinfo);
  $9 = $offset >>> 2;
  $10 = $9 & 524287;
  $11 = (34768 + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & $mem_mask;
  $14 = $13 | $data;
  HEAP32[$11>>2] = $14;
  STACKTOP = sp;return;
 }
 if ((($offset|0) == 528486420) | (($offset|0) == -1082126316)) {
  $15 = HEAP32[2131920>>2]|0;
  $16 = $15 & $mem_mask;
  $17 = $16 | $data;
  HEAP32[2131920>>2] = $17;
  STACKTOP = sp;return;
 }
 $18 = $offset & -512;
 $19 = ($18|0)==(528489472);
 do {
  if ($19) {
   if ((($mem_mask|0) == -65536)) {
    $20 = $data&65535;
    _SPUwriteRegister($offset,$20);
    STACKTOP = sp;return;
   } else if ((($mem_mask|0) == 65535)) {
    $21 = $data >>> 16;
    $22 = $21&65535;
    _SPUwriteRegister($offset,$22);
    STACKTOP = sp;return;
   } else {
    HEAP32[$vararg_buffer1>>2] = $mem_mask;
    (_printf((2132064|0),($vararg_buffer1|0))|0);
    break;
   }
  }
 } while(0);
 $23 = $offset & -2048;
 $24 = ($23|0)==(-1081081856);
 do {
  if ($24) {
   if ((($mem_mask|0) == -65536)) {
    $25 = $data&65535;
    _SPU2write($offset,$25);
    STACKTOP = sp;return;
   } else if ((($mem_mask|0) == 65535)) {
    $26 = $data >>> 16;
    $27 = $26&65535;
    _SPU2write($offset,$27);
    STACKTOP = sp;return;
   } else if ((($mem_mask|0) == 0)) {
    $28 = $data&65535;
    _SPU2write($offset,$28);
    $29 = (($offset) + 2)|0;
    $30 = $data >>> 16;
    $31 = $30&65535;
    _SPU2write($29,$31);
    STACKTOP = sp;return;
   } else {
    HEAP32[$vararg_buffer1>>2] = $mem_mask;
    (_printf((2132096|0),($vararg_buffer1|0))|0);
    break;
   }
  }
 } while(0);
 $offset$off = (($offset) + -528486656)|0;
 $32 = ($offset$off>>>0)<(41);
 if ($32) {
  $33 = $offset >>> 4;
  $34 = $33 & 15;
  $35 = $offset & 15;
  if ((($35|0) == 4)) {
   $37 = ((2132000 + ($34<<4)|0) + 4|0);
   HEAP32[$37>>2] = $data;
   STACKTOP = sp;return;
  } else if ((($35|0) == 8)) {
   $38 = ((2132000 + ($34<<4)|0) + 8|0);
   HEAP32[$38>>2] = $data;
   STACKTOP = sp;return;
  } else if ((($35|0) == 0)) {
   $36 = (2132000 + ($34<<4)|0);
   HEAP32[$36>>2] = $data;
   STACKTOP = sp;return;
  } else {
   STACKTOP = sp;return;
  }
 }
 if ((($offset|0) == 528486600)) {
  $39 = HEAP32[2132128>>2]|0;
  $40 = HEAP32[2132136>>2]|0;
  _psx_dma4($39,$40,$data);
  $41 = HEAP32[2132048>>2]|0;
  $42 = $41 & 1048576;
  $43 = ($42|0)==(0);
  if ($43) {
   STACKTOP = sp;return;
  }
  HEAP32[2132144>>2] = 3;
  STACKTOP = sp;return;
 } else if ((($offset|0) == 528486644)) {
  $44 = HEAP32[2132048>>2]|0;
  $45 = $mem_mask ^ -1;
  $46 = $45 & -2147483648;
  $47 = $46 | $mem_mask;
  $48 = $data ^ 2130706432;
  $49 = $45 & 2130706432;
  $50 = $49 & $48;
  $51 = $47 | $50;
  $52 = $44 & $51;
  $53 = $data & 16777215;
  $54 = $53 & $45;
  $55 = $52 | $54;
  HEAP32[2132048>>2] = $55;
  $56 = $52 & 2130706432;
  $57 = ($56|0)==(0);
  if ($57) {
   STACKTOP = sp;return;
  }
  $58 = $55 & 2147483647;
  HEAP32[2132048>>2] = $58;
  STACKTOP = sp;return;
 } else if ((($offset|0) == 528486512)) {
  $59 = HEAP32[34760>>2]|0;
  $60 = $59 & $mem_mask;
  $61 = HEAP32[2132056>>2]|0;
  $62 = $59 & $data;
  $63 = $62 & $61;
  $64 = $63 | $60;
  HEAP32[34760>>2] = $64;
  _psx_irq_update();
  STACKTOP = sp;return;
 } else if ((($offset|0) == 528486516)) {
  $65 = HEAP32[2132056>>2]|0;
  $66 = $65 & $mem_mask;
  $67 = $66 | $data;
  HEAP32[2132056>>2] = $67;
  _psx_irq_update();
  STACKTOP = sp;return;
 } else if ((($offset|0) == -1082126144)) {
  HEAP32[2132128>>2] = $data;
  STACKTOP = sp;return;
 } else if ((($offset|0) == -1082126136)) {
  $68 = HEAP32[2132128>>2]|0;
  $69 = HEAP32[2132136>>2]|0;
  _ps2_dma4($68,$69,$data);
  $70 = HEAP32[2132048>>2]|0;
  $71 = $70 & 1048576;
  $72 = ($71|0)==(0);
  if ($72) {
   STACKTOP = sp;return;
  }
  HEAP32[2132144>>2] = 3;
  STACKTOP = sp;return;
 } else if ((($offset|0) == 528486592)) {
  HEAP32[2132128>>2] = $data;
  STACKTOP = sp;return;
 } else if ((($offset|0) == 528486596)) {
  HEAP32[2132136>>2] = $data;
  STACKTOP = sp;return;
 } else {
  $73 = $offset & -3;
  $74 = ($73|0)==(-1082126140);
  if ($74) {
   $75 = HEAP32[2132136>>2]|0;
   $76 = $75 & $mem_mask;
   $77 = $76 | $data;
   HEAP32[2132136>>2] = $77;
   STACKTOP = sp;return;
  }
  if ((($offset|0) == -1082125056)) {
   HEAP32[2132152>>2] = $data;
   STACKTOP = sp;return;
  } else if ((($offset|0) == -1082125052)) {
   $78 = HEAP32[2132152>>2]|0;
   $79 = HEAP32[2132160>>2]|0;
   _ps2_dma7($78,$79,$data);
   STACKTOP = sp;return;
  } else {
   $80 = ($73|0)==(-1082125048);
   if (!($80)) {
    STACKTOP = sp;return;
   }
   $81 = HEAP32[2132160>>2]|0;
   $82 = $81 & $mem_mask;
   $83 = $82 | $data;
   HEAP32[2132160>>2] = $83;
   STACKTOP = sp;return;
  }
 }
}
function _psx_hw_slice() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _psx_hw_runcounters();
 $0 = HEAP32[2132168>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  (_mips_execute(96)|0);
 }
 $2 = HEAP32[2132144>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = (($2) + -1)|0;
 HEAP32[2132144>>2] = $4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  return;
 }
 $6 = HEAP32[2132048>>2]|0;
 $7 = $6 | 268435456;
 HEAP32[2132048>>2] = $7;
 _psx_irq_set(8);
 return;
}
function _psx_hw_runcounters() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i$06 = 0, $i$15 = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond$2 = 0, $storemerge = 0, $storemerge$1 = 0, $storemerge$2 = 0, $storemerge$v = 0, $storemerge$v$1 = 0, $storemerge$v$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2141408>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[2141416>>2]|0;
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (($2) + -1)|0;
   HEAP32[2141416>>2] = $4;
   $5 = ($4|0)==(0);
   if ($5) {
    _SPU2interruptDMA4();
    $6 = HEAP32[2132640>>2]|0;
    $7 = ($6|0)==(0);
    if (!($7)) {
     $8 = HEAP32[2141424>>2]|0;
     _call_irq_routine($6,$8);
    }
   }
  }
  $9 = HEAP32[2141432>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = (($9) + -1)|0;
   HEAP32[2141432>>2] = $11;
   $12 = ($11|0)==(0);
   if ($12) {
    _SPU2interruptDMA7();
    $13 = HEAP32[2132632>>2]|0;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $15 = HEAP32[2141440>>2]|0;
     _call_irq_routine($13,$15);
    }
   }
  }
  $16 = HEAP32[2139328>>2]|0;
  $17 = ($16|0)>(0);
  if ($17) {
   $i$06 = 0;
   while(1) {
    $18 = (2133696 + (($i$06*176)|0)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(4);
    do {
     if ($20) {
      $21 = ((2133696 + (($i$06*176)|0)|0) + 24|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22>>>0)>(8);
      if ($23) {
       $24 = (($22) + -8)|0;
       HEAP32[$21>>2] = $24;
       break;
      } else {
       HEAP32[$21>>2] = 0;
       HEAP32[$18>>2] = 1;
       HEAP32[2132176>>2] = 1;
       _ps2_reschedule();
       break;
      }
     }
    } while(0);
    $25 = (($i$06) + 1)|0;
    $26 = HEAP32[2139328>>2]|0;
    $27 = ($25|0)<($26|0);
    if ($27) {
     $i$06 = $25;
    } else {
     break;
    }
   }
  }
  $28 = 2132648;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_i64Add(($30|0),($33|0),836,0)|0);
  $35 = tempRet0;
  $36 = 2132648;
  $37 = $36;
  HEAP32[$37>>2] = $34;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
  $40 = HEAP32[2141384>>2]|0;
  $41 = ($40|0)>(0);
  if ($41) {
   $i$15 = 0;
   while(1) {
    $42 = (2141128 + ($i$15<<5)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)>(0);
    if ($44) {
     $45 = ((2141128 + ($i$15<<5)|0) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + 836)|0;
     HEAP32[$45>>2] = $47;
     $48 = ((2141128 + ($i$15<<5)|0) + 8|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($47>>>0)<($49>>>0);
     if (!($50)) {
      $51 = (($47) - ($49))|0;
      HEAP32[$45>>2] = $51;
      $52 = ((2141128 + ($i$15<<5)|0) + 20|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ((2141128 + ($i$15<<5)|0) + 24|0);
      $55 = HEAP32[$54>>2]|0;
      _call_irq_routine($53,$55);
      HEAP32[2132176>>2] = 1;
     }
    }
    $56 = (($i$15) + 1)|0;
    $57 = HEAP32[2141384>>2]|0;
    $58 = ($56|0)<($57|0);
    if ($58) {
     $i$15 = $56;
    } else {
     break;
    }
   }
  }
 }
 $59 = HEAP32[((2132000 + 4|0))>>2]|0;
 $60 = $59 & 1;
 $61 = ($60|0)!=(0);
 $62 = ($59|0)==(0);
 $or$cond = $61 | $62;
 if (!($or$cond)) {
  $63 = $59 & 512;
  $64 = ($63|0)==(0);
  $65 = HEAP32[2132000>>2]|0;
  $storemerge$v = $64 ? 768 : 96;
  $storemerge = (($65) + ($storemerge$v))|0;
  HEAP32[2132000>>2] = $storemerge;
  $66 = HEAP32[((2132000 + 8|0))>>2]|0;
  $67 = ($storemerge>>>0)<($66>>>0);
  if (!($67)) {
   $68 = HEAP32[((2132000 + 4|0))>>2]|0;
   $69 = $68 & 8;
   $70 = ($69|0)==(0);
   if ($70) {
    $71 = $68 | 1;
    HEAP32[((2132000 + 4|0))>>2] = $71;
   } else {
    $72 = (($storemerge>>>0) % ($66>>>0))&-1;
    HEAP32[2132000>>2] = $72;
   }
   _psx_irq_set(16);
  }
 }
 $73 = HEAP32[((2132000 + 20|0))>>2]|0;
 $74 = $73 & 1;
 $75 = ($74|0)!=(0);
 $76 = ($73|0)==(0);
 $or$cond$1 = $75 | $76;
 if (!($or$cond$1)) {
  $77 = $73 & 512;
  $78 = ($77|0)==(0);
  $79 = HEAP32[((2132000 + 16|0))>>2]|0;
  $storemerge$v$1 = $78 ? 768 : 96;
  $storemerge$1 = (($79) + ($storemerge$v$1))|0;
  HEAP32[((2132000 + 16|0))>>2] = $storemerge$1;
  $80 = HEAP32[((2132000 + 24|0))>>2]|0;
  $81 = ($storemerge$1>>>0)<($80>>>0);
  if (!($81)) {
   $82 = HEAP32[((2132000 + 20|0))>>2]|0;
   $83 = $82 & 8;
   $84 = ($83|0)==(0);
   if ($84) {
    $86 = $82 | 1;
    HEAP32[((2132000 + 20|0))>>2] = $86;
   } else {
    $85 = (($storemerge$1>>>0) % ($80>>>0))&-1;
    HEAP32[((2132000 + 16|0))>>2] = $85;
   }
   _psx_irq_set(32);
  }
 }
 $87 = HEAP32[((2132000 + 36|0))>>2]|0;
 $88 = $87 & 1;
 $89 = ($88|0)!=(0);
 $90 = ($87|0)==(0);
 $or$cond$2 = $89 | $90;
 if ($or$cond$2) {
  return;
 }
 $91 = $87 & 512;
 $92 = ($91|0)==(0);
 $93 = HEAP32[((2132000 + 32|0))>>2]|0;
 $storemerge$v$2 = $92 ? 768 : 96;
 $storemerge$2 = (($93) + ($storemerge$v$2))|0;
 HEAP32[((2132000 + 32|0))>>2] = $storemerge$2;
 $94 = HEAP32[((2132000 + 40|0))>>2]|0;
 $95 = ($storemerge$2>>>0)<($94>>>0);
 if ($95) {
  return;
 }
 $96 = HEAP32[((2132000 + 36|0))>>2]|0;
 $97 = $96 & 8;
 $98 = ($97|0)==(0);
 if ($98) {
  $100 = $96 | 1;
  HEAP32[((2132000 + 36|0))>>2] = $100;
 } else {
  $99 = (($storemerge$2>>>0) % ($94>>>0))&-1;
  HEAP32[((2132000 + 32|0))>>2] = $99;
 }
 _psx_irq_set(64);
 return;
}
function _psx_hw_frame() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[33024>>2]|0;
 $1 = ($0|0)==(50);
 if (!($1)) {
  _psx_irq_set(1);
  return;
 }
 $2 = HEAP32[2132192>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[2132192>>2] = $3;
 $4 = ($3|0)<(6);
 if ($4) {
  _psx_irq_set(1);
  return;
 } else {
  HEAP32[2132192>>2] = 0;
  return;
 }
}
function _psx_bios_exception($pc) {
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond12 = 0, $i$08 = 0, $i$32 = 0, $mipsinfo = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mipsinfo = sp;
 _mips_get_info(99,$mipsinfo);
 $0 = $mipsinfo;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_mips_get_cause()|0);
 $7 = $6 & 60;
 if ((($7|0) == 32)) {
  $210 = (_mips_get_status()|0);
  if ((($2|0) == 1)) {
   $211 = $210 & -1029;
   $status$0 = $211;
  } else if ((($2|0) == 2)) {
   $212 = $210 | 1028;
   $status$0 = $212;
  } else {
   $status$0 = $210;
  }
  $213 = (_mips_get_ePC()|0);
  $214 = (($213) + 4)|0;
  $215 = $mipsinfo;
  $216 = $215;
  HEAP32[$216>>2] = $214;
  $217 = (($215) + 4)|0;
  $218 = $217;
  HEAP32[$218>>2] = 0;
  _mips_set_info(20,$mipsinfo);
  $219 = $status$0 & -16;
  $220 = $status$0 >>> 2;
  $221 = $220 & 15;
  $222 = $221 | $219;
  _mips_set_status($222);
  STACKTOP = sp;return;
 } else if ((($7|0) == 0)) {
  $i$08 = 0;
  while(1) {
   $8 = (($i$08) + 95)|0;
   _mips_get_info($8,$mipsinfo);
   $9 = $mipsinfo;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (2132200 + ($i$08<<2)|0);
   HEAP32[$15>>2] = $11;
   $16 = (($i$08) + 1)|0;
   $exitcond12 = ($16|0)==(32);
   if ($exitcond12) {
    break;
   } else {
    $i$08 = $16;
   }
  }
  _mips_get_info(93,$mipsinfo);
  $17 = $mipsinfo;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  HEAP32[((2132200 + 128|0))>>2] = $19;
  _mips_get_info(94,$mipsinfo);
  $23 = $mipsinfo;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  HEAP32[((2132200 + 132|0))>>2] = $25;
  $29 = HEAP32[34760>>2]|0;
  $30 = $29 & 1;
  $31 = ($30|0)==(0);
  if ($31) {
   $50 = $29 & 112;
   $51 = ($50|0)==(0);
   if (!($51)) {
    $52 = HEAP32[34760>>2]|0;
    $53 = $52 & 16;
    $54 = ($53|0)==(0);
    if (!($54)) {
     $55 = HEAP32[2132352>>2]|0;
     $56 = (($55) + 20|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(8192);
     if ($58) {
      $59 = (($55) + 28|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = $mipsinfo;
      $62 = $61;
      HEAP32[$62>>2] = $60;
      $63 = (($61) + 4)|0;
      $64 = $63;
      HEAP32[$64>>2] = 0;
      _mips_set_info(20,$mipsinfo);
      $65 = $mipsinfo;
      $66 = $65;
      HEAP32[$66>>2] = -2147479552;
      $67 = (($65) + 4)|0;
      $68 = $67;
      HEAP32[$68>>2] = 0;
      _mips_set_info(126,$mipsinfo);
      HEAP32[((34768 + 4096|0))>>2] = 11;
      HEAP32[2132360>>2] = 0;
      $69 = (_mips_get_icount()|0);
      $70 = HEAP32[2132360>>2]|0;
      $71 = ($70|0)==(0);
      if ($71) {
       while(1) {
        (_mips_execute(10)|0);
        $72 = HEAP32[2132360>>2]|0;
        $73 = ($72|0)==(0);
        if (!($73)) {
         break;
        }
       }
      }
      _mips_set_icount($69);
      $74 = HEAP32[34760>>2]|0;
      $75 = $74 & -17;
      HEAP32[34760>>2] = $75;
     }
    }
    $76 = HEAP32[34760>>2]|0;
    $77 = $76 & 32;
    $78 = ($77|0)==(0);
    if (!($78)) {
     $223 = HEAP32[2132352>>2]|0;
     $224 = (($223) + 532|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = ($225|0)==(8192);
     if ($226) {
      $227 = (($223) + 540|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = $mipsinfo;
      $230 = $229;
      HEAP32[$230>>2] = $228;
      $231 = (($229) + 4)|0;
      $232 = $231;
      HEAP32[$232>>2] = 0;
      _mips_set_info(20,$mipsinfo);
      $233 = $mipsinfo;
      $234 = $233;
      HEAP32[$234>>2] = -2147479552;
      $235 = (($233) + 4)|0;
      $236 = $235;
      HEAP32[$236>>2] = 0;
      _mips_set_info(126,$mipsinfo);
      HEAP32[((34768 + 4096|0))>>2] = 11;
      HEAP32[2132360>>2] = 0;
      $237 = (_mips_get_icount()|0);
      $238 = HEAP32[2132360>>2]|0;
      $239 = ($238|0)==(0);
      if ($239) {
       while(1) {
        (_mips_execute(10)|0);
        $240 = HEAP32[2132360>>2]|0;
        $241 = ($240|0)==(0);
        if (!($241)) {
         break;
        }
       }
      }
      _mips_set_icount($237);
      $242 = HEAP32[34760>>2]|0;
      $243 = $242 & -33;
      HEAP32[34760>>2] = $243;
     }
    }
    $244 = HEAP32[34760>>2]|0;
    $245 = $244 & 64;
    $246 = ($245|0)==(0);
    if (!($246)) {
     $247 = HEAP32[2132352>>2]|0;
     $248 = (($247) + 1044|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(8192);
     if ($250) {
      $251 = (($247) + 1052|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = $mipsinfo;
      $254 = $253;
      HEAP32[$254>>2] = $252;
      $255 = (($253) + 4)|0;
      $256 = $255;
      HEAP32[$256>>2] = 0;
      _mips_set_info(20,$mipsinfo);
      $257 = $mipsinfo;
      $258 = $257;
      HEAP32[$258>>2] = -2147479552;
      $259 = (($257) + 4)|0;
      $260 = $259;
      HEAP32[$260>>2] = 0;
      _mips_set_info(126,$mipsinfo);
      HEAP32[((34768 + 4096|0))>>2] = 11;
      HEAP32[2132360>>2] = 0;
      $261 = (_mips_get_icount()|0);
      $262 = HEAP32[2132360>>2]|0;
      $263 = ($262|0)==(0);
      if ($263) {
       while(1) {
        (_mips_execute(10)|0);
        $264 = HEAP32[2132360>>2]|0;
        $265 = ($264|0)==(0);
        if (!($265)) {
         break;
        }
       }
      }
      _mips_set_icount($261);
      $266 = HEAP32[34760>>2]|0;
      $267 = $266 & -65;
      HEAP32[34760>>2] = $267;
     }
    }
   }
  } else {
   $32 = HEAP32[((34768 + 38420|0))>>2]|0;
   $33 = ($32|0)==(8192);
   if ($33) {
    $34 = HEAP32[((34768 + 38428|0))>>2]|0;
    $35 = $mipsinfo;
    $36 = $35;
    HEAP32[$36>>2] = $34;
    $37 = (($35) + 4)|0;
    $38 = $37;
    HEAP32[$38>>2] = 0;
    _mips_set_info(20,$mipsinfo);
    $39 = $mipsinfo;
    $40 = $39;
    HEAP32[$40>>2] = -2147479552;
    $41 = (($39) + 4)|0;
    $42 = $41;
    HEAP32[$42>>2] = 0;
    _mips_set_info(126,$mipsinfo);
    HEAP32[((34768 + 4096|0))>>2] = 11;
    HEAP32[2132360>>2] = 0;
    $43 = (_mips_get_icount()|0);
    $44 = HEAP32[2132360>>2]|0;
    $45 = ($44|0)==(0);
    if ($45) {
     while(1) {
      (_mips_execute(10)|0);
      $46 = HEAP32[2132360>>2]|0;
      $47 = ($46|0)==(0);
      if (!($47)) {
       break;
      }
     }
    }
    _mips_set_icount($43);
    $48 = HEAP32[34760>>2]|0;
    $49 = $48 & -2;
    HEAP32[34760>>2] = $49;
   }
  }
  $79 = HEAP32[2132368>>2]|0;
  $80 = ($79|0)==(0);
  if (!($80)) {
   _psx_hw_write(528486512,-1,0);
   $81 = HEAP32[2132368>>2]|0;
   $82 = $81 & 2097151;
   $83 = $82 >>> 2;
   $84 = (34768 + ($83<<2)|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $mipsinfo;
   $87 = $86;
   HEAP32[$87>>2] = $85;
   $88 = (($86) + 4)|0;
   $89 = $88;
   HEAP32[$89>>2] = 0;
   _mips_set_info(126,$mipsinfo);
   _mips_set_info(20,$mipsinfo);
   $90 = (($82) + 4)|0;
   $91 = $90 >>> 2;
   $92 = (34768 + ($91<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $mipsinfo;
   $95 = $94;
   HEAP32[$95>>2] = $93;
   $96 = (($94) + 4)|0;
   $97 = $96;
   HEAP32[$97>>2] = 0;
   _mips_set_info(124,$mipsinfo);
   $98 = (($82) + 8)|0;
   $99 = $98 >>> 2;
   $100 = (34768 + ($99<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $mipsinfo;
   $103 = $102;
   HEAP32[$103>>2] = $101;
   $104 = (($102) + 4)|0;
   $105 = $104;
   HEAP32[$105>>2] = 0;
   _mips_set_info(125,$mipsinfo);
   $106 = (($82) + 12)|0;
   $107 = $106 >>> 2;
   $108 = (34768 + ($107<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $mipsinfo;
   $111 = $110;
   HEAP32[$111>>2] = $109;
   $112 = (($110) + 4)|0;
   $113 = $112;
   HEAP32[$113>>2] = 0;
   _mips_set_info(111,$mipsinfo);
   $114 = (($82) + 16)|0;
   $115 = $114 >>> 2;
   $116 = (34768 + ($115<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $mipsinfo;
   $119 = $118;
   HEAP32[$119>>2] = $117;
   $120 = (($118) + 4)|0;
   $121 = $120;
   HEAP32[$121>>2] = 0;
   _mips_set_info(112,$mipsinfo);
   $122 = (($82) + 20)|0;
   $123 = $122 >>> 2;
   $124 = (34768 + ($123<<2)|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $mipsinfo;
   $127 = $126;
   HEAP32[$127>>2] = $125;
   $128 = (($126) + 4)|0;
   $129 = $128;
   HEAP32[$129>>2] = 0;
   _mips_set_info(113,$mipsinfo);
   $130 = (($82) + 24)|0;
   $131 = $130 >>> 2;
   $132 = (34768 + ($131<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $mipsinfo;
   $135 = $134;
   HEAP32[$135>>2] = $133;
   $136 = (($134) + 4)|0;
   $137 = $136;
   HEAP32[$137>>2] = 0;
   _mips_set_info(114,$mipsinfo);
   $138 = (($82) + 28)|0;
   $139 = $138 >>> 2;
   $140 = (34768 + ($139<<2)|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $mipsinfo;
   $143 = $142;
   HEAP32[$143>>2] = $141;
   $144 = (($142) + 4)|0;
   $145 = $144;
   HEAP32[$145>>2] = 0;
   _mips_set_info(115,$mipsinfo);
   $146 = (($82) + 32)|0;
   $147 = $146 >>> 2;
   $148 = (34768 + ($147<<2)|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $mipsinfo;
   $151 = $150;
   HEAP32[$151>>2] = $149;
   $152 = (($150) + 4)|0;
   $153 = $152;
   HEAP32[$153>>2] = 0;
   _mips_set_info(116,$mipsinfo);
   $154 = (($82) + 36)|0;
   $155 = $154 >>> 2;
   $156 = (34768 + ($155<<2)|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $mipsinfo;
   $159 = $158;
   HEAP32[$159>>2] = $157;
   $160 = (($158) + 4)|0;
   $161 = $160;
   HEAP32[$161>>2] = 0;
   _mips_set_info(117,$mipsinfo);
   $162 = (($82) + 40)|0;
   $163 = $162 >>> 2;
   $164 = (34768 + ($163<<2)|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $mipsinfo;
   $167 = $166;
   HEAP32[$167>>2] = $165;
   $168 = (($166) + 4)|0;
   $169 = $168;
   HEAP32[$169>>2] = 0;
   _mips_set_info(118,$mipsinfo);
   $170 = (($82) + 44)|0;
   $171 = $170 >>> 2;
   $172 = (34768 + ($171<<2)|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $mipsinfo;
   $175 = $174;
   HEAP32[$175>>2] = $173;
   $176 = (($174) + 4)|0;
   $177 = $176;
   HEAP32[$177>>2] = 0;
   _mips_set_info(123,$mipsinfo);
   $178 = $mipsinfo;
   $179 = $178;
   HEAP32[$179>>2] = 1;
   $180 = (($178) + 4)|0;
   $181 = $180;
   HEAP32[$181>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
  }
  _psx_hw_write(528486512,0,-65536);
  $i$32 = 0;
  while(1) {
   $182 = (2132200 + ($i$32<<2)|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $mipsinfo;
   $185 = $184;
   HEAP32[$185>>2] = $183;
   $186 = (($184) + 4)|0;
   $187 = $186;
   HEAP32[$187>>2] = 0;
   $188 = (($i$32) + 95)|0;
   _mips_set_info($188,$mipsinfo);
   $189 = (($i$32) + 1)|0;
   $exitcond = ($189|0)==(32);
   if ($exitcond) {
    break;
   } else {
    $i$32 = $189;
   }
  }
  $190 = HEAP32[((2132200 + 128|0))>>2]|0;
  $191 = $mipsinfo;
  $192 = $191;
  HEAP32[$192>>2] = $190;
  $193 = (($191) + 4)|0;
  $194 = $193;
  HEAP32[$194>>2] = 0;
  _mips_set_info(93,$mipsinfo);
  $195 = HEAP32[((2132200 + 132|0))>>2]|0;
  $196 = $mipsinfo;
  $197 = $196;
  HEAP32[$197>>2] = $195;
  $198 = (($196) + 4)|0;
  $199 = $198;
  HEAP32[$199>>2] = 0;
  _mips_set_info(94,$mipsinfo);
  $200 = (_mips_get_ePC()|0);
  $201 = $mipsinfo;
  $202 = $201;
  HEAP32[$202>>2] = $200;
  $203 = (($201) + 4)|0;
  $204 = $203;
  HEAP32[$204>>2] = 0;
  _mips_set_info(20,$mipsinfo);
  $205 = (_mips_get_status()|0);
  $206 = $205 & -16;
  $207 = $205 >>> 2;
  $208 = $207 & 15;
  $209 = $208 | $206;
  _mips_set_status($209);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _psx_hw_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[2132176>>2] = 0;
 dest=2132376+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=2132504+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[2132632>>2] = 0;
 HEAP32[2132640>>2] = 0;
 $0 = 2132648;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 _memset((2132656|0),0,512)|0;
 HEAP32[2133168>>2] = 0;
 _memset((2133176|0),0,512)|0;
 HEAP32[2133688>>2] = 0;
 _memset((2133696|0),0,5632)|0;
 HEAP32[2139328>>2] = 1;
 _memset((2139336|0),0,1792)|0;
 HEAP32[2133696>>2] = 0;
 HEAP32[2132184>>2] = 0;
 _memset((2141128|0),0,256)|0;
 HEAP32[2141384>>2] = 0;
 HEAP32[((34768 + 160|0))>>2] = 11;
 HEAP32[((34768 + 176|0))>>2] = 11;
 HEAP32[((34768 + 192|0))>>2] = 11;
 HEAP32[2141392>>2] = ((34768 + 4096|0));
 HEAP32[2132352>>2] = ((34768 + 36864|0));
 HEAP32[2132048>>2] = 0;
 HEAP32[2131920>>2] = 0;
 HEAP32[34760>>2] = 0;
 HEAP32[2132056>>2] = 0;
 HEAP32[2132360>>2] = 0;
 HEAP32[2131928>>2] = 0;
 HEAP32[2132136>>2] = 0;
 HEAP32[2132128>>2] = 0;
 HEAP32[2141400>>2] = 0;
 HEAP32[2132368>>2] = 0;
 HEAP32[2132168>>2] = 0;
 HEAP32[((2132000 + 4|0))>>2] = 1;
 HEAP32[((2132000 + 20|0))>>2] = 1;
 HEAP32[((2132000 + 36|0))>>2] = 1;
 HEAP32[((2132000 + 12|0))>>2] = 0;
 HEAP32[((2132000 + 28|0))>>2] = 0;
 HEAP32[((2132000 + 44|0))>>2] = 0;
 return;
}
function _psx_bios_hle($pc) {
 $pc = $pc|0;
 var $$lcssa = 0, $$lcssa24 = 0, $$lcssa25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a2$012 = 0, $chunk$0 = 0, $chunk$0$in = 0, $chunk$0$lcssa = 0, $cond = 0, $dst1$09 = 0, $dst4$011 = 0, $exitcond = 0;
 var $i$121 = 0, $mipsinfo = 0, $src2$08 = 0, $src5$010 = 0, $uglygep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mipsinfo = sp;
 $0 = $pc & 2147483647;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = $pc & -5;
 $3 = ($2|0)==(-1077935744);
 if ($3) {
  _psx_bios_exception(0);
  STACKTOP = sp;return;
 }
 $4 = ($pc|0)==(-2147479552);
 if ($4) {
  HEAP32[2132360>>2] = 1;
  STACKTOP = sp;return;
 }
 _mips_get_info(104,$mipsinfo);
 $5 = $mipsinfo;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $7 & 255;
 _mips_get_info(99,$mipsinfo);
 $12 = $mipsinfo;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 _mips_get_info(100,$mipsinfo);
 $18 = $mipsinfo;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 _mips_get_info(101,$mipsinfo);
 $24 = $mipsinfo;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 _mips_get_info(102,$mipsinfo);
 $30 = $mipsinfo;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 L12: do {
  if ((($pc|0) == 160)) {
   do {
    switch ($11|0) {
    case 40:  {
     $174 = $14 & 2097151;
     $175 = (34768 + ($174)|0);
     _memset(($175|0),0,($20|0))|0;
     break L12;
     break;
    }
    case 42:  {
     $176 = ($26|0)==(0);
     if (!($176)) {
      $177 = $20 & 2097151;
      $178 = (34768 + ($177)|0);
      $179 = $14 & 2097151;
      $180 = (34768 + ($179)|0);
      $a2$012 = $26;$dst4$011 = $180;$src5$010 = $178;
      while(1) {
       $181 = HEAP8[$src5$010>>0]|0;
       HEAP8[$dst4$011>>0] = $181;
       $182 = (($dst4$011) + 1|0);
       $183 = (($src5$010) + 1|0);
       $184 = (($a2$012) + -1)|0;
       $185 = ($184|0)==(0);
       if ($185) {
        break;
       } else {
        $a2$012 = $184;$dst4$011 = $182;$src5$010 = $183;
       }
      }
     }
     $186 = $mipsinfo;
     $187 = $186;
     HEAP32[$187>>2] = $14;
     $188 = (($186) + 4)|0;
     $189 = $188;
     HEAP32[$189>>2] = 0;
     _mips_set_info(97,$mipsinfo);
     break L12;
     break;
    }
    case 43:  {
     $190 = ($26|0)==(0);
     if (!($190)) {
      $191 = $20&255;
      $192 = $14 & 2097151;
      $uglygep = (34768 + ($192)|0);
      _memset(($uglygep|0),($191|0),($26|0))|0;
     }
     $193 = $mipsinfo;
     $194 = $193;
     HEAP32[$194>>2] = $14;
     $195 = (($193) + 4)|0;
     $196 = $195;
     HEAP32[$196>>2] = 0;
     _mips_set_info(97,$mipsinfo);
     break L12;
     break;
    }
    case 57:  {
     $244 = $14 & 1073741823;
     HEAP32[2141400>>2] = $244;
     $245 = $244 >>> 2;
     $246 = (34768 + ($245<<2)|0);
     HEAP32[$246>>2] = 0;
     $247 = HEAP32[2141400>>2]|0;
     $248 = (($247) + 8)|0;
     $249 = $248 >>> 2;
     $250 = (34768 + ($249<<2)|0);
     HEAP32[$250>>2] = 0;
     $251 = HEAP32[2141400>>2]|0;
     $252 = (($251) + 12)|0;
     $253 = $252 >>> 2;
     $254 = (34768 + ($253<<2)|0);
     HEAP32[$254>>2] = 0;
     $255 = $14 & 2097151;
     $256 = (($20) + ($255))|0;
     $257 = ($256>>>0)>(2097151);
     if ($257) {
      $258 = (2097148 - ($255))|0;
      $259 = HEAP32[2141400>>2]|0;
      $260 = (($259) + 4)|0;
      $261 = $260 >>> 2;
      $262 = (34768 + ($261<<2)|0);
      HEAP32[$262>>2] = $258;
      break L12;
     } else {
      $263 = HEAP32[2141400>>2]|0;
      $264 = (($263) + 4)|0;
      $265 = $264 >>> 2;
      $266 = (34768 + ($265<<2)|0);
      HEAP32[$266>>2] = $20;
      break L12;
     }
     break;
    }
    case 48:  {
     _srand($14);
     break L12;
     break;
    }
    case 47:  {
     $197 = (_rand()|0);
     $198 = (+($197|0));
     $199 = $198 * 32767.0;
     $200 = $199 * 4.6566128730773926E-10;
     $201 = (~~(($200)));
     $202 = (($201) + 1)|0;
     $203 = ($202|0)<(0);
     $204 = $203 << 31 >> 31;
     $205 = $mipsinfo;
     $206 = $205;
     HEAP32[$206>>2] = $202;
     $207 = (($205) + 4)|0;
     $208 = $207;
     HEAP32[$208>>2] = $204;
     _mips_set_info(97,$mipsinfo);
     break L12;
     break;
    }
    case 51:  {
     $chunk$0$in = 2141400;
     while(1) {
      $chunk$0 = HEAP32[$chunk$0$in>>2]|0;
      $209 = (($chunk$0) + 4)|0;
      $210 = $209 >>> 2;
      $211 = (34768 + ($210<<2)|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($14>>>0)>($212>>>0);
      if (!($213)) {
       $214 = $chunk$0 >>> 2;
       $215 = (34768 + ($214<<2)|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = ($216|0)==(1);
       if (!($217)) {
        $$lcssa = $211;$$lcssa24 = $215;$$lcssa25 = $216;$chunk$0$lcssa = $chunk$0;
        break;
       }
      }
      $218 = (($chunk$0) + 8)|0;
      $219 = (34768 + ($218<<2)|0);
      $chunk$0$in = $219;
     }
     $220 = (($chunk$0$lcssa) + 16)|0;
     $221 = (($220) + ($14))|0;
     $222 = $221 >>> 2;
     $223 = (34768 + ($222<<2)|0);
     HEAP32[$223>>2] = $$lcssa25;
     $224 = HEAP32[$$lcssa>>2]|0;
     $225 = (($224) - ($14))|0;
     $226 = (($221) + 4)|0;
     $227 = $226 >>> 2;
     $228 = (34768 + ($227<<2)|0);
     HEAP32[$228>>2] = $225;
     $229 = (($chunk$0$lcssa) + 8)|0;
     $230 = $229 >>> 2;
     $231 = (34768 + ($230<<2)|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = (($221) + 8)|0;
     $234 = $233 >>> 2;
     $235 = (34768 + ($234<<2)|0);
     HEAP32[$235>>2] = $232;
     $236 = (($221) + 12)|0;
     $237 = $236 >>> 2;
     $238 = (34768 + ($237<<2)|0);
     HEAP32[$238>>2] = $chunk$0$lcssa;
     HEAP32[$$lcssa24>>2] = 1;
     HEAP32[$$lcssa>>2] = $14;
     HEAP32[$231>>2] = $221;
     $239 = $220 | -2147483648;
     $240 = $mipsinfo;
     $241 = $240;
     HEAP32[$241>>2] = $239;
     $242 = (($240) + 4)|0;
     $243 = $242;
     HEAP32[$243>>2] = 0;
     _mips_set_info(97,$mipsinfo);
     break L12;
     break;
    }
    case 19:  {
     _mips_get_info(126,$mipsinfo);
     $36 = $mipsinfo;
     $37 = $36;
     $38 = HEAP32[$37>>2]|0;
     $39 = (($36) + 4)|0;
     $40 = $39;
     $41 = HEAP32[$40>>2]|0;
     $42 = $14 & 2097151;
     $43 = $42 >>> 2;
     $44 = (34768 + ($43<<2)|0);
     HEAP32[$44>>2] = $38;
     _mips_get_info(124,$mipsinfo);
     $45 = $mipsinfo;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $48 = (($45) + 4)|0;
     $49 = $48;
     $50 = HEAP32[$49>>2]|0;
     $51 = (($42) + 4)|0;
     $52 = $51 >>> 2;
     $53 = (34768 + ($52<<2)|0);
     HEAP32[$53>>2] = $47;
     _mips_get_info(125,$mipsinfo);
     $54 = $mipsinfo;
     $55 = $54;
     $56 = HEAP32[$55>>2]|0;
     $57 = (($54) + 4)|0;
     $58 = $57;
     $59 = HEAP32[$58>>2]|0;
     $60 = (($42) + 8)|0;
     $61 = $60 >>> 2;
     $62 = (34768 + ($61<<2)|0);
     HEAP32[$62>>2] = $56;
     $63 = (($42) + 12)|0;
     _mips_get_info(111,$mipsinfo);
     $64 = $mipsinfo;
     $65 = $64;
     $66 = HEAP32[$65>>2]|0;
     $67 = (($64) + 4)|0;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $70 = $63 >>> 2;
     $71 = (34768 + ($70<<2)|0);
     HEAP32[$71>>2] = $66;
     _mips_get_info(112,$mipsinfo);
     $72 = $mipsinfo;
     $73 = $72;
     $74 = HEAP32[$73>>2]|0;
     $75 = (($72) + 4)|0;
     $76 = $75;
     $77 = HEAP32[$76>>2]|0;
     $78 = (($42) + 16)|0;
     $79 = $78 >>> 2;
     $80 = (34768 + ($79<<2)|0);
     HEAP32[$80>>2] = $74;
     _mips_get_info(113,$mipsinfo);
     $81 = $mipsinfo;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $84 = (($81) + 4)|0;
     $85 = $84;
     $86 = HEAP32[$85>>2]|0;
     $87 = (($42) + 20)|0;
     $88 = $87 >>> 2;
     $89 = (34768 + ($88<<2)|0);
     HEAP32[$89>>2] = $83;
     _mips_get_info(114,$mipsinfo);
     $90 = $mipsinfo;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $93 = (($90) + 4)|0;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $96 = (($42) + 24)|0;
     $97 = $96 >>> 2;
     $98 = (34768 + ($97<<2)|0);
     HEAP32[$98>>2] = $92;
     _mips_get_info(115,$mipsinfo);
     $99 = $mipsinfo;
     $100 = $99;
     $101 = HEAP32[$100>>2]|0;
     $102 = (($99) + 4)|0;
     $103 = $102;
     $104 = HEAP32[$103>>2]|0;
     $105 = (($42) + 28)|0;
     $106 = $105 >>> 2;
     $107 = (34768 + ($106<<2)|0);
     HEAP32[$107>>2] = $101;
     _mips_get_info(116,$mipsinfo);
     $108 = $mipsinfo;
     $109 = $108;
     $110 = HEAP32[$109>>2]|0;
     $111 = (($108) + 4)|0;
     $112 = $111;
     $113 = HEAP32[$112>>2]|0;
     $114 = (($42) + 32)|0;
     $115 = $114 >>> 2;
     $116 = (34768 + ($115<<2)|0);
     HEAP32[$116>>2] = $110;
     _mips_get_info(117,$mipsinfo);
     $117 = $mipsinfo;
     $118 = $117;
     $119 = HEAP32[$118>>2]|0;
     $120 = (($117) + 4)|0;
     $121 = $120;
     $122 = HEAP32[$121>>2]|0;
     $123 = (($42) + 36)|0;
     $124 = $123 >>> 2;
     $125 = (34768 + ($124<<2)|0);
     HEAP32[$125>>2] = $119;
     _mips_get_info(118,$mipsinfo);
     $126 = $mipsinfo;
     $127 = $126;
     $128 = HEAP32[$127>>2]|0;
     $129 = (($126) + 4)|0;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $132 = (($42) + 40)|0;
     $133 = $132 >>> 2;
     $134 = (34768 + ($133<<2)|0);
     HEAP32[$134>>2] = $128;
     _mips_get_info(123,$mipsinfo);
     $135 = $mipsinfo;
     $136 = $135;
     $137 = HEAP32[$136>>2]|0;
     $138 = (($135) + 4)|0;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = (($42) + 44)|0;
     $142 = $141 >>> 2;
     $143 = (34768 + ($142<<2)|0);
     HEAP32[$143>>2] = $137;
     $144 = $mipsinfo;
     $145 = $144;
     HEAP32[$145>>2] = 0;
     $146 = (($144) + 4)|0;
     $147 = $146;
     HEAP32[$147>>2] = 0;
     _mips_set_info(97,$mipsinfo);
     break L12;
     break;
    }
    case 24:  {
     $148 = $14 & 2097151;
     $149 = (34768 + ($148)|0);
     $150 = $20 & 2097151;
     $151 = (34768 + ($150)|0);
     $152 = (_strncmp($149,$151,$26)|0);
     $153 = ($152|0)<(0);
     $154 = $153 << 31 >> 31;
     $155 = $mipsinfo;
     $156 = $155;
     HEAP32[$156>>2] = $152;
     $157 = (($155) + 4)|0;
     $158 = $157;
     HEAP32[$158>>2] = $154;
     _mips_set_info(97,$mipsinfo);
     break L12;
     break;
    }
    case 25:  {
     $159 = $20 & 2097151;
     $160 = (34768 + ($159)|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = ($161<<24>>24)==(0);
     if (!($162)) {
      $163 = $14 & 2097151;
      $164 = (34768 + ($163)|0);
      $165 = $161;$dst1$09 = $164;$src2$08 = $160;
      while(1) {
       HEAP8[$dst1$09>>0] = $165;
       $166 = (($dst1$09) + 1|0);
       $167 = (($src2$08) + 1|0);
       $168 = HEAP8[$167>>0]|0;
       $169 = ($168<<24>>24)==(0);
       if ($169) {
        break;
       } else {
        $165 = $168;$dst1$09 = $166;$src2$08 = $167;
       }
      }
     }
     $170 = $mipsinfo;
     $171 = $170;
     HEAP32[$171>>2] = $14;
     $172 = (($170) + 4)|0;
     $173 = $172;
     HEAP32[$173>>2] = 0;
     _mips_set_info(97,$mipsinfo);
     break L12;
     break;
    }
    default: {
     break L12;
    }
    }
   } while(0);
  } else if ((($pc|0) == 176)) {
   switch ($11|0) {
   case 7:  {
    $267 = (_calc_ev($14)|0);
    $268 = (_calc_spec($20)|0);
    $269 = HEAP32[2141392>>2]|0;
    $270 = (((($269) + ($267<<9)|0) + ($268<<4)|0) + 4|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = ($271|0)==(8192);
    if (!($272)) {
     STACKTOP = sp;return;
    }
    $273 = (((($269) + ($267<<9)|0) + ($268<<4)|0) + 8|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)==(4096);
    if ($275) {
     break L12;
    }
    HEAP32[$270>>2] = 16384;
    break L12;
    break;
   }
   case 8:  {
    $276 = (_calc_ev($14)|0);
    $277 = (_calc_spec($20)|0);
    $278 = HEAP32[2141392>>2]|0;
    $279 = (((($278) + ($276<<9)|0) + ($277<<4)|0) + 4|0);
    HEAP32[$279>>2] = 4096;
    $280 = HEAP32[2141392>>2]|0;
    $281 = (((($280) + ($276<<9)|0) + ($277<<4)|0) + 8|0);
    HEAP32[$281>>2] = $26;
    $282 = HEAP32[2141392>>2]|0;
    $283 = (((($282) + ($276<<9)|0) + ($277<<4)|0) + 12|0);
    HEAP32[$283>>2] = $32;
    $284 = $277 << 8;
    $285 = $284 | $276;
    $286 = ($285|0)<(0);
    $287 = $286 << 31 >> 31;
    $288 = $mipsinfo;
    $289 = $288;
    HEAP32[$289>>2] = $285;
    $290 = (($288) + 4)|0;
    $291 = $290;
    HEAP32[$291>>2] = $287;
    _mips_set_info(97,$mipsinfo);
    break L12;
    break;
   }
   case 10:  {
    $292 = $14 & 255;
    $293 = $14 >>> 8;
    $294 = $293 & 255;
    _mips_get_info(126,$mipsinfo);
    $295 = HEAP32[2141392>>2]|0;
    $296 = (((($295) + ($292<<9)|0) + ($294<<4)|0) + 4|0);
    HEAP32[$296>>2] = 8192;
    $297 = $mipsinfo;
    $298 = $297;
    HEAP32[$298>>2] = 1;
    $299 = (($297) + 4)|0;
    $300 = $299;
    HEAP32[$300>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    HEAP32[2132168>>2] = 1;
    _mips_shorten_frame();
    break L12;
    break;
   }
   case 11:  {
    $301 = $14 & 255;
    $302 = $14 >>> 8;
    $303 = $302 & 255;
    $304 = HEAP32[2141392>>2]|0;
    $305 = (((($304) + ($301<<9)|0) + ($303<<4)|0) + 4|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = ($306|0)==(16384);
    if ($307) {
     HEAP32[$305>>2] = 8192;
     $310 = 1;$313 = 0;
    } else {
     $310 = 0;$313 = 0;
    }
    $308 = $mipsinfo;
    $309 = $308;
    HEAP32[$309>>2] = $310;
    $311 = (($308) + 4)|0;
    $312 = $311;
    HEAP32[$312>>2] = $313;
    HEAP32[2132168>>2] = 1;
    _mips_set_info(97,$mipsinfo);
    _mips_set_info(98,$mipsinfo);
    break L12;
    break;
   }
   case 12:  {
    $314 = $14 & 255;
    $315 = $14 >>> 8;
    $316 = $315 & 255;
    $317 = HEAP32[2141392>>2]|0;
    $318 = (((($317) + ($314<<9)|0) + ($316<<4)|0) + 4|0);
    HEAP32[$318>>2] = 8192;
    $319 = $mipsinfo;
    $320 = $319;
    HEAP32[$320>>2] = 1;
    $321 = (($319) + 4)|0;
    $322 = $321;
    HEAP32[$322>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    break L12;
    break;
   }
   case 13:  {
    $323 = $14 & 255;
    $324 = $14 >>> 8;
    $325 = $324 & 255;
    $326 = HEAP32[2141392>>2]|0;
    $327 = (((($326) + ($323<<9)|0) + ($325<<4)|0) + 4|0);
    HEAP32[$327>>2] = 4096;
    $328 = $mipsinfo;
    $329 = $328;
    HEAP32[$329>>2] = 1;
    $330 = (($328) + 4)|0;
    $331 = $330;
    HEAP32[$331>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    break L12;
    break;
   }
   case 23:  {
    $i$121 = 0;
    while(1) {
     $332 = (2132200 + ($i$121<<2)|0);
     $333 = HEAP32[$332>>2]|0;
     $334 = $mipsinfo;
     $335 = $334;
     HEAP32[$335>>2] = $333;
     $336 = (($334) + 4)|0;
     $337 = $336;
     HEAP32[$337>>2] = 0;
     $338 = (($i$121) + 95)|0;
     _mips_set_info($338,$mipsinfo);
     $339 = (($i$121) + 1)|0;
     $exitcond = ($339|0)==(32);
     if ($exitcond) {
      break;
     } else {
      $i$121 = $339;
     }
    }
    $340 = HEAP32[((2132200 + 128|0))>>2]|0;
    $341 = $mipsinfo;
    $342 = $341;
    HEAP32[$342>>2] = $340;
    $343 = (($341) + 4)|0;
    $344 = $343;
    HEAP32[$344>>2] = 0;
    _mips_set_info(93,$mipsinfo);
    $345 = HEAP32[((2132200 + 132|0))>>2]|0;
    $346 = $mipsinfo;
    $347 = $346;
    HEAP32[$347>>2] = $345;
    $348 = (($346) + 4)|0;
    $349 = $348;
    HEAP32[$349>>2] = 0;
    _mips_set_info(94,$mipsinfo);
    $350 = (_mips_get_ePC()|0);
    $351 = $mipsinfo;
    $352 = $351;
    HEAP32[$352>>2] = $350;
    $353 = (($351) + 4)|0;
    $354 = $353;
    HEAP32[$354>>2] = 0;
    _mips_set_info(20,$mipsinfo);
    $355 = (_mips_get_status()|0);
    $356 = $355 & -16;
    $357 = $355 >>> 2;
    $358 = $357 & 15;
    $359 = $358 | $356;
    _mips_set_status($359);
    STACKTOP = sp;return;
    break;
   }
   case 25:  {
    HEAP32[2132368>>2] = $14;
    break L12;
    break;
   }
   default: {
    break L12;
   }
   }
  } else if ((($pc|0) == 192)) {
   $cond = ($11|0)==(10);
   if ($cond) {
    $360 = $14 << 2;
    $361 = (($360) + 34304)|0;
    $362 = $361 >>> 2;
    $363 = (34768 + ($362<<2)|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = $mipsinfo;
    $366 = $365;
    HEAP32[$366>>2] = $364;
    $367 = (($365) + 4)|0;
    $368 = $367;
    HEAP32[$368>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    HEAP32[$363>>2] = $20;
   }
  }
 } while(0);
 _mips_get_info(126,$mipsinfo);
 _mips_set_info(20,$mipsinfo);
 STACKTOP = sp;return;
}
function _SPUirq() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _program_read_byte_32le($address) {
 $address = $address|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $address & 3;
 if ((($0|0) == 3)) {
  $9 = (_psx_hw_read($address,16777215)|0);
  $10 = $9 >>> 24;
  $11 = $10&255;
  $$0 = $11;
 } else if ((($0|0) == 1)) {
  $3 = (_psx_hw_read($address,-65281)|0);
  $4 = $3 >>> 8;
  $5 = $4&255;
  $$0 = $5;
 } else if ((($0|0) == 0)) {
  $1 = (_psx_hw_read($address,-256)|0);
  $2 = $1&255;
  $$0 = $2;
 } else if ((($0|0) == 2)) {
  $6 = (_psx_hw_read($address,-16711681)|0);
  $7 = $6 >>> 16;
  $8 = $7&255;
  $$0 = $8;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _program_read_word_32le($address) {
 $address = $address|0;
 var $$0 = 0, $$0$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $address & 2;
 $1 = ($0|0)==(0);
 if ($1) {
  $4 = (_psx_hw_read($address,-65536)|0);
  $$0$in = $4;
 } else {
  $2 = (_psx_hw_read($address,65535)|0);
  $3 = $2 >>> 16;
  $$0$in = $3;
 }
 $$0 = $$0$in&65535;
 return ($$0|0);
}
function _program_read_dword_32le($address) {
 $address = $address|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_psx_hw_read($address,0)|0);
 return ($0|0);
}
function _program_write_byte_32le($address,$data) {
 $address = $address|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $address & 3;
 if ((($0|0) == 2)) {
  $4 = $data&255;
  $5 = $4 << 16;
  _psx_hw_write($address,$5,-16711681);
  return;
 } else if ((($0|0) == 1)) {
  $2 = $data&255;
  $3 = $2 << 8;
  _psx_hw_write($address,$3,-65281);
  return;
 } else if ((($0|0) == 0)) {
  $1 = $data&255;
  _psx_hw_write($address,$1,-256);
  return;
 } else if ((($0|0) == 3)) {
  $6 = $data&255;
  $7 = $6 << 24;
  _psx_hw_write($address,$7,16777215);
  return;
 } else {
  return;
 }
}
function _program_write_word_32le($address,$data) {
 $address = $address|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $address & 2;
 $1 = ($0|0)==(0);
 $2 = $data&65535;
 if ($1) {
  _psx_hw_write($address,$2,-65536);
  return;
 } else {
  $3 = $2 << 16;
  _psx_hw_write($address,$3,65535);
  return;
 }
}
function _program_write_dword_32le($address,$data) {
 $address = $address|0;
 $data = $data|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _psx_hw_write($address,$data,0);
 return;
}
function _psx_iop_call($pc,$callnum) {
 $pc = $pc|0;
 $callnum = $callnum|0;
 var $$ = 0, $$23 = 0, $$lcssa = 0, $$lcssa101 = 0, $$op = 0.0, $$op$op = 0.0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum13 = 0, $$sum15 = 0, $$sum16 = 0, $$sum7 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a1$0 = 0;
 var $a1$173 = 0, $a2$045 = 0, $a2$151 = 0, $a2$261 = 0, $argofs$075 = 0, $argwalk$076 = 0, $ch$067 = 0, $cond = 0, $cond1 = 0, $dst$043 = 0, $dst10$0$lcssa = 0, $dst10$062 = 0, $dst3$049 = 0, $dst7$0$lcssa = 0, $dst7$055 = 0, $endptr = 0, $i$036 = 0, $i$137 = 0, $i$137$lcssa = 0, $i$238 = 0;
 var $i$340 = 0, $i15$080 = 0, $i15$080$lcssa = 0, $lib$081 = 0, $lib$081$lcssa = 0, $mipsinfo = 0, $mname$0 = 0, $name = 0, $newAlloc$0 = 0, $newAlloc12$0 = 0, $newAlloc12$1 = 0, $newAlloc13$0 = 0, $not$ = 0, $numargs$074 = 0, $numargs$1 = 0, $numargs$1$lcssa = 0, $numargs$294 = 0, $numargs$295 = 0, $or$cond = 0, $or$cond4 = 0;
 var $or$cond460 = 0, $out = 0, $scan$0 = 0, $scevgep = 0, $src$044 = 0, $src11$063 = 0, $src4$050 = 0, $src8$056 = 0, $strlenfirst = 0, $vararg_buffer50 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0;
 var $vararg_ptr49 = 0, $vararg_ptr5 = 0, $vararg_ptr53 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer50 = sp + 24|0;
 $name = sp + 8|0;
 $out = sp + 104|0;
 $mipsinfo = sp;
 _mips_get_info(99,$mipsinfo);
 $0 = $mipsinfo;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 _mips_get_info(100,$mipsinfo);
 $6 = $mipsinfo;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 _mips_get_info(101,$mipsinfo);
 $12 = $mipsinfo;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 _mips_get_info(102,$mipsinfo);
 $18 = $mipsinfo;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $pc >>> 2;
 $25 = $24 & 67108863;
 $scan$0 = $25;
 while(1) {
  $26 = (34768 + ($scan$0<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(1105199104);
  $29 = ($scan$0>>>0)>(16383);
  $not$ = $28 ^ 1;
  $$ = $29 & $not$;
  $30 = (($scan$0) + -1)|0;
  if ($$) {
   $scan$0 = $30;
  } else {
   break;
  }
 }
 if (!($28)) {
  (_puts((4247480|0))|0);
  STACKTOP = sp;return;
 }
 $31 = (($scan$0) + 3)|0;
 $32 = (34768 + ($31<<2)|0);
 $33 = $32;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = $name;
 $40 = $39;
 HEAP32[$40>>2] = $35;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = (($name) + 8|0);
 HEAP8[$43>>0] = 0;
 $44 = (_strcmp($name,2141448)|0);
 $45 = ($44|0)==(0);
 if ($45) {
  $cond = ($callnum|0)==(4);
  if ($cond) {
   $46 = $2 & 2097151;
   $47 = $2 & 3;
   $$sum = (($46) + ($47))|0;
   $48 = (34768 + ($$sum)|0);
   _iop_sprintf($out,$48,100);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer50>>2] = $callnum;
   $vararg_ptr1 = (($vararg_buffer50) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $name;
   (_printf((2141456|0),($vararg_buffer50|0))|0);
   STACKTOP = sp;return;
  }
 }
 $49 = (_strcmp($name,2141504)|0);
 $50 = ($49|0)==(0);
 if ($50) {
  if ((($callnum|0) == 5)) {
   $51 = $mipsinfo;
   $52 = $51;
   HEAP32[$52>>2] = 0;
   $53 = (($51) + 4)|0;
   $54 = $53;
   HEAP32[$54>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
  } else if ((($callnum|0) == 7)) {
   $55 = $mipsinfo;
   $56 = $55;
   HEAP32[$56>>2] = 1;
   $57 = (($55) + 4)|0;
   $58 = $57;
   HEAP32[$58>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
  } else if ((($callnum|0) == 8)) {
   $59 = $mipsinfo;
   $60 = $59;
   HEAP32[$60>>2] = -1;
   $61 = (($59) + 4)|0;
   $62 = $61;
   HEAP32[$62>>2] = -1;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
  } else if ((($callnum|0) == 29)) {
   $63 = $mipsinfo;
   $64 = $63;
   HEAP32[$64>>2] = 1;
   $65 = (($63) + 4)|0;
   $66 = $65;
   HEAP32[$66>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer50>>2] = $callnum;
   $vararg_ptr5 = (($vararg_buffer50) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $name;
   (_printf((2141456|0),($vararg_buffer50|0))|0);
   STACKTOP = sp;return;
  }
 }
 $67 = (_strcmp($name,2141512)|0);
 $68 = ($67|0)==(0);
 if ($68) {
  do {
   switch ($callnum|0) {
   case 4:  {
    $69 = $2 >>> 2;
    $70 = $69 & 524287;
    $71 = (_psf2_get_loadaddr()|0);
    $72 = $71 & 15;
    $73 = ($72|0)==(0);
    if ($73) {
     $newAlloc$0 = $71;
    } else {
     $74 = (($71) + 16)|0;
     $75 = $74 & -16;
     $newAlloc$0 = $75;
    }
    $76 = (($70) + 3)|0;
    $77 = (34768 + ($76<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + ($newAlloc$0))|0;
    _psf2_set_loadaddr($79);
    $80 = HEAP32[2139328>>2]|0;
    $81 = (2133696 + (($80*176)|0)|0);
    HEAP32[$81>>2] = 6;
    $82 = HEAP32[2139328>>2]|0;
    $83 = ((2133696 + (($82*176)|0)|0) + 12|0);
    HEAP32[$83>>2] = $newAlloc$0;
    $84 = (34768 + ($70<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = HEAP32[2139328>>2]|0;
    $87 = ((2133696 + (($86*176)|0)|0) + 4|0);
    HEAP32[$87>>2] = $85;
    $88 = (($70) + 2)|0;
    $89 = (34768 + ($88<<2)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = HEAP32[2139328>>2]|0;
    $92 = ((2133696 + (($91*176)|0)|0) + 8|0);
    HEAP32[$92>>2] = $90;
    $93 = HEAP32[$77>>2]|0;
    $94 = HEAP32[2139328>>2]|0;
    $95 = ((2133696 + (($94*176)|0)|0) + 16|0);
    HEAP32[$95>>2] = $93;
    $96 = (($70) + 4)|0;
    $97 = (34768 + ($96<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[2139328>>2]|0;
    $100 = ((2133696 + (($99*176)|0)|0) + 20|0);
    HEAP32[$100>>2] = $98;
    $101 = HEAP32[2139328>>2]|0;
    $102 = ($101|0)<(0);
    $103 = $102 << 31 >> 31;
    $104 = $mipsinfo;
    $105 = $104;
    HEAP32[$105>>2] = $101;
    $106 = (($104) + 4)|0;
    $107 = $106;
    HEAP32[$107>>2] = $103;
    $108 = HEAP32[2139328>>2]|0;
    $109 = (($108) + 1)|0;
    HEAP32[2139328>>2] = $109;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
    break;
   }
   case 40:  {
    $168 = $2 >>> 2;
    $169 = $168 & 524287;
    $170 = $8 >>> 2;
    $171 = $170 & 524287;
    $172 = $14 >>> 2;
    $173 = $172 & 524287;
    $174 = (34768 + ($169<<2)|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (($169) + 1)|0;
    $177 = (34768 + ($176<<2)|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (___muldi3(($175|0),($178|0),1000000,0)|0);
    $180 = tempRet0;
    $181 = (___udivdi3(($179|0),($180|0),36864000,0)|0);
    $182 = tempRet0;
    $183 = (___udivdi3(($179|0),($180|0),295698432,8583)|0);
    $184 = tempRet0;
    $185 = (___uremdi3(($181|0),($182|0),1000000,0)|0);
    $186 = tempRet0;
    $187 = $185 & 1048575;
    $188 = (34768 + ($171<<2)|0);
    HEAP32[$188>>2] = $183;
    $189 = (34768 + ($173<<2)|0);
    HEAP32[$189>>2] = $187;
    STACKTOP = sp;return;
    break;
   }
   case 6:  {
    $110 = HEAP32[2132184>>2]|0;
    _FreezeThread($110,1);
    _ThawThread($2);
    HEAP32[2132184>>2] = $2;
    STACKTOP = sp;return;
    break;
   }
   case 20:  {
    $111 = HEAP32[2132184>>2]|0;
    $112 = ($111|0)<(0);
    $113 = $112 << 31 >> 31;
    $114 = $mipsinfo;
    $115 = $114;
    HEAP32[$115>>2] = $111;
    $116 = (($114) + 4)|0;
    $117 = $116;
    HEAP32[$117>>2] = $113;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
    break;
   }
   case 24:  {
    $118 = HEAP32[2132184>>2]|0;
    _FreezeThread($118,1);
    $119 = HEAP32[2132184>>2]|0;
    $120 = (2133696 + (($119*176)|0)|0);
    HEAP32[$120>>2] = 5;
    HEAP32[2132184>>2] = -1;
    _ps2_reschedule();
    STACKTOP = sp;return;
    break;
   }
   case 25:  {
    $121 = (2133696 + (($2*176)|0)|0);
    HEAP32[$121>>2] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 26:  {
    $122 = (2133696 + (($2*176)|0)|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($123|0)==(0);
    if ($124) {
     STACKTOP = sp;return;
    }
    HEAP32[$122>>2] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 33:  {
    $125 = ($2>>>0)<(100);
    $126 = (+($2>>>0));
    $127 = HEAP32[2132184>>2]|0;
    _FreezeThread($127,1);
    $128 = HEAP32[2132184>>2]|0;
    $129 = (2133696 + (($128*176)|0)|0);
    HEAP32[$129>>2] = 4;
    $$op = $126 / 1.0E+6;
    $$op$op = $$op * 36864000.0;
    $130 = (~~(($$op$op))>>>0);
    $131 = $125 ? 3686 : $130;
    $132 = HEAP32[2132184>>2]|0;
    $133 = ((2133696 + (($132*176)|0)|0) + 24|0);
    HEAP32[$133>>2] = $131;
    HEAP32[2132184>>2] = -1;
    _ps2_reschedule();
    STACKTOP = sp;return;
    break;
   }
   case 34:  {
    $134 = $2 >>> 2;
    $135 = $134 & 524287;
    $136 = 2132648;
    $137 = $136;
    $138 = HEAP32[$137>>2]|0;
    $139 = (($136) + 4)|0;
    $140 = $139;
    $141 = HEAP32[$140>>2]|0;
    $142 = (34768 + ($135<<2)|0);
    HEAP32[$142>>2] = $138;
    $143 = 2132648;
    $144 = $143;
    $145 = HEAP32[$144>>2]|0;
    $146 = (($143) + 4)|0;
    $147 = $146;
    $148 = HEAP32[$147>>2]|0;
    $149 = (($135) + 1)|0;
    $150 = (34768 + ($149<<2)|0);
    HEAP32[$150>>2] = $148;
    $151 = $mipsinfo;
    $152 = $151;
    HEAP32[$152>>2] = 0;
    $153 = (($151) + 4)|0;
    $154 = $153;
    HEAP32[$154>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
    break;
   }
   case 39:  {
    $155 = (___muldi3(($2|0),0,36864000,0)|0);
    $156 = tempRet0;
    $157 = (___udivdi3(($155|0),($156|0),1000000,0)|0);
    $158 = tempRet0;
    $159 = $8 >>> 2;
    $160 = $159 & 524287;
    $161 = (34768 + ($160<<2)|0);
    HEAP32[$161>>2] = $157;
    $162 = (($160) + 1)|0;
    $163 = (34768 + ($162<<2)|0);
    HEAP32[$163>>2] = $158;
    $164 = $mipsinfo;
    $165 = $164;
    HEAP32[$165>>2] = 0;
    $166 = (($164) + 4)|0;
    $167 = $166;
    HEAP32[$167>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
    break;
   }
   default: {
    HEAP32[$vararg_buffer50>>2] = $callnum;
    $vararg_ptr9 = (($vararg_buffer50) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $name;
    (_printf((2141456|0),($vararg_buffer50|0))|0);
    STACKTOP = sp;return;
   }
   }
  } while(0);
 }
 $190 = (_strcmp($name,2141520)|0);
 $191 = ($190|0)==(0);
 if ($191) {
  switch ($callnum|0) {
  case 4:  {
   _mips_get_info(126,$mipsinfo);
   $192 = $2 >>> 2;
   $193 = $192 & 524287;
   $194 = (34768 + ($193<<2)|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = HEAP32[2133688>>2]|0;
   $197 = (2133176 + ($196<<4)|0);
   HEAP32[$197>>2] = $195;
   $198 = (($193) + 1)|0;
   $199 = (34768 + ($198<<2)|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = HEAP32[2133688>>2]|0;
   $202 = ((2133176 + ($201<<4)|0) + 4|0);
   HEAP32[$202>>2] = $200;
   $203 = (($193) + 2)|0;
   $204 = (34768 + ($203<<2)|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = HEAP32[2133688>>2]|0;
   $207 = ((2133176 + ($206<<4)|0) + 8|0);
   HEAP32[$207>>2] = $205;
   $208 = HEAP32[2133688>>2]|0;
   $209 = ((2133176 + ($208<<4)|0) + 12|0);
   HEAP32[$209>>2] = 1;
   $210 = HEAP32[2133688>>2]|0;
   $211 = (($210) + 1)|0;
   $212 = ($211|0)<(0);
   $213 = $212 << 31 >> 31;
   $214 = $mipsinfo;
   $215 = $214;
   HEAP32[$215>>2] = $211;
   $216 = (($214) + 4)|0;
   $217 = $216;
   HEAP32[$217>>2] = $213;
   $218 = HEAP32[2133688>>2]|0;
   $219 = (($218) + 1)|0;
   HEAP32[2133688>>2] = $219;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $220 = (($2) + -1)|0;
   $221 = ((2133176 + ($220<<4)|0) + 4|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = $222 | $8;
   HEAP32[$221>>2] = $223;
   $224 = $mipsinfo;
   $225 = $224;
   HEAP32[$225>>2] = 0;
   $226 = (($224) + 4)|0;
   $227 = $226;
   HEAP32[$227>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $228 = (($2) + -1)|0;
   $229 = ((2133176 + ($228<<4)|0) + 4|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $230 | $8;
   HEAP32[$229>>2] = $231;
   $232 = $mipsinfo;
   $233 = $232;
   HEAP32[$233>>2] = 0;
   $234 = (($232) + 4)|0;
   $235 = $234;
   HEAP32[$235>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   $236 = HEAP32[2139328>>2]|0;
   $237 = ($236|0)>(0);
   if (!($237)) {
    STACKTOP = sp;return;
   }
   $238 = HEAP32[2139328>>2]|0;
   $i$036 = 0;
   while(1) {
    $239 = (2133696 + (($i$036*176)|0)|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = ($240|0)==(2);
    if ($241) {
     $242 = ((2133696 + (($i$036*176)|0)|0) + 24|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = ($243|0)==($228|0);
     if ($244) {
      HEAP32[$239>>2] = 1;
     }
    }
    $245 = (($i$036) + 1)|0;
    $246 = ($245|0)<($238|0);
    if ($246) {
     $i$036 = $245;
    } else {
     break;
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $247 = (($2) + -1)|0;
   _mips_get_info(126,$mipsinfo);
   $248 = ((2133176 + ($247<<4)|0) + 4|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $249 & $8;
   HEAP32[$248>>2] = $250;
   $251 = $mipsinfo;
   $252 = $251;
   HEAP32[$252>>2] = 0;
   $253 = (($251) + 4)|0;
   $254 = $253;
   HEAP32[$254>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $255 = (($2) + -1)|0;
   $256 = ((2133176 + ($255<<4)|0) + 4|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = $257 & $8;
   HEAP32[$256>>2] = $258;
   $259 = $mipsinfo;
   $260 = $259;
   HEAP32[$260>>2] = 0;
   $261 = (($259) + 4)|0;
   $262 = $261;
   HEAP32[$262>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $263 = (($2) + -1)|0;
   $264 = ((2133176 + ($263<<4)|0) + 4|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = $265 & $8;
   $267 = ($266|0)==(0);
   if ($267) {
    $268 = HEAP32[2132184>>2]|0;
    _FreezeThread($268,1);
    $269 = HEAP32[2132184>>2]|0;
    $270 = (2133696 + (($269*176)|0)|0);
    HEAP32[$270>>2] = 2;
    $271 = HEAP32[2132184>>2]|0;
    $272 = ((2133696 + (($271*176)|0)|0) + 24|0);
    HEAP32[$272>>2] = $263;
    HEAP32[2132184>>2] = -1;
    _ps2_reschedule();
    STACKTOP = sp;return;
   } else {
    $273 = $mipsinfo;
    $274 = $273;
    HEAP32[$274>>2] = 0;
    $275 = (($273) + 4)|0;
    $276 = $275;
    HEAP32[$276>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
   }
   break;
  }
  default: {
   HEAP32[$vararg_buffer50>>2] = $callnum;
   $vararg_ptr13 = (($vararg_buffer50) + 4|0);
   HEAP32[$vararg_ptr13>>2] = $name;
   (_printf((2141456|0),($vararg_buffer50|0))|0);
   STACKTOP = sp;return;
  }
  }
 }
 $277 = (_strcmp($name,2141528)|0);
 $278 = ($277|0)==(0);
 if ($278) {
  if ((($callnum|0) == 7)) {
   $279 = HEAP32[2139328>>2]|0;
   $280 = ($279|0)>(0);
   L97: do {
    if ($280) {
     $281 = HEAP32[2139328>>2]|0;
     $i$340 = 0;
     while(1) {
      $400 = (2133696 + (($i$340*176)|0)|0);
      $401 = HEAP32[$400>>2]|0;
      $402 = ($401|0)==(3);
      if ($402) {
       $403 = ((2133696 + (($i$340*176)|0)|0) + 24|0);
       $404 = HEAP32[$403>>2]|0;
       $405 = ($404|0)==($2|0);
       if ($405) {
        $$lcssa101 = $400;
        break;
       }
      }
      $413 = (($i$340) + 1)|0;
      $414 = ($413|0)<($281|0);
      if ($414) {
       $i$340 = $413;
      } else {
       label = 76;
       break L97;
      }
     }
     HEAP32[$$lcssa101>>2] = 1;
     $406 = ((2139336 + (($2*28)|0)|0) + 20|0);
     $407 = HEAP32[$406>>2]|0;
     $408 = (($407) + -1)|0;
     HEAP32[$406>>2] = $408;
     $409 = $mipsinfo;
     $410 = $409;
     HEAP32[$410>>2] = 0;
     $411 = (($409) + 4)|0;
     $412 = $411;
     HEAP32[$412>>2] = 0;
    } else {
     label = 76;
    }
   } while(0);
   do {
    if ((label|0) == 76) {
     $415 = $mipsinfo;
     $416 = $415;
     HEAP32[$416>>2] = 0;
     $417 = (($415) + 4)|0;
     $418 = $417;
     HEAP32[$418>>2] = 0;
     $419 = ((2139336 + (($2*28)|0)|0) + 12|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = ((2139336 + (($2*28)|0)|0) + 16|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = ($420|0)<($422|0);
     if ($423) {
      $424 = (($420) + 1)|0;
      HEAP32[$419>>2] = $424;
      break;
     } else {
      $425 = $mipsinfo;
      $426 = $425;
      HEAP32[$426>>2] = -420;
      $427 = (($425) + 4)|0;
      $428 = $427;
      HEAP32[$428>>2] = -1;
      break;
     }
    }
   } while(0);
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
  } else if ((($callnum|0) == 6)) {
   $282 = HEAP32[2139328>>2]|0;
   $283 = ($282|0)>(0);
   L113: do {
    if ($283) {
     $284 = HEAP32[2139328>>2]|0;
     $i$238 = 0;
     while(1) {
      $371 = (2133696 + (($i$238*176)|0)|0);
      $372 = HEAP32[$371>>2]|0;
      $373 = ($372|0)==(3);
      if ($373) {
       $374 = ((2133696 + (($i$238*176)|0)|0) + 24|0);
       $375 = HEAP32[$374>>2]|0;
       $376 = ($375|0)==($2|0);
       if ($376) {
        $$lcssa = $371;
        break;
       }
      }
      $384 = (($i$238) + 1)|0;
      $385 = ($384|0)<($284|0);
      if ($385) {
       $i$238 = $384;
      } else {
       label = 68;
       break L113;
      }
     }
     HEAP32[$$lcssa>>2] = 1;
     $377 = ((2139336 + (($2*28)|0)|0) + 20|0);
     $378 = HEAP32[$377>>2]|0;
     $379 = (($378) + -1)|0;
     HEAP32[$377>>2] = $379;
     $380 = $mipsinfo;
     $381 = $380;
     HEAP32[$381>>2] = 0;
     $382 = (($380) + 4)|0;
     $383 = $382;
     HEAP32[$383>>2] = 0;
    } else {
     label = 68;
    }
   } while(0);
   do {
    if ((label|0) == 68) {
     $386 = $mipsinfo;
     $387 = $386;
     HEAP32[$387>>2] = 0;
     $388 = (($386) + 4)|0;
     $389 = $388;
     HEAP32[$389>>2] = 0;
     $390 = ((2139336 + (($2*28)|0)|0) + 12|0);
     $391 = HEAP32[$390>>2]|0;
     $392 = ((2139336 + (($2*28)|0)|0) + 16|0);
     $393 = HEAP32[$392>>2]|0;
     $394 = ($391|0)<($393|0);
     if ($394) {
      $395 = (($391) + 1)|0;
      HEAP32[$390>>2] = $395;
      break;
     } else {
      $396 = $mipsinfo;
      $397 = $396;
      HEAP32[$397>>2] = -420;
      $398 = (($396) + 4)|0;
      $399 = $398;
      HEAP32[$399>>2] = -1;
      break;
     }
    }
   } while(0);
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
  } else if ((($callnum|0) == 4)) {
   $285 = $mipsinfo;
   $286 = $285;
   HEAP32[$286>>2] = -1;
   $287 = (($285) + 4)|0;
   $288 = $287;
   HEAP32[$288>>2] = -1;
   $i$137 = 0;
   while(1) {
    $291 = ((2139336 + (($i$137*28)|0)|0) + 24|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = ($292|0)==(0);
    $290 = (($i$137) + 1)|0;
    if ($293) {
     $i$137$lcssa = $i$137;
     label = 57;
     break;
    }
    $289 = ($290|0)<(64);
    if ($289) {
     $i$137 = $290;
    } else {
     label = 58;
     break;
    }
   }
   if ((label|0) == 57) {
    $294 = ($i$137$lcssa|0)<(0);
    $295 = $294 << 31 >> 31;
    $296 = $mipsinfo;
    $297 = $296;
    HEAP32[$297>>2] = $i$137$lcssa;
    $298 = (($296) + 4)|0;
    $299 = $298;
    HEAP32[$299>>2] = $295;
    $307 = $i$137$lcssa;$309 = $295;
   }
   else if ((label|0) == 58) {
    $300 = $mipsinfo;
    $301 = $300;
    $302 = HEAP32[$301>>2]|0;
    $303 = (($300) + 4)|0;
    $304 = $303;
    $305 = HEAP32[$304>>2]|0;
    $307 = $302;$309 = $305;
   }
   $306 = ($307|0)==(-1);
   $308 = ($309|0)==(-1);
   $310 = $306 & $308;
   if ($310) {
    (_puts((4247288|0))|0);
   }
   $311 = $2 >>> 2;
   $312 = $311 & 536870911;
   $313 = $mipsinfo;
   $314 = $313;
   $315 = HEAP32[$314>>2]|0;
   $316 = (($313) + 4)|0;
   $317 = $316;
   $318 = HEAP32[$317>>2]|0;
   $319 = ($315|0)==(-1);
   $320 = ($318|0)==(-1);
   $321 = $319 & $320;
   if (!($321)) {
    $322 = (34768 + ($312<<2)|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = (2139336 + (($315*28)|0)|0);
    HEAP32[$324>>2] = $323;
    $325 = (($312) + 1)|0;
    $326 = (34768 + ($325<<2)|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $mipsinfo;
    $329 = $328;
    $330 = HEAP32[$329>>2]|0;
    $331 = (($328) + 4)|0;
    $332 = $331;
    $333 = HEAP32[$332>>2]|0;
    $334 = ((2139336 + (($330*28)|0)|0) + 4|0);
    HEAP32[$334>>2] = $327;
    $335 = (($312) + 2)|0;
    $336 = (34768 + ($335<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $mipsinfo;
    $339 = $338;
    $340 = HEAP32[$339>>2]|0;
    $341 = (($338) + 4)|0;
    $342 = $341;
    $343 = HEAP32[$342>>2]|0;
    $344 = ((2139336 + (($340*28)|0)|0) + 8|0);
    HEAP32[$344>>2] = $337;
    $345 = (($312) + 3)|0;
    $346 = (34768 + ($345<<2)|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = $mipsinfo;
    $349 = $348;
    $350 = HEAP32[$349>>2]|0;
    $351 = (($348) + 4)|0;
    $352 = $351;
    $353 = HEAP32[$352>>2]|0;
    $354 = ((2139336 + (($350*28)|0)|0) + 16|0);
    HEAP32[$354>>2] = $347;
    $355 = $mipsinfo;
    $356 = $355;
    $357 = HEAP32[$356>>2]|0;
    $358 = (($355) + 4)|0;
    $359 = $358;
    $360 = HEAP32[$359>>2]|0;
    $361 = ((2139336 + (($357*28)|0)|0) + 8|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = ((2139336 + (($357*28)|0)|0) + 12|0);
    HEAP32[$363>>2] = $362;
    $364 = $mipsinfo;
    $365 = $364;
    $366 = HEAP32[$365>>2]|0;
    $367 = (($364) + 4)|0;
    $368 = $367;
    $369 = HEAP32[$368>>2]|0;
    $370 = ((2139336 + (($366*28)|0)|0) + 24|0);
    HEAP32[$370>>2] = 1;
   }
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
  } else if ((($callnum|0) == 8)) {
   $429 = ((2139336 + (($2*28)|0)|0) + 12|0);
   $430 = HEAP32[$429>>2]|0;
   $431 = ($430|0)>(0);
   if ($431) {
    $432 = (($430) + -1)|0;
    HEAP32[$429>>2] = $432;
   } else {
    $433 = HEAP32[2132184>>2]|0;
    _FreezeThread($433,1);
    $434 = HEAP32[2132184>>2]|0;
    $435 = (2133696 + (($434*176)|0)|0);
    HEAP32[$435>>2] = 3;
    $436 = HEAP32[2132184>>2]|0;
    $437 = ((2133696 + (($436*176)|0)|0) + 24|0);
    HEAP32[$437>>2] = $2;
    _ps2_reschedule();
   }
   $438 = $mipsinfo;
   $439 = $438;
   HEAP32[$439>>2] = 0;
   $440 = (($438) + 4)|0;
   $441 = $440;
   HEAP32[$441>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer50>>2] = $callnum;
   $vararg_ptr17 = (($vararg_buffer50) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $name;
   (_printf((2141456|0),($vararg_buffer50|0))|0);
   STACKTOP = sp;return;
  }
 }
 $442 = (_strcmp($name,2141536)|0);
 $443 = ($442|0)==(0);
 if ($443) {
  switch ($callnum|0) {
  case 4:  {
   $444 = ($8|0)==(32);
   if (!($444)) {
    (_puts((4247312|0))|0);
   }
   $445 = HEAP32[2141384>>2]|0;
   $446 = ((2141128 + ($445<<5)|0) + 12|0);
   HEAP32[$446>>2] = $2;
   $447 = HEAP32[2141384>>2]|0;
   $448 = ((2141128 + ($447<<5)|0) + 16|0);
   HEAP32[$448>>2] = $14;
   $449 = HEAP32[2141384>>2]|0;
   $450 = (($449) + 1)|0;
   $451 = ($450|0)<(0);
   $452 = $451 << 31 >> 31;
   $453 = $mipsinfo;
   $454 = $453;
   HEAP32[$454>>2] = $450;
   $455 = (($453) + 4)|0;
   $456 = $455;
   HEAP32[$456>>2] = $452;
   $457 = HEAP32[2141384>>2]|0;
   $458 = (($457) + 1)|0;
   HEAP32[2141384>>2] = $458;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $459 = $mipsinfo;
   $460 = $459;
   HEAP32[$460>>2] = 0;
   $461 = (($459) + 4)|0;
   $462 = $461;
   HEAP32[$462>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $463 = (($2) + -1)|0;
   $464 = ((2141128 + ($463<<5)|0) + 4|0);
   $465 = HEAP32[$464>>2]|0;
   $466 = $mipsinfo;
   $467 = $466;
   HEAP32[$467>>2] = $465;
   $468 = (($466) + 4)|0;
   $469 = $468;
   HEAP32[$469>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $470 = (($2) + -1)|0;
   $471 = ((2141128 + ($470<<5)|0) + 8|0);
   HEAP32[$471>>2] = $8;
   $472 = ((2141128 + ($470<<5)|0) + 20|0);
   HEAP32[$472>>2] = $14;
   $473 = ((2141128 + ($470<<5)|0) + 24|0);
   HEAP32[$473>>2] = $20;
   $474 = $mipsinfo;
   $475 = $474;
   HEAP32[$475>>2] = 0;
   $476 = (($474) + 4)|0;
   $477 = $476;
   HEAP32[$477>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 22:  {
   $478 = (($2) + -1)|0;
   $479 = ((2141128 + ($478<<5)|0) + 12|0);
   HEAP32[$479>>2] = $8;
   $480 = ((2141128 + ($478<<5)|0) + 28|0);
   HEAP32[$480>>2] = $14;
   $481 = ((2141128 + ($478<<5)|0) + 16|0);
   HEAP32[$481>>2] = $20;
   $482 = $mipsinfo;
   $483 = $482;
   HEAP32[$483>>2] = 0;
   $484 = (($482) + 4)|0;
   $485 = $484;
   HEAP32[$485>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $486 = (($2) + -1)|0;
   $487 = (2141128 + ($486<<5)|0);
   HEAP32[$487>>2] = 1;
   $488 = ((2141128 + ($486<<5)|0) + 4|0);
   HEAP32[$488>>2] = 0;
   $489 = $mipsinfo;
   $490 = $489;
   HEAP32[$490>>2] = 0;
   $491 = (($489) + 4)|0;
   $492 = $491;
   HEAP32[$492>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 24:  {
   $493 = (($2) + -1)|0;
   $494 = (2141128 + ($493<<5)|0);
   HEAP32[$494>>2] = 0;
   $495 = $mipsinfo;
   $496 = $495;
   HEAP32[$496>>2] = 0;
   $497 = (($495) + 4)|0;
   $498 = $497;
   HEAP32[$498>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  default: {
   HEAP32[$vararg_buffer50>>2] = $callnum;
   $vararg_ptr21 = (($vararg_buffer50) + 4|0);
   HEAP32[$vararg_ptr21>>2] = $name;
   (_printf((2141456|0),($vararg_buffer50|0))|0);
   STACKTOP = sp;return;
  }
  }
 }
 $499 = (_strcmp($name,2141544)|0);
 $500 = ($499|0)==(0);
 if ($500) {
  do {
   switch ($callnum|0) {
   case 12:  {
    $501 = ($14|0)==(0);
    if (!($501)) {
     $502 = $8 >>> 2;
     $503 = $502 & 524287;
     $504 = (34768 + ($503<<2)|0);
     $505 = $8 & 3;
     $506 = (($504) + ($505)|0);
     $507 = $2 >>> 2;
     $508 = $507 & 524287;
     $509 = (34768 + ($508<<2)|0);
     $510 = $2 & 3;
     $511 = (($509) + ($510)|0);
     $a2$045 = $14;$dst$043 = $511;$src$044 = $506;
     while(1) {
      $512 = HEAP8[$src$044>>0]|0;
      HEAP8[$dst$043>>0] = $512;
      $513 = (($dst$043) + 1|0);
      $514 = (($src$044) + 1|0);
      $515 = (($a2$045) + -1)|0;
      $516 = ($515|0)==(0);
      if ($516) {
       break;
      } else {
       $a2$045 = $515;$dst$043 = $513;$src$044 = $514;
      }
     }
    }
    $517 = $mipsinfo;
    $518 = $517;
    HEAP32[$518>>2] = $2;
    $519 = (($517) + 4)|0;
    $520 = $519;
    HEAP32[$520>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
    break;
   }
   case 13:  {
    $521 = (($14) + -1)|0;
    $522 = ($14|0)==(0);
    if (!($522)) {
     $523 = $8 >>> 2;
     $524 = $523 & 524287;
     $525 = (34768 + ($524<<2)|0);
     $526 = $8 & 3;
     $$sum8 = (($521) + ($526))|0;
     $527 = (($525) + ($$sum8)|0);
     $528 = $2 >>> 2;
     $529 = $528 & 524287;
     $530 = (34768 + ($529<<2)|0);
     $531 = $2 & 3;
     $$sum7 = (($521) + ($531))|0;
     $532 = (($530) + ($$sum7)|0);
     $a2$151 = $14;$dst3$049 = $532;$src4$050 = $527;
     while(1) {
      $533 = HEAP8[$src4$050>>0]|0;
      HEAP8[$dst3$049>>0] = $533;
      $534 = (($dst3$049) + -1|0);
      $535 = (($src4$050) + -1|0);
      $536 = (($a2$151) + -1)|0;
      $537 = ($536|0)==(0);
      if ($537) {
       break;
      } else {
       $a2$151 = $536;$dst3$049 = $534;$src4$050 = $535;
      }
     }
    }
    $538 = $mipsinfo;
    $539 = $538;
    HEAP32[$539>>2] = $2;
    $540 = (($538) + 4)|0;
    $541 = $540;
    HEAP32[$541>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
    break;
   }
   case 14:  {
    $542 = $2 >>> 2;
    $543 = $542 & 524287;
    $544 = (34768 + ($543<<2)|0);
    $545 = $2 & 3;
    $546 = (($544) + ($545)|0);
    $547 = $8&255;
    _memset(($546|0),($547|0),($14|0))|0;
    STACKTOP = sp;return;
    break;
   }
   case 17:  {
    $548 = $2 >>> 2;
    $549 = $548 & 524287;
    $550 = (34768 + ($549<<2)|0);
    $551 = $2 & 3;
    $552 = (($550) + ($551)|0);
    _memset(($552|0),0,($8|0))|0;
    STACKTOP = sp;return;
    break;
   }
   case 19:  {
    $553 = $2 & 2097151;
    $554 = (34768 + ($553)|0);
    $555 = $8 & 2097151;
    $556 = (34768 + ($555)|0);
    _iop_sprintf($554,$556,101);
    STACKTOP = sp;return;
    break;
   }
   case 23:  {
    $557 = $2 >>> 2;
    $558 = $557 & 524287;
    $559 = (34768 + ($558<<2)|0);
    $560 = $8 >>> 2;
    $561 = $560 & 524287;
    $562 = (34768 + ($561<<2)|0);
    $563 = $2 & 3;
    $564 = (($559) + ($563)|0);
    $565 = $8 & 3;
    $566 = (($562) + ($565)|0);
    $567 = HEAP8[$566>>0]|0;
    $568 = ($567<<24>>24)==(0);
    if ($568) {
     $dst7$0$lcssa = $564;
    } else {
     $569 = $567;$dst7$055 = $564;$src8$056 = $566;
     while(1) {
      HEAP8[$dst7$055>>0] = $569;
      $570 = (($dst7$055) + 1|0);
      $571 = (($src8$056) + 1|0);
      $572 = HEAP8[$571>>0]|0;
      $573 = ($572<<24>>24)==(0);
      if ($573) {
       $dst7$0$lcssa = $570;
       break;
      } else {
       $569 = $572;$dst7$055 = $570;$src8$056 = $571;
      }
     }
    }
    HEAP8[$dst7$0$lcssa>>0] = 0;
    $574 = $mipsinfo;
    $575 = $574;
    HEAP32[$575>>2] = $2;
    $576 = (($574) + 4)|0;
    $577 = $576;
    HEAP32[$577>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
    break;
   }
   case 27:  {
    $578 = $2 >>> 2;
    $579 = $578 & 524287;
    $580 = (34768 + ($579<<2)|0);
    $581 = $2 & 3;
    $582 = (($580) + ($581)|0);
    $583 = (_strlen(($582|0))|0);
    $584 = $mipsinfo;
    $585 = $584;
    HEAP32[$585>>2] = $583;
    $586 = (($584) + 4)|0;
    $587 = $586;
    HEAP32[$587>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
    break;
   }
   case 30:  {
    $588 = $2 >>> 2;
    $589 = $588 & 524287;
    $590 = (34768 + ($589<<2)|0);
    $591 = $8 >>> 2;
    $592 = $591 & 524287;
    $593 = (34768 + ($592<<2)|0);
    $594 = $2 & 3;
    $595 = (($590) + ($594)|0);
    $596 = $8 & 3;
    $597 = (($593) + ($596)|0);
    $598 = HEAP8[$597>>0]|0;
    $599 = ($598<<24>>24)!=(0);
    $600 = ($14|0)!=(0);
    $or$cond460 = $599 & $600;
    if ($or$cond460) {
     $601 = $598;$a2$261 = $14;$dst10$062 = $595;$src11$063 = $597;
     while(1) {
      HEAP8[$dst10$062>>0] = $601;
      $602 = (($dst10$062) + 1|0);
      $603 = (($src11$063) + 1|0);
      $604 = (($a2$261) + -1)|0;
      $605 = HEAP8[$603>>0]|0;
      $606 = ($605<<24>>24)!=(0);
      $607 = ($604|0)!=(0);
      $or$cond4 = $606 & $607;
      if ($or$cond4) {
       $601 = $605;$a2$261 = $604;$dst10$062 = $602;$src11$063 = $603;
      } else {
       $dst10$0$lcssa = $602;
       break;
      }
     }
    } else {
     $dst10$0$lcssa = $595;
    }
    HEAP8[$dst10$0$lcssa>>0] = 0;
    $608 = $mipsinfo;
    $609 = $608;
    HEAP32[$609>>2] = $2;
    $610 = (($608) + 4)|0;
    $611 = $610;
    HEAP32[$611>>2] = 0;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
    break;
   }
   case 36:  {
    $612 = $2 >>> 2;
    $613 = $612 & 524287;
    $614 = (34768 + ($613<<2)|0);
    $615 = $2 & 3;
    $616 = (($614) + ($615)|0);
    $617 = ($8|0)==(0);
    if (!($617)) {
     (_puts((4247368|0))|0);
    }
    $618 = (_strtol($616,0,$14)|0);
    $619 = ($618|0)<(0);
    $620 = $619 << 31 >> 31;
    $621 = $mipsinfo;
    $622 = $621;
    HEAP32[$622>>2] = $618;
    $623 = (($621) + 4)|0;
    $624 = $623;
    HEAP32[$624>>2] = $620;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
    break;
   }
   default: {
    HEAP32[$vararg_buffer50>>2] = $callnum;
    $vararg_ptr25 = (($vararg_buffer50) + 4|0);
    HEAP32[$vararg_ptr25>>2] = $name;
    (_printf((2141456|0),($vararg_buffer50|0))|0);
    STACKTOP = sp;return;
   }
   }
  } while(0);
 }
 $625 = (_strcmp($name,2141552)|0);
 $626 = ($625|0)==(0);
 if ($626) {
  switch ($callnum|0) {
  case 4:  {
   if ((($2|0) == 36)) {
    HEAP32[2132640>>2] = $14;
    HEAP32[2141424>>2] = $20;
    STACKTOP = sp;return;
   } else if ((($2|0) == 40)) {
    HEAP32[2132632>>2] = $14;
    HEAP32[2141440>>2] = $20;
    STACKTOP = sp;return;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 17:  {
   $627 = HEAP32[2141408>>2]|0;
   $628 = ($627|0)==(0);
   $629 = $628 ? 0 : -102;
   $630 = $628 ? 0 : -1;
   $631 = $mipsinfo;
   $632 = $631;
   HEAP32[$632>>2] = $629;
   $633 = (($631) + 4)|0;
   $634 = $633;
   HEAP32[$634>>2] = $630;
   HEAP32[2141408>>2] = 1;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 18:  {
   HEAP32[2141408>>2] = 0;
   $635 = $mipsinfo;
   $636 = $635;
   HEAP32[$636>>2] = 0;
   $637 = (($635) + 4)|0;
   $638 = $637;
   HEAP32[$638>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $639 = $mipsinfo;
   $640 = $639;
   HEAP32[$640>>2] = 0;
   $641 = (($639) + 4)|0;
   $642 = $641;
   HEAP32[$642>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 9: case 8: case 7: case 6: case 5:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
   HEAP32[$vararg_buffer50>>2] = $callnum;
   $vararg_ptr29 = (($vararg_buffer50) + 4|0);
   HEAP32[$vararg_ptr29>>2] = $name;
   (_printf((2141456|0),($vararg_buffer50|0))|0);
   STACKTOP = sp;return;
  }
  }
 }
 $643 = (_strcmp($name,2141560)|0);
 $644 = ($643|0)==(0);
 if ($644) {
  if ((($callnum|0) == 6)) {
   $645 = $2 & 2097151;
   $646 = $645 >>> 2;
   $647 = (34768 + ($646<<2)|0);
   $648 = HEAP32[$647>>2]|0;
   $649 = ($648|0)==(1103101952);
   if ($649) {
    $650 = (($645) + 12)|0;
    $651 = HEAP32[2133168>>2]|0;
    $652 = (2132656 + ($651<<4)|0);
    $653 = $650 >>> 2;
    $654 = (34768 + ($653<<2)|0);
    $655 = $654;
    $656 = $655;
    $657 = HEAP32[$656>>2]|0;
    $658 = (($655) + 4)|0;
    $659 = $658;
    $660 = HEAP32[$659>>2]|0;
    $661 = $652;
    $662 = $661;
    HEAP32[$662>>2] = $657;
    $663 = (($661) + 4)|0;
    $664 = $663;
    HEAP32[$664>>2] = $660;
    $665 = HEAP32[2133168>>2]|0;
    $666 = ((2132656 + ($665<<4)|0) + 8|0);
    HEAP8[$666>>0] = 0;
    $667 = (($645) + 20)|0;
    $668 = HEAP32[2133168>>2]|0;
    $669 = ((2132656 + ($668<<4)|0) + 12|0);
    HEAP32[$669>>2] = $667;
    $670 = HEAP32[2133168>>2]|0;
    $671 = (($670) + 1)|0;
    HEAP32[2133168>>2] = $671;
   } else {
    (_puts((4247416|0))|0);
   }
   $672 = $mipsinfo;
   $673 = $672;
   HEAP32[$673>>2] = 0;
   $674 = (($672) + 4)|0;
   $675 = $674;
   HEAP32[$675>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
  } else if ((($callnum|0) == 5)) {
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer50>>2] = $callnum;
   $vararg_ptr33 = (($vararg_buffer50) + 4|0);
   HEAP32[$vararg_ptr33>>2] = $name;
   (_printf((2141456|0),($vararg_buffer50|0))|0);
   STACKTOP = sp;return;
  }
 }
 $676 = (_strcmp($name,2141576)|0);
 $677 = ($676|0)==(0);
 if ($677) {
  switch ($callnum|0) {
  case 4:  {
   $678 = (_psf2_get_loadaddr()|0);
   $679 = $678 & 15;
   $680 = ($679|0)==(0);
   if ($680) {
    $newAlloc12$0 = $678;
   } else {
    $681 = (($678) + 16)|0;
    $682 = $681 & -16;
    $newAlloc12$0 = $682;
   }
   $683 = $8 & 15;
   $684 = ($683|0)==(0);
   if ($684) {
    $a1$0 = $8;
   } else {
    $685 = (($8) + 16)|0;
    $686 = $685 & -16;
    $a1$0 = $686;
   }
   $687 = ($a1$0|0)==(1114112);
   if ($687) {
    HEAP32[$vararg_buffer50>>2] = $newAlloc12$0;
    $vararg_ptr37 = (($vararg_buffer50) + 4|0);
    HEAP32[$vararg_ptr37>>2] = 393216;
    (_printf((2141584|0),($vararg_buffer50|0))|0);
    $newAlloc12$1 = 393216;
   } else {
    $newAlloc12$1 = $newAlloc12$0;
   }
   $688 = (($newAlloc12$1) + ($a1$0))|0;
   _psf2_set_loadaddr($688);
   $689 = $mipsinfo;
   $690 = $689;
   HEAP32[$690>>2] = $newAlloc12$1;
   $691 = (($689) + 4)|0;
   $692 = $691;
   HEAP32[$692>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $693 = (_psf2_get_loadaddr()|0);
   $694 = (2097152 - ($693))|0;
   $695 = $mipsinfo;
   $696 = $695;
   HEAP32[$696>>2] = $694;
   $697 = (($695) + 4)|0;
   $698 = $697;
   HEAP32[$698>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $699 = (_psf2_get_loadaddr()|0);
   $700 = (2097152 - ($699))|0;
   $701 = $mipsinfo;
   $702 = $701;
   HEAP32[$702>>2] = $700;
   $703 = (($701) + 4)|0;
   $704 = $703;
   HEAP32[$704>>2] = 0;
   _mips_set_info(97,$mipsinfo);
   STACKTOP = sp;return;
   break;
  }
  case 14:  {
   $705 = $2 & 2097151;
   $706 = $2 & 3;
   $$sum10 = (($705) + ($706))|0;
   $707 = (34768 + ($$sum10)|0);
   _iop_sprintf($out,$707,100);
   $708 = (_strlen(($out|0))|0);
   $709 = (($708) + -1)|0;
   $710 = (($out) + ($709)|0);
   $711 = HEAP8[$710>>0]|0;
   $712 = ($711<<24>>24)==(10);
   if (!($712)) {
    $endptr = (($out) + ($708)|0);
    HEAP8[$endptr>>0]=10&255;HEAP8[$endptr+1>>0]=10>>8;
   }
   $strlenfirst = HEAP8[$out>>0]|0;
   $713 = ($strlenfirst<<24>>24)==(0);
   if ($713) {
    STACKTOP = sp;return;
   } else {
    $ch$067 = 0;
   }
   while(1) {
    $714 = (($out) + ($ch$067)|0);
    $715 = HEAP8[$714>>0]|0;
    $716 = ($715<<24>>24)==(27);
    if ($716) {
     HEAP8[$714>>0] = 93;
    }
    $717 = (($ch$067) + 1)|0;
    $718 = (_strlen(($out|0))|0);
    $719 = ($717>>>0)<($718>>>0);
    if ($719) {
     $ch$067 = $717;
    } else {
     break;
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
   HEAP32[$vararg_buffer50>>2] = $callnum;
   $vararg_ptr41 = (($vararg_buffer50) + 4|0);
   HEAP32[$vararg_ptr41>>2] = $name;
   (_printf((2141456|0),($vararg_buffer50|0))|0);
   STACKTOP = sp;return;
  }
  }
 }
 $720 = (_strcmp($name,2141608)|0);
 $721 = ($720|0)==(0);
 if ($721) {
  $cond1 = ($callnum|0)==(7);
  if (!($cond1)) {
   HEAP32[$vararg_buffer50>>2] = $callnum;
   $vararg_ptr45 = (($vararg_buffer50) + 4|0);
   HEAP32[$vararg_ptr45>>2] = $name;
   (_printf((2141456|0),($vararg_buffer50|0))|0);
   STACKTOP = sp;return;
  }
  $722 = $2 >>> 2;
  $723 = $722 & 524287;
  $$sum11 = (($723) + 2)|0;
  $724 = (34768 + ($$sum11<<2)|0);
  $725 = $14 & 2097151;
  $726 = (_psf2_get_loadaddr()|0);
  $727 = $726 & 15;
  $728 = ($727|0)==(0);
  if ($728) {
   $newAlloc13$0 = $726;
  } else {
   $729 = (($726) + 16)|0;
   $730 = $729 & -16;
   $newAlloc13$0 = $730;
  }
  $731 = (($newAlloc13$0) + 2048)|0;
  _psf2_set_loadaddr($731);
  $732 = (_malloc(2097152)|0);
  $733 = (_psf2_load_file($724,$732,2097152)|0);
  $734 = ($733|0)==(-1);
  if (!($734)) {
   $735 = (_psf2_load_elf($732,2097152)|0);
   $736 = ($735|0)==(-1);
   if (!($736)) {
    HEAP32[$vararg_buffer50>>2] = $2;
    $737 = ($8|0)==(0);
    if ($737) {
     $numargs$294 = 1;
     label = 167;
    } else {
     $738 = (($vararg_buffer50) + 4|0);
     HEAP32[$738>>2] = $14;
     $739 = (34768 + ($725)|0);
     $740 = (($14) + 1)|0;
     $a1$173 = $8;$argofs$075 = 0;$argwalk$076 = $739;$numargs$074 = 2;
     while(1) {
      $741 = HEAP8[$argwalk$076>>0]|0;
      $742 = ($741<<24>>24)==(0);
      $743 = ($a1$173>>>0)>(1);
      $or$cond = $742 & $743;
      if ($or$cond) {
       $744 = (($740) + ($argofs$075))|0;
       $745 = (($vararg_buffer50) + ($numargs$074<<2)|0);
       HEAP32[$745>>2] = $744;
       $746 = (($numargs$074) + 1)|0;
       $numargs$1 = $746;
      } else {
       $numargs$1 = $numargs$074;
      }
      $747 = (($argwalk$076) + 1|0);
      $748 = (($argofs$075) + 1)|0;
      $749 = (($a1$173) + -1)|0;
      $750 = ($749|0)==(0);
      if ($750) {
       $numargs$1$lcssa = $numargs$1;
       break;
      } else {
       $a1$173 = $749;$argofs$075 = $748;$argwalk$076 = $747;$numargs$074 = $numargs$1;
      }
     }
     $751 = ($numargs$1$lcssa|0)==(0);
     if ($751) {
      $numargs$295 = 0;
     } else {
      $numargs$294 = $numargs$1$lcssa;
      label = 167;
     }
    }
    if ((label|0) == 167) {
     $752 = $newAlloc13$0 >>> 2;
     $scevgep = (34768 + ($752<<2)|0);
     $753 = $numargs$294 << 2;
     _memcpy(($scevgep|0),($vararg_buffer50|0),($753|0))|0;
     $numargs$295 = $numargs$294;
    }
    $754 = $mipsinfo;
    $755 = $754;
    HEAP32[$755>>2] = $numargs$295;
    $756 = (($754) + 4)|0;
    $757 = $756;
    HEAP32[$757>>2] = 0;
    _mips_set_info(99,$mipsinfo);
    $758 = $newAlloc13$0 | -2147483648;
    $759 = $mipsinfo;
    $760 = $759;
    HEAP32[$760>>2] = $758;
    $761 = (($759) + 4)|0;
    $762 = $761;
    HEAP32[$762>>2] = 0;
    _mips_set_info(100,$mipsinfo);
    $763 = (($735) + -4)|0;
    $764 = $mipsinfo;
    $765 = $764;
    HEAP32[$765>>2] = $763;
    $766 = (($764) + 4)|0;
    $767 = $766;
    HEAP32[$767>>2] = 0;
    _mips_set_info(20,$mipsinfo);
   }
  }
  _free($732);
  STACKTOP = sp;return;
 }
 $768 = (_strcmp($name,2141616)|0);
 $769 = ($768|0)==(0);
 if (!($769)) {
  $861 = HEAP32[2133168>>2]|0;
  $862 = ($861|0)>(0);
  L315: do {
   if ($862) {
    $863 = HEAP32[2133168>>2]|0;
    $lib$081 = 0;
    while(1) {
     $866 = (2132656 + ($lib$081<<4)|0);
     $867 = (_strcmp($name,$866)|0);
     $868 = ($867|0)==(0);
     $865 = (($lib$081) + 1)|0;
     if ($868) {
      $lib$081$lcssa = $lib$081;
      break;
     }
     $864 = ($865|0)<($863|0);
     if ($864) {
      $lib$081 = $865;
     } else {
      break L315;
     }
    }
    $869 = $mipsinfo;
    $870 = $869;
    HEAP32[$870>>2] = 0;
    $871 = (($869) + 4)|0;
    $872 = $871;
    HEAP32[$872>>2] = 0;
    _mips_set_info(91,$mipsinfo);
    _mips_set_info(92,$mipsinfo);
    $873 = ((2132656 + ($lib$081$lcssa<<4)|0) + 12|0);
    $874 = HEAP32[$873>>2]|0;
    $875 = $874 >>> 2;
    $876 = (($875) + ($callnum))|0;
    $877 = (34768 + ($876<<2)|0);
    $878 = HEAP32[$877>>2]|0;
    $879 = (_i64Add(($878|0),0,-4,-1)|0);
    $880 = tempRet0;
    $881 = $mipsinfo;
    $882 = $881;
    HEAP32[$882>>2] = $879;
    $883 = (($881) + 4)|0;
    $884 = $883;
    HEAP32[$884>>2] = $880;
    _mips_set_info(20,$mipsinfo);
    STACKTOP = sp;return;
   }
  } while(0);
  HEAP32[$vararg_buffer50>>2] = $callnum;
  $vararg_ptr53 = (($vararg_buffer50) + 4|0);
  HEAP32[$vararg_ptr53>>2] = $name;
  (_printf((2141456|0),($vararg_buffer50|0))|0);
  STACKTOP = sp;return;
 }
 switch ($callnum|0) {
 case 4:  {
  $i15$080 = 0;
  while(1) {
   $772 = (2132376 + ($i15$080<<2)|0);
   $773 = HEAP32[$772>>2]|0;
   $774 = ($773|0)==(0);
   $771 = (($i15$080) + 1)|0;
   if ($774) {
    $i15$080$lcssa = $i15$080;
    label = 175;
    break;
   }
   $770 = ($771|0)<(32);
   if ($770) {
    $i15$080 = $771;
   } else {
    break;
   }
  }
  if ((label|0) == 175) {
   $775 = ($i15$080$lcssa|0)==(-1);
   if (!($775)) {
    $780 = $2 & 2097151;
    $781 = (34768 + ($780)|0);
    $782 = (_strncmp($781,2141624,7)|0);
    $783 = ($782|0)==(0);
    do {
     if ($783) {
      $$sum13 = (($780) + 8)|0;
      $784 = (34768 + ($$sum13)|0);
      $mname$0 = $784;
     } else {
      $785 = (_strncmp($781,2141632,7)|0);
      $786 = ($785|0)==(0);
      if ($786) {
       $$sum15 = (($780) + 8)|0;
       $787 = (34768 + ($$sum15)|0);
       $mname$0 = $787;
       break;
      }
      $788 = (_strncmp($781,2141640,6)|0);
      $789 = ($788|0)==(0);
      if ($789) {
       $$sum16 = (($780) + 7)|0;
       $790 = (34768 + ($$sum16)|0);
       $mname$0 = $790;
      } else {
       $mname$0 = $781;
      }
     }
    } while(0);
    _mips_get_info(126,$mipsinfo);
    $791 = (_malloc(6291456)|0);
    $792 = (2132504 + ($i15$080$lcssa<<2)|0);
    HEAP32[$792>>2] = $791;
    $793 = (_psf2_load_file($mname$0,$791,6291456)|0);
    $794 = (2141648 + ($i15$080$lcssa<<2)|0);
    HEAP32[$794>>2] = $793;
    $795 = (2141776 + ($i15$080$lcssa<<2)|0);
    HEAP32[$795>>2] = 0;
    $796 = (2132376 + ($i15$080$lcssa<<2)|0);
    HEAP32[$796>>2] = 1;
    $797 = HEAP32[$794>>2]|0;
    $798 = ($797|0)==(-1);
    $799 = ($i15$080$lcssa|0)<(0);
    $800 = $799 << 31 >> 31;
    $801 = $798 ? $797 : $i15$080$lcssa;
    $802 = $798 ? 0 : $800;
    $803 = $mipsinfo;
    $804 = $803;
    HEAP32[$804>>2] = $801;
    $805 = (($803) + 4)|0;
    $806 = $805;
    HEAP32[$806>>2] = $802;
    _mips_set_info(97,$mipsinfo);
    STACKTOP = sp;return;
   }
  }
  (_puts((4247456|0))|0);
  $776 = $mipsinfo;
  $777 = $776;
  HEAP32[$777>>2] = -1;
  $778 = (($776) + 4)|0;
  $779 = $778;
  HEAP32[$779>>2] = 0;
  _mips_set_info(97,$mipsinfo);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $807 = (2132504 + ($2<<2)|0);
  $808 = HEAP32[$807>>2]|0;
  _free($808);
  HEAP32[$807>>2] = 0;
  $809 = (2141776 + ($2<<2)|0);
  HEAP32[$809>>2] = 0;
  $810 = (2141648 + ($2<<2)|0);
  HEAP32[$810>>2] = 0;
  $811 = (2132376 + ($2<<2)|0);
  HEAP32[$811>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $812 = (2141776 + ($2<<2)|0);
  $813 = HEAP32[$812>>2]|0;
  $814 = (2141648 + ($2<<2)|0);
  $815 = HEAP32[$814>>2]|0;
  $816 = ($815>>>0)>($813>>>0);
  if ($816) {
   $817 = (($813) + ($14))|0;
   $818 = ($817>>>0)>($815>>>0);
   $819 = (($815) - ($813))|0;
   $$23 = $818 ? $819 : $14;
   $820 = $8 & 2097151;
   $821 = (34768 + ($820)|0);
   $822 = (2132504 + ($2<<2)|0);
   $823 = HEAP32[$822>>2]|0;
   $824 = (($823) + ($813)|0);
   _memcpy(($821|0),($824|0),($$23|0))|0;
   $825 = HEAP32[$812>>2]|0;
   $826 = (($825) + ($$23))|0;
   HEAP32[$812>>2] = $826;
   $829 = $$23;$832 = 0;
  } else {
   $829 = 0;$832 = 0;
  }
  $827 = $mipsinfo;
  $828 = $827;
  HEAP32[$828>>2] = $829;
  $830 = (($827) + 4)|0;
  $831 = $830;
  HEAP32[$831>>2] = $832;
  _mips_set_info(97,$mipsinfo);
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  if ((($14|0) == 0)) {
   $833 = (2141648 + ($2<<2)|0);
   $834 = HEAP32[$833>>2]|0;
   $835 = ($8>>>0)>($834>>>0);
   if (!($835)) {
    $836 = (2141776 + ($2<<2)|0);
    HEAP32[$836>>2] = $8;
   }
  } else if ((($14|0) == 1)) {
   $837 = (2141776 + ($2<<2)|0);
   $838 = HEAP32[$837>>2]|0;
   $839 = (($838) + ($8))|0;
   $840 = (2141648 + ($2<<2)|0);
   $841 = HEAP32[$840>>2]|0;
   $842 = ($839>>>0)<($841>>>0);
   if ($842) {
    HEAP32[$837>>2] = $839;
   }
  } else if ((($14|0) == 2)) {
   $843 = (2141648 + ($2<<2)|0);
   $844 = HEAP32[$843>>2]|0;
   $845 = (($844) - ($8))|0;
   $846 = (2141776 + ($2<<2)|0);
   HEAP32[$846>>2] = $845;
  }
  $847 = (2141776 + ($2<<2)|0);
  $848 = HEAP32[$847>>2]|0;
  $849 = $mipsinfo;
  $850 = $849;
  HEAP32[$850>>2] = $848;
  $851 = (($849) + 4)|0;
  $852 = $851;
  HEAP32[$852>>2] = 0;
  _mips_set_info(97,$mipsinfo);
  STACKTOP = sp;return;
  break;
 }
 case 20:  {
  $853 = $mipsinfo;
  $854 = $853;
  HEAP32[$854>>2] = 0;
  $855 = (($853) + 4)|0;
  $856 = $855;
  HEAP32[$856>>2] = 0;
  _mips_set_info(97,$mipsinfo);
  STACKTOP = sp;return;
  break;
 }
 case 21:  {
  $857 = $mipsinfo;
  $858 = $857;
  HEAP32[$858>>2] = 0;
  $859 = (($857) + 4)|0;
  $860 = $859;
  HEAP32[$860>>2] = 0;
  _mips_set_info(97,$mipsinfo);
  STACKTOP = sp;return;
  break;
 }
 default: {
  HEAP32[$vararg_buffer50>>2] = $callnum;
  $vararg_ptr49 = (($vararg_buffer50) + 4|0);
  HEAP32[$vararg_ptr49>>2] = $name;
  (_printf((2141456|0),($vararg_buffer50|0))|0);
  STACKTOP = sp;return;
 }
 }
}
function _psx_irq_update() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mipsinfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mipsinfo = sp;
 $0 = HEAP32[34760>>2]|0;
 $1 = HEAP32[2132056>>2]|0;
 $2 = $1 & $0;
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = $mipsinfo;
  $9 = $8;
  HEAP32[$9>>2] = 0;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = 0;
  _mips_set_info(22,$mipsinfo);
  STACKTOP = sp;return;
 } else {
  HEAP32[2132168>>2] = 0;
  $4 = $mipsinfo;
  $5 = $4;
  HEAP32[$5>>2] = 1;
  $6 = (($4) + 4)|0;
  $7 = $6;
  HEAP32[$7>>2] = 0;
  _mips_set_info(22,$mipsinfo);
  STACKTOP = sp;return;
 }
}
function _psx_dma4($madr,$bcr,$chcr) {
 $madr = $madr|0;
 $bcr = $bcr|0;
 $chcr = $chcr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($chcr|0)==(16777729);
 $1 = $bcr >>> 16;
 $2 = $bcr << 1;
 $3 = $2 & 131070;
 $4 = Math_imul($3, $1)|0;
 $5 = $madr & 2097151;
 if ($0) {
  _SPUwriteDMAMem($5,$4);
  return;
 } else {
  _SPUreadDMAMem($5,$4);
  return;
 }
}
function _ps2_dma4($madr,$bcr,$chcr) {
 $madr = $madr|0;
 $bcr = $bcr|0;
 $chcr = $chcr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($chcr|0)==(16777729);
 $1 = $bcr >>> 16;
 $2 = $bcr << 2;
 $3 = $2 & 262140;
 $4 = Math_imul($3, $1)|0;
 $5 = $madr & 2097151;
 if ($0) {
  _SPU2writeDMA4Mem($5,$4);
  HEAP32[2141416>>2] = 80;
  return;
 } else {
  _SPU2readDMA4Mem($5,$4);
  HEAP32[2141416>>2] = 80;
  return;
 }
}
function _ps2_dma7($madr,$bcr,$chcr) {
 $madr = $madr|0;
 $bcr = $bcr|0;
 $chcr = $chcr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($chcr|0) == 65552) | (($chcr|0) == 983056) | (($chcr|0) == 1048592) | (($chcr|0) == 16777729)) {
  $0 = $bcr >>> 16;
  $1 = $bcr << 2;
  $2 = $1 & 262140;
  $3 = Math_imul($2, $0)|0;
  $4 = $madr & 2097151;
  _SPU2writeDMA7Mem($4,$3);
 }
 HEAP32[2141432>>2] = 80;
 return;
}
function _call_irq_routine($routine,$parameter) {
 $routine = $routine|0;
 $parameter = $parameter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $exitcond = 0, $exitcond3 = 0, $j$02 = 0, $j$11 = 0, $mipsinfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mipsinfo = sp;
 $0 = HEAP32[4247248>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  (_puts((4247256|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[4247248>>2] = 1;
 $j$02 = 0;
 while(1) {
  $2 = (($j$02) + 95)|0;
  _mips_get_info($2,$mipsinfo);
  $3 = $mipsinfo;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (2132200 + ($j$02<<2)|0);
  HEAP32[$9>>2] = $5;
  $10 = (($j$02) + 1)|0;
  $exitcond3 = ($10|0)==(32);
  if ($exitcond3) {
   break;
  } else {
   $j$02 = $10;
  }
 }
 _mips_get_info(93,$mipsinfo);
 $11 = $mipsinfo;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 HEAP32[((2132200 + 128|0))>>2] = $13;
 _mips_get_info(94,$mipsinfo);
 $17 = $mipsinfo;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[((2132200 + 132|0))>>2] = $19;
 _mips_get_info(20,$mipsinfo);
 $23 = $mipsinfo;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 HEAP32[((2132200 + 136|0))>>2] = $25;
 _mips_get_info(91,$mipsinfo);
 $29 = $mipsinfo;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 HEAP32[((2132200 + 140|0))>>2] = $31;
 _mips_get_info(92,$mipsinfo);
 $35 = $mipsinfo;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 HEAP32[((2132200 + 144|0))>>2] = $37;
 $41 = $mipsinfo;
 $42 = $41;
 HEAP32[$42>>2] = $routine;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = 0;
 _mips_set_info(20,$mipsinfo);
 $45 = $mipsinfo;
 $46 = $45;
 HEAP32[$46>>2] = $parameter;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = 0;
 _mips_set_info(99,$mipsinfo);
 $49 = $mipsinfo;
 $50 = $49;
 HEAP32[$50>>2] = -2147479552;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = 0;
 _mips_set_info(126,$mipsinfo);
 HEAP32[((34768 + 4096|0))>>2] = 11;
 HEAP32[2132360>>2] = 0;
 $53 = (_mips_get_icount()|0);
 $54 = HEAP32[2132360>>2]|0;
 $55 = ($54|0)==(0);
 if ($55) {
  while(1) {
   (_mips_execute(10)|0);
   $56 = HEAP32[2132360>>2]|0;
   $57 = ($56|0)==(0);
   if (!($57)) {
    break;
   }
  }
 }
 _mips_set_icount($53);
 $j$11 = 0;
 while(1) {
  $58 = (2132200 + ($j$11<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $mipsinfo;
  $61 = $60;
  HEAP32[$61>>2] = $59;
  $62 = (($60) + 4)|0;
  $63 = $62;
  HEAP32[$63>>2] = 0;
  $64 = (($j$11) + 95)|0;
  _mips_set_info($64,$mipsinfo);
  $65 = (($j$11) + 1)|0;
  $exitcond = ($65|0)==(32);
  if ($exitcond) {
   break;
  } else {
   $j$11 = $65;
  }
 }
 $66 = HEAP32[((2132200 + 128|0))>>2]|0;
 $67 = $mipsinfo;
 $68 = $67;
 HEAP32[$68>>2] = $66;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = 0;
 _mips_set_info(93,$mipsinfo);
 $71 = HEAP32[((2132200 + 132|0))>>2]|0;
 $72 = $mipsinfo;
 $73 = $72;
 HEAP32[$73>>2] = $71;
 $74 = (($72) + 4)|0;
 $75 = $74;
 HEAP32[$75>>2] = 0;
 _mips_set_info(94,$mipsinfo);
 $76 = HEAP32[((2132200 + 136|0))>>2]|0;
 $77 = $mipsinfo;
 $78 = $77;
 HEAP32[$78>>2] = $76;
 $79 = (($77) + 4)|0;
 $80 = $79;
 HEAP32[$80>>2] = 0;
 _mips_set_info(20,$mipsinfo);
 $81 = HEAP32[((2132200 + 140|0))>>2]|0;
 $82 = $mipsinfo;
 $83 = $82;
 HEAP32[$83>>2] = $81;
 $84 = (($82) + 4)|0;
 $85 = $84;
 HEAP32[$85>>2] = 0;
 _mips_set_info(91,$mipsinfo);
 $86 = HEAP32[((2132200 + 144|0))>>2]|0;
 $87 = $mipsinfo;
 $88 = $87;
 HEAP32[$88>>2] = $86;
 $89 = (($87) + 4)|0;
 $90 = $89;
 HEAP32[$90>>2] = 0;
 _mips_set_info(92,$mipsinfo);
 HEAP32[4247248>>2] = 0;
 STACKTOP = sp;return;
}
function _ps2_reschedule() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, $i$12 = 0, $iNextThread$0 = 0, $iNextThread$1 = 0, $or$cond = 0, $or$cond13 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2132184>>2]|0;
 $1 = (($0) + 1)|0;
 $2 = HEAP32[2139328>>2]|0;
 $3 = ($1|0)>=($2|0);
 $$ = $3 ? 0 : $1;
 $4 = ($$|0)<($2|0);
 L1: do {
  if ($4) {
   $5 = HEAP32[2132184>>2]|0;
   $6 = HEAP32[2139328>>2]|0;
   $i$05 = $$;
   while(1) {
    $7 = ($i$05|0)==($5|0);
    if (!($7)) {
     $8 = (2133696 + (($i$05*176)|0)|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==(1);
     if ($10) {
      $iNextThread$0 = $i$05;
      break L1;
     }
    }
    $11 = (($i$05) + 1)|0;
    $12 = ($11|0)<($6|0);
    if ($12) {
     $i$05 = $11;
    } else {
     $iNextThread$0 = -1;
     break;
    }
   }
  } else {
   $iNextThread$0 = -1;
  }
 } while(0);
 $13 = ($$|0)>(0);
 $14 = ($iNextThread$0|0)==(-1);
 $or$cond = $13 & $14;
 $15 = HEAP32[2139328>>2]|0;
 $16 = ($15|0)>(0);
 $or$cond13 = $or$cond & $16;
 L9: do {
  if ($or$cond13) {
   $17 = HEAP32[2132184>>2]|0;
   $18 = HEAP32[2139328>>2]|0;
   $i$12 = 0;
   while(1) {
    $19 = ($i$12|0)==($17|0);
    if (!($19)) {
     $20 = (2133696 + (($i$12*176)|0)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(1);
     if ($22) {
      $iNextThread$1 = $i$12;
      break L9;
     }
    }
    $23 = (($i$12) + 1)|0;
    $24 = ($23|0)<($18|0);
    if ($24) {
     $i$12 = $23;
    } else {
     $iNextThread$1 = $iNextThread$0;
     break;
    }
   }
  } else {
   $iNextThread$1 = $iNextThread$0;
  }
 } while(0);
 $25 = ($iNextThread$1|0)==(-1);
 $26 = HEAP32[2132184>>2]|0;
 $27 = ($26|0)!=(-1);
 if (!($25)) {
  if ($27) {
   _FreezeThread($26,0);
  }
  _ThawThread($iNextThread$1);
  HEAP32[2132184>>2] = $iNextThread$1;
  $28 = (2133696 + (($iNextThread$1*176)|0)|0);
  HEAP32[$28>>2] = 0;
  return;
 }
 if (!($27)) {
  _mips_shorten_frame();
  HEAP32[2132184>>2] = -1;
  return;
 }
 $29 = (2133696 + (($26*176)|0)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  return;
 }
 _mips_shorten_frame();
 HEAP32[2132184>>2] = -1;
 return;
}
function _calc_ev($a0) {
 $a0 = $a0|0;
 var $$op = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a0 >>> 24;
 $1 = $0 & 15;
 $2 = ($1|0)==(15);
 $$op = $1 << 5;
 $3 = $2 ? 160 : $$op;
 $4 = $a0 & 31;
 $5 = $3 | $4;
 return ($5|0);
}
function _calc_spec($a1) {
 $a1 = $a1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i$01 = 0, $spec$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: do {
  if ((($a1|0) == 769)) {
   $spec$0 = 16;
  } else if ((($a1|0) == 770)) {
   $spec$0 = 17;
  } else {
   $i$01 = 0;
   while(1) {
    $2 = 1 << $i$01;
    $3 = $2 & $a1;
    $4 = ($3|0)==(0);
    $1 = (($i$01) + 1)|0;
    if (!($4)) {
     $spec$0 = $i$01;
     break L1;
    }
    $0 = ($1|0)<(16);
    if ($0) {
     $i$01 = $1;
    } else {
     $spec$0 = 0;
     break;
    }
   }
  }
 } while(0);
 return ($spec$0|0);
}
function _iop_sprintf($out,$fmt,$pstart) {
 $out = $out|0;
 $fmt = $fmt|0;
 $pstart = $pstart|0;
 var $$0 = 0, $$0$lcssa = 0, $$0$lcssa9 = 0, $$0$ph = 0, $$1 = 0, $$2$lcssa = 0, $$24 = 0, $$lcssa = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cf$0 = 0, $cf$0$lcssa10 = 0, $cf$0$ph = 0, $cf$0$pn = 0, $cf$0$pn$lcssa = 0, $cf$1 = 0, $cf$1$lcssa = 0, $curparm$0$ph = 0, $fp$0 = 0;
 var $mipsinfo = 0, $pstr$05 = 0, $temp = 0, $tfmt = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $temp = sp + 80|0;
 $tfmt = sp + 16|0;
 $mipsinfo = sp;
 $$0$ph = $out;$cf$0$ph = $fmt;$curparm$0$ph = $pstart;
 L1: while(1) {
  $$0 = $$0$ph;$cf$0 = $cf$0$ph;
  while(1) {
   $0 = HEAP8[$cf$0>>0]|0;
   if ((($0<<24>>24) == 27)) {
    $1 = (($$0) + 1|0);
    HEAP8[$$0>>0] = 91;
    $2 = (($$0) + 2|0);
    HEAP8[$1>>0] = 69;
    $3 = (($$0) + 3|0);
    HEAP8[$2>>0] = 83;
    $4 = (($$0) + 4|0);
    HEAP8[$3>>0] = 67;
    HEAP8[$4>>0] = 93;
    $$1 = $4;
   } else if ((($0<<24>>24) == 0)) {
    $$0$lcssa = $$0;
    break L1;
   } else if ((($0<<24>>24) == 37)) {
    $$0$lcssa9 = $$0;$cf$0$lcssa10 = $cf$0;
    break;
   } else {
    HEAP8[$$0>>0] = $0;
    $$1 = $$0;
   }
   $5 = (($$1) + 1|0);
   $6 = (($cf$0) + 1|0);
   $$0 = $5;$cf$0 = $6;
  }
  HEAP8[$tfmt>>0] = 37;
  $cf$0$pn = $cf$0$lcssa10;$fp$0 = 1;
  while(1) {
   $cf$1 = (($cf$0$pn) + 1|0);
   $7 = HEAP8[$cf$1>>0]|0;
   $$off = (($7) + -48)<<24>>24;
   $8 = ($$off&255)<(10);
   if ($8) {
    $9 = HEAP8[$cf$1>>0]|0;
    $10 = (($tfmt) + ($fp$0)|0);
    HEAP8[$10>>0] = $9;
    $11 = (($fp$0) + 1)|0;
    $cf$0$pn = $cf$1;$fp$0 = $11;
    continue;
   } else {
    $12 = ($7<<24>>24)==(46);
    $13 = HEAP8[$cf$1>>0]|0;
    $14 = (($tfmt) + ($fp$0)|0);
    HEAP8[$14>>0] = $13;
    $15 = (($fp$0) + 1)|0;
    if ($12) {
     $cf$0$pn = $cf$1;$fp$0 = $15;
     continue;
    } else {
     $$lcssa = $15;$cf$0$pn$lcssa = $cf$0$pn;$cf$1$lcssa = $cf$1;
     break;
    }
   }
  }
  $16 = (($tfmt) + ($$lcssa)|0);
  HEAP8[$16>>0] = 0;
  $17 = HEAP8[$cf$1$lcssa>>0]|0;
  $18 = $17 << 24 >> 24;
  switch ($18|0) {
  case 85: case 117: case 67: case 99: case 68: case 100: case 88: case 120:  {
   _mips_get_info($curparm$0$ph,$mipsinfo);
   $19 = $mipsinfo;
   $20 = $19;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($19) + 4)|0;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $21;
   (_sprintf($temp,$tfmt,$vararg_buffer1)|0);
   break;
  }
  default: {
   _mips_get_info($curparm$0$ph,$mipsinfo);
   $25 = $mipsinfo;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + 4)|0;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = $27 & 2097151;
   $32 = (34768 + ($31)|0);
   HEAP32[$vararg_buffer1>>2] = $32;
   (_sprintf($temp,$tfmt,$vararg_buffer1)|0);
  }
  }
  $33 = (($curparm$0$ph) + 1)|0;
  $34 = HEAP8[$temp>>0]|0;
  $35 = ($34<<24>>24)==(0);
  if ($35) {
   $$2$lcssa = $$0$lcssa9;
  } else {
   $$24 = $$0$lcssa9;$36 = $34;$pstr$05 = $temp;
   while(1) {
    HEAP8[$$24>>0] = $36;
    $37 = (($$24) + 1|0);
    $38 = (($pstr$05) + 1|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $$2$lcssa = $37;
     break;
    } else {
     $$24 = $37;$36 = $39;$pstr$05 = $38;
    }
   }
  }
  $41 = (($cf$0$pn$lcssa) + 2|0);
  $$0$ph = $$2$lcssa;$cf$0$ph = $41;$curparm$0$ph = $33;
 }
 HEAP8[$$0$lcssa>>0] = 0;
 STACKTOP = sp;return;
}
function _FreezeThread($iThread,$flag) {
 $iThread = $iThread|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $mipsinfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mipsinfo = sp;
 $i$01 = 0;
 while(1) {
  $0 = (($i$01) + 95)|0;
  _mips_get_info($0,$mipsinfo);
  $1 = $mipsinfo;
  $2 = $1;
  $3 = HEAP32[$2>>2]|0;
  $4 = (($1) + 4)|0;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (((2133696 + (($iThread*176)|0)|0) + ($i$01<<2)|0) + 28|0);
  HEAP32[$7>>2] = $3;
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==(32);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;
  }
 }
 _mips_get_info(93,$mipsinfo);
 $9 = $mipsinfo;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((2133696 + (($iThread*176)|0)|0) + 156|0);
 HEAP32[$15>>2] = $11;
 _mips_get_info(94,$mipsinfo);
 $16 = $mipsinfo;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((2133696 + (($iThread*176)|0)|0) + 160|0);
 HEAP32[$22>>2] = $18;
 _mips_get_info(91,$mipsinfo);
 $23 = $mipsinfo;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((2133696 + (($iThread*176)|0)|0) + 168|0);
 HEAP32[$29>>2] = $25;
 _mips_get_info(92,$mipsinfo);
 $30 = $mipsinfo;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((2133696 + (($iThread*176)|0)|0) + 172|0);
 HEAP32[$36>>2] = $32;
 $37 = ($flag|0)==(0);
 if ($37) {
  _mips_get_info(20,$mipsinfo);
 } else {
  _mips_get_info(126,$mipsinfo);
 }
 $38 = $mipsinfo;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = ((2133696 + (($iThread*176)|0)|0) + 164|0);
 HEAP32[$44>>2] = $40;
 $45 = (2133696 + (($iThread*176)|0)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 HEAP32[$45>>2] = 1;
 STACKTOP = sp;return;
}
function _ThawThread($iThread) {
 $iThread = $iThread|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $mipsinfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mipsinfo = sp;
 $0 = (2133696 + (($iThread*176)|0)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(6);
 if ($2) {
  $3 = ((2133696 + (($iThread*176)|0)|0) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + -4)|0;
  $6 = ((2133696 + (($iThread*176)|0)|0) + 164|0);
  HEAP32[$6>>2] = $5;
  $7 = ((2133696 + (($iThread*176)|0)|0) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((2133696 + (($iThread*176)|0)|0) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 2147483632)|0;
  $12 = (($11) + ($10))|0;
  $13 = ((2133696 + (($iThread*176)|0)|0) + 144|0);
  $14 = $12 | -2147483648;
  HEAP32[$13>>2] = $14;
  $15 = ((2133696 + (($iThread*176)|0)|0) + 172|0);
  HEAP32[$15>>2] = 0;
  $16 = ((2133696 + (($iThread*176)|0)|0) + 168|0);
  HEAP32[$16>>2] = 0;
 }
 $i$01 = 0;
 while(1) {
  $17 = (((2133696 + (($iThread*176)|0)|0) + ($i$01<<2)|0) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $mipsinfo;
  $20 = $19;
  HEAP32[$20>>2] = $18;
  $21 = (($19) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = 0;
  $23 = (($i$01) + 95)|0;
  _mips_set_info($23,$mipsinfo);
  $24 = (($i$01) + 1)|0;
  $exitcond = ($24|0)==(32);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $24;
  }
 }
 $25 = ((2133696 + (($iThread*176)|0)|0) + 156|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $mipsinfo;
 $28 = $27;
 HEAP32[$28>>2] = $26;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = 0;
 _mips_set_info(93,$mipsinfo);
 $31 = ((2133696 + (($iThread*176)|0)|0) + 160|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $mipsinfo;
 $34 = $33;
 HEAP32[$34>>2] = $32;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = 0;
 _mips_set_info(94,$mipsinfo);
 $37 = ((2133696 + (($iThread*176)|0)|0) + 164|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $mipsinfo;
 $40 = $39;
 HEAP32[$40>>2] = $38;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = 0;
 _mips_set_info(20,$mipsinfo);
 $43 = ((2133696 + (($iThread*176)|0)|0) + 168|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $mipsinfo;
 $46 = $45;
 HEAP32[$46>>2] = $44;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = 0;
 _mips_set_info(91,$mipsinfo);
 $49 = ((2133696 + (($iThread*176)|0)|0) + 172|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $mipsinfo;
 $52 = $51;
 HEAP32[$52>>2] = $50;
 $53 = (($51) + 4)|0;
 $54 = $53;
 HEAP32[$54>>2] = 0;
 _mips_set_info(92,$mipsinfo);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _SPUwriteRegister($reg,$val) {
 $reg = $reg|0;
 $val = $val|0;
 var $$ = 0, $$lobit = 0, $$lobit2 = 0, $$lobit3 = 0, $$lobit4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $reg & 4095;
 $1 = (($0) + -3072)|0;
 $2 = $1 >>> 1;
 $3 = (4247528 + ($2<<1)|0);
 HEAP16[$3>>1] = $val;
 $4 = ($1>>>0)<(384);
 if ($4) {
  $5 = $0 >>> 4;
  $6 = (($5) + -192)|0;
  $7 = $reg & 15;
  switch ($7|0) {
  case 2:  {
   $9 = $6&255;
   _SetVolumeLR(1,$9,$val);
   return;
   break;
  }
  case 4:  {
   _SetPitch651($6,$val);
   return;
   break;
  }
  case 0:  {
   $8 = $6&255;
   _SetVolumeLR(0,$8,$val);
   return;
   break;
  }
  case 10:  {
   $25 = $val&65535;
   $$lobit = $25 >>> 15;
   $26 = ((4248560 + (($6*352)|0)|0) + 316|0);
   HEAP32[$26>>2] = $$lobit;
   $27 = $25 >>> 14;
   $$lobit2 = $27 & 1;
   $28 = $$lobit2 ^ 1;
   $29 = ((4248560 + (($6*352)|0)|0) + 320|0);
   HEAP32[$29>>2] = $28;
   $30 = $25 >>> 6;
   $31 = $30 & 127;
   $32 = ((4248560 + (($6*352)|0)|0) + 324|0);
   HEAP32[$32>>2] = $31;
   $33 = $25 >>> 5;
   $$lobit3 = $33 & 1;
   $34 = ((4248560 + (($6*352)|0)|0) + 328|0);
   HEAP32[$34>>2] = $$lobit3;
   $35 = $25 & 31;
   $36 = ((4248560 + (($6*352)|0)|0) + 332|0);
   HEAP32[$36>>2] = $35;
   return;
   break;
  }
  case 6:  {
   $10 = HEAP32[4248552>>2]|0;
   $11 = $val&65535;
   $12 = $11 << 3;
   $13 = (($10) + ($12)|0);
   $14 = ((4248560 + (($6*352)|0)|0) + 152|0);
   HEAP32[$14>>2] = $13;
   return;
   break;
  }
  case 8:  {
   $15 = $val&65535;
   $$lobit4 = $15 >>> 15;
   $16 = ((4248560 + (($6*352)|0)|0) + 300|0);
   HEAP32[$16>>2] = $$lobit4;
   $17 = $15 >>> 8;
   $18 = $17 & 127;
   $19 = ((4248560 + (($6*352)|0)|0) + 304|0);
   HEAP32[$19>>2] = $18;
   $20 = $15 >>> 4;
   $21 = $20 & 15;
   $22 = ((4248560 + (($6*352)|0)|0) + 308|0);
   HEAP32[$22>>2] = $21;
   $23 = $15 & 15;
   $24 = ((4248560 + (($6*352)|0)|0) + 312|0);
   HEAP32[$24>>2] = $23;
   return;
   break;
  }
  case 14:  {
   $37 = HEAP32[4248552>>2]|0;
   $38 = $val&65535;
   $39 = $38 << 3;
   $40 = (($37) + ($39)|0);
   $41 = ((4248560 + (($6*352)|0)|0) + 160|0);
   HEAP32[$41>>2] = $40;
   $42 = ((4248560 + (($6*352)|0)|0) + 188|0);
   HEAP32[$42>>2] = 1;
   return;
   break;
  }
  default: {
   return;
  }
  }
 }
 do {
  switch ($0|0) {
  case 3494:  {
   $43 = $val&65535;
   $44 = $43 << 3;
   HEAP32[4257360>>2] = $44;
   return;
   break;
  }
  case 3502:  {
   $52 = $val&65535;
   $53 = $52 & 63488;
   $54 = $53&65535;
   HEAP16[4781664>>1] = $54;
   return;
   break;
  }
  case 3490:  {
   $55 = ($val<<16>>16)==(-1);
   $56 = ($val&65535)<(513);
   $or$cond = $55 | $56;
   if ($or$cond) {
    HEAP32[((4781672 + 4|0))>>2] = 0;
    HEAP32[4781672>>2] = 0;
    return;
   }
   $57 = $val&65535;
   $58 = $57 << 2;
   $59 = HEAP32[4781672>>2]|0;
   $60 = ($59|0)==($58|0);
   if ($60) {
    return;
   }
   HEAP32[4781672>>2] = $58;
   HEAP32[((4781672 + 4|0))>>2] = $58;
   return;
   break;
  }
  case 3460:  {
   $65 = $val << 16 >> 16;
   HEAP32[((4781672 + 12|0))>>2] = $65;
   return;
   break;
  }
  case 3492:  {
   HEAP16[4781840>>1] = $val;
   $61 = HEAP32[4248552>>2]|0;
   $62 = $val&65535;
   $63 = $62 << 3;
   $64 = (($61) + ($63)|0);
   HEAP32[4781848>>2] = $64;
   return;
   break;
  }
  case 3462:  {
   $66 = $val << 16 >> 16;
   HEAP32[((4781672 + 16|0))>>2] = $66;
   return;
   break;
  }
  case 3464:  {
   _SoundOn653(0,16,$val);
   return;
   break;
  }
  case 3466:  {
   _SoundOn653(16,24,$val);
   return;
   break;
  }
  case 3468:  {
   _SoundOff655(0,16,$val);
   return;
   break;
  }
  case 3470:  {
   _SoundOff655(16,24,$val);
   return;
   break;
  }
  case 3472:  {
   _FModOn657(0,16,$val);
   return;
   break;
  }
  case 3474:  {
   _FModOn657(16,24,$val);
   return;
   break;
  }
  case 3520:  {
   $76 = $val&65535;
   HEAP32[((4781672 + 36|0))>>2] = $76;
   return;
   break;
  }
  case 3482:  {
   $71 = HEAP32[((4781672 + 8|0))>>2]|0;
   $72 = $71 & 65535;
   $73 = $val&65535;
   $74 = $73 << 16;
   $75 = $72 | $74;
   HEAP32[((4781672 + 8|0))>>2] = $75;
   return;
   break;
  }
  case 3522:  {
   $77 = $val << 16 >> 16;
   HEAP32[((4781672 + 40|0))>>2] = $77;
   return;
   break;
  }
  case 3524:  {
   $78 = $val << 16 >> 16;
   HEAP32[((4781672 + 44|0))>>2] = $78;
   return;
   break;
  }
  case 3526:  {
   $79 = $val << 16 >> 16;
   HEAP32[((4781672 + 48|0))>>2] = $79;
   return;
   break;
  }
  case 3528:  {
   $80 = $val << 16 >> 16;
   HEAP32[((4781672 + 52|0))>>2] = $80;
   return;
   break;
  }
  case 3530:  {
   $81 = $val << 16 >> 16;
   HEAP32[((4781672 + 56|0))>>2] = $81;
   return;
   break;
  }
  case 3532:  {
   $82 = $val << 16 >> 16;
   HEAP32[((4781672 + 60|0))>>2] = $82;
   return;
   break;
  }
  case 3534:  {
   $83 = $val << 16 >> 16;
   HEAP32[((4781672 + 64|0))>>2] = $83;
   return;
   break;
  }
  case 3536:  {
   $84 = $val << 16 >> 16;
   HEAP32[((4781672 + 68|0))>>2] = $84;
   return;
   break;
  }
  case 3538:  {
   $85 = $val << 16 >> 16;
   HEAP32[((4781672 + 72|0))>>2] = $85;
   return;
   break;
  }
  case 3540:  {
   $86 = $val << 16 >> 16;
   HEAP32[((4781672 + 76|0))>>2] = $86;
   return;
   break;
  }
  case 3542:  {
   $87 = $val << 16 >> 16;
   HEAP32[((4781672 + 80|0))>>2] = $87;
   return;
   break;
  }
  case 3544:  {
   $88 = $val << 16 >> 16;
   HEAP32[((4781672 + 84|0))>>2] = $88;
   return;
   break;
  }
  case 3546:  {
   $89 = $val << 16 >> 16;
   HEAP32[((4781672 + 88|0))>>2] = $89;
   return;
   break;
  }
  case 3548:  {
   $90 = $val << 16 >> 16;
   HEAP32[((4781672 + 92|0))>>2] = $90;
   return;
   break;
  }
  case 3550:  {
   $91 = $val << 16 >> 16;
   HEAP32[((4781672 + 96|0))>>2] = $91;
   return;
   break;
  }
  case 3552:  {
   $92 = $val << 16 >> 16;
   HEAP32[((4781672 + 100|0))>>2] = $92;
   return;
   break;
  }
  case 3554:  {
   $93 = $val << 16 >> 16;
   HEAP32[((4781672 + 104|0))>>2] = $93;
   return;
   break;
  }
  case 3556:  {
   $94 = $val << 16 >> 16;
   HEAP32[((4781672 + 108|0))>>2] = $94;
   return;
   break;
  }
  case 3558:  {
   $95 = $val << 16 >> 16;
   HEAP32[((4781672 + 112|0))>>2] = $95;
   return;
   break;
  }
  case 3560:  {
   $96 = $val << 16 >> 16;
   HEAP32[((4781672 + 116|0))>>2] = $96;
   return;
   break;
  }
  case 3562:  {
   $97 = $val << 16 >> 16;
   HEAP32[((4781672 + 120|0))>>2] = $97;
   return;
   break;
  }
  case 3564:  {
   $98 = $val << 16 >> 16;
   HEAP32[((4781672 + 124|0))>>2] = $98;
   return;
   break;
  }
  case 3566:  {
   $99 = $val << 16 >> 16;
   HEAP32[((4781672 + 128|0))>>2] = $99;
   return;
   break;
  }
  case 3568:  {
   $100 = $val << 16 >> 16;
   HEAP32[((4781672 + 132|0))>>2] = $100;
   return;
   break;
  }
  case 3570:  {
   $101 = $val << 16 >> 16;
   HEAP32[((4781672 + 136|0))>>2] = $101;
   return;
   break;
  }
  case 3572:  {
   $102 = $val << 16 >> 16;
   HEAP32[((4781672 + 140|0))>>2] = $102;
   return;
   break;
  }
  case 3574:  {
   $103 = $val << 16 >> 16;
   HEAP32[((4781672 + 144|0))>>2] = $103;
   return;
   break;
  }
  case 3576:  {
   $104 = $val << 16 >> 16;
   HEAP32[((4781672 + 148|0))>>2] = $104;
   return;
   break;
  }
  case 3578:  {
   $105 = $val << 16 >> 16;
   HEAP32[((4781672 + 152|0))>>2] = $105;
   return;
   break;
  }
  case 3580:  {
   $106 = $val << 16 >> 16;
   HEAP32[((4781672 + 156|0))>>2] = $106;
   return;
   break;
  }
  case 3582:  {
   $107 = $val << 16 >> 16;
   HEAP32[((4781672 + 160|0))>>2] = $107;
   return;
   break;
  }
  case 3498:  {
   HEAP16[4781656>>1] = $val;
   return;
   break;
  }
  case 3496:  {
   $45 = (_BFLIP16($val)|0);
   $46 = HEAP32[4257360>>2]|0;
   $47 = $46 >>> 1;
   $48 = (4257368 + ($47<<1)|0);
   HEAP16[$48>>1] = $45;
   $49 = HEAP32[4257360>>2]|0;
   $50 = (($49) + 2)|0;
   $51 = ($50>>>0)>(524287);
   $$ = $51 ? 0 : $50;
   HEAP32[4257360>>2] = $$;
   return;
   break;
  }
  case 3476:  {
   _NoiseOn659(0,16,$val);
   return;
   break;
  }
  case 3478:  {
   _NoiseOn659(16,24,$val);
   return;
   break;
  }
  case 3480:  {
   $67 = HEAP32[((4781672 + 8|0))>>2]|0;
   $68 = $67 & -65536;
   $69 = $val&65535;
   $70 = $68 | $69;
   HEAP32[((4781672 + 8|0))>>2] = $70;
   return;
   break;
  }
  default: {
   return;
  }
  }
 } while(0);
}
function _SPUreadRegister($reg) {
 $reg = $reg|0;
 var $$ = 0, $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $reg & 4095;
 $$off = (($0) + -3072)|0;
 $1 = ($$off>>>0)<(384);
 do {
  if ($1) {
   $2 = $reg & 15;
   if ((($2|0) == 14)) {
    $18 = $0 >>> 4;
    $19 = (($18) + -192)|0;
    $20 = ((4248560 + (($19*352)|0)|0) + 160|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0 = 0;
     return ($$0|0);
    }
    $23 = HEAP32[4248552>>2]|0;
    $24 = $21;
    $25 = $23;
    $26 = (($24) - ($25))|0;
    $27 = $26 >>> 3;
    $28 = $27&65535;
    $$0 = $28;
    return ($$0|0);
   } else if (!((($2|0) == 12))) {
    break;
   }
   $3 = $0 >>> 4;
   $4 = (($3) + -192)|0;
   $5 = (4248560 + (($4*352)|0)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $$0 = 1;
    return ($$0|0);
   }
   $8 = ((4248560 + (($4*352)|0)|0) + 340|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = ((4248560 + (($4*352)|0)|0) + 336|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 1;
     return ($$0|0);
    }
   }
   $14 = ((4248560 + (($4*352)|0)|0) + 336|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 >>> 16;
   $17 = $16&65535;
   $$0 = $17;
   return ($$0|0);
  }
 } while(0);
 switch ($0|0) {
 case 3494:  {
  $31 = HEAP32[4257360>>2]|0;
  $32 = $31 >>> 3;
  $33 = $32&65535;
  $$0 = $33;
  return ($$0|0);
  break;
 }
 case 3498:  {
  $29 = HEAP16[4781656>>1]|0;
  $$0 = $29;
  return ($$0|0);
  break;
 }
 case 3502:  {
  $30 = HEAP16[4781664>>1]|0;
  $$0 = $30;
  return ($$0|0);
  break;
 }
 case 3492:  {
  $41 = HEAP16[4781840>>1]|0;
  $$0 = $41;
  return ($$0|0);
  break;
 }
 case 3496:  {
  $34 = HEAP32[4257360>>2]|0;
  $35 = $34 >>> 1;
  $36 = (4257368 + ($35<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = (_BFLIP16($37)|0);
  $39 = (($34) + 2)|0;
  $40 = ($39>>>0)>(524287);
  $$ = $40 ? 0 : $39;
  HEAP32[4257360>>2] = $$;
  $$0 = $38;
  return ($$0|0);
  break;
 }
 default: {
  $42 = $$off >>> 1;
  $43 = (4247528 + ($42<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $$0 = $44;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _SPUreadDMAMem($usPSXMem,$iSize) {
 $usPSXMem = $usPSXMem|0;
 $iSize = $iSize|0;
 var $$ = 0, $$$lcssa = 0, $$02 = 0, $$3 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $spuAddr$promoted = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iSize|0)>(0);
 if (!($0)) {
  return;
 }
 $spuAddr$promoted = HEAP32[4257360>>2]|0;
 $$02 = $usPSXMem;$$3 = $spuAddr$promoted;$i$01 = 0;
 while(1) {
  $1 = $$3 >>> 1;
  $2 = (4257368 + ($1<<1)|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = $$02 >>> 1;
  $5 = (34768 + ($4<<1)|0);
  HEAP16[$5>>1] = $3;
  $6 = (($$02) + 2)|0;
  $7 = (($$3) + 2)|0;
  $8 = ($7>>>0)>(524287);
  $$ = $8 ? 0 : $7;
  $9 = (($i$01) + 1)|0;
  $exitcond = ($9|0)==($iSize|0);
  if ($exitcond) {
   $$$lcssa = $$;
   break;
  } else {
   $$02 = $6;$$3 = $$;$i$01 = $9;
  }
 }
 HEAP32[4257360>>2] = $$$lcssa;
 return;
}
function _SPUwriteDMAMem($usPSXMem,$iSize) {
 $usPSXMem = $usPSXMem|0;
 $iSize = $iSize|0;
 var $$ = 0, $$$lcssa = 0, $$02 = 0, $$3 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $spuAddr$promoted = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iSize|0)>(0);
 if (!($0)) {
  return;
 }
 $spuAddr$promoted = HEAP32[4257360>>2]|0;
 $$02 = $usPSXMem;$$3 = $spuAddr$promoted;$i$01 = 0;
 while(1) {
  $1 = $$02 >>> 1;
  $2 = (34768 + ($1<<1)|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = $$3 >>> 1;
  $5 = (4257368 + ($4<<1)|0);
  HEAP16[$5>>1] = $3;
  $6 = (($$02) + 2)|0;
  $7 = (($$3) + 2)|0;
  $8 = ($7>>>0)>(524287);
  $$ = $8 ? 0 : $7;
  $9 = (($i$01) + 1)|0;
  $exitcond = ($9|0)==($iSize|0);
  if ($exitcond) {
   $$$lcssa = $$;
   break;
  } else {
   $$02 = $6;$$3 = $$;$i$01 = $9;
  }
 }
 HEAP32[4257360>>2] = $$$lcssa;
 return;
}
function _setlength($stop,$fade) {
 $stop = $stop|0;
 $fade = $fade|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($stop|0)==(-1);
 if ($0) {
  HEAP32[4785952>>2] = -1;
  return;
 } else {
  $1 = ($stop*441)|0;
  $2 = (($1|0) / 10)&-1;
  $3 = ($fade*441)|0;
  $4 = (($3|0) / 10)&-1;
  HEAP32[4785952>>2] = $2;
  $5 = (($4) + ($2))|0;
  HEAP32[4785960>>2] = $5;
  return;
 }
}
function _SPUasync($cycles) {
 $cycles = $cycles|0;
 var $$ = 0, $$$ = 0, $$$13 = 0, $$0 = 0, $$1 = 0, $$1$op = 0, $$1$op$op = 0, $$10 = 0, $$13 = 0, $$14 = 0, $$9 = 0, $$lcssa = 0, $$lcssa17 = 0, $$lcssa40 = 0, $$off = 0, $$off67 = 0, $$pr = 0, $$sum = 0, $$sum3 = 0, $$sum4 = 0;
 var $$sum5 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ch$024 = 0, $exitcond = 0, $fa$1 = 0, $fa$2 = 0, $fa$3 = 0, $nSample$020 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond12 = 0, $revLeft$029 = 0, $revLeft$1 = 0, $revLeft$2 = 0, $revLeft$2$lcssa = 0, $revRight$028 = 0, $revRight$1 = 0, $revRight$2 = 0;
 var $revRight$2$lcssa = 0, $s$1 = 0, $s_1$021 = 0, $s_2$022 = 0, $scevgep = 0, $sl = 0, $sr = 0, $start$019 = 0, $start$1 = 0, $temp$030 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sl = sp + 4|0;
 $sr = sp;
 $0 = HEAP32[4785968>>2]|0;
 $1 = HEAP32[4785984>>2]|0;
 $2 = (($1) + ($cycles))|0;
 HEAP32[4785984>>2] = $2;
 $3 = (($2|0) / 384)&-1;
 HEAP32[4785976>>2] = $3;
 $$off = (($2) + 383)|0;
 $4 = ($$off>>>0)>(766);
 if (!($4)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[4785984>>2]|0;
 $6 = Math_imul($3, -384)|0;
 $7 = (($5) + ($6))|0;
 HEAP32[4785984>>2] = $7;
 $8 = HEAP32[4785976>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $temp$030 = $8;
 }
 while(1) {
  HEAP32[$sl>>2] = 0;
  HEAP32[$sr>>2] = 0;
  $ch$024 = 0;$revLeft$029 = 0;$revRight$028 = 0;
  while(1) {
   $10 = (4248560 + (($ch$024*352)|0)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if (!($12)) {
    _StartSound623($ch$024);
   }
   $13 = ((4248560 + (($ch$024*352)|0)|0) + 164|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   L13: do {
    if ($15) {
     $revLeft$2 = $revLeft$029;$revRight$2 = $revRight$028;
    } else {
     $16 = ((4248560 + (($ch$024*352)|0)|0) + 172|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((4248560 + (($ch$024*352)|0)|0) + 176|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17|0)==($19|0);
     if (!($20)) {
      HEAP32[$18>>2] = $17;
      $21 = ((4248560 + (($ch$024*352)|0)|0) + 200|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = $22 << 4;
      $24 = ((4248560 + (($ch$024*352)|0)|0) + 12|0);
      $25 = ($23|0)==(0);
      $$9 = $25 ? 1 : $23;
      HEAP32[$24>>2] = $$9;
     }
     $26 = ((4248560 + (($ch$024*352)|0)|0) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)>(65535);
     L18: do {
      if ($28) {
       $29 = ((4248560 + (($ch$024*352)|0)|0) + 4|0);
       $30 = ((4248560 + (($ch$024*352)|0)|0) + 156|0);
       $31 = ((4248560 + (($ch$024*352)|0)|0) + 208|0);
       $32 = ((4248560 + (($ch$024*352)|0)|0) + 212|0);
       $33 = ((4248560 + (($ch$024*352)|0)|0) + 160|0);
       $34 = ((4248560 + (($ch$024*352)|0)|0) + 188|0);
       $35 = ((4248560 + (($ch$024*352)|0)|0) + 160|0);
       $36 = ((4248560 + (($ch$024*352)|0)|0) + 160|0);
       $37 = ((4248560 + (($ch$024*352)|0)|0) + 204|0);
       $38 = ((4248560 + (($ch$024*352)|0)|0) + 128|0);
       while(1) {
        $39 = HEAP32[$29>>2]|0;
        $40 = ($39|0)==(28);
        if ($40) {
         $41 = HEAP32[$30>>2]|0;
         $42 = ($41|0)==((-1)|0);
         if ($42) {
          break;
         }
         HEAP32[$29>>2] = 0;
         $45 = HEAP32[$31>>2]|0;
         $46 = HEAP32[$32>>2]|0;
         $47 = HEAP8[$41>>0]|0;
         $48 = $47&255;
         $49 = (($41) + 1|0);
         $50 = $48 & 15;
         $51 = $48 >>> 4;
         $52 = HEAP8[$49>>0]|0;
         $53 = (($41) + 2|0);
         $54 = (4785992 + ($51<<3)|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = ((4785992 + ($51<<3)|0) + 4|0);
         $57 = HEAP32[$56>>2]|0;
         $scevgep = (($41) + 16|0);
         $nSample$020 = 0;$s_1$021 = $45;$s_2$022 = $46;$start$019 = $53;
         while(1) {
          $58 = HEAP8[$start$019>>0]|0;
          $59 = $58&255;
          $60 = $59 << 12;
          $61 = $60 & 61440;
          $62 = $60 & 32768;
          $63 = ($62|0)==(0);
          $64 = $60 | -65536;
          $$10 = $63 ? $61 : $64;
          $65 = $$10 >> $50;
          $66 = Math_imul($55, $s_1$021)|0;
          $67 = $66 >> 6;
          $68 = Math_imul($57, $s_2$022)|0;
          $69 = $68 >> 6;
          $70 = (($69) + ($67))|0;
          $71 = (($70) + ($65))|0;
          $72 = $59 << 8;
          $73 = $72 & 61440;
          $74 = $nSample$020 | 1;
          $75 = (((4248560 + (($ch$024*352)|0)|0) + ($nSample$020<<2)|0) + 16|0);
          HEAP32[$75>>2] = $71;
          $76 = $72 & 32768;
          $77 = ($76|0)==(0);
          $78 = $73 | -65536;
          $s$1 = $77 ? $73 : $78;
          $79 = $s$1 >> $50;
          $80 = Math_imul($71, $55)|0;
          $81 = $80 >> 6;
          $82 = Math_imul($57, $s_1$021)|0;
          $83 = $82 >> 6;
          $84 = (($83) + ($79))|0;
          $85 = (($84) + ($81))|0;
          $86 = (($nSample$020) + 2)|0;
          $87 = (((4248560 + (($ch$024*352)|0)|0) + ($74<<2)|0) + 16|0);
          HEAP32[$87>>2] = $85;
          $88 = (($start$019) + 1|0);
          $89 = ($86>>>0)<(28);
          if ($89) {
           $nSample$020 = $86;$s_1$021 = $85;$s_2$022 = $71;$start$019 = $88;
          } else {
           $$lcssa = $71;$$lcssa40 = $85;
           break;
          }
         }
         $90 = $52&255;
         $91 = HEAP16[4781656>>1]|0;
         $92 = $91 & 64;
         $93 = ($92<<16>>16)==(0);
         do {
          if (!($93)) {
           $94 = HEAP32[4781848>>2]|0;
           $95 = ($94>>>0)<=($41>>>0);
           $96 = ($94>>>0)>($scevgep>>>0);
           $or$cond11 = $95 | $96;
           if ($or$cond11) {
            $97 = $90 & 1;
            $98 = ($97|0)==(0);
            if ($98) {
             break;
            }
            $99 = HEAP32[$36>>2]|0;
            $100 = (($99) + -16|0);
            $101 = ($94>>>0)<=($100>>>0);
            $102 = ($94>>>0)>($99>>>0);
            $or$cond12 = $101 | $102;
            if ($or$cond12) {
             break;
            }
           }
           HEAP32[$37>>2] = 1;
          }
         } while(0);
         $103 = $90 & 4;
         $104 = ($103|0)==(0);
         if (!($104)) {
          $105 = HEAP32[$34>>2]|0;
          $106 = ($105|0)==(0);
          if ($106) {
           HEAP32[$35>>2] = $41;
          }
         }
         $107 = $90 & 1;
         $108 = ($107|0)==(0);
         if ($108) {
          $start$1 = $scevgep;
         } else {
          $109 = ($52<<24>>24)==(3);
          if ($109) {
           $110 = HEAP32[$33>>2]|0;
           $111 = ($110|0)==(0|0);
           if ($111) {
            $start$1 = (-1);
           } else {
            $start$1 = $110;
           }
          } else {
           $start$1 = (-1);
          }
         }
         HEAP32[$30>>2] = $start$1;
         HEAP32[$31>>2] = $$lcssa40;
         HEAP32[$32>>2] = $$lcssa;
        }
        $112 = HEAP32[$29>>2]|0;
        $113 = (($112) + 1)|0;
        HEAP32[$29>>2] = $113;
        $114 = (((4248560 + (($ch$024*352)|0)|0) + ($112<<2)|0) + 16|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = HEAP16[4781656>>1]|0;
        $117 = $116 & 16384;
        $118 = ($117<<16>>16)==(0);
        if ($118) {
         $fa$1 = 0;
        } else {
         $119 = ($115|0)>(32767);
         $$13 = $119 ? 32767 : $115;
         $120 = ($$13|0)<(-32767);
         $$$13 = $120 ? -32767 : $$13;
         $fa$1 = $$$13;
        }
        $121 = HEAP32[$38>>2]|0;
        $$sum8 = (($121) + 29)|0;
        $122 = (((4248560 + (($ch$024*352)|0)|0) + ($$sum8<<2)|0) + 16|0);
        HEAP32[$122>>2] = $fa$1;
        $123 = (($121) + 1)|0;
        $124 = $123 & 3;
        HEAP32[$38>>2] = $124;
        $125 = HEAP32[$26>>2]|0;
        $126 = (($125) + -65536)|0;
        HEAP32[$26>>2] = $126;
        $127 = ($126|0)>(65535);
        if (!($127)) {
         $$lcssa17 = $126;
         break L18;
        }
       }
       HEAP32[$13>>2] = 0;
       $43 = ((4248560 + (($ch$024*352)|0)|0) + 340|0);
       HEAP32[$43>>2] = 0;
       $44 = ((4248560 + (($ch$024*352)|0)|0) + 336|0);
       HEAP32[$44>>2] = 0;
       $revLeft$2 = $revLeft$029;$revRight$2 = $revRight$028;
       break L13;
      } else {
       $$lcssa17 = $27;
      }
     } while(0);
     $128 = ((4248560 + (($ch$024*352)|0)|0) + 228|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)==(0);
     if ($130) {
      $152 = $$lcssa17 >> 6;
      $153 = $152 & -4;
      $154 = ((4248560 + (($ch$024*352)|0)|0) + 128|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (4781856 + ($153<<2)|0);
      $157 = HEAP32[$156>>2]|0;
      $$sum = (($155) + 29)|0;
      $158 = (((4248560 + (($ch$024*352)|0)|0) + ($$sum<<2)|0) + 16|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = Math_imul($159, $157)|0;
      $161 = $160 >> 9;
      $162 = $153 | 1;
      $163 = (4781856 + ($162<<2)|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = (($155) + 1)|0;
      $166 = $165 & 3;
      $$sum3 = (($166) + 29)|0;
      $167 = (((4248560 + (($ch$024*352)|0)|0) + ($$sum3<<2)|0) + 16|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = Math_imul($168, $164)|0;
      $170 = $169 >> 9;
      $171 = (($170) + ($161))|0;
      $172 = $153 | 2;
      $173 = (4781856 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (($155) + 2)|0;
      $176 = $175 & 3;
      $$sum4 = (($176) + 29)|0;
      $177 = (((4248560 + (($ch$024*352)|0)|0) + ($$sum4<<2)|0) + 16|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = Math_imul($178, $174)|0;
      $180 = $179 >> 9;
      $181 = (($171) + ($180))|0;
      $182 = $152 | 3;
      $183 = (4781856 + ($182<<2)|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = (($155) + 3)|0;
      $186 = $185 & 3;
      $$sum5 = (($186) + 29)|0;
      $187 = (((4248560 + (($ch$024*352)|0)|0) + ($$sum5<<2)|0) + 16|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = Math_imul($188, $184)|0;
      $190 = $189 >> 9;
      $191 = (($181) + ($190))|0;
      $192 = $191 >> 2;
      $fa$3 = $192;
     } else {
      $131 = HEAP32[4786032>>2]|0;
      $132 = $131 << 1;
      HEAP32[4786032>>2] = $132;
      $133 = ($132|0)<(0);
      if ($133) {
       $134 = $132 ^ 262145;
       HEAP32[4786032>>2] = $134;
       $135 = $131 >>> 1;
       $136 = $135 & 32767;
       $137 = (0 - ($136))|0;
       $fa$2 = $137;
      } else {
       $138 = $131 >>> 1;
       $139 = $138 & 32767;
       $fa$2 = $139;
      }
      $140 = ((4248560 + (($ch$024*352)|0)|0) + 236|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = (($fa$2) - ($141))|0;
      $143 = HEAP16[4781656>>1]|0;
      $144 = $143&65535;
      $145 = $144 >>> 9;
      $146 = $145 & 31;
      $147 = (32 - ($146))|0;
      $148 = (($142|0) / ($147|0))&-1;
      $149 = (($148) + ($141))|0;
      $150 = ($149|0)>(32767);
      $$ = $150 ? 32767 : $149;
      $151 = ($$|0)<(-32767);
      $$$ = $151 ? -32767 : $$;
      HEAP32[$140>>2] = $$$;
      $fa$3 = $$$;
     }
     $193 = (_MixADSR625($ch$024)|0);
     $194 = Math_imul($193, $fa$3)|0;
     $195 = $194 >> 10;
     $196 = ((4248560 + (($ch$024*352)|0)|0) + 148|0);
     HEAP32[$196>>2] = $195;
     $197 = ((4248560 + (($ch$024*352)|0)|0) + 232|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ($198|0)==(2);
     if ($199) {
      $200 = (($ch$024) + 1)|0;
      $201 = ((4248560 + (($200*352)|0)|0) + 200|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = (($195) + 32768)|0;
      $204 = Math_imul($202, $203)|0;
      $205 = $204 >> 15;
      $206 = ($205|0)>(16383);
      $$1 = $206 ? 16383 : $205;
      $207 = ($$1|0)<(1);
      $$1$op = ($$1*44100)|0;
      $$1$op$op = (($$1$op|0) / 4096)&-1;
      $208 = $207 ? 10 : $$1$op$op;
      $209 = ((4248560 + (($200*352)|0)|0) + 172|0);
      HEAP32[$209>>2] = $208;
      $210 = ((4248560 + (($200*352)|0)|0) + 176|0);
      HEAP32[$210>>2] = $208;
      $211 = (($208|0) / 10)&-1;
      $212 = $211 << 16;
      $213 = (($212|0) / 4410)&-1;
      $214 = ((4248560 + (($200*352)|0)|0) + 12|0);
      $$off67 = $212 | 4409;
      $215 = ($$off67>>>0)>(8818);
      $$14 = $215 ? $213 : 1;
      HEAP32[$214>>2] = $$14;
      $revLeft$1 = $revLeft$029;$revRight$1 = $revRight$028;
     } else {
      $216 = ((4248560 + (($ch$024*352)|0)|0) + 180|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = Math_imul($217, $195)|0;
      $219 = $218 >> 14;
      $220 = ((4248560 + (($ch$024*352)|0)|0) + 192|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = Math_imul($221, $195)|0;
      $223 = $222 >> 14;
      $224 = HEAP32[$sl>>2]|0;
      $225 = (($224) + ($219))|0;
      HEAP32[$sl>>2] = $225;
      $226 = HEAP32[$sr>>2]|0;
      $227 = (($226) + ($223))|0;
      HEAP32[$sr>>2] = $227;
      $228 = HEAP32[((4781672 + 8|0))>>2]|0;
      $229 = 1 << $ch$024;
      $230 = $228 & $229;
      $231 = ($230|0)==(0);
      if ($231) {
       $revLeft$1 = $revLeft$029;$revRight$1 = $revRight$028;
      } else {
       $232 = HEAP16[4781656>>1]|0;
       $233 = $232 & 128;
       $234 = ($233<<16>>16)==(0);
       if ($234) {
        $revLeft$1 = $revLeft$029;$revRight$1 = $revRight$028;
       } else {
        $235 = (($219) + ($revLeft$029))|0;
        $236 = (($223) + ($revRight$028))|0;
        $revLeft$1 = $235;$revRight$1 = $236;
       }
      }
     }
     $237 = ((4248560 + (($ch$024*352)|0)|0) + 12|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = HEAP32[$26>>2]|0;
     $240 = (($239) + ($238))|0;
     HEAP32[$26>>2] = $240;
     $revLeft$2 = $revLeft$1;$revRight$2 = $revRight$1;
    }
   } while(0);
   $241 = (($ch$024) + 1)|0;
   $exitcond = ($241|0)==(24);
   if ($exitcond) {
    $revLeft$2$lcssa = $revLeft$2;$revRight$2$lcssa = $revRight$2;
    break;
   } else {
    $ch$024 = $241;$revLeft$029 = $revLeft$2;$revRight$028 = $revRight$2;
   }
  }
  $242 = (($temp$030) + -1)|0;
  _MixREVERBLeftRight($sl,$sr,$revLeft$2$lcssa,$revRight$2$lcssa);
  $243 = HEAP32[4786040>>2]|0;
  $244 = HEAP32[4785952>>2]|0;
  $245 = ($243>>>0)>=($244>>>0);
  $246 = ($244|0)!=(-1);
  $or$cond = $245 & $246;
  if ($or$cond) {
   $247 = HEAP32[4785960>>2]|0;
   $248 = ($243>>>0)<($247>>>0);
   if (!($248)) {
    $$0 = 0;
    label = 57;
    break;
   }
   $249 = (($243) - ($244))|0;
   $250 = $249 << 8;
   $251 = (($247) - ($244))|0;
   $252 = (($250>>>0) / ($251>>>0))&-1;
   $253 = (256 - ($252))|0;
   $254 = HEAP32[$sl>>2]|0;
   $255 = Math_imul($254, $253)|0;
   $256 = $255 >> 8;
   HEAP32[$sl>>2] = $256;
   $257 = HEAP32[$sr>>2]|0;
   $258 = Math_imul($257, $253)|0;
   $259 = $258 >> 8;
   HEAP32[$sr>>2] = $259;
  }
  $260 = HEAP32[4786040>>2]|0;
  $261 = (($260) + 1)|0;
  HEAP32[4786040>>2] = $261;
  $262 = HEAP32[$sl>>2]|0;
  $263 = Math_imul($262, $0)|0;
  $264 = $263 >> 8;
  HEAP32[$sl>>2] = $264;
  $265 = HEAP32[$sr>>2]|0;
  $266 = Math_imul($265, $0)|0;
  $267 = $266 >> 8;
  HEAP32[$sr>>2] = $267;
  $268 = ($264|0)>(32767);
  if ($268) {
   HEAP32[$sl>>2] = 32767;
  } else {
   $$pr = HEAP32[$sl>>2]|0;
   $269 = ($$pr|0)<(-32767);
   if ($269) {
    HEAP32[$sl>>2] = -32767;
   }
  }
  $270 = HEAP32[$sr>>2]|0;
  $271 = ($270|0)>(32767);
  if ($271) {
   HEAP32[$sr>>2] = 32767;
  } else {
   $272 = ($270|0)<(-32767);
   if ($272) {
    HEAP32[$sr>>2] = -32767;
   }
  }
  $273 = HEAP32[$sl>>2]|0;
  $274 = $273&65535;
  $275 = HEAP32[4786048>>2]|0;
  $276 = (($275) + 2|0);
  HEAP32[4786048>>2] = $276;
  HEAP16[$275>>1] = $274;
  $277 = HEAP32[$sr>>2]|0;
  $278 = $277&65535;
  $279 = HEAP32[4786048>>2]|0;
  $280 = (($279) + 2|0);
  HEAP32[4786048>>2] = $280;
  HEAP16[$279>>1] = $278;
  $281 = ($242|0)==(0);
  if ($281) {
   $$0 = 1;
   label = 57;
   break;
  } else {
   $temp$030 = $242;
  }
 }
 if ((label|0) == 57) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _SPU_flushboot() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4786048>>2]|0;
 $1 = HEAP32[4786056>>2]|0;
 $2 = (($1) + 1024|0);
 $3 = ($0>>>0)>($2>>>0);
 if (!($3)) {
  return;
 }
 $4 = $0;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 _spu_update($1,$6);
 $7 = HEAP32[4786056>>2]|0;
 HEAP32[4786048>>2] = $7;
 return;
}
function _SPUinit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[4248552>>2] = 4257368;
 _memset((4248560|0),0,8448)|0;
 _memset((4781672|0),0,164)|0;
 _memset((4247528|0),0,1024)|0;
 _memset((4257368|0),0,524288)|0;
 _InitADSR609();
 HEAP32[4785984>>2] = 0;
 HEAP32[4786040>>2] = 0;
 return 0;
}
function _SetupStreams() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(32768)|0);
 HEAP32[4786056>>2] = $0;
 HEAP32[4786048>>2] = $0;
 $1 = HEAP32[4248552>>2]|0;
 $i$01 = 0;
 while(1) {
  $2 = ((4248560 + (($i$01*352)|0)|0) + 312|0);
  HEAP32[$2>>2] = 1024;
  $3 = ((4248560 + (($i$01*352)|0)|0) + 204|0);
  HEAP32[$3>>2] = 0;
  $4 = ((4248560 + (($i$01*352)|0)|0) + 160|0);
  HEAP32[$4>>2] = $1;
  $5 = ((4248560 + (($i$01*352)|0)|0) + 152|0);
  HEAP32[$5>>2] = $1;
  $6 = ((4248560 + (($i$01*352)|0)|0) + 156|0);
  HEAP32[$6>>2] = $1;
  $7 = (($i$01) + 1)|0;
  $exitcond = ($7|0)==(24);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $7;
  }
 }
 return;
}
function _SPUopen() {
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4786064>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP16[4781840>>1] = 0;
 HEAP16[4781656>>1] = 0;
 HEAP16[4781664>>1] = 0;
 HEAP32[4257360>>2] = -1;
 HEAP32[4786032>>2] = 1;
 HEAP32[4248552>>2] = 4257368;
 _memset((4248560|0),0,8800)|0;
 HEAP32[4781848>>2] = 0;
 HEAP32[4785968>>2] = 255;
 _SetupStreams();
 HEAP32[4786064>>2] = 1;
 $$0 = 1;
 return ($$0|0);
}
function _SetVolumeLR($right,$ch,$vol) {
 $right = $right|0;
 $ch = $ch|0;
 $vol = $vol|0;
 var $$0 = 0, $$1$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($right|0)!=(0);
 $1 = $vol << 16 >> 16;
 $2 = $ch&255;
 if ($0) {
  $3 = ((4248560 + (($2*352)|0)|0) + 196|0);
  HEAP32[$3>>2] = $1;
 } else {
  $4 = ((4248560 + (($2*352)|0)|0) + 184|0);
  HEAP32[$4>>2] = $1;
 }
 $5 = $1 & 32768;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $26 = $1 & 16384;
   $27 = ($26|0)==(0);
   if ($27) {
    $29 = $1 & 16383;
    $$1$in = $29;
    break;
   } else {
    $28 = $1 | -16384;
    $$1$in = $28;
    break;
   }
  } else {
   $7 = $1 & 8192;
   $8 = $7&65535;
   $9 = ($8&65535) >>> 12;
   $10 = $9 ^ 2;
   $11 = (($10) + -1)<<16>>16;
   $12 = $1 & 4096;
   $13 = ($12|0)==(0);
   if ($13) {
    $$0 = $vol;
   } else {
    $14 = $1 ^ 65535;
    $15 = $14&65535;
    $$0 = $15;
   }
   $16 = $$0&65535;
   $17 = $16 & 127;
   $18 = (($17) + 1)|0;
   $19 = $18 >>> 1;
   $20 = $11 << 16 >> 16;
   $21 = $20 << 1;
   $22 = (($19|0) / ($21|0))&-1;
   $23 = (($19) + ($22))|0;
   $24 = $23 << 7;
   $25 = $24 & 16256;
   $$1$in = $25;
  }
 } while(0);
 if ($0) {
  $30 = ((4248560 + (($2*352)|0)|0) + 192|0);
  HEAP32[$30>>2] = $$1$in;
  return;
 } else {
  $31 = ((4248560 + (($2*352)|0)|0) + 180|0);
  HEAP32[$31>>2] = $$1$in;
  return;
 }
}
function _SetPitch651($ch,$val) {
 $ch = $ch|0;
 $val = $val|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $NP$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($val&65535)>(16383);
 $1 = $val&65535;
 $NP$0 = $0 ? 16383 : $1;
 $2 = ((4248560 + (($ch*352)|0)|0) + 200|0);
 HEAP32[$2>>2] = $NP$0;
 $3 = ($NP$0*44100)|0;
 $4 = $3 >>> 12;
 $5 = ($4|0)==(0);
 $$ = $5 ? 1 : $4;
 $6 = ((4248560 + (($ch*352)|0)|0) + 172|0);
 HEAP32[$6>>2] = $$;
 return;
}
function _BFLIP16($x) {
 $x = $x|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($x|0);
}
function _SoundOn653($start,$end,$val) {
 $start = $start|0;
 $end = $end|0;
 $val = $val|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$02 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)<($end|0);
 if ($0) {
  $$01 = $val;$ch$02 = $start;
 } else {
  return;
 }
 while(1) {
  $1 = $$01 & 1;
  $2 = ($1<<16>>16)==(0);
  if (!($2)) {
   $3 = ((4248560 + (($ch$02*352)|0)|0) + 152|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = ((4248560 + (($ch$02*352)|0)|0) + 188|0);
    HEAP32[$6>>2] = 0;
    $7 = (4248560 + (($ch$02*352)|0)|0);
    HEAP32[$7>>2] = 1;
   }
  }
  $8 = (($ch$02) + 1)|0;
  $9 = ($$01&65535) >>> 1;
  $exitcond = ($8|0)==($end|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $9;$ch$02 = $8;
  }
 }
 return;
}
function _SoundOff655($start,$end,$val) {
 $start = $start|0;
 $end = $end|0;
 $val = $val|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ch$02 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)<($end|0);
 if ($0) {
  $$01 = $val;$ch$02 = $start;
 } else {
  return;
 }
 while(1) {
  $1 = $$01 & 1;
  $2 = ($1<<16>>16)==(0);
  if (!($2)) {
   $3 = ((4248560 + (($ch$02*352)|0)|0) + 168|0);
   HEAP32[$3>>2] = 1;
  }
  $4 = (($ch$02) + 1)|0;
  $5 = ($$01&65535) >>> 1;
  $exitcond = ($4|0)==($end|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $5;$ch$02 = $4;
  }
 }
 return;
}
function _FModOn657($start,$end,$val) {
 $start = $start|0;
 $end = $end|0;
 $val = $val|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$02 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)<($end|0);
 if ($0) {
  $$01 = $val;$ch$02 = $start;
 } else {
  return;
 }
 while(1) {
  $1 = $$01 & 1;
  $2 = ($1<<16>>16)==(0);
  if ($2) {
   $7 = ((4248560 + (($ch$02*352)|0)|0) + 232|0);
   HEAP32[$7>>2] = 0;
  } else {
   $3 = ($ch$02|0)>(0);
   if ($3) {
    $4 = ((4248560 + (($ch$02*352)|0)|0) + 232|0);
    HEAP32[$4>>2] = 1;
    $5 = (($ch$02) + -1)|0;
    $6 = ((4248560 + (($5*352)|0)|0) + 232|0);
    HEAP32[$6>>2] = 2;
   }
  }
  $8 = (($ch$02) + 1)|0;
  $9 = ($$01&65535) >>> 1;
  $exitcond = ($8|0)==($end|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $9;$ch$02 = $8;
  }
 }
 return;
}
function _NoiseOn659($start,$end,$val) {
 $start = $start|0;
 $end = $end|0;
 $val = $val|0;
 var $$ = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ch$02 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)<($end|0);
 if ($0) {
  $$01 = $val;$ch$02 = $start;
 } else {
  return;
 }
 while(1) {
  $1 = $$01 & 1;
  $2 = ((4248560 + (($ch$02*352)|0)|0) + 228|0);
  $$ = $1&65535;
  HEAP32[$2>>2] = $$;
  $3 = (($ch$02) + 1)|0;
  $4 = ($$01&65535) >>> 1;
  $exitcond = ($3|0)==($end|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $4;$ch$02 = $3;
  }
 }
 return;
}
function _StartSound623($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _StartADSR627($ch);
 $0 = ((4248560 + (($ch*352)|0)|0) + 152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((4248560 + (($ch*352)|0)|0) + 156|0);
 HEAP32[$2>>2] = $1;
 $3 = ((4248560 + (($ch*352)|0)|0) + 208|0);
 HEAP32[$3>>2] = 0;
 $4 = ((4248560 + (($ch*352)|0)|0) + 212|0);
 HEAP32[$4>>2] = 0;
 $5 = ((4248560 + (($ch*352)|0)|0) + 4|0);
 HEAP32[$5>>2] = 28;
 $6 = (4248560 + (($ch*352)|0)|0);
 HEAP32[$6>>2] = 0;
 $7 = ((4248560 + (($ch*352)|0)|0) + 168|0);
 HEAP32[$7>>2] = 0;
 $8 = ((4248560 + (($ch*352)|0)|0) + 164|0);
 HEAP32[$8>>2] = 1;
 $9 = ((4248560 + (($ch*352)|0)|0) + 132|0);
 HEAP32[$9>>2] = 0;
 $10 = ((4248560 + (($ch*352)|0)|0) + 136|0);
 HEAP32[$10>>2] = 0;
 $11 = ((4248560 + (($ch*352)|0)|0) + 8|0);
 HEAP32[$11>>2] = 262144;
 $12 = ((4248560 + (($ch*352)|0)|0) + 128|0);
 HEAP32[$12>>2] = 0;
 return;
}
function _MixADSR625($ch) {
 $ch = $ch|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((4248560 + (($ch*352)|0)|0) + 168|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((4248560 + (($ch*352)|0)|0) + 328|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  $6 = ((4248560 + (($ch*352)|0)|0) + 332|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 << 2;
  $9 = $8 ^ 124;
  if ($5) {
   $21 = (($9) + 20)|0;
   $22 = (4786072 + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((4248560 + (($ch*352)|0)|0) + 336|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) - ($23))|0;
   HEAP32[$24>>2] = $26;
  } else {
   $10 = (($9) + 8)|0;
   $11 = ((4248560 + (($ch*352)|0)|0) + 336|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 >>> 28;
   $14 = $13 & 7;
   $15 = (4786856 + ($14<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($10) + ($16))|0;
   $18 = (4786072 + ($17<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($12) - ($19))|0;
   HEAP32[$11>>2] = $20;
  }
  $27 = ((4248560 + (($ch*352)|0)|0) + 336|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)<(0);
  if ($29) {
   HEAP32[$27>>2] = 0;
   $30 = ((4248560 + (($ch*352)|0)|0) + 164|0);
   HEAP32[$30>>2] = 0;
   $31 = ((4248560 + (($ch*352)|0)|0) + 228|0);
   HEAP32[$31>>2] = 0;
  }
  $32 = HEAP32[$27>>2]|0;
  $33 = $32 >> 21;
  $34 = ((4248560 + (($ch*352)|0)|0) + 340|0);
  HEAP32[$34>>2] = $33;
  $$0 = $33;
  return ($$0|0);
 }
 $35 = ((4248560 + (($ch*352)|0)|0) + 296|0);
 $36 = HEAP32[$35>>2]|0;
 if ((($36|0) == 0)) {
  $37 = ((4248560 + (($ch*352)|0)|0) + 300|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  do {
   if ($39) {
    $54 = ((4248560 + (($ch*352)|0)|0) + 304|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 ^ 127;
    $57 = (($56) + 16)|0;
    $58 = (4786072 + ($57<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((4248560 + (($ch*352)|0)|0) + 336|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + ($59))|0;
    HEAP32[$60>>2] = $62;
   } else {
    $40 = ((4248560 + (($ch*352)|0)|0) + 336|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)<(1610612736);
    $43 = ((4248560 + (($ch*352)|0)|0) + 304|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44 ^ 127;
    if ($42) {
     $46 = (($45) + 16)|0;
     $47 = (4786072 + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($48) + ($41))|0;
     HEAP32[$40>>2] = $49;
     break;
    } else {
     $50 = (($45) + 8)|0;
     $51 = (4786072 + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($52) + ($41))|0;
     HEAP32[$40>>2] = $53;
     break;
    }
   }
  } while(0);
  $63 = ((4248560 + (($ch*352)|0)|0) + 336|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)<(0);
  if ($65) {
   HEAP32[$63>>2] = 2147483647;
   HEAP32[$35>>2] = 1;
  }
  $66 = HEAP32[$63>>2]|0;
  $67 = $66 >> 21;
  $68 = ((4248560 + (($ch*352)|0)|0) + 340|0);
  HEAP32[$68>>2] = $67;
  $$0 = $67;
  return ($$0|0);
 } else if ((($36|0) == 1)) {
  $69 = ((4248560 + (($ch*352)|0)|0) + 308|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $70 << 2;
  $72 = $71 ^ 124;
  $73 = (($72) + 8)|0;
  $74 = ((4248560 + (($ch*352)|0)|0) + 336|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 >>> 28;
  $77 = $76 & 7;
  $78 = (4786856 + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($73) + ($79))|0;
  $81 = (4786072 + ($80<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($75) - ($82))|0;
  $84 = ($83|0)<(0);
  $$ = $84 ? 0 : $83;
  HEAP32[$74>>2] = $$;
  $85 = $$ >>> 27;
  $86 = $85 & 15;
  $87 = ((4248560 + (($ch*352)|0)|0) + 312|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86|0)>($88|0);
  if (!($89)) {
   HEAP32[$35>>2] = 2;
  }
  $90 = HEAP32[$74>>2]|0;
  $91 = $90 >> 21;
  $92 = ((4248560 + (($ch*352)|0)|0) + 340|0);
  HEAP32[$92>>2] = $91;
  $$0 = $91;
  return ($$0|0);
 } else if ((($36|0) == 2)) {
  $93 = ((4248560 + (($ch*352)|0)|0) + 320|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94|0)==(0);
  $96 = ((4248560 + (($ch*352)|0)|0) + 316|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(0);
  if ($95) {
   $125 = ((4248560 + (($ch*352)|0)|0) + 324|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $126 ^ 127;
   if ($98) {
    $128 = (($127) + 5)|0;
    $129 = ((4248560 + (($ch*352)|0)|0) + 336|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $130 >>> 28;
    $132 = $131 & 7;
    $133 = (4786856 + ($132<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($128) + ($134))|0;
    $136 = (4786072 + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($130) - ($137))|0;
    HEAP32[$129>>2] = $138;
   } else {
    $139 = (($127) + 17)|0;
    $140 = (4786072 + ($139<<2)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ((4248560 + (($ch*352)|0)|0) + 336|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (($143) - ($141))|0;
    HEAP32[$142>>2] = $144;
   }
   $145 = ((4248560 + (($ch*352)|0)|0) + 336|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = ($146|0)<(0);
   if ($147) {
    HEAP32[$145>>2] = 0;
   }
  } else {
   do {
    if ($98) {
     $99 = ((4248560 + (($ch*352)|0)|0) + 336|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)<(1610612736);
     $102 = ((4248560 + (($ch*352)|0)|0) + 324|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $103 ^ 127;
     if ($101) {
      $105 = (($104) + 16)|0;
      $106 = (4786072 + ($105<<2)|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (($107) + ($100))|0;
      HEAP32[$99>>2] = $108;
      break;
     } else {
      $109 = (($104) + 8)|0;
      $110 = (4786072 + ($109<<2)|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (($111) + ($100))|0;
      HEAP32[$99>>2] = $112;
      break;
     }
    } else {
     $113 = ((4248560 + (($ch*352)|0)|0) + 324|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $114 ^ 127;
     $116 = (($115) + 16)|0;
     $117 = (4786072 + ($116<<2)|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ((4248560 + (($ch*352)|0)|0) + 336|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + ($118))|0;
     HEAP32[$119>>2] = $121;
    }
   } while(0);
   $122 = ((4248560 + (($ch*352)|0)|0) + 336|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ($123|0)<(0);
   if ($124) {
    HEAP32[$122>>2] = 2147483647;
   }
  }
  $148 = ((4248560 + (($ch*352)|0)|0) + 336|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $149 >> 21;
  $151 = ((4248560 + (($ch*352)|0)|0) + 340|0);
  HEAP32[$151>>2] = $150;
  $$0 = $150;
  return ($$0|0);
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _MixREVERBLeftRight($oleft,$oright,$inleft,$inright) {
 $oleft = $oleft|0;
 $oright = $oright|0;
 $inleft = $inleft|0;
 $inright = $inright|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4781672>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[((4781672 + 32|0))>>2] = 0;
  HEAP32[((4781672 + 28|0))>>2] = 0;
  return;
 }
 $2 = HEAP32[4786840>>2]|0;
 $3 = (4786712 + ($2<<2)|0);
 HEAP32[$3>>2] = $inleft;
 $4 = HEAP32[4786840>>2]|0;
 $5 = (4786744 + ($4<<2)|0);
 HEAP32[$5>>2] = $inright;
 $6 = HEAP32[4786840>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = $7 & 7;
 HEAP32[4786840>>2] = $8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   $404 = HEAP32[4786848>>2]|0;
   $405 = (4786776 + ($404<<2)|0);
   HEAP32[$405>>2] = 0;
   $406 = HEAP32[4786848>>2]|0;
   $407 = (4786808 + ($406<<2)|0);
   HEAP32[$407>>2] = 0;
   $408 = HEAP32[4786848>>2]|0;
   $409 = (($408) + 1)|0;
   $410 = $409 & 7;
   HEAP32[4786848>>2] = $410;
  } else {
   $11 = HEAP16[4781656>>1]|0;
   $12 = $11 & 128;
   $13 = ($12<<16>>16)==(0);
   if ($13) {
    HEAP32[((4781672 + 32|0))>>2] = 0;
    HEAP32[((4781672 + 28|0))>>2] = 0;
    return;
   } else {
    $14 = HEAP32[4786840>>2]|0;
    $15 = $14 & 7;
    $16 = (4786712 + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17*1283)|0;
    $19 = $18 >> 8;
    $20 = (4786744 + ($15<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21*1283)|0;
    $23 = $22 >> 8;
    $24 = (($14) + 1)|0;
    $25 = $24 & 7;
    $26 = (4786712 + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27*5344)|0;
    $29 = $28 >> 8;
    $30 = (($29) + ($19))|0;
    $31 = (4786744 + ($25<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32*5344)|0;
    $34 = $33 >> 8;
    $35 = (($34) + ($23))|0;
    $36 = (($14) + 2)|0;
    $37 = $36 & 7;
    $38 = (4786712 + ($37<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39*10895)|0;
    $41 = $40 >> 8;
    $42 = (($41) + ($30))|0;
    $43 = (4786744 + ($37<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44*10895)|0;
    $46 = $45 >> 8;
    $47 = (($46) + ($35))|0;
    $48 = (($14) + 3)|0;
    $49 = $48 & 7;
    $50 = (4786712 + ($49<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51*15243)|0;
    $53 = $52 >> 8;
    $54 = (($53) + ($42))|0;
    $55 = (4786744 + ($49<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56*15243)|0;
    $58 = $57 >> 8;
    $59 = (($58) + ($47))|0;
    $60 = (($14) + 4)|0;
    $61 = $60 & 7;
    $62 = (4786712 + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63*15243)|0;
    $65 = $64 >> 8;
    $66 = (($65) + ($54))|0;
    $67 = (4786744 + ($61<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($68*15243)|0;
    $70 = $69 >> 8;
    $71 = (($70) + ($59))|0;
    $72 = (($14) + 5)|0;
    $73 = $72 & 7;
    $74 = (4786712 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75*10895)|0;
    $77 = $76 >> 8;
    $78 = (($77) + ($66))|0;
    $79 = (4786744 + ($73<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80*10895)|0;
    $82 = $81 >> 8;
    $83 = (($82) + ($71))|0;
    $84 = (($14) + 6)|0;
    $85 = $84 & 7;
    $86 = (4786712 + ($85<<2)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87*5344)|0;
    $89 = $88 >> 8;
    $90 = (($89) + ($78))|0;
    $91 = (4786744 + ($85<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92*5344)|0;
    $94 = $93 >> 8;
    $95 = (($94) + ($83))|0;
    $96 = (($14) + 7)|0;
    $97 = $96 & 7;
    $98 = (4786712 + ($97<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99*1283)|0;
    $101 = $100 >> 8;
    $102 = (($101) + ($90))|0;
    $103 = (4786744 + ($97<<2)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104*1283)|0;
    $106 = $105 >> 8;
    $107 = (($106) + ($95))|0;
    $108 = $102 >> 8;
    $109 = $107 >> 8;
    $110 = HEAP32[((4781672 + 100|0))>>2]|0;
    $111 = (_g_buffer629($110)|0);
    $112 = tempRet0;
    $113 = HEAP32[((4781672 + 64|0))>>2]|0;
    $114 = ($113|0)<(0);
    $115 = $114 << 31 >> 31;
    $116 = (___muldi3(($113|0),($115|0),($111|0),($112|0))|0);
    $117 = tempRet0;
    $118 = (_bitshift64Ashr(($116|0),($117|0),15)|0);
    $119 = tempRet0;
    $120 = HEAP32[((4781672 + 156|0))>>2]|0;
    $121 = Math_imul($120, $108)|0;
    $122 = $121 >> 15;
    $123 = ($122|0)<(0);
    $124 = $123 << 31 >> 31;
    $125 = (_i64Add(($122|0),($124|0),($118|0),($119|0))|0);
    $126 = tempRet0;
    $127 = HEAP32[((4781672 + 104|0))>>2]|0;
    $128 = (_g_buffer629($127)|0);
    $129 = tempRet0;
    $130 = (___muldi3(($128|0),($129|0),($113|0),($115|0))|0);
    $131 = tempRet0;
    $132 = (_bitshift64Ashr(($130|0),($131|0),15)|0);
    $133 = tempRet0;
    $134 = HEAP32[((4781672 + 160|0))>>2]|0;
    $135 = Math_imul($134, $109)|0;
    $136 = $135 >> 15;
    $137 = ($136|0)<(0);
    $138 = $137 << 31 >> 31;
    $139 = (_i64Add(($136|0),($138|0),($132|0),($133|0))|0);
    $140 = tempRet0;
    $141 = HEAP32[((4781672 + 136|0))>>2]|0;
    $142 = (_g_buffer629($141)|0);
    $143 = tempRet0;
    $144 = (___muldi3(($142|0),($143|0),($113|0),($115|0))|0);
    $145 = tempRet0;
    $146 = (_bitshift64Ashr(($144|0),($145|0),15)|0);
    $147 = tempRet0;
    $148 = (_i64Add(($146|0),($147|0),($122|0),($124|0))|0);
    $149 = tempRet0;
    $150 = HEAP32[((4781672 + 132|0))>>2]|0;
    $151 = (_g_buffer629($150)|0);
    $152 = tempRet0;
    $153 = (___muldi3(($151|0),($152|0),($113|0),($115|0))|0);
    $154 = tempRet0;
    $155 = (_bitshift64Ashr(($153|0),($154|0),15)|0);
    $156 = tempRet0;
    $157 = (_i64Add(($155|0),($156|0),($136|0),($138|0))|0);
    $158 = tempRet0;
    $159 = HEAP32[((4781672 + 44|0))>>2]|0;
    $160 = ($159|0)<(0);
    $161 = $160 << 31 >> 31;
    $162 = (___muldi3(($159|0),($161|0),($125|0),($126|0))|0);
    $163 = tempRet0;
    $164 = (_bitshift64Lshr(($162|0),($163|0),15)|0);
    $165 = tempRet0;
    $166 = HEAP32[((4781672 + 76|0))>>2]|0;
    $167 = (_g_buffer629($166)|0);
    $168 = tempRet0;
    $169 = (32768 - ($159))|0;
    $170 = ($169|0)<(0);
    $171 = $170 << 31 >> 31;
    $172 = (___muldi3(($167|0),($168|0),($169|0),($171|0))|0);
    $173 = tempRet0;
    $174 = (_bitshift64Lshr(($172|0),($173|0),15)|0);
    $175 = tempRet0;
    $176 = (_i64Add(($174|0),($175|0),($164|0),($165|0))|0);
    $177 = tempRet0;
    $178 = (___muldi3(($159|0),($161|0),($139|0),($140|0))|0);
    $179 = tempRet0;
    $180 = (_bitshift64Lshr(($178|0),($179|0),15)|0);
    $181 = tempRet0;
    $182 = HEAP32[((4781672 + 80|0))>>2]|0;
    $183 = (_g_buffer629($182)|0);
    $184 = tempRet0;
    $185 = (___muldi3(($183|0),($184|0),($169|0),($171|0))|0);
    $186 = tempRet0;
    $187 = (_bitshift64Lshr(($185|0),($186|0),15)|0);
    $188 = tempRet0;
    $189 = (_i64Add(($187|0),($188|0),($180|0),($181|0))|0);
    $190 = tempRet0;
    $191 = (___muldi3(($159|0),($161|0),($148|0),($149|0))|0);
    $192 = tempRet0;
    $193 = (_bitshift64Lshr(($191|0),($192|0),15)|0);
    $194 = tempRet0;
    $195 = HEAP32[((4781672 + 108|0))>>2]|0;
    $196 = (_g_buffer629($195)|0);
    $197 = tempRet0;
    $198 = (___muldi3(($196|0),($197|0),($169|0),($171|0))|0);
    $199 = tempRet0;
    $200 = (_bitshift64Lshr(($198|0),($199|0),15)|0);
    $201 = tempRet0;
    $202 = (_i64Add(($200|0),($201|0),($193|0),($194|0))|0);
    $203 = tempRet0;
    $204 = (___muldi3(($157|0),($158|0),($159|0),($161|0))|0);
    $205 = tempRet0;
    $206 = (_bitshift64Lshr(($204|0),($205|0),15)|0);
    $207 = tempRet0;
    $208 = HEAP32[((4781672 + 112|0))>>2]|0;
    $209 = (_g_buffer629($208)|0);
    $210 = tempRet0;
    $211 = (___muldi3(($209|0),($210|0),($169|0),($171|0))|0);
    $212 = tempRet0;
    $213 = (_bitshift64Lshr(($211|0),($212|0),15)|0);
    $214 = tempRet0;
    $215 = (_i64Add(($213|0),($214|0),($206|0),($207|0))|0);
    $216 = tempRet0;
    _s_buffer1631($166,$176);
    $217 = HEAP32[((4781672 + 80|0))>>2]|0;
    _s_buffer1631($217,$189);
    $218 = HEAP32[((4781672 + 108|0))>>2]|0;
    _s_buffer1631($218,$202);
    $219 = HEAP32[((4781672 + 112|0))>>2]|0;
    _s_buffer1631($219,$215);
    $220 = HEAP32[((4781672 + 84|0))>>2]|0;
    $221 = (_g_buffer629($220)|0);
    $222 = tempRet0;
    $223 = HEAP32[((4781672 + 48|0))>>2]|0;
    $224 = ($223|0)<(0);
    $225 = $224 << 31 >> 31;
    $226 = (___muldi3(($223|0),($225|0),($221|0),($222|0))|0);
    $227 = tempRet0;
    $228 = (_bitshift64Lshr(($226|0),($227|0),15)|0);
    $229 = tempRet0;
    $230 = HEAP32[((4781672 + 92|0))>>2]|0;
    $231 = (_g_buffer629($230)|0);
    $232 = tempRet0;
    $233 = HEAP32[((4781672 + 52|0))>>2]|0;
    $234 = ($233|0)<(0);
    $235 = $234 << 31 >> 31;
    $236 = (___muldi3(($233|0),($235|0),($231|0),($232|0))|0);
    $237 = tempRet0;
    $238 = (_bitshift64Lshr(($236|0),($237|0),15)|0);
    $239 = tempRet0;
    $240 = (_i64Add(($238|0),($239|0),($228|0),($229|0))|0);
    $241 = tempRet0;
    $242 = HEAP32[((4781672 + 116|0))>>2]|0;
    $243 = (_g_buffer629($242)|0);
    $244 = tempRet0;
    $245 = HEAP32[((4781672 + 56|0))>>2]|0;
    $246 = ($245|0)<(0);
    $247 = $246 << 31 >> 31;
    $248 = (___muldi3(($245|0),($247|0),($243|0),($244|0))|0);
    $249 = tempRet0;
    $250 = (_bitshift64Lshr(($248|0),($249|0),15)|0);
    $251 = tempRet0;
    $252 = (_i64Add(($240|0),($241|0),($250|0),($251|0))|0);
    $253 = tempRet0;
    $254 = HEAP32[((4781672 + 124|0))>>2]|0;
    $255 = (_g_buffer629($254)|0);
    $256 = tempRet0;
    $257 = HEAP32[((4781672 + 60|0))>>2]|0;
    $258 = ($257|0)<(0);
    $259 = $258 << 31 >> 31;
    $260 = (___muldi3(($257|0),($259|0),($255|0),($256|0))|0);
    $261 = tempRet0;
    $262 = (_bitshift64Lshr(($260|0),($261|0),15)|0);
    $263 = tempRet0;
    $264 = (_i64Add(($252|0),($253|0),($262|0),($263|0))|0);
    $265 = tempRet0;
    $266 = HEAP32[((4781672 + 88|0))>>2]|0;
    $267 = (_g_buffer629($266)|0);
    $268 = tempRet0;
    $269 = (___muldi3(($267|0),($268|0),($223|0),($225|0))|0);
    $270 = tempRet0;
    $271 = (_bitshift64Lshr(($269|0),($270|0),15)|0);
    $272 = tempRet0;
    $273 = HEAP32[((4781672 + 96|0))>>2]|0;
    $274 = (_g_buffer629($273)|0);
    $275 = tempRet0;
    $276 = (___muldi3(($274|0),($275|0),($233|0),($235|0))|0);
    $277 = tempRet0;
    $278 = (_bitshift64Lshr(($276|0),($277|0),15)|0);
    $279 = tempRet0;
    $280 = (_i64Add(($278|0),($279|0),($271|0),($272|0))|0);
    $281 = tempRet0;
    $282 = HEAP32[((4781672 + 120|0))>>2]|0;
    $283 = (_g_buffer629($282)|0);
    $284 = tempRet0;
    $285 = (___muldi3(($283|0),($284|0),($245|0),($247|0))|0);
    $286 = tempRet0;
    $287 = (_bitshift64Lshr(($285|0),($286|0),15)|0);
    $288 = tempRet0;
    $289 = (_i64Add(($280|0),($281|0),($287|0),($288|0))|0);
    $290 = tempRet0;
    $291 = HEAP32[((4781672 + 128|0))>>2]|0;
    $292 = (_g_buffer629($291)|0);
    $293 = tempRet0;
    $294 = (___muldi3(($292|0),($293|0),($257|0),($259|0))|0);
    $295 = tempRet0;
    $296 = (_bitshift64Lshr(($294|0),($295|0),15)|0);
    $297 = tempRet0;
    $298 = (_i64Add(($289|0),($290|0),($296|0),($297|0))|0);
    $299 = tempRet0;
    $300 = HEAP32[((4781672 + 140|0))>>2]|0;
    $301 = HEAP32[((4781672 + 36|0))>>2]|0;
    $302 = (($300) - ($301))|0;
    $303 = (_g_buffer629($302)|0);
    $304 = tempRet0;
    $305 = HEAP32[((4781672 + 144|0))>>2]|0;
    $306 = (($305) - ($301))|0;
    $307 = (_g_buffer629($306)|0);
    $308 = tempRet0;
    $309 = HEAP32[((4781672 + 148|0))>>2]|0;
    $310 = HEAP32[((4781672 + 40|0))>>2]|0;
    $311 = (($309) - ($310))|0;
    $312 = (_g_buffer629($311)|0);
    $313 = tempRet0;
    $314 = HEAP32[((4781672 + 152|0))>>2]|0;
    $315 = (($314) - ($310))|0;
    $316 = (_g_buffer629($315)|0);
    $317 = tempRet0;
    $318 = HEAP32[((4781672 + 68|0))>>2]|0;
    $319 = Math_imul($318, $303)|0;
    $320 = $319 >> 15;
    $321 = (($264) - ($320))|0;
    _s_buffer633($300,$321);
    $322 = HEAP32[((4781672 + 144|0))>>2]|0;
    $323 = HEAP32[((4781672 + 68|0))>>2]|0;
    $324 = Math_imul($323, $307)|0;
    $325 = $324 >> 15;
    $326 = (($298) - ($325))|0;
    _s_buffer633($322,$326);
    $327 = HEAP32[((4781672 + 148|0))>>2]|0;
    $328 = HEAP32[((4781672 + 68|0))>>2]|0;
    $329 = Math_imul($328, $264)|0;
    $330 = $329 >> 15;
    $331 = $328 ^ -32768;
    $332 = Math_imul($331, $303)|0;
    $333 = $332 >> 15;
    $334 = (($330) - ($333))|0;
    $335 = HEAP32[((4781672 + 72|0))>>2]|0;
    $336 = Math_imul($335, $312)|0;
    $337 = $336 >> 15;
    $338 = (($334) - ($337))|0;
    _s_buffer633($327,$338);
    $339 = HEAP32[((4781672 + 152|0))>>2]|0;
    $340 = HEAP32[((4781672 + 68|0))>>2]|0;
    $341 = Math_imul($340, $298)|0;
    $342 = $341 >> 15;
    $343 = $340 ^ -32768;
    $344 = Math_imul($343, $307)|0;
    $345 = $344 >> 15;
    $346 = (($342) - ($345))|0;
    $347 = HEAP32[((4781672 + 72|0))>>2]|0;
    $348 = Math_imul($347, $316)|0;
    $349 = $348 >> 15;
    $350 = (($346) - ($349))|0;
    _s_buffer633($339,$350);
    $351 = HEAP32[((4781672 + 140|0))>>2]|0;
    $352 = (_g_buffer629($351)|0);
    $353 = tempRet0;
    $354 = HEAP32[((4781672 + 148|0))>>2]|0;
    $355 = (_g_buffer629($354)|0);
    $356 = tempRet0;
    $357 = (_i64Add(($355|0),($356|0),($352|0),($353|0))|0);
    $358 = tempRet0;
    $359 = (___divdi3(($357|0),($358|0),3,0)|0);
    $360 = tempRet0;
    HEAP32[((4781672 + 28|0))>>2] = $359;
    $361 = HEAP32[((4781672 + 144|0))>>2]|0;
    $362 = (_g_buffer629($361)|0);
    $363 = tempRet0;
    $364 = HEAP32[((4781672 + 152|0))>>2]|0;
    $365 = (_g_buffer629($364)|0);
    $366 = tempRet0;
    $367 = (_i64Add(($365|0),($366|0),($362|0),($363|0))|0);
    $368 = tempRet0;
    $369 = (___divdi3(($367|0),($368|0),3,0)|0);
    $370 = tempRet0;
    HEAP32[((4781672 + 32|0))>>2] = $369;
    $371 = HEAP32[((4781672 + 28|0))>>2]|0;
    $372 = ($371|0)<(0);
    $373 = $372 << 31 >> 31;
    $374 = HEAP32[((4781672 + 12|0))>>2]|0;
    $375 = ($374|0)<(0);
    $376 = $375 << 31 >> 31;
    $377 = (___muldi3(($374|0),($376|0),($371|0),($373|0))|0);
    $378 = tempRet0;
    $379 = (_bitshift64Lshr(($377|0),($378|0),14)|0);
    $380 = tempRet0;
    HEAP32[((4781672 + 28|0))>>2] = $379;
    $381 = HEAP32[((4781672 + 32|0))>>2]|0;
    $382 = ($381|0)<(0);
    $383 = $382 << 31 >> 31;
    $384 = HEAP32[((4781672 + 16|0))>>2]|0;
    $385 = ($384|0)<(0);
    $386 = $385 << 31 >> 31;
    $387 = (___muldi3(($384|0),($386|0),($381|0),($383|0))|0);
    $388 = tempRet0;
    $389 = (_bitshift64Lshr(($387|0),($388|0),14)|0);
    $390 = tempRet0;
    HEAP32[((4781672 + 32|0))>>2] = $389;
    $391 = HEAP32[((4781672 + 28|0))>>2]|0;
    $392 = HEAP32[4786848>>2]|0;
    $393 = (4786776 + ($392<<2)|0);
    HEAP32[$393>>2] = $391;
    $394 = HEAP32[((4781672 + 32|0))>>2]|0;
    $395 = HEAP32[4786848>>2]|0;
    $396 = (4786808 + ($395<<2)|0);
    HEAP32[$396>>2] = $394;
    $397 = HEAP32[4786848>>2]|0;
    $398 = (($397) + 1)|0;
    $399 = $398 & 7;
    HEAP32[4786848>>2] = $399;
    $400 = HEAP32[((4781672 + 4|0))>>2]|0;
    $401 = (($400) + 1)|0;
    HEAP32[((4781672 + 4|0))>>2] = $401;
    $402 = ($400|0)>(262142);
    if (!($402)) {
     break;
    }
    $403 = HEAP32[4781672>>2]|0;
    HEAP32[((4781672 + 4|0))>>2] = $403;
    break;
   }
  }
 } while(0);
 $411 = HEAP32[4786848>>2]|0;
 $412 = $411 & 7;
 $413 = (4786776 + ($412<<2)|0);
 $414 = HEAP32[$413>>2]|0;
 $415 = ($414*1283)|0;
 $416 = $415 >> 8;
 $417 = (4786808 + ($412<<2)|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = ($418*1283)|0;
 $420 = $419 >> 8;
 $421 = (($411) + 1)|0;
 $422 = $421 & 7;
 $423 = (4786776 + ($422<<2)|0);
 $424 = HEAP32[$423>>2]|0;
 $425 = ($424*5344)|0;
 $426 = $425 >> 8;
 $427 = (($426) + ($416))|0;
 $428 = (4786808 + ($422<<2)|0);
 $429 = HEAP32[$428>>2]|0;
 $430 = ($429*5344)|0;
 $431 = $430 >> 8;
 $432 = (($431) + ($420))|0;
 $433 = (($411) + 2)|0;
 $434 = $433 & 7;
 $435 = (4786776 + ($434<<2)|0);
 $436 = HEAP32[$435>>2]|0;
 $437 = ($436*10895)|0;
 $438 = $437 >> 8;
 $439 = (($438) + ($427))|0;
 $440 = (4786808 + ($434<<2)|0);
 $441 = HEAP32[$440>>2]|0;
 $442 = ($441*10895)|0;
 $443 = $442 >> 8;
 $444 = (($443) + ($432))|0;
 $445 = (($411) + 3)|0;
 $446 = $445 & 7;
 $447 = (4786776 + ($446<<2)|0);
 $448 = HEAP32[$447>>2]|0;
 $449 = ($448*15243)|0;
 $450 = $449 >> 8;
 $451 = (($450) + ($439))|0;
 $452 = (4786808 + ($446<<2)|0);
 $453 = HEAP32[$452>>2]|0;
 $454 = ($453*15243)|0;
 $455 = $454 >> 8;
 $456 = (($455) + ($444))|0;
 $457 = (($411) + 4)|0;
 $458 = $457 & 7;
 $459 = (4786776 + ($458<<2)|0);
 $460 = HEAP32[$459>>2]|0;
 $461 = ($460*15243)|0;
 $462 = $461 >> 8;
 $463 = (($462) + ($451))|0;
 $464 = (4786808 + ($458<<2)|0);
 $465 = HEAP32[$464>>2]|0;
 $466 = ($465*15243)|0;
 $467 = $466 >> 8;
 $468 = (($467) + ($456))|0;
 $469 = (($411) + 5)|0;
 $470 = $469 & 7;
 $471 = (4786776 + ($470<<2)|0);
 $472 = HEAP32[$471>>2]|0;
 $473 = ($472*10895)|0;
 $474 = $473 >> 8;
 $475 = (($474) + ($463))|0;
 $476 = (4786808 + ($470<<2)|0);
 $477 = HEAP32[$476>>2]|0;
 $478 = ($477*10895)|0;
 $479 = $478 >> 8;
 $480 = (($479) + ($468))|0;
 $481 = (($411) + 6)|0;
 $482 = $481 & 7;
 $483 = (4786776 + ($482<<2)|0);
 $484 = HEAP32[$483>>2]|0;
 $485 = ($484*5344)|0;
 $486 = $485 >> 8;
 $487 = (($486) + ($475))|0;
 $488 = (4786808 + ($482<<2)|0);
 $489 = HEAP32[$488>>2]|0;
 $490 = ($489*5344)|0;
 $491 = $490 >> 8;
 $492 = (($491) + ($480))|0;
 $493 = (($411) + 7)|0;
 $494 = $493 & 7;
 $495 = (4786776 + ($494<<2)|0);
 $496 = HEAP32[$495>>2]|0;
 $497 = ($496*1283)|0;
 $498 = $497 >> 8;
 $499 = (($498) + ($487))|0;
 $500 = (4786808 + ($494<<2)|0);
 $501 = HEAP32[$500>>2]|0;
 $502 = ($501*1283)|0;
 $503 = $502 >> 8;
 $504 = (($503) + ($492))|0;
 $505 = $499 >> 7;
 $506 = $504 >> 7;
 $507 = HEAP32[$oleft>>2]|0;
 $508 = (($507) + ($505))|0;
 HEAP32[$oleft>>2] = $508;
 $509 = HEAP32[$oright>>2]|0;
 $510 = (($509) + ($506))|0;
 HEAP32[$oright>>2] = $510;
 return;
}
function _InitADSR609() {
 var $$ = 0, $$r$1 = 0, $$rs$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $i$04 = 0, $r$01 = 0, $r$1 = 0, $rd$03 = 0, $rd$1 = 0, $rs$02 = 0, $rs$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 _memset((4786072|0),0,640)|0;
 $i$04 = 32;$r$01 = 3;$rd$03 = 0;$rs$02 = 1;
 while(1) {
  $0 = ($r$01>>>0)<(1073741823);
  if ($0) {
   $1 = (($rs$02) + ($r$01))|0;
   $2 = (($rd$03) + 1)|0;
   $3 = ($2|0)==(5);
   $4 = $3&1;
   $$rs$0 = $rs$02 << $4;
   $$ = $3 ? 1 : $2;
   $r$1 = $1;$rd$1 = $$;$rs$1 = $$rs$0;
  } else {
   $r$1 = $r$01;$rd$1 = $rd$03;$rs$1 = $rs$02;
  }
  $5 = ($r$1>>>0)>(1073741823);
  $$r$1 = $5 ? 1073741823 : $r$1;
  $6 = (4786072 + ($i$04<<2)|0);
  HEAP32[$6>>2] = $$r$1;
  $7 = (($i$04) + 1)|0;
  $exitcond = ($7|0)==(160);
  if ($exitcond) {
   break;
  } else {
   $i$04 = $7;$r$01 = $$r$1;$rd$03 = $rd$1;$rs$02 = $rs$1;
  }
 }
 return;
}
function _StartADSR627($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((4248560 + (($ch*352)|0)|0) + 340|0);
 HEAP32[$0>>2] = 1;
 $1 = ((4248560 + (($ch*352)|0)|0) + 296|0);
 HEAP32[$1>>2] = 0;
 $2 = ((4248560 + (($ch*352)|0)|0) + 336|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _g_buffer629($iOff) {
 $iOff = $iOff|0;
 var $$0$lcssa = 0, $$02 = 0, $$1$lcssa = 0, $$11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iOff << 2;
 $1 = HEAP32[((4781672 + 4|0))>>2]|0;
 $2 = (($1) + ($0))|0;
 $3 = ($2|0)>(262143);
 if ($3) {
  $4 = HEAP32[4781672>>2]|0;
  $$02 = $2;
  while(1) {
   $8 = (($$02) + -262144)|0;
   $9 = (($8) + ($4))|0;
   $10 = ($9|0)>(262143);
   if ($10) {
    $$02 = $9;
   } else {
    $$0$lcssa = $9;
    break;
   }
  }
 } else {
  $$0$lcssa = $2;
 }
 $5 = HEAP32[4781672>>2]|0;
 $6 = ($$0$lcssa|0)<($5|0);
 if ($6) {
  $7 = HEAP32[4781672>>2]|0;
  $$11 = $$0$lcssa;$13 = $5;
  while(1) {
   $11 = (($$11) + 262143)|0;
   $12 = (($11) - ($13))|0;
   $14 = ($12|0)<($7|0);
   if ($14) {
    $$11 = $12;$13 = $7;
   } else {
    $$1$lcssa = $12;
    break;
   }
  }
 } else {
  $$1$lcssa = $$0$lcssa;
 }
 $15 = (4257368 + ($$1$lcssa<<1)|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = (_BFLIP16($16)|0);
 $18 = $17 << 16 >> 16;
 $19 = ($18|0)<(0);
 $20 = $19 << 31 >> 31;
 tempRet0 = $20;
 return ($18|0);
}
function _s_buffer1631($iOff,$iVal) {
 $iOff = $iOff|0;
 $iVal = $iVal|0;
 var $$0$lcssa = 0, $$04 = 0, $$1$lcssa = 0, $$13 = 0, $$iVal = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iOff << 2;
 $1 = HEAP32[((4781672 + 4|0))>>2]|0;
 $2 = $0 | 1;
 $3 = (($2) + ($1))|0;
 $4 = ($3|0)>(262143);
 if ($4) {
  $5 = HEAP32[4781672>>2]|0;
  $$04 = $3;
  while(1) {
   $9 = (($$04) + -262144)|0;
   $10 = (($9) + ($5))|0;
   $11 = ($10|0)>(262143);
   if ($11) {
    $$04 = $10;
   } else {
    $$0$lcssa = $10;
    break;
   }
  }
 } else {
  $$0$lcssa = $3;
 }
 $6 = HEAP32[4781672>>2]|0;
 $7 = ($$0$lcssa|0)<($6|0);
 if ($7) {
  $8 = HEAP32[4781672>>2]|0;
  $$13 = $$0$lcssa;$14 = $6;
  while(1) {
   $12 = (($$13) + 262143)|0;
   $13 = (($12) - ($14))|0;
   $15 = ($13|0)<($8|0);
   if ($15) {
    $$13 = $13;$14 = $8;
   } else {
    $$1$lcssa = $13;
    break;
   }
  }
 } else {
  $$1$lcssa = $$0$lcssa;
 }
 $16 = ($iVal|0)<(-32768);
 $$iVal = $16 ? -32768 : $iVal;
 $17 = ($$iVal|0)>(32767);
 $18 = $$iVal&65535;
 $19 = $17 ? 32767 : $18;
 $20 = (_BFLIP16($19)|0);
 $21 = (4257368 + ($$1$lcssa<<1)|0);
 HEAP16[$21>>1] = $20;
 return;
}
function _s_buffer633($iOff,$iVal) {
 $iOff = $iOff|0;
 $iVal = $iVal|0;
 var $$0$lcssa = 0, $$04 = 0, $$1$lcssa = 0, $$13 = 0, $$iVal = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iOff << 2;
 $1 = HEAP32[((4781672 + 4|0))>>2]|0;
 $2 = (($1) + ($0))|0;
 $3 = ($2|0)>(262143);
 if ($3) {
  $4 = HEAP32[4781672>>2]|0;
  $$04 = $2;
  while(1) {
   $8 = (($$04) + -262144)|0;
   $9 = (($8) + ($4))|0;
   $10 = ($9|0)>(262143);
   if ($10) {
    $$04 = $9;
   } else {
    $$0$lcssa = $9;
    break;
   }
  }
 } else {
  $$0$lcssa = $2;
 }
 $5 = HEAP32[4781672>>2]|0;
 $6 = ($$0$lcssa|0)<($5|0);
 if ($6) {
  $7 = HEAP32[4781672>>2]|0;
  $$13 = $$0$lcssa;$13 = $5;
  while(1) {
   $11 = (($$13) + 262143)|0;
   $12 = (($11) - ($13))|0;
   $14 = ($12|0)<($7|0);
   if ($14) {
    $$13 = $12;$13 = $7;
   } else {
    $$1$lcssa = $12;
    break;
   }
  }
 } else {
  $$1$lcssa = $$0$lcssa;
 }
 $15 = ($iVal|0)<(-32768);
 $$iVal = $15 ? -32768 : $iVal;
 $16 = ($$iVal|0)>(32767);
 $17 = $$iVal&65535;
 $18 = $16 ? 32767 : $17;
 $19 = (_BFLIP16($18)|0);
 $20 = (4257368 + ($$1$lcssa<<1)|0);
 HEAP16[$20>>1] = $19;
 return;
}
function _psf2_load_elf($start,$len) {
 $start = $start|0;
 $len = $len|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$04 = 0, $rec$03 = 0, $sext = 0, $shent$06 = 0, $target$0 = 0, $totallen$0$lcssa = 0, $totallen$05 = 0, $totallen$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4786888>>2]|0;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($0) + 4)|0;
  $4 = $3 & -4;
  HEAP32[4786888>>2] = $4;
 }
 $5 = HEAP8[$start>>0]|0;
 $6 = ($5<<24>>24)==(127);
 if ($6) {
  $7 = (($start) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(69);
  if ($9) {
   $10 = (($start) + 2|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(76);
   if ($12) {
    $13 = (($start) + 3|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(70);
    if ($15) {
     $16 = (($start) + 24|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (($start) + 25|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = $20&255;
     $22 = $21 << 8;
     $23 = $22 | $18;
     $24 = (($start) + 26|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = $26 << 16;
     $28 = $23 | $27;
     $29 = (($start) + 27|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = $31 << 24;
     $33 = $28 | $32;
     $34 = (($start) + 46|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35&255;
     $37 = (($start) + 47|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = $39 << 8;
     $41 = $40 | $36;
     $42 = (($start) + 48|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $45 = (($start) + 49|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = $47 << 8;
     $49 = $48 | $44;
     $50 = ($49|0)==(0);
     L9: do {
      if ($50) {
       $totallen$0$lcssa = 0;
      } else {
       $51 = (($start) + 33|0);
       $52 = HEAP8[$51>>0]|0;
       $53 = $52&255;
       $54 = $53 << 8;
       $55 = (($start) + 32|0);
       $56 = HEAP8[$55>>0]|0;
       $57 = $56&255;
       $58 = $54 | $57;
       $59 = (($start) + 34|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = $60&255;
       $62 = $61 << 16;
       $63 = $58 | $62;
       $64 = (($start) + 35|0);
       $65 = HEAP8[$64>>0]|0;
       $66 = $65&255;
       $67 = $66 << 24;
       $68 = $63 | $67;
       $i$04 = 0;$shent$06 = $68;$totallen$05 = 0;
       L11: while(1) {
        $69 = (($shent$06) + 4)|0;
        $70 = (($start) + ($69)|0);
        $71 = HEAP8[$70>>0]|0;
        $72 = $71&255;
        $73 = (($shent$06) + 5)|0;
        $74 = (($start) + ($73)|0);
        $75 = HEAP8[$74>>0]|0;
        $76 = $75&255;
        $77 = $76 << 8;
        $78 = $77 | $72;
        $79 = (($shent$06) + 6)|0;
        $80 = (($start) + ($79)|0);
        $81 = HEAP8[$80>>0]|0;
        $82 = $81&255;
        $83 = $82 << 16;
        $84 = $78 | $83;
        $85 = (($shent$06) + 7)|0;
        $86 = (($start) + ($85)|0);
        $87 = HEAP8[$86>>0]|0;
        $88 = $87&255;
        $89 = $88 << 24;
        $90 = $84 | $89;
        $91 = (($shent$06) + 12)|0;
        $92 = (($start) + ($91)|0);
        $93 = HEAP8[$92>>0]|0;
        $94 = $93&255;
        $95 = (($shent$06) + 13)|0;
        $96 = (($start) + ($95)|0);
        $97 = HEAP8[$96>>0]|0;
        $98 = $97&255;
        $99 = $98 << 8;
        $100 = $99 | $94;
        $101 = (($shent$06) + 14)|0;
        $102 = (($start) + ($101)|0);
        $103 = HEAP8[$102>>0]|0;
        $104 = $103&255;
        $105 = $104 << 16;
        $106 = $100 | $105;
        $107 = (($shent$06) + 15)|0;
        $108 = (($start) + ($107)|0);
        $109 = HEAP8[$108>>0]|0;
        $110 = $109&255;
        $111 = $110 << 24;
        $112 = $106 | $111;
        $113 = (($shent$06) + 16)|0;
        $114 = (($start) + ($113)|0);
        $115 = HEAP8[$114>>0]|0;
        $116 = $115&255;
        $117 = (($shent$06) + 17)|0;
        $118 = (($start) + ($117)|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = $119&255;
        $121 = $120 << 8;
        $122 = $121 | $116;
        $123 = (($shent$06) + 18)|0;
        $124 = (($start) + ($123)|0);
        $125 = HEAP8[$124>>0]|0;
        $126 = $125&255;
        $127 = $126 << 16;
        $128 = $122 | $127;
        $129 = (($shent$06) + 19)|0;
        $130 = (($start) + ($129)|0);
        $131 = HEAP8[$130>>0]|0;
        $132 = $131&255;
        $133 = $132 << 24;
        $134 = $128 | $133;
        $135 = (($shent$06) + 20)|0;
        $136 = (($start) + ($135)|0);
        $137 = HEAP8[$136>>0]|0;
        $138 = $137&255;
        $139 = (($shent$06) + 21)|0;
        $140 = (($start) + ($139)|0);
        $141 = HEAP8[$140>>0]|0;
        $142 = $141&255;
        $143 = $142 << 8;
        $144 = $143 | $138;
        $145 = (($shent$06) + 22)|0;
        $146 = (($start) + ($145)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = $148 << 16;
        $150 = $144 | $149;
        $151 = (($shent$06) + 23)|0;
        $152 = (($start) + ($151)|0);
        $153 = HEAP8[$152>>0]|0;
        $154 = $153&255;
        $155 = $154 << 24;
        $156 = $150 | $155;
        if ((($90|0) == 1)) {
         $163 = HEAP32[4786888>>2]|0;
         $164 = (($163) + ($112))|0;
         $165 = $164 >>> 2;
         $166 = (34768 + ($165<<2)|0);
         $167 = (($start) + ($134)|0);
         _memcpy(($166|0),($167|0),($156|0))|0;
         $168 = (($156) + ($totallen$05))|0;
         $totallen$1 = $168;
        } else if ((($90|0) == 8)) {
         $169 = HEAP32[4786888>>2]|0;
         $170 = (($169) + ($112))|0;
         $171 = $170 >>> 2;
         $172 = (34768 + ($171<<2)|0);
         _memset(($172|0),0,($156|0))|0;
         $173 = (($156) + ($totallen$05))|0;
         $totallen$1 = $173;
        } else if ((($90|0) == 9)) {
         $157 = $156 >>> 3;
         $158 = ($157|0)==(0);
         if ($158) {
          $totallen$1 = $totallen$05;
         } else {
          $159 = (($134) + 1)|0;
          $160 = (($134) + 2)|0;
          $161 = (($134) + 3)|0;
          $162 = (($134) + 4)|0;
          $rec$03 = 0;
          while(1) {
           $174 = $rec$03 << 3;
           $175 = (($174) + ($134))|0;
           $176 = (($start) + ($175)|0);
           $177 = HEAP8[$176>>0]|0;
           $178 = $177&255;
           $179 = (($159) + ($174))|0;
           $180 = (($start) + ($179)|0);
           $181 = HEAP8[$180>>0]|0;
           $182 = $181&255;
           $183 = $182 << 8;
           $184 = $183 | $178;
           $185 = (($160) + ($174))|0;
           $186 = (($start) + ($185)|0);
           $187 = HEAP8[$186>>0]|0;
           $188 = $187&255;
           $189 = $188 << 16;
           $190 = $184 | $189;
           $191 = (($161) + ($174))|0;
           $192 = (($start) + ($191)|0);
           $193 = HEAP8[$192>>0]|0;
           $194 = $193&255;
           $195 = $194 << 24;
           $196 = $190 | $195;
           $197 = (($162) + ($174))|0;
           $198 = (($start) + ($197)|0);
           $199 = HEAP8[$198>>0]|0;
           $200 = $199&255;
           $201 = HEAP32[4786888>>2]|0;
           $202 = (($196) + ($201))|0;
           $203 = $202 >>> 2;
           $204 = (34768 + ($203<<2)|0);
           $205 = HEAP32[$204>>2]|0;
           if ((($200|0) == 2)) {
            $206 = (($205) + ($201))|0;
            $target$0 = $206;
           } else if ((($200|0) == 4)) {
            $207 = $205 & 67108863;
            $208 = $205 & -67108864;
            $209 = $201 >>> 2;
            $210 = (($207) + ($209))|0;
            $211 = $210 | $208;
            $target$0 = $211;
           } else if ((($200|0) == 5)) {
            HEAP32[4786896>>2] = $196;
            HEAP32[4786904>>2] = $205;
            $target$0 = $205;
           } else if ((($200|0) == 6)) {
            $sext = $205 << 16;
            $212 = $sext >> 16;
            $213 = HEAP32[4786904>>2]|0;
            $214 = $213 << 16;
            $215 = (($212) + ($201))|0;
            $216 = (($215) + ($214))|0;
            $217 = $216 >>> 16;
            $218 = $216 >>> 15;
            $$lobit = $218 & 1;
            $219 = (($$lobit) + ($217))|0;
            $220 = $219 & 65535;
            $221 = $213 & -65536;
            $222 = $220 | $221;
            HEAP32[4786904>>2] = $222;
            $223 = HEAP32[4786888>>2]|0;
            $224 = (($223) + ($212))|0;
            $225 = $205 & -65536;
            $226 = $224 & 65535;
            $227 = $226 | $225;
            $228 = HEAP32[4786896>>2]|0;
            $229 = (($228) + ($223))|0;
            $230 = $229 >>> 2;
            $231 = (34768 + ($230<<2)|0);
            HEAP32[$231>>2] = $222;
            $target$0 = $227;
           } else {
            break L11;
           }
           $232 = HEAP32[4786888>>2]|0;
           $233 = (($232) + ($196))|0;
           $234 = $233 >>> 2;
           $235 = (34768 + ($234<<2)|0);
           HEAP32[$235>>2] = $target$0;
           $236 = (($rec$03) + 1)|0;
           $237 = ($236>>>0)<($157>>>0);
           if ($237) {
            $rec$03 = $236;
           } else {
            $totallen$1 = $totallen$05;
            break;
           }
          }
         }
        } else {
         $totallen$1 = $totallen$05;
        }
        $238 = (($shent$06) + ($41))|0;
        $239 = (($i$04) + 1)|0;
        $240 = ($239>>>0)<($49>>>0);
        if ($240) {
         $i$04 = $239;$shent$06 = $238;$totallen$05 = $totallen$1;
        } else {
         $totallen$0$lcssa = $totallen$1;
         break L9;
        }
       }
       (_puts((4787208|0))|0);
       $$0 = -1;
       return ($$0|0);
      }
     } while(0);
     $241 = HEAP32[4786888>>2]|0;
     $242 = (($241) + ($33))|0;
     $243 = $242 | -2147483648;
     $244 = (($241) + ($totallen$0$lcssa))|0;
     HEAP32[4786888>>2] = $244;
     $$0 = $243;
     return ($$0|0);
    }
   }
  }
 }
 (_puts((4787248|0))|0);
 $$0 = -1;
 return ($$0|0);
}
function _psf2_load_file($file,$buf,$buflen) {
 $file = $file|0;
 $buf = $buf|0;
 $buflen = $buflen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4786912>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $i$01 = 0;
 } else {
  $$0 = -1;
  return ($$0|0);
 }
 while(1) {
  $5 = (_load_file($i$01,$file,$buf,$buflen)|0);
  $6 = ($5|0)==(-1);
  $4 = (($i$01) + 1)|0;
  if (!($6)) {
   $$0 = $5;
   label = 4;
   break;
  }
  $2 = HEAP32[4786912>>2]|0;
  $3 = ($4|0)<($2|0);
  if ($3) {
   $i$01 = $4;
  } else {
   $$0 = -1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _psf2_get_loadaddr() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4786888>>2]|0;
 return ($0|0);
}
function _psf2_set_loadaddr($new) {
 $new = $new|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[4786888>>2] = $new;
 return;
}
function _load_file($fs,$file,$buf,$buflen) {
 $fs = $fs|0;
 $file = $file|0;
 $buf = $buf|0;
 $buflen = $buflen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (4786920 + ($fs<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (4787048 + ($fs<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_load_file_ex($1,$1,$3,$file,$buf,$buflen)|0);
 return ($4|0);
}
function _load_file_ex($top,$start,$len,$file,$buf,$buflen) {
 $top = $top|0;
 $start = $start|0;
 $len = $len|0;
 $file = $file|0;
 $buf = $buf|0;
 $buflen = $buflen|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cofs$07 = 0, $cptr$010 = 0, $cptr$010$lcssa = 0, $dlength = 0, $i$0 = 0;
 var $i$0$lcssa = 0, $i$111 = 0, $j$09 = 0, $matchname = 0, $uofs$08 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dlength = sp + 8|0;
 $matchname = sp + 16|0;
 $i$0 = 0;
 while(1) {
  $0 = (($file) + ($i$0)|0);
  $1 = HEAP8[$0>>0]|0;
  if ((($1<<24>>24) == 0) | (($1<<24>>24) == 92) | (($1<<24>>24) == 47)) {
   $i$0$lcssa = $i$0;
   break;
  }
  $2 = (($matchname) + ($i$0)|0);
  HEAP8[$2>>0] = $1;
  $3 = (($i$0) + 1)|0;
  $i$0 = $3;
 }
 $4 = (($matchname) + ($i$0$lcssa)|0);
 HEAP8[$4>>0] = 0;
 $5 = (($i$0$lcssa) + 1)|0;
 $6 = (($file) + ($5)|0);
 $7 = HEAP8[$start>>0]|0;
 $8 = $7&255;
 $9 = (($start) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 8;
 $13 = $12 | $8;
 $14 = (($start) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 16;
 $18 = $13 | $17;
 $19 = (($start) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 << 24;
 $23 = $18 | $22;
 $24 = ($23|0)>(0);
 if (!($24)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (($start) + 4|0);
 $cptr$010 = $25;$i$111 = 0;
 while(1) {
  $26 = (_strcasecmp($cptr$010,$matchname)|0);
  $27 = ($26|0)==(0);
  if ($27) {
   $cptr$010$lcssa = $cptr$010;
   break;
  }
  $130 = (($cptr$010) + 48|0);
  $131 = (($i$111) + 1)|0;
  $132 = ($131|0)<($23|0);
  if ($132) {
   $cptr$010 = $130;$i$111 = $131;
  } else {
   $$0 = -1;
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return ($$0|0);
 }
 $28 = (($cptr$010$lcssa) + 36|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = (($cptr$010$lcssa) + 37|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $35 = $34 | $30;
 $36 = (($cptr$010$lcssa) + 38|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38 << 16;
 $40 = $35 | $39;
 $41 = (($cptr$010$lcssa) + 39|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 << 24;
 $45 = $40 | $44;
 $46 = (($cptr$010$lcssa) + 40|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = (($cptr$010$lcssa) + 41|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 << 8;
 $53 = $52 | $48;
 $54 = (($cptr$010$lcssa) + 42|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 << 16;
 $58 = $53 | $57;
 $59 = (($cptr$010$lcssa) + 43|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $61 << 24;
 $63 = $58 | $62;
 $64 = (($cptr$010$lcssa) + 44|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = (($cptr$010$lcssa) + 45|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $69 << 8;
 $71 = $70 | $66;
 $72 = (($cptr$010$lcssa) + 46|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 << 16;
 $76 = $71 | $75;
 $77 = (($cptr$010$lcssa) + 47|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 << 24;
 $81 = $76 | $80;
 $82 = $81 | $63;
 $83 = ($82|0)==(0);
 if ($83) {
  $84 = (($top) + ($45)|0);
  $85 = (($len) - ($45))|0;
  $86 = (_load_file_ex($top,$84,$85,$6,$buf,$buflen)|0);
  $$0 = $86;
  STACKTOP = sp;return ($$0|0);
 }
 $87 = (($63) + -1)|0;
 $88 = (($87) + ($81))|0;
 $89 = (($88>>>0) / ($81>>>0))&-1;
 $90 = ($89|0)==(0);
 if ($90) {
  $$0 = $63;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = $89 << 2;
 $92 = (($91) + ($45))|0;
 $93 = (($45) + 1)|0;
 $94 = (($45) + 2)|0;
 $95 = (($45) + 3)|0;
 $cofs$07 = $92;$j$09 = 0;$uofs$08 = 0;
 while(1) {
  $96 = $j$09 << 2;
  $97 = (($96) + ($45))|0;
  $98 = (($top) + ($97)|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($93) + ($96))|0;
  $102 = (($top) + ($101)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = $104 << 8;
  $106 = $105 | $100;
  $107 = (($94) + ($96))|0;
  $108 = (($top) + ($107)|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = $110 << 16;
  $112 = $106 | $111;
  $113 = (($95) + ($96))|0;
  $114 = (($top) + ($113)|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = $116 << 24;
  $118 = $112 | $117;
  $119 = (($buflen) - ($uofs$08))|0;
  HEAP32[$dlength>>2] = $119;
  $120 = (($buf) + ($uofs$08)|0);
  $121 = (($top) + ($cofs$07)|0);
  $122 = (_uncompress($120,$dlength,$121,$118)|0);
  $123 = ($122|0)==(0);
  if (!($123)) {
   $$lcssa = $122;
   break;
  }
  $125 = (($118) + ($cofs$07))|0;
  $126 = HEAP32[$dlength>>2]|0;
  $127 = (($126) + ($uofs$08))|0;
  $128 = (($j$09) + 1)|0;
  $129 = ($128>>>0)<($89>>>0);
  if ($129) {
   $cofs$07 = $125;$j$09 = $128;$uofs$08 = $127;
  } else {
   $$0 = $63;
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return ($$0|0);
 }
 $124 = HEAP32[$dlength>>2]|0;
 HEAP32[$vararg_buffer>>2] = $124;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $$lcssa;
 (_printf((4787176|0),($vararg_buffer|0))|0);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _SPU2readDMA4Mem($usPSXMem,$iSize) {
 $usPSXMem = $usPSXMem|0;
 $iSize = $iSize|0;
 var $$ = 0, $$$lcssa = 0, $$02 = 0, $$3 = 0, $$lcssa = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iSize|0)>(0);
 $1 = HEAP32[6909520>>2]|0;
 if ($0) {
  $$promoted = HEAP32[6909520>>2]|0;
  $$02 = $usPSXMem;$$3 = $$promoted;$3 = $1;$i$01 = 0;
  while(1) {
   $2 = (4787280 + ($3<<1)|0);
   $4 = HEAP16[$2>>1]|0;
   $5 = $$02 >>> 1;
   $6 = (34768 + ($5<<1)|0);
   HEAP16[$6>>1] = $4;
   $7 = (($$02) + 2)|0;
   $8 = (($$3) + 1)|0;
   $9 = ($8>>>0)>(1048575);
   $$ = $9 ? 0 : $8;
   $10 = (($i$01) + 1)|0;
   $exitcond = ($10|0)==($iSize|0);
   if ($exitcond) {
    $$$lcssa = $$;
    break;
   } else {
    $$02 = $7;$$3 = $$;$3 = $$;$i$01 = $10;
   }
  }
  HEAP32[6909520>>2] = $$$lcssa;
  $$lcssa = $$$lcssa;
 } else {
  $$lcssa = $1;
 }
 $11 = (($$lcssa) + 32)|0;
 HEAP32[6909520>>2] = $11;
 HEAP32[4787272>>2] = 0;
 HEAP16[((6909544 + 432|0))>>1] = 0;
 HEAP16[6909504>>1] = 128;
 return;
}
function _SPU2writeDMA4Mem($usPSXMem,$iSize) {
 $usPSXMem = $usPSXMem|0;
 $iSize = $iSize|0;
 var $$ = 0, $$$lcssa = 0, $$02 = 0, $$3 = 0, $$promoted = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iSize|0)>(0);
 if (!($0)) {
  HEAP32[4787272>>2] = 0;
  HEAP16[6909504>>1] = 128;
  return;
 }
 $$promoted = HEAP32[6909520>>2]|0;
 $$02 = $usPSXMem;$$3 = $$promoted;$i$01 = 0;
 while(1) {
  $1 = $$02 >>> 1;
  $2 = (34768 + ($1<<1)|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = (4787280 + ($$3<<1)|0);
  HEAP16[$4>>1] = $3;
  $5 = (($$02) + 2)|0;
  $6 = (($$3) + 1)|0;
  $7 = ($6>>>0)>(1048575);
  $$ = $7 ? 0 : $6;
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($iSize|0);
  if ($exitcond) {
   $$$lcssa = $$;
   break;
  } else {
   $$02 = $5;$$3 = $$;$i$01 = $8;
  }
 }
 HEAP32[6909520>>2] = $$$lcssa;
 HEAP32[4787272>>2] = 0;
 HEAP16[6909504>>1] = 128;
 return;
}
function _SPU2writeDMA7Mem($usPSXMem,$iSize) {
 $usPSXMem = $usPSXMem|0;
 $iSize = $iSize|0;
 var $$ = 0, $$$lcssa = 0, $$2 = 0, $$promoted = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iSize|0)>(0);
 if (!($0)) {
  HEAP32[4787272>>2] = 0;
  HEAP16[((6909504 + 2|0))>>1] = 128;
  return;
 }
 $1 = $usPSXMem >>> 1;
 $2 = (34768 + ($1<<1)|0);
 $3 = HEAP16[$2>>1]|0;
 $$promoted = HEAP32[((6909520 + 4|0))>>2]|0;
 $$2 = $$promoted;$i$01 = 0;
 while(1) {
  $4 = (4787280 + ($$2<<1)|0);
  HEAP16[$4>>1] = $3;
  $5 = (($$2) + 1)|0;
  $6 = ($5>>>0)>(1048575);
  $$ = $6 ? 0 : $5;
  $7 = (($i$01) + 1)|0;
  $exitcond = ($7|0)==($iSize|0);
  if ($exitcond) {
   $$$lcssa = $$;
   break;
  } else {
   $$2 = $$;$i$01 = $7;
  }
 }
 HEAP32[((6909520 + 4|0))>>2] = $$$lcssa;
 HEAP32[4787272>>2] = 0;
 HEAP16[((6909504 + 2|0))>>1] = 128;
 return;
}
function _InterruptDMA4() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[6909496>>1]|0;
 $1 = $0&65535;
 $2 = $1 & 65487;
 $3 = $2&65535;
 HEAP16[6909496>>1] = $3;
 HEAP16[((6909544 + 432|0))>>1] = 0;
 $4 = HEAP16[6909504>>1]|0;
 $5 = $4&65535;
 $6 = $5 | 128;
 $7 = $6&65535;
 HEAP16[6909504>>1] = $7;
 return;
}
function _SPU2interruptDMA4() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _InterruptDMA4();
 return;
}
function _InterruptDMA7() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[((6909496 + 2|0))>>1]|0;
 $1 = $0&65535;
 $2 = $1 & 65487;
 $3 = $2&65535;
 HEAP16[((6909496 + 2|0))>>1] = $3;
 HEAP16[((6909544 + 1456|0))>>1] = 0;
 $4 = HEAP16[((6909504 + 2|0))>>1]|0;
 $5 = $4&65535;
 $6 = $5 | 128;
 $7 = $6&65535;
 HEAP16[((6909504 + 2|0))>>1] = $7;
 return;
}
function _SPU2interruptDMA7() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _InterruptDMA7();
 return;
}
function _SPU2write($reg,$val) {
 $reg = $reg|0;
 $val = $val|0;
 var $$ = 0, $$16 = 0, $$18 = 0, $$19 = 0, $$8 = 0, $$9 = 0, $$lobit = 0, $$lobit12 = 0, $$lobit13 = 0, $$lobit14 = 0, $$lx$0 = 0, $$lx2$0 = 0, $$lx2$2 = 0, $$off = 0, $$off10 = 0, $$off11 = 0, $$off15 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $lx$0 = 0, $lx$1 = 0, $lx$2 = 0, $lx2$0 = 0, $lx2$1 = 0, $lx2$2 = 0, $lx2$3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $reg & 65535;
 $1 = $0 >>> 1;
 $2 = (6909544 + ($1<<1)|0);
 HEAP16[$2>>1] = $val;
 $3 = ($0>>>0)<(384);
 if (!($3)) {
  $4 = ($0>>>0)>(1023);
  $$off = (($0) + -1024)|0;
  $5 = ($$off>>>0)<(384);
  if (!($5)) {
   $$off10 = (($0) + -448)|0;
   $86 = ($$off10>>>0)<(288);
   $$off11 = (($0) + -1472)|0;
   $87 = ($$off11>>>0)<(288);
   $or$cond = $86 | $87;
   if ($or$cond) {
    $$18 = $4 ? $$off : $0;
    $$19 = $4 ? 24 : 0;
    $88 = (($$18) + -448)|0;
    $89 = (($88|0) / 12)&-1;
    $90 = (($89) + ($$19))|0;
    $91 = (($90|0) % 24)&-1;
    $92 = Math_imul($91, -12)|0;
    $93 = (($92) + ($$18))|0;
    switch ($93|0) {
    case 458:  {
     $143 = ((6884440 + (($90*504)|0)|0) + 296|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = $144 & 983040;
     $146 = $val&65535;
     $147 = $145 | $146;
     HEAP32[$143>>2] = $147;
     break;
    }
    case 450:  {
     $105 = ((6884440 + (($90*504)|0)|0) + 288|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $106 & 983040;
     $108 = $val&65535;
     $109 = $107 | $108;
     HEAP32[$105>>2] = $109;
     $110 = HEAP32[6884432>>2]|0;
     $111 = $109 << 1;
     $112 = (($110) + ($111)|0);
     $113 = ((6884440 + (($90*504)|0)|0) + 276|0);
     HEAP32[$113>>2] = $112;
     break;
    }
    case 452:  {
     $114 = $val&65535;
     $115 = $114 << 16;
     $116 = $115 & 983040;
     $117 = ((6884440 + (($90*504)|0)|0) + 292|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = $118 & 65535;
     $120 = $119 | $116;
     HEAP32[$117>>2] = $120;
     $121 = HEAP32[6884432>>2]|0;
     $122 = $120 << 1;
     $123 = (($121) + ($122)|0);
     $124 = ((6884440 + (($90*504)|0)|0) + 284|0);
     HEAP32[$124>>2] = $123;
     $125 = ((6884440 + (($90*504)|0)|0) + 344|0);
     HEAP32[$125>>2] = 1;
     break;
    }
    case 448:  {
     $94 = $val&65535;
     $95 = $94 << 16;
     $96 = $95 & 983040;
     $97 = ((6884440 + (($90*504)|0)|0) + 288|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $98 & 65535;
     $100 = $99 | $96;
     HEAP32[$97>>2] = $100;
     $101 = HEAP32[6884432>>2]|0;
     $102 = $100 << 1;
     $103 = (($101) + ($102)|0);
     $104 = ((6884440 + (($90*504)|0)|0) + 276|0);
     HEAP32[$104>>2] = $103;
     break;
    }
    case 454:  {
     $126 = ((6884440 + (($90*504)|0)|0) + 292|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $127 & 983040;
     $129 = $val&65535;
     $130 = $128 | $129;
     HEAP32[$126>>2] = $130;
     $131 = HEAP32[6884432>>2]|0;
     $132 = $130 << 1;
     $133 = (($131) + ($132)|0);
     $134 = ((6884440 + (($90*504)|0)|0) + 284|0);
     HEAP32[$134>>2] = $133;
     $135 = ((6884440 + (($90*504)|0)|0) + 344|0);
     HEAP32[$135>>2] = 1;
     break;
    }
    case 456:  {
     $136 = $val&65535;
     $137 = $136 << 16;
     $138 = $137 & 983040;
     $139 = ((6884440 + (($90*504)|0)|0) + 296|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = $140 & 65535;
     $142 = $141 | $138;
     HEAP32[$139>>2] = $142;
     break;
    }
    default: {
    }
    }
    HEAP32[4787272>>2] = 0;
    return;
   }
   do {
    switch ($0|0) {
    case 424:  {
     $148 = $val&65535;
     $149 = $148 << 16;
     $150 = $149 & 983040;
     $151 = HEAP32[6909520>>2]|0;
     $152 = $151 & 65535;
     $153 = $152 | $150;
     HEAP32[6909520>>2] = $153;
     break;
    }
    case 426:  {
     $154 = HEAP32[6909520>>2]|0;
     $155 = $154 & 983040;
     $156 = $val&65535;
     $157 = $155 | $156;
     HEAP32[6909520>>2] = $157;
     break;
    }
    case 1448:  {
     $158 = $val&65535;
     $159 = $158 << 16;
     $160 = $159 & 983040;
     $161 = HEAP32[((6909520 + 4|0))>>2]|0;
     $162 = $161 & 65535;
     $163 = $162 | $160;
     HEAP32[((6909520 + 4|0))>>2] = $163;
     break;
    }
    case 1450:  {
     $164 = HEAP32[((6909520 + 4|0))>>2]|0;
     $165 = $164 & 983040;
     $166 = $val&65535;
     $167 = $165 | $166;
     HEAP32[((6909520 + 4|0))>>2] = $167;
     break;
    }
    case 428:  {
     $168 = HEAP32[6909520>>2]|0;
     $169 = (4787280 + ($168<<1)|0);
     HEAP16[$169>>1] = $val;
     $170 = HEAP32[6909520>>2]|0;
     $171 = (($170) + 1)|0;
     $172 = ($171>>>0)>(1048575);
     $$8 = $172 ? 0 : $171;
     HEAP32[6909520>>2] = $$8;
     break;
    }
    case 410:  {
     HEAP16[6909496>>1] = $val;
     break;
    }
    case 836:  {
     HEAP16[6909504>>1] = $val;
     break;
    }
    case 1452:  {
     $173 = HEAP32[((6909520 + 4|0))>>2]|0;
     $174 = (4787280 + ($173<<1)|0);
     HEAP16[$174>>1] = $val;
     $175 = HEAP32[((6909520 + 4|0))>>2]|0;
     $176 = (($175) + 1)|0;
     $177 = ($176>>>0)>(1048575);
     $$9 = $177 ? 0 : $176;
     HEAP32[((6909520 + 4|0))>>2] = $$9;
     break;
    }
    case 1434:  {
     HEAP16[((6909496 + 2|0))>>1] = $val;
     break;
    }
    case 1860:  {
     HEAP16[((6909504 + 2|0))>>1] = $val;
     break;
    }
    case 1908:  {
     $464 = $val << 16 >> 16;
     HEAP32[((6909136 + 48|0))>>2] = $464;
     break;
    }
    case 826:  {
     $460 = HEAP32[((6909136 + 156|0))>>2]|0;
     $461 = $460 & 983040;
     $462 = $val&65535;
     $463 = $461 | $462;
     HEAP32[((6909136 + 156|0))>>2] = $463;
     break;
    }
    case 1910:  {
     $465 = $val << 16 >> 16;
     HEAP32[((6909136 + 52|0))>>2] = $465;
     break;
    }
    case 1912:  {
     $466 = $val << 16 >> 16;
     HEAP32[((6909136 + 56|0))>>2] = $466;
     break;
    }
    case 1914:  {
     $467 = $val << 16 >> 16;
     HEAP32[((6909136 + 60|0))>>2] = $467;
     break;
    }
    case 1916:  {
     $468 = $val << 16 >> 16;
     HEAP32[((6909136 + 64|0))>>2] = $468;
     break;
    }
    case 1918:  {
     $469 = $val << 16 >> 16;
     HEAP32[((6909136 + 68|0))>>2] = $469;
     break;
    }
    case 1920:  {
     $470 = $val << 16 >> 16;
     HEAP32[((6909136 + 72|0))>>2] = $470;
     break;
    }
    case 1922:  {
     $471 = $val << 16 >> 16;
     HEAP32[((6909136 + 76|0))>>2] = $471;
     break;
    }
    case 1924:  {
     $472 = $val << 16 >> 16;
     HEAP32[((6909136 + 160|0))>>2] = $472;
     break;
    }
    case 1926:  {
     $473 = $val << 16 >> 16;
     HEAP32[((6909136 + 164|0))>>2] = $473;
     break;
    }
    case 1764:  {
     $474 = $val&65535;
     $475 = $474 << 16;
     $476 = $475 & 983040;
     $477 = HEAP32[((6909136 + 208|0))>>2]|0;
     $478 = $477 & 65535;
     $479 = $478 | $476;
     HEAP32[((6909136 + 208|0))>>2] = $479;
     break;
    }
    case 1766:  {
     $480 = HEAP32[((6909136 + 208|0))>>2]|0;
     $481 = $480 & 983040;
     $482 = $val&65535;
     $483 = $481 | $482;
     HEAP32[((6909136 + 208|0))>>2] = $483;
     break;
    }
    case 1768:  {
     $484 = $val&65535;
     $485 = $484 << 16;
     $486 = $485 & 983040;
     $487 = HEAP32[((6909136 + 212|0))>>2]|0;
     $488 = $487 & 65535;
     $489 = $488 | $486;
     HEAP32[((6909136 + 212|0))>>2] = $489;
     break;
    }
    case 1770:  {
     $490 = HEAP32[((6909136 + 212|0))>>2]|0;
     $491 = $490 & 983040;
     $492 = $val&65535;
     $493 = $491 | $492;
     HEAP32[((6909136 + 212|0))>>2] = $493;
     break;
    }
    case 1772:  {
     $494 = $val&65535;
     $495 = $494 << 16;
     $496 = $495 & 983040;
     $497 = HEAP32[((6909136 + 248|0))>>2]|0;
     $498 = $497 & 65535;
     $499 = $498 | $496;
     HEAP32[((6909136 + 248|0))>>2] = $499;
     break;
    }
    case 1774:  {
     $500 = HEAP32[((6909136 + 248|0))>>2]|0;
     $501 = $500 & 983040;
     $502 = $val&65535;
     $503 = $501 | $502;
     HEAP32[((6909136 + 248|0))>>2] = $503;
     break;
    }
    case 1776:  {
     $504 = $val&65535;
     $505 = $504 << 16;
     $506 = $505 & 983040;
     $507 = HEAP32[((6909136 + 252|0))>>2]|0;
     $508 = $507 & 65535;
     $509 = $508 | $506;
     HEAP32[((6909136 + 252|0))>>2] = $509;
     break;
    }
    case 1778:  {
     $510 = HEAP32[((6909136 + 252|0))>>2]|0;
     $511 = $510 & 983040;
     $512 = $val&65535;
     $513 = $511 | $512;
     HEAP32[((6909136 + 252|0))>>2] = $513;
     break;
    }
    case 1780:  {
     $514 = $val&65535;
     $515 = $514 << 16;
     $516 = $515 & 983040;
     $517 = HEAP32[((6909136 + 256|0))>>2]|0;
     $518 = $517 & 65535;
     $519 = $518 | $516;
     HEAP32[((6909136 + 256|0))>>2] = $519;
     break;
    }
    case 1782:  {
     $520 = HEAP32[((6909136 + 256|0))>>2]|0;
     $521 = $520 & 983040;
     $522 = $val&65535;
     $523 = $521 | $522;
     HEAP32[((6909136 + 256|0))>>2] = $523;
     break;
    }
    case 1784:  {
     $524 = $val&65535;
     $525 = $524 << 16;
     $526 = $525 & 983040;
     $527 = HEAP32[((6909136 + 260|0))>>2]|0;
     $528 = $527 & 65535;
     $529 = $528 | $526;
     HEAP32[((6909136 + 260|0))>>2] = $529;
     break;
    }
    case 1786:  {
     $530 = HEAP32[((6909136 + 260|0))>>2]|0;
     $531 = $530 & 983040;
     $532 = $val&65535;
     $533 = $531 | $532;
     HEAP32[((6909136 + 260|0))>>2] = $533;
     break;
    }
    case 1788:  {
     $534 = $val&65535;
     $535 = $534 << 16;
     $536 = $535 & 983040;
     $537 = HEAP32[((6909136 + 264|0))>>2]|0;
     $538 = $537 & 65535;
     $539 = $538 | $536;
     HEAP32[((6909136 + 264|0))>>2] = $539;
     break;
    }
    case 1790:  {
     $540 = HEAP32[((6909136 + 264|0))>>2]|0;
     $541 = $540 & 983040;
     $542 = $val&65535;
     $543 = $541 | $542;
     HEAP32[((6909136 + 264|0))>>2] = $543;
     break;
    }
    case 1792:  {
     $544 = $val&65535;
     $545 = $544 << 16;
     $546 = $545 & 983040;
     $547 = HEAP32[((6909136 + 268|0))>>2]|0;
     $548 = $547 & 65535;
     $549 = $548 | $546;
     HEAP32[((6909136 + 268|0))>>2] = $549;
     break;
    }
    case 1794:  {
     $550 = HEAP32[((6909136 + 268|0))>>2]|0;
     $551 = $550 & 983040;
     $552 = $val&65535;
     $553 = $551 | $552;
     HEAP32[((6909136 + 268|0))>>2] = $553;
     break;
    }
    case 1796:  {
     $554 = $val&65535;
     $555 = $554 << 16;
     $556 = $555 & 983040;
     $557 = HEAP32[((6909136 + 272|0))>>2]|0;
     $558 = $557 & 65535;
     $559 = $558 | $556;
     HEAP32[((6909136 + 272|0))>>2] = $559;
     break;
    }
    case 1798:  {
     $560 = HEAP32[((6909136 + 272|0))>>2]|0;
     $561 = $560 & 983040;
     $562 = $val&65535;
     $563 = $561 | $562;
     HEAP32[((6909136 + 272|0))>>2] = $563;
     break;
    }
    case 1800:  {
     $564 = $val&65535;
     $565 = $564 << 16;
     $566 = $565 & 983040;
     $567 = HEAP32[((6909136 + 276|0))>>2]|0;
     $568 = $567 & 65535;
     $569 = $568 | $566;
     HEAP32[((6909136 + 276|0))>>2] = $569;
     break;
    }
    case 1802:  {
     $570 = HEAP32[((6909136 + 276|0))>>2]|0;
     $571 = $570 & 983040;
     $572 = $val&65535;
     $573 = $571 | $572;
     HEAP32[((6909136 + 276|0))>>2] = $573;
     break;
    }
    case 1804:  {
     $574 = $val&65535;
     $575 = $574 << 16;
     $576 = $575 & 983040;
     $577 = HEAP32[((6909136 + 280|0))>>2]|0;
     $578 = $577 & 65535;
     $579 = $578 | $576;
     HEAP32[((6909136 + 280|0))>>2] = $579;
     break;
    }
    case 1806:  {
     $580 = HEAP32[((6909136 + 280|0))>>2]|0;
     $581 = $580 & 983040;
     $582 = $val&65535;
     $583 = $581 | $582;
     HEAP32[((6909136 + 280|0))>>2] = $583;
     break;
    }
    case 1808:  {
     $584 = $val&65535;
     $585 = $584 << 16;
     $586 = $585 & 983040;
     $587 = HEAP32[((6909136 + 284|0))>>2]|0;
     $588 = $587 & 65535;
     $589 = $588 | $586;
     HEAP32[((6909136 + 284|0))>>2] = $589;
     break;
    }
    case 1810:  {
     $590 = HEAP32[((6909136 + 284|0))>>2]|0;
     $591 = $590 & 983040;
     $592 = $val&65535;
     $593 = $591 | $592;
     HEAP32[((6909136 + 284|0))>>2] = $593;
     break;
    }
    case 1812:  {
     $594 = $val&65535;
     $595 = $594 << 16;
     $596 = $595 & 983040;
     $597 = HEAP32[((6909136 + 288|0))>>2]|0;
     $598 = $597 & 65535;
     $599 = $598 | $596;
     HEAP32[((6909136 + 288|0))>>2] = $599;
     break;
    }
    case 1814:  {
     $600 = HEAP32[((6909136 + 288|0))>>2]|0;
     $601 = $600 & 983040;
     $602 = $val&65535;
     $603 = $601 | $602;
     HEAP32[((6909136 + 288|0))>>2] = $603;
     break;
    }
    case 1816:  {
     $604 = $val&65535;
     $605 = $604 << 16;
     $606 = $605 & 983040;
     $607 = HEAP32[((6909136 + 292|0))>>2]|0;
     $608 = $607 & 65535;
     $609 = $608 | $606;
     HEAP32[((6909136 + 292|0))>>2] = $609;
     break;
    }
    case 1818:  {
     $610 = HEAP32[((6909136 + 292|0))>>2]|0;
     $611 = $610 & 983040;
     $612 = $val&65535;
     $613 = $611 | $612;
     HEAP32[((6909136 + 292|0))>>2] = $613;
     break;
    }
    case 1820:  {
     $614 = $val&65535;
     $615 = $614 << 16;
     $616 = $615 & 983040;
     $617 = HEAP32[((6909136 + 296|0))>>2]|0;
     $618 = $617 & 65535;
     $619 = $618 | $616;
     HEAP32[((6909136 + 296|0))>>2] = $619;
     break;
    }
    case 1822:  {
     $620 = HEAP32[((6909136 + 296|0))>>2]|0;
     $621 = $620 & 983040;
     $622 = $val&65535;
     $623 = $621 | $622;
     HEAP32[((6909136 + 296|0))>>2] = $623;
     break;
    }
    case 1824:  {
     $624 = $val&65535;
     $625 = $624 << 16;
     $626 = $625 & 983040;
     $627 = HEAP32[((6909136 + 300|0))>>2]|0;
     $628 = $627 & 65535;
     $629 = $628 | $626;
     HEAP32[((6909136 + 300|0))>>2] = $629;
     break;
    }
    case 1826:  {
     $630 = HEAP32[((6909136 + 300|0))>>2]|0;
     $631 = $630 & 983040;
     $632 = $val&65535;
     $633 = $631 | $632;
     HEAP32[((6909136 + 300|0))>>2] = $633;
     break;
    }
    case 1828:  {
     $634 = $val&65535;
     $635 = $634 << 16;
     $636 = $635 & 983040;
     $637 = HEAP32[((6909136 + 304|0))>>2]|0;
     $638 = $637 & 65535;
     $639 = $638 | $636;
     HEAP32[((6909136 + 304|0))>>2] = $639;
     break;
    }
    case 1830:  {
     $640 = HEAP32[((6909136 + 304|0))>>2]|0;
     $641 = $640 & 983040;
     $642 = $val&65535;
     $643 = $641 | $642;
     HEAP32[((6909136 + 304|0))>>2] = $643;
     break;
    }
    case 1832:  {
     $644 = $val&65535;
     $645 = $644 << 16;
     $646 = $645 & 983040;
     $647 = HEAP32[((6909136 + 308|0))>>2]|0;
     $648 = $647 & 65535;
     $649 = $648 | $646;
     HEAP32[((6909136 + 308|0))>>2] = $649;
     break;
    }
    case 1834:  {
     $650 = HEAP32[((6909136 + 308|0))>>2]|0;
     $651 = $650 & 983040;
     $652 = $val&65535;
     $653 = $651 | $652;
     HEAP32[((6909136 + 308|0))>>2] = $653;
     break;
    }
    case 1836:  {
     $654 = $val&65535;
     $655 = $654 << 16;
     $656 = $655 & 983040;
     $657 = HEAP32[((6909136 + 312|0))>>2]|0;
     $658 = $657 & 65535;
     $659 = $658 | $656;
     HEAP32[((6909136 + 312|0))>>2] = $659;
     break;
    }
    case 1838:  {
     $660 = HEAP32[((6909136 + 312|0))>>2]|0;
     $661 = $660 & 983040;
     $662 = $val&65535;
     $663 = $661 | $662;
     HEAP32[((6909136 + 312|0))>>2] = $663;
     break;
    }
    case 1840:  {
     $664 = $val&65535;
     $665 = $664 << 16;
     $666 = $665 & 983040;
     $667 = HEAP32[((6909136 + 316|0))>>2]|0;
     $668 = $667 & 65535;
     $669 = $668 | $666;
     HEAP32[((6909136 + 316|0))>>2] = $669;
     break;
    }
    case 1842:  {
     $670 = HEAP32[((6909136 + 316|0))>>2]|0;
     $671 = $670 & 983040;
     $672 = $val&65535;
     $673 = $671 | $672;
     HEAP32[((6909136 + 316|0))>>2] = $673;
     break;
    }
    case 1844:  {
     $674 = $val&65535;
     $675 = $674 << 16;
     $676 = $675 & 983040;
     $677 = HEAP32[((6909136 + 320|0))>>2]|0;
     $678 = $677 & 65535;
     $679 = $678 | $676;
     HEAP32[((6909136 + 320|0))>>2] = $679;
     break;
    }
    case 1846:  {
     $680 = HEAP32[((6909136 + 320|0))>>2]|0;
     $681 = $680 & 983040;
     $682 = $val&65535;
     $683 = $681 | $682;
     HEAP32[((6909136 + 320|0))>>2] = $683;
     break;
    }
    case 1848:  {
     $684 = $val&65535;
     $685 = $684 << 16;
     $686 = $685 & 983040;
     $687 = HEAP32[((6909136 + 324|0))>>2]|0;
     $688 = $687 & 65535;
     $689 = $688 | $686;
     HEAP32[((6909136 + 324|0))>>2] = $689;
     break;
    }
    case 1850:  {
     $690 = HEAP32[((6909136 + 324|0))>>2]|0;
     $691 = $690 & 983040;
     $692 = $val&65535;
     $693 = $691 | $692;
     HEAP32[((6909136 + 324|0))>>2] = $693;
     break;
    }
    case 1948:  {
     $694 = $val << 16 >> 16;
     HEAP32[((6909136 + 216|0))>>2] = $694;
     break;
    }
    case 1950:  {
     $695 = $val << 16 >> 16;
     HEAP32[((6909136 + 220|0))>>2] = $695;
     break;
    }
    case 1952:  {
     $696 = $val << 16 >> 16;
     HEAP32[((6909136 + 224|0))>>2] = $696;
     break;
    }
    case 1954:  {
     $697 = $val << 16 >> 16;
     HEAP32[((6909136 + 228|0))>>2] = $697;
     break;
    }
    case 1956:  {
     $698 = $val << 16 >> 16;
     HEAP32[((6909136 + 232|0))>>2] = $698;
     break;
    }
    case 1958:  {
     $699 = $val << 16 >> 16;
     HEAP32[((6909136 + 236|0))>>2] = $699;
     break;
    }
    case 1960:  {
     $700 = $val << 16 >> 16;
     HEAP32[((6909136 + 240|0))>>2] = $700;
     break;
    }
    case 1962:  {
     $701 = $val << 16 >> 16;
     HEAP32[((6909136 + 244|0))>>2] = $701;
     break;
    }
    case 1964:  {
     $702 = $val << 16 >> 16;
     HEAP32[((6909136 + 328|0))>>2] = $702;
     break;
    }
    case 1966:  {
     $703 = $val << 16 >> 16;
     HEAP32[((6909136 + 332|0))>>2] = $703;
     break;
    }
    case 386:  {
     _FModOn(16,24,$val);
     break;
    }
    case 1408:  {
     _FModOn(24,40,$val);
     break;
    }
    case 1410:  {
     _FModOn(40,48,$val);
     break;
    }
    case 388:  {
     _NoiseOn(0,16,$val);
     break;
    }
    case 390:  {
     _NoiseOn(16,24,$val);
     break;
    }
    case 1412:  {
     _NoiseOn(24,40,$val);
     break;
    }
    case 1414:  {
     _NoiseOn(40,48,$val);
     break;
    }
    case 392:  {
     _VolumeOn(0,16,$val,0);
     break;
    }
    case 394:  {
     _VolumeOn(16,24,$val,0);
     break;
    }
    case 1416:  {
     _VolumeOn(24,40,$val,0);
     break;
    }
    case 1418:  {
     _VolumeOn(40,48,$val,0);
     break;
    }
    case 400:  {
     _VolumeOn(0,16,$val,1);
     break;
    }
    case 402:  {
     _VolumeOn(16,24,$val,1);
     break;
    }
    case 1424:  {
     _VolumeOn(24,40,$val,1);
     break;
    }
    case 1426:  {
     _VolumeOn(40,48,$val,1);
     break;
    }
    case 396:  {
     _ReverbOn(0,16,$val,0);
     break;
    }
    case 398:  {
     _ReverbOn(16,24,$val,0);
     break;
    }
    case 1420:  {
     _ReverbOn(24,40,$val,0);
     break;
    }
    case 1422:  {
     _ReverbOn(40,48,$val,0);
     break;
    }
    case 404:  {
     _ReverbOn(0,16,$val,1);
     break;
    }
    case 406:  {
     _ReverbOn(16,24,$val,1);
     break;
    }
    case 1428:  {
     _ReverbOn(24,40,$val,1);
     break;
    }
    case 1430:  {
     _ReverbOn(40,48,$val,1);
     break;
    }
    case 740:  {
     $244 = $val&65535;
     $245 = $244 << 16;
     $246 = $245 & 983040;
     $247 = HEAP32[((6909136 + 40|0))>>2]|0;
     $248 = $247 & 65535;
     $249 = $248 | $246;
     HEAP32[((6909136 + 40|0))>>2] = $249;
     break;
    }
    case 742:  {
     $250 = HEAP32[((6909136 + 40|0))>>2]|0;
     $251 = $250 & 983040;
     $252 = $val&65535;
     $253 = $251 | $252;
     HEAP32[((6909136 + 40|0))>>2] = $253;
     break;
    }
    case 744:  {
     $254 = $val&65535;
     $255 = $254 << 16;
     $256 = $255 & 983040;
     $257 = HEAP32[((6909136 + 44|0))>>2]|0;
     $258 = $257 & 65535;
     $259 = $258 | $256;
     HEAP32[((6909136 + 44|0))>>2] = $259;
     break;
    }
    case 746:  {
     $260 = HEAP32[((6909136 + 44|0))>>2]|0;
     $261 = $260 & 983040;
     $262 = $val&65535;
     $263 = $261 | $262;
     HEAP32[((6909136 + 44|0))>>2] = $263;
     break;
    }
    case 748:  {
     $264 = $val&65535;
     $265 = $264 << 16;
     $266 = $265 & 983040;
     $267 = HEAP32[((6909136 + 80|0))>>2]|0;
     $268 = $267 & 65535;
     $269 = $268 | $266;
     HEAP32[((6909136 + 80|0))>>2] = $269;
     break;
    }
    case 750:  {
     $270 = HEAP32[((6909136 + 80|0))>>2]|0;
     $271 = $270 & 983040;
     $272 = $val&65535;
     $273 = $271 | $272;
     HEAP32[((6909136 + 80|0))>>2] = $273;
     break;
    }
    case 752:  {
     $274 = $val&65535;
     $275 = $274 << 16;
     $276 = $275 & 983040;
     $277 = HEAP32[((6909136 + 84|0))>>2]|0;
     $278 = $277 & 65535;
     $279 = $278 | $276;
     HEAP32[((6909136 + 84|0))>>2] = $279;
     break;
    }
    case 754:  {
     $280 = HEAP32[((6909136 + 84|0))>>2]|0;
     $281 = $280 & 983040;
     $282 = $val&65535;
     $283 = $281 | $282;
     HEAP32[((6909136 + 84|0))>>2] = $283;
     break;
    }
    case 756:  {
     $284 = $val&65535;
     $285 = $284 << 16;
     $286 = $285 & 983040;
     $287 = HEAP32[((6909136 + 88|0))>>2]|0;
     $288 = $287 & 65535;
     $289 = $288 | $286;
     HEAP32[((6909136 + 88|0))>>2] = $289;
     break;
    }
    case 758:  {
     $290 = HEAP32[((6909136 + 88|0))>>2]|0;
     $291 = $290 & 983040;
     $292 = $val&65535;
     $293 = $291 | $292;
     HEAP32[((6909136 + 88|0))>>2] = $293;
     break;
    }
    case 760:  {
     $294 = $val&65535;
     $295 = $294 << 16;
     $296 = $295 & 983040;
     $297 = HEAP32[((6909136 + 92|0))>>2]|0;
     $298 = $297 & 65535;
     $299 = $298 | $296;
     HEAP32[((6909136 + 92|0))>>2] = $299;
     break;
    }
    case 762:  {
     $300 = HEAP32[((6909136 + 92|0))>>2]|0;
     $301 = $300 & 983040;
     $302 = $val&65535;
     $303 = $301 | $302;
     HEAP32[((6909136 + 92|0))>>2] = $303;
     break;
    }
    case 764:  {
     $304 = $val&65535;
     $305 = $304 << 16;
     $306 = $305 & 983040;
     $307 = HEAP32[((6909136 + 96|0))>>2]|0;
     $308 = $307 & 65535;
     $309 = $308 | $306;
     HEAP32[((6909136 + 96|0))>>2] = $309;
     break;
    }
    case 766:  {
     $310 = HEAP32[((6909136 + 96|0))>>2]|0;
     $311 = $310 & 983040;
     $312 = $val&65535;
     $313 = $311 | $312;
     HEAP32[((6909136 + 96|0))>>2] = $313;
     break;
    }
    case 768:  {
     $314 = $val&65535;
     $315 = $314 << 16;
     $316 = $315 & 983040;
     $317 = HEAP32[((6909136 + 100|0))>>2]|0;
     $318 = $317 & 65535;
     $319 = $318 | $316;
     HEAP32[((6909136 + 100|0))>>2] = $319;
     break;
    }
    case 770:  {
     $320 = HEAP32[((6909136 + 100|0))>>2]|0;
     $321 = $320 & 983040;
     $322 = $val&65535;
     $323 = $321 | $322;
     HEAP32[((6909136 + 100|0))>>2] = $323;
     break;
    }
    case 772:  {
     $324 = $val&65535;
     $325 = $324 << 16;
     $326 = $325 & 983040;
     $327 = HEAP32[((6909136 + 104|0))>>2]|0;
     $328 = $327 & 65535;
     $329 = $328 | $326;
     HEAP32[((6909136 + 104|0))>>2] = $329;
     break;
    }
    case 774:  {
     $330 = HEAP32[((6909136 + 104|0))>>2]|0;
     $331 = $330 & 983040;
     $332 = $val&65535;
     $333 = $331 | $332;
     HEAP32[((6909136 + 104|0))>>2] = $333;
     break;
    }
    case 776:  {
     $334 = $val&65535;
     $335 = $334 << 16;
     $336 = $335 & 983040;
     $337 = HEAP32[((6909136 + 108|0))>>2]|0;
     $338 = $337 & 65535;
     $339 = $338 | $336;
     HEAP32[((6909136 + 108|0))>>2] = $339;
     break;
    }
    case 778:  {
     $340 = HEAP32[((6909136 + 108|0))>>2]|0;
     $341 = $340 & 983040;
     $342 = $val&65535;
     $343 = $341 | $342;
     HEAP32[((6909136 + 108|0))>>2] = $343;
     break;
    }
    case 780:  {
     $344 = $val&65535;
     $345 = $344 << 16;
     $346 = $345 & 983040;
     $347 = HEAP32[((6909136 + 112|0))>>2]|0;
     $348 = $347 & 65535;
     $349 = $348 | $346;
     HEAP32[((6909136 + 112|0))>>2] = $349;
     break;
    }
    case 782:  {
     $350 = HEAP32[((6909136 + 112|0))>>2]|0;
     $351 = $350 & 983040;
     $352 = $val&65535;
     $353 = $351 | $352;
     HEAP32[((6909136 + 112|0))>>2] = $353;
     break;
    }
    case 784:  {
     $354 = $val&65535;
     $355 = $354 << 16;
     $356 = $355 & 983040;
     $357 = HEAP32[((6909136 + 116|0))>>2]|0;
     $358 = $357 & 65535;
     $359 = $358 | $356;
     HEAP32[((6909136 + 116|0))>>2] = $359;
     break;
    }
    case 786:  {
     $360 = HEAP32[((6909136 + 116|0))>>2]|0;
     $361 = $360 & 983040;
     $362 = $val&65535;
     $363 = $361 | $362;
     HEAP32[((6909136 + 116|0))>>2] = $363;
     break;
    }
    case 788:  {
     $364 = $val&65535;
     $365 = $364 << 16;
     $366 = $365 & 983040;
     $367 = HEAP32[((6909136 + 120|0))>>2]|0;
     $368 = $367 & 65535;
     $369 = $368 | $366;
     HEAP32[((6909136 + 120|0))>>2] = $369;
     break;
    }
    case 790:  {
     $370 = HEAP32[((6909136 + 120|0))>>2]|0;
     $371 = $370 & 983040;
     $372 = $val&65535;
     $373 = $371 | $372;
     HEAP32[((6909136 + 120|0))>>2] = $373;
     break;
    }
    case 792:  {
     $374 = $val&65535;
     $375 = $374 << 16;
     $376 = $375 & 983040;
     $377 = HEAP32[((6909136 + 124|0))>>2]|0;
     $378 = $377 & 65535;
     $379 = $378 | $376;
     HEAP32[((6909136 + 124|0))>>2] = $379;
     break;
    }
    case 794:  {
     $380 = HEAP32[((6909136 + 124|0))>>2]|0;
     $381 = $380 & 983040;
     $382 = $val&65535;
     $383 = $381 | $382;
     HEAP32[((6909136 + 124|0))>>2] = $383;
     break;
    }
    case 796:  {
     $384 = $val&65535;
     $385 = $384 << 16;
     $386 = $385 & 983040;
     $387 = HEAP32[((6909136 + 128|0))>>2]|0;
     $388 = $387 & 65535;
     $389 = $388 | $386;
     HEAP32[((6909136 + 128|0))>>2] = $389;
     break;
    }
    case 798:  {
     $390 = HEAP32[((6909136 + 128|0))>>2]|0;
     $391 = $390 & 983040;
     $392 = $val&65535;
     $393 = $391 | $392;
     HEAP32[((6909136 + 128|0))>>2] = $393;
     break;
    }
    case 800:  {
     $394 = $val&65535;
     $395 = $394 << 16;
     $396 = $395 & 983040;
     $397 = HEAP32[((6909136 + 132|0))>>2]|0;
     $398 = $397 & 65535;
     $399 = $398 | $396;
     HEAP32[((6909136 + 132|0))>>2] = $399;
     break;
    }
    case 802:  {
     $400 = HEAP32[((6909136 + 132|0))>>2]|0;
     $401 = $400 & 983040;
     $402 = $val&65535;
     $403 = $401 | $402;
     HEAP32[((6909136 + 132|0))>>2] = $403;
     break;
    }
    case 804:  {
     $404 = $val&65535;
     $405 = $404 << 16;
     $406 = $405 & 983040;
     $407 = HEAP32[((6909136 + 136|0))>>2]|0;
     $408 = $407 & 65535;
     $409 = $408 | $406;
     HEAP32[((6909136 + 136|0))>>2] = $409;
     break;
    }
    case 806:  {
     $410 = HEAP32[((6909136 + 136|0))>>2]|0;
     $411 = $410 & 983040;
     $412 = $val&65535;
     $413 = $411 | $412;
     HEAP32[((6909136 + 136|0))>>2] = $413;
     break;
    }
    case 808:  {
     $414 = $val&65535;
     $415 = $414 << 16;
     $416 = $415 & 983040;
     $417 = HEAP32[((6909136 + 140|0))>>2]|0;
     $418 = $417 & 65535;
     $419 = $418 | $416;
     HEAP32[((6909136 + 140|0))>>2] = $419;
     break;
    }
    case 810:  {
     $420 = HEAP32[((6909136 + 140|0))>>2]|0;
     $421 = $420 & 983040;
     $422 = $val&65535;
     $423 = $421 | $422;
     HEAP32[((6909136 + 140|0))>>2] = $423;
     break;
    }
    case 812:  {
     $424 = $val&65535;
     $425 = $424 << 16;
     $426 = $425 & 983040;
     $427 = HEAP32[((6909136 + 144|0))>>2]|0;
     $428 = $427 & 65535;
     $429 = $428 | $426;
     HEAP32[((6909136 + 144|0))>>2] = $429;
     break;
    }
    case 814:  {
     $430 = HEAP32[((6909136 + 144|0))>>2]|0;
     $431 = $430 & 983040;
     $432 = $val&65535;
     $433 = $431 | $432;
     HEAP32[((6909136 + 144|0))>>2] = $433;
     break;
    }
    case 816:  {
     $434 = $val&65535;
     $435 = $434 << 16;
     $436 = $435 & 983040;
     $437 = HEAP32[((6909136 + 148|0))>>2]|0;
     $438 = $437 & 65535;
     $439 = $438 | $436;
     HEAP32[((6909136 + 148|0))>>2] = $439;
     break;
    }
    case 818:  {
     $440 = HEAP32[((6909136 + 148|0))>>2]|0;
     $441 = $440 & 983040;
     $442 = $val&65535;
     $443 = $441 | $442;
     HEAP32[((6909136 + 148|0))>>2] = $443;
     break;
    }
    case 820:  {
     $444 = $val&65535;
     $445 = $444 << 16;
     $446 = $445 & 983040;
     $447 = HEAP32[((6909136 + 152|0))>>2]|0;
     $448 = $447 & 65535;
     $449 = $448 | $446;
     HEAP32[((6909136 + 152|0))>>2] = $449;
     break;
    }
    case 822:  {
     $450 = HEAP32[((6909136 + 152|0))>>2]|0;
     $451 = $450 & 983040;
     $452 = $val&65535;
     $453 = $451 | $452;
     HEAP32[((6909136 + 152|0))>>2] = $453;
     break;
    }
    case 824:  {
     $454 = $val&65535;
     $455 = $454 << 16;
     $456 = $455 & 983040;
     $457 = HEAP32[((6909136 + 156|0))>>2]|0;
     $458 = $457 & 65535;
     $459 = $458 | $456;
     HEAP32[((6909136 + 156|0))>>2] = $459;
     break;
    }
    case 1437:  {
     $231 = HEAP32[((6909512 + 4|0))>>2]|0;
     $232 = $231 & 983040;
     $233 = $val&65535;
     $234 = $232 | $233;
     HEAP32[((6909512 + 4|0))>>2] = $234;
     $235 = HEAP32[6884432>>2]|0;
     $236 = $234 << 1;
     $237 = (($235) + ($236)|0);
     HEAP32[((6909472 + 4|0))>>2] = $237;
     break;
    }
    case 1892:  {
     $238 = $val&65535;
     HEAP32[((6909136 + 12|0))>>2] = $238;
     break;
    }
    case 1894:  {
     $239 = $val&65535;
     HEAP32[((6909136 + 16|0))>>2] = $239;
     break;
    }
    case 1932:  {
     $240 = $val&65535;
     HEAP32[((6909136 + 180|0))>>2] = $240;
     break;
    }
    case 1934:  {
     $241 = $val&65535;
     HEAP32[((6909136 + 184|0))>>2] = $241;
     break;
    }
    case 416:  {
     _SoundOn(0,16,$val);
     break;
    }
    case 418:  {
     _SoundOn(16,24,$val);
     break;
    }
    case 1440:  {
     _SoundOn(24,40,$val);
     break;
    }
    case 1442:  {
     _SoundOn(40,48,$val);
     break;
    }
    case 420:  {
     _SoundOff(0,16,$val);
     break;
    }
    case 422:  {
     _SoundOff(16,24,$val);
     break;
    }
    case 1444:  {
     _SoundOff(24,40,$val);
     break;
    }
    case 1446:  {
     _SoundOff(40,48,$val);
     break;
    }
    case 834: case 832:  {
     $242 = ($val<<16>>16)==(0);
     if (!($242)) {
      HEAP32[6909488>>2] = 0;
     }
     break;
    }
    case 1858: case 1856:  {
     $243 = ($val<<16>>16)==(0);
     if (!($243)) {
      HEAP32[((6909488 + 4|0))>>2] = 0;
     }
     break;
    }
    case 384:  {
     _FModOn(0,16,$val);
     break;
    }
    case 736:  {
     $178 = $val&65535;
     $179 = $178 << 16;
     $180 = $179 & 983040;
     $181 = HEAP32[6909528>>2]|0;
     $182 = $181 & 65535;
     $183 = $182 | $180;
     HEAP32[6909528>>2] = $183;
     _SetReverbAddr(0);
     break;
    }
    case 738:  {
     $184 = HEAP32[6909528>>2]|0;
     $185 = $184 & 983040;
     $186 = $val&65535;
     $187 = $185 | $186;
     HEAP32[6909528>>2] = $187;
     _SetReverbAddr(0);
     break;
    }
    case 828:  {
     $188 = $val&65535;
     $189 = $188 << 16;
     $190 = $189 & 983040;
     $191 = $190 | 65535;
     HEAP32[6909536>>2] = $191;
     HEAP32[((6909136 + 4|0))>>2] = $191;
     break;
    }
    case 1852:  {
     $192 = $val&65535;
     $193 = $192 << 16;
     $194 = $193 & 983040;
     $195 = $194 | 65535;
     HEAP32[((6909536 + 4|0))>>2] = $195;
     HEAP32[((6909136 + 172|0))>>2] = $195;
     break;
    }
    case 1760:  {
     $196 = $val&65535;
     $197 = $196 << 16;
     $198 = $197 & 983040;
     $199 = HEAP32[((6909528 + 4|0))>>2]|0;
     $200 = $199 & 65535;
     $201 = $200 | $198;
     HEAP32[((6909528 + 4|0))>>2] = $201;
     _SetReverbAddr(1);
     break;
    }
    case 1762:  {
     $202 = HEAP32[((6909528 + 4|0))>>2]|0;
     $203 = $202 & 983040;
     $204 = $val&65535;
     $205 = $203 | $204;
     HEAP32[((6909528 + 4|0))>>2] = $205;
     _SetReverbAddr(1);
     break;
    }
    case 1436:  {
     $222 = $val&65535;
     $223 = $222 << 16;
     $224 = $223 & 983040;
     $225 = HEAP32[((6909512 + 4|0))>>2]|0;
     $226 = $225 & 65535;
     $227 = $226 | $224;
     HEAP32[((6909512 + 4|0))>>2] = $227;
     $228 = HEAP32[6884432>>2]|0;
     $229 = $227 << 1;
     $230 = (($228) + ($229)|0);
     HEAP32[((6909472 + 4|0))>>2] = $230;
     break;
    }
    case 413:  {
     $215 = HEAP32[6909512>>2]|0;
     $216 = $215 & 983040;
     $217 = $val&65535;
     $218 = $216 | $217;
     HEAP32[6909512>>2] = $218;
     $219 = HEAP32[6884432>>2]|0;
     $220 = $218 << 1;
     $221 = (($219) + ($220)|0);
     HEAP32[6909472>>2] = $221;
     break;
    }
    case 412:  {
     $206 = $val&65535;
     $207 = $206 << 16;
     $208 = $207 & 983040;
     $209 = HEAP32[6909512>>2]|0;
     $210 = $209 & 65535;
     $211 = $210 | $208;
     HEAP32[6909512>>2] = $211;
     $212 = HEAP32[6884432>>2]|0;
     $213 = $211 << 1;
     $214 = (($212) + ($213)|0);
     HEAP32[6909472>>2] = $214;
     break;
    }
    default: {
    }
    }
   } while(0);
   HEAP32[4787272>>2] = 0;
   return;
  }
 }
 $6 = $reg >>> 4;
 $7 = $6 & 31;
 $8 = ($0>>>0)>(1023);
 $9 = (($7) + 24)|0;
 $$16 = $8 ? $9 : $7;
 $10 = $reg & 15;
 L188: do {
  switch ($10|0) {
  case 8:  {
   $48 = $val&65535;
   $$lobit = $48 >>> 15;
   $49 = ((6884440 + (($$16*504)|0)|0) + 468|0);
   HEAP32[$49>>2] = $$lobit;
   $50 = $48 & 16384;
   $51 = ($50|0)==(0);
   $$lobit12 = $50 >>> 14;
   $52 = $$lobit12 ^ 1;
   $53 = ((6884440 + (($$16*504)|0)|0) + 472|0);
   HEAP32[$53>>2] = $52;
   $54 = $48 >>> 6;
   $55 = $54 & 127;
   $56 = ((6884440 + (($$16*504)|0)|0) + 476|0);
   HEAP32[$56>>2] = $55;
   $57 = $48 >>> 5;
   $$lobit13 = $57 & 1;
   $58 = ((6884440 + (($$16*504)|0)|0) + 480|0);
   HEAP32[$58>>2] = $$lobit13;
   $59 = $48 & 31;
   $60 = ((6884440 + (($$16*504)|0)|0) + 484|0);
   HEAP32[$60>>2] = $59;
   $61 = HEAP32[4787264>>2]|0;
   $62 = ($61|0)==(0);
   if (!($62)) {
    $63 = ((6884440 + (($$16*504)|0)|0) + 408|0);
    HEAP32[$63>>2] = $$lobit;
    $64 = ((6884440 + (($$16*504)|0)|0) + 420|0);
    HEAP32[$64>>2] = $$lobit13;
    $65 = $55 >>> 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $lx2$1 = 0;
    } else {
     $67 = ($55>>>0)<(88);
     if ($67) {
      $68 = 441 << $65;
      $69 = (($68>>>0) / 10000)&-1;
      $lx2$0 = $69;
     } else {
      $70 = 1 << $65;
      $71 = (($70>>>0) / 10000)&-1;
      $72 = ($71*441)|0;
      $lx2$0 = $72;
     }
     $73 = ($lx2$0|0)==(0);
     $$lx2$0 = $73 ? 1 : $lx2$0;
     $lx2$1 = $$lx2$0;
    }
    $74 = ((6884440 + (($$16*504)|0)|0) + 416|0);
    HEAP32[$74>>2] = $lx2$1;
    $75 = ((6884440 + (($$16*504)|0)|0) + 424|0);
    HEAP32[$75>>2] = $59;
    $76 = ($59|0)==(0);
    if ($76) {
     $lx2$3 = 0;
    } else {
     $77 = ($59>>>0)<(22);
     if ($77) {
      $78 = 437 << $59;
      $79 = (($78>>>0) / 10000)&-1;
      $lx2$2 = $79;
     } else {
      $80 = 1 << $59;
      $81 = (($80>>>0) / 10000)&-1;
      $82 = ($81*437)|0;
      $lx2$2 = $82;
     }
     $83 = ($lx2$2|0)==(0);
     $$lx2$2 = $83 ? 1 : $lx2$2;
     $lx2$3 = $$lx2$2;
    }
    $84 = ((6884440 + (($$16*504)|0)|0) + 428|0);
    HEAP32[$84>>2] = $lx2$3;
    $85 = ((6884440 + (($$16*504)|0)|0) + 412|0);
    if ($51) {
     HEAP32[$85>>2] = 1;
     break L188;
    } else {
     HEAP32[$85>>2] = -1;
     break L188;
    }
   }
   break;
  }
  case 0:  {
   $11 = $$16&255;
   _SetVolumeL($11,$val);
   break;
  }
  case 2:  {
   $12 = $$16&255;
   _SetVolumeR($12,$val);
   break;
  }
  case 4:  {
   _SetPitch($$16,$val);
   break;
  }
  case 6:  {
   $13 = $val&65535;
   $$lobit14 = $13 >>> 15;
   $14 = ((6884440 + (($$16*504)|0)|0) + 452|0);
   HEAP32[$14>>2] = $$lobit14;
   $15 = $13 >>> 8;
   $16 = $15 & 127;
   $17 = ((6884440 + (($$16*504)|0)|0) + 456|0);
   HEAP32[$17>>2] = $16;
   $18 = $13 >>> 4;
   $19 = $18 & 15;
   $20 = ((6884440 + (($$16*504)|0)|0) + 460|0);
   HEAP32[$20>>2] = $19;
   $21 = $13 & 15;
   $22 = ((6884440 + (($$16*504)|0)|0) + 464|0);
   HEAP32[$22>>2] = $21;
   $23 = HEAP32[4787264>>2]|0;
   $24 = ($23|0)==(0);
   if (!($24)) {
    $25 = ((6884440 + (($$16*504)|0)|0) + 392|0);
    HEAP32[$25>>2] = $$lobit14;
    $26 = $16 >>> 2;
    $27 = ($26|0)==(0);
    if ($27) {
     $lx$1 = 0;
    } else {
     $28 = ($16>>>0)<(88);
     if ($28) {
      $29 = 494 << $26;
      $30 = (($29>>>0) / 10000)&-1;
      $lx$0 = $30;
     } else {
      $31 = 1 << $26;
      $32 = (($31>>>0) / 10000)&-1;
      $33 = ($32*494)|0;
      $lx$0 = $33;
     }
     $34 = ($lx$0|0)==(0);
     $$lx$0 = $34 ? 1 : $lx$0;
     $lx$1 = $$lx$0;
    }
    $35 = ((6884440 + (($$16*504)|0)|0) + 396|0);
    HEAP32[$35>>2] = $lx$1;
    $36 = $21 << 10;
    $37 = (($36>>>0) / 15)&-1;
    $38 = ((6884440 + (($$16*504)|0)|0) + 404|0);
    HEAP32[$38>>2] = $37;
    $39 = ($19|0)==(0);
    if ($39) {
     $lx$2 = 0;
    } else {
     $40 = 572 << $19;
     $41 = (($40|0) / 10000)&-1;
     $$off15 = (($40) + 9999)|0;
     $42 = ($$off15>>>0)>(19998);
     $$ = $42 ? $41 : 1;
     $lx$2 = $$;
    }
    $43 = HEAP32[$38>>2]|0;
    $44 = (1024 - ($43))|0;
    $45 = Math_imul($44, $lx$2)|0;
    $46 = $45 >>> 10;
    $47 = ((6884440 + (($$16*504)|0)|0) + 400|0);
    HEAP32[$47>>2] = $46;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 HEAP32[4787272>>2] = 0;
 return;
}
function _SetVolumeL($ch,$vol) {
 $ch = $ch|0;
 $vol = $vol|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $vol << 16 >> 16;
 $1 = $ch&255;
 $2 = ((6884440 + (($1*504)|0)|0) + 340|0);
 HEAP32[$2>>2] = $0;
 $3 = $0 & 32768;
 $4 = ($3|0)==(0);
 if ($4) {
  $24 = $0 & 16384;
  $25 = ($24|0)==(0);
  if ($25) {
   $$1 = $vol;
  } else {
   $26 = $0 & 16383;
   $27 = $26 ^ 16383;
   $28 = $27&65535;
   $$1 = $28;
  }
 } else {
  $5 = $0 & 8192;
  $6 = $5&65535;
  $7 = ($6&65535) >>> 12;
  $8 = $7 ^ 2;
  $9 = (($8) + -1)<<16>>16;
  $10 = $0 & 4096;
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = $vol;
  } else {
   $12 = $0 ^ 65535;
   $13 = $12&65535;
   $$0 = $13;
  }
  $14 = $$0&65535;
  $15 = $14 & 127;
  $16 = (($15) + 1)|0;
  $17 = $16 >>> 1;
  $18 = $9 << 16 >> 16;
  $19 = $18 << 1;
  $20 = (($17|0) / ($19|0))&-1;
  $21 = (($17) + ($20))|0;
  $22 = $21 << 7;
  $23 = $22&65535;
  $$1 = $23;
 }
 $29 = $$1&65535;
 $30 = $29 & 16383;
 $31 = ((6884440 + (($1*504)|0)|0) + 336|0);
 HEAP32[$31>>2] = $30;
 return;
}
function _SetVolumeR($ch,$vol) {
 $ch = $ch|0;
 $vol = $vol|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $vol << 16 >> 16;
 $1 = $ch&255;
 $2 = ((6884440 + (($1*504)|0)|0) + 356|0);
 HEAP32[$2>>2] = $0;
 $3 = $0 & 32768;
 $4 = ($3|0)==(0);
 if ($4) {
  $24 = $0 & 16384;
  $25 = ($24|0)==(0);
  if ($25) {
   $$1 = $vol;
  } else {
   $26 = $0 & 16383;
   $27 = $26 ^ 16383;
   $28 = $27&65535;
   $$1 = $28;
  }
 } else {
  $5 = $0 & 8192;
  $6 = $5&65535;
  $7 = ($6&65535) >>> 12;
  $8 = $7 ^ 2;
  $9 = (($8) + -1)<<16>>16;
  $10 = $0 & 4096;
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = $vol;
  } else {
   $12 = $0 ^ 65535;
   $13 = $12&65535;
   $$0 = $13;
  }
  $14 = $$0&65535;
  $15 = $14 & 127;
  $16 = (($15) + 1)|0;
  $17 = $16 >>> 1;
  $18 = $9 << 16 >> 16;
  $19 = $18 << 1;
  $20 = (($17|0) / ($19|0))&-1;
  $21 = (($17) + ($20))|0;
  $22 = $21 << 7;
  $23 = $22&65535;
  $$1 = $23;
 }
 $29 = $$1&65535;
 $30 = $29 & 16383;
 $31 = ((6884440 + (($1*504)|0)|0) + 352|0);
 HEAP32[$31>>2] = $30;
 return;
}
function _SetPitch($ch,$val) {
 $ch = $ch|0;
 $val = $val|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $NP$0 = 0, $phitmp = 0.0, $phitmp1 = 0.0, $phitmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($val&65535)>(16383);
 if ($0) {
  $NP$0 = 17831;
 } else {
  $1 = $val&65535;
  $phitmp = (+($1|0));
  $phitmp1 = $phitmp * 1.08843537414966;
  $phitmp2 = (~~(($phitmp1))>>>0);
  $NP$0 = $phitmp2;
 }
 $2 = ((6884440 + (($ch*504)|0)|0) + 360|0);
 HEAP32[$2>>2] = $NP$0;
 $3 = ($NP$0*44100)|0;
 $4 = (($3|0) / 4096)&-1;
 $5 = ($4|0)<(1);
 $$ = $5 ? 1 : $4;
 $6 = ((6884440 + (($ch*504)|0)|0) + 328|0);
 HEAP32[$6>>2] = $$;
 return;
}
function _SetReverbAddr($core) {
 $core = $core|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (6909528 + ($core<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (6909136 + (($core*168)|0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 $5 = ($1|0)<(10240);
 if ($5) {
  $6 = ((6909136 + (($core*168)|0)|0) + 8|0);
  HEAP32[$6>>2] = 0;
  HEAP32[$2>>2] = 0;
  return;
 } else {
  HEAP32[$2>>2] = $1;
  $7 = ((6909136 + (($core*168)|0)|0) + 8|0);
  HEAP32[$7>>2] = $1;
  return;
 }
}
function _SoundOn($start,$end,$val) {
 $start = $start|0;
 $end = $end|0;
 $val = $val|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$02 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)<($end|0);
 if ($0) {
  $$01 = $val;$ch$02 = $start;
 } else {
  return;
 }
 while(1) {
  $1 = $$01 & 1;
  $2 = ($1<<16>>16)==(0);
  if (!($2)) {
   $3 = ((6884440 + (($ch$02*504)|0)|0) + 276|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = ((6884440 + (($ch$02*504)|0)|0) + 344|0);
    HEAP32[$6>>2] = 0;
    $7 = (6884440 + (($ch$02*504)|0)|0);
    HEAP32[$7>>2] = 1;
    $8 = (($ch$02|0) % 24)&-1;
    $9 = 1 << $8;
    $10 = (($ch$02|0) / 24)&-1;
    $11 = (6909480 + ($10<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 | $9;
    HEAP32[$11>>2] = $13;
   }
  }
  $14 = (($ch$02) + 1)|0;
  $15 = ($$01&65535) >>> 1;
  $exitcond = ($14|0)==($end|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $15;$ch$02 = $14;
  }
 }
 return;
}
function _SoundOff($start,$end,$val) {
 $start = $start|0;
 $end = $end|0;
 $val = $val|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ch$02 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)<($end|0);
 if ($0) {
  $$01 = $val;$ch$02 = $start;
 } else {
  return;
 }
 while(1) {
  $1 = $$01 & 1;
  $2 = ($1<<16>>16)==(0);
  if (!($2)) {
   $3 = ((6884440 + (($ch$02*504)|0)|0) + 304|0);
   HEAP32[$3>>2] = 1;
  }
  $4 = (($ch$02) + 1)|0;
  $5 = ($$01&65535) >>> 1;
  $exitcond = ($4|0)==($end|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $5;$ch$02 = $4;
  }
 }
 return;
}
function _FModOn($start,$end,$val) {
 $start = $start|0;
 $end = $end|0;
 $val = $val|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$02 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)<($end|0);
 if ($0) {
  $$01 = $val;$ch$02 = $start;
 } else {
  return;
 }
 while(1) {
  $1 = $$01 & 1;
  $2 = ($1<<16>>16)==(0);
  if ($2) {
   $7 = ((6884440 + (($ch$02*504)|0)|0) + 384|0);
   HEAP32[$7>>2] = 0;
  } else {
   $3 = ($ch$02|0)>(0);
   if ($3) {
    $4 = ((6884440 + (($ch$02*504)|0)|0) + 384|0);
    HEAP32[$4>>2] = 1;
    $5 = (($ch$02) + -1)|0;
    $6 = ((6884440 + (($5*504)|0)|0) + 384|0);
    HEAP32[$6>>2] = 2;
   }
  }
  $8 = (($ch$02) + 1)|0;
  $9 = ($$01&65535) >>> 1;
  $exitcond = ($8|0)==($end|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $9;$ch$02 = $8;
  }
 }
 return;
}
function _NoiseOn($start,$end,$val) {
 $start = $start|0;
 $end = $end|0;
 $val = $val|0;
 var $$ = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ch$02 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)<($end|0);
 if ($0) {
  $$01 = $val;$ch$02 = $start;
 } else {
  return;
 }
 while(1) {
  $1 = $$01 & 1;
  $2 = ((6884440 + (($ch$02*504)|0)|0) + 380|0);
  $$ = $1&65535;
  HEAP32[$2>>2] = $$;
  $3 = (($ch$02) + 1)|0;
  $4 = ($$01&65535) >>> 1;
  $exitcond = ($3|0)==($end|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $4;$ch$02 = $3;
  }
 }
 return;
}
function _VolumeOn($start,$end,$val,$iRight) {
 $start = $start|0;
 $end = $end|0;
 $val = $val|0;
 $iRight = $iRight|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$02 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)<($end|0);
 if (!($0)) {
  return;
 }
 $1 = ($iRight|0)!=(0);
 $$01 = $val;$ch$02 = $start;
 while(1) {
  $2 = $$01 & 1;
  $3 = ($2<<16>>16)==(0);
  do {
   if ($3) {
    if ($1) {
     $6 = ((6884440 + (($ch$02*504)|0)|0) + 324|0);
     HEAP32[$6>>2] = 0;
     break;
    } else {
     $7 = ((6884440 + (($ch$02*504)|0)|0) + 320|0);
     HEAP32[$7>>2] = 0;
     break;
    }
   } else {
    if ($1) {
     $4 = ((6884440 + (($ch$02*504)|0)|0) + 324|0);
     HEAP32[$4>>2] = 1;
     break;
    } else {
     $5 = ((6884440 + (($ch$02*504)|0)|0) + 320|0);
     HEAP32[$5>>2] = 1;
     break;
    }
   }
  } while(0);
  $8 = (($ch$02) + 1)|0;
  $9 = ($$01&65535) >>> 1;
  $exitcond = ($8|0)==($end|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $9;$ch$02 = $8;
  }
 }
 return;
}
function _ReverbOn($start,$end,$val,$iRight) {
 $start = $start|0;
 $end = $end|0;
 $val = $val|0;
 $iRight = $iRight|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$02 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)<($end|0);
 if (!($0)) {
  return;
 }
 $1 = ($iRight|0)!=(0);
 $$01 = $val;$ch$02 = $start;
 while(1) {
  $2 = $$01 & 1;
  $3 = ($2<<16>>16)==(0);
  do {
   if ($3) {
    if ($1) {
     $6 = ((6884440 + (($ch$02*504)|0)|0) + 316|0);
     HEAP32[$6>>2] = 0;
     break;
    } else {
     $7 = ((6884440 + (($ch$02*504)|0)|0) + 312|0);
     HEAP32[$7>>2] = 0;
     break;
    }
   } else {
    if ($1) {
     $4 = ((6884440 + (($ch$02*504)|0)|0) + 316|0);
     HEAP32[$4>>2] = 1;
     break;
    } else {
     $5 = ((6884440 + (($ch$02*504)|0)|0) + 312|0);
     HEAP32[$5>>2] = 1;
     break;
    }
   }
  } while(0);
  $8 = (($ch$02) + 1)|0;
  $9 = ($$01&65535) >>> 1;
  $exitcond = ($8|0)==($end|0);
  if ($exitcond) {
   break;
  } else {
   $$01 = $9;$ch$02 = $8;
  }
 }
 return;
}
function _SPU2read($reg) {
 $reg = $reg|0;
 var $$ = 0, $$0 = 0, $$13 = 0, $$16 = 0, $$17 = 0, $$8 = 0, $$off = 0, $$off10 = 0, $$off9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $or$cond = 0, $or$cond12 = 0, $or$cond15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $reg & 65535;
 HEAP32[4787272>>2] = 0;
 $1 = ($0>>>0)<(384);
 $$off = (($0) + -1024)|0;
 $2 = ($$off>>>0)<(384);
 $or$cond = $1 | $2;
 $3 = $reg & 15;
 $cond = ($3|0)==(10);
 $or$cond12 = $or$cond & $cond;
 if ($or$cond12) {
  $4 = $reg >>> 4;
  $5 = $4 & 31;
  $6 = ($0>>>0)>(1023);
  $7 = (($5) + 24)|0;
  $$13 = $6 ? $7 : $5;
  $8 = (6884440 + (($$13*504)|0)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $$0 = 1;
   return ($$0|0);
  }
  $11 = ((6884440 + (($$13*504)|0)|0) + 492|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = ((6884440 + (($$13*504)|0)|0) + 488|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = 1;
    return ($$0|0);
   }
  }
  $17 = ((6884440 + (($$13*504)|0)|0) + 488|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 >>> 16;
  $20 = $19&65535;
  $$0 = $20;
  return ($$0|0);
 }
 $$off9 = (($0) + -448)|0;
 $21 = ($$off9>>>0)<(288);
 $$off10 = (($0) + -1472)|0;
 $22 = ($$off10>>>0)<(288);
 $or$cond15 = $21 | $22;
 do {
  if ($or$cond15) {
   $23 = ($0>>>0)>(1023);
   $$16 = $23 ? 24 : 0;
   $$17 = $23 ? $$off : $0;
   $24 = (($$17) + -448)|0;
   $25 = (($24>>>0) / 12)&-1;
   $26 = (($25) + ($$16))|0;
   $27 = (($26>>>0) % 24)&-1;
   $28 = Math_imul($27, -12)|0;
   $29 = (($28) + ($$17))|0;
   if ((($29|0) == 458)) {
    $56 = ((6884440 + (($26*504)|0)|0) + 280|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = HEAP32[6884432>>2]|0;
    $59 = $57;
    $60 = $58;
    $61 = (($59) - ($60))|0;
    $62 = $61 >>> 1;
    $63 = $62&65535;
    $$0 = $63;
    return ($$0|0);
   } else if ((($29|0) == 456)) {
    $47 = ((6884440 + (($26*504)|0)|0) + 280|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = HEAP32[6884432>>2]|0;
    $50 = $48;
    $51 = $49;
    $52 = (($50) - ($51))|0;
    $53 = $52 >>> 17;
    $54 = $53 & 15;
    $55 = $54&65535;
    $$0 = $55;
    return ($$0|0);
   } else if ((($29|0) == 452)) {
    $30 = ((6884440 + (($26*504)|0)|0) + 284|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[6884432>>2]|0;
    $33 = $31;
    $34 = $32;
    $35 = (($33) - ($34))|0;
    $36 = $35 >>> 17;
    $37 = $36 & 15;
    $38 = $37&65535;
    $$0 = $38;
    return ($$0|0);
   } else if ((($29|0) == 454)) {
    $39 = ((6884440 + (($26*504)|0)|0) + 284|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[6884432>>2]|0;
    $42 = $40;
    $43 = $41;
    $44 = (($42) - ($43))|0;
    $45 = $44 >>> 1;
    $46 = $45&65535;
    $$0 = $46;
    return ($$0|0);
   } else {
    break;
   }
  }
 } while(0);
 do {
  switch ($0|0) {
  case 832:  {
   $64 = HEAP32[6909488>>2]|0;
   $65 = $64&65535;
   $$0 = $65;
   return ($$0|0);
   break;
  }
  case 834:  {
   $66 = HEAP32[6909488>>2]|0;
   $67 = $66 >>> 16;
   $68 = $67&65535;
   $$0 = $68;
   return ($$0|0);
   break;
  }
  case 1856:  {
   $69 = HEAP32[((6909488 + 4|0))>>2]|0;
   $70 = $69&65535;
   $$0 = $70;
   return ($$0|0);
   break;
  }
  case 1858:  {
   $71 = HEAP32[((6909488 + 4|0))>>2]|0;
   $72 = $71 >>> 16;
   $73 = $72&65535;
   $$0 = $73;
   return ($$0|0);
   break;
  }
  case 410:  {
   $74 = HEAP16[6909496>>1]|0;
   $$0 = $74;
   return ($$0|0);
   break;
  }
  case 1434:  {
   $75 = HEAP16[((6909496 + 2|0))>>1]|0;
   $$0 = $75;
   return ($$0|0);
   break;
  }
  case 836:  {
   $76 = HEAP16[6909504>>1]|0;
   $$0 = $76;
   return ($$0|0);
   break;
  }
  case 1860:  {
   $77 = HEAP16[((6909504 + 2|0))>>1]|0;
   $$0 = $77;
   return ($$0|0);
   break;
  }
  case 428:  {
   $78 = HEAP32[6909520>>2]|0;
   $79 = (4787280 + ($78<<1)|0);
   $80 = HEAP16[$79>>1]|0;
   $81 = (($78) + 1)|0;
   $82 = ($81>>>0)>(1048575);
   $$ = $82 ? 0 : $81;
   HEAP32[6909520>>2] = $$;
   $$0 = $80;
   return ($$0|0);
   break;
  }
  case 1452:  {
   $83 = HEAP32[((6909520 + 4|0))>>2]|0;
   $84 = (4787280 + ($83<<1)|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = (($83) + 1)|0;
   $87 = ($86>>>0)>(1048575);
   $$8 = $87 ? 0 : $86;
   HEAP32[((6909520 + 4|0))>>2] = $$8;
   $$0 = $85;
   return ($$0|0);
   break;
  }
  case 424:  {
   $88 = HEAP32[6909520>>2]|0;
   $89 = $88 >>> 16;
   $90 = $89 & 15;
   $91 = $90&65535;
   $$0 = $91;
   return ($$0|0);
   break;
  }
  case 426:  {
   $92 = HEAP32[6909520>>2]|0;
   $93 = $92&65535;
   $$0 = $93;
   return ($$0|0);
   break;
  }
  case 1448:  {
   $94 = HEAP32[((6909520 + 4|0))>>2]|0;
   $95 = $94 >>> 16;
   $96 = $95 & 15;
   $97 = $96&65535;
   $$0 = $97;
   return ($$0|0);
   break;
  }
  case 1450:  {
   $98 = HEAP32[((6909520 + 4|0))>>2]|0;
   $99 = $98&65535;
   $$0 = $99;
   return ($$0|0);
   break;
  }
  default: {
   $100 = $0 >>> 1;
   $101 = (6909544 + ($100<<1)|0);
   $102 = HEAP16[$101>>1]|0;
   $$0 = $102;
   return ($$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _adler32($adler,$buf,$len) {
 $adler = $adler|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0113 = 0, $$014 = 0, $$02 = 0, $$1$lcssa = 0, $$16 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$lcssa31 = 0, $$lcssa32 = 0, $$lcssa33 = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k$0$lcssa = 0;
 var $k$09 = 0, $k$1 = 0, $s1$0$lcssa = 0, $s1$015 = 0, $s1$1$lcssa = 0, $s1$17 = 0, $s1$2 = 0, $s1$3 = 0, $s2$0$lcssa = 0, $s2$016 = 0, $s2$1$lcssa = 0, $s2$18 = 0, $s2$2 = 0, $s2$3 = 0, $scevgep$sum = 0, $scevgep29 = 0, $scevgep30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $adler & 65535;
 $1 = $adler >>> 16;
 $2 = ($buf|0)==(0|0);
 if ($2) {
  $$02 = 1;
  return ($$02|0);
 }
 $3 = ($len|0)==(0);
 if ($3) {
  $s1$0$lcssa = $0;$s2$0$lcssa = $1;
 } else {
  $$0113 = $buf;$$014 = $len;$s1$015 = $0;$s2$016 = $1;
  while(1) {
   $4 = ($$014>>>0)<(5552);
   $5 = $4 ? $$014 : 5552;
   $6 = (($$014) - ($5))|0;
   $7 = ($5|0)>(15);
   if ($7) {
    $8 = ($$014>>>0)<(5552);
    $$op = (($$014) + -16)|0;
    $9 = $8 ? $$op : 5536;
    $10 = $9 & -16;
    $$16 = $$0113;$k$09 = $5;$s1$17 = $s1$015;$s2$18 = $s2$016;
    while(1) {
     $11 = HEAP8[$$16>>0]|0;
     $12 = $11&255;
     $13 = (($12) + ($s1$17))|0;
     $14 = (($13) + ($s2$18))|0;
     $15 = (($$16) + 1|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = $16&255;
     $18 = (($13) + ($17))|0;
     $19 = (($14) + ($18))|0;
     $20 = (($$16) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = $21&255;
     $23 = (($18) + ($22))|0;
     $24 = (($19) + ($23))|0;
     $25 = (($$16) + 3|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = (($23) + ($27))|0;
     $29 = (($24) + ($28))|0;
     $30 = (($$16) + 4|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = (($28) + ($32))|0;
     $34 = (($29) + ($33))|0;
     $35 = (($$16) + 5|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = (($33) + ($37))|0;
     $39 = (($34) + ($38))|0;
     $40 = (($$16) + 6|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $43 = (($38) + ($42))|0;
     $44 = (($39) + ($43))|0;
     $45 = (($$16) + 7|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = (($43) + ($47))|0;
     $49 = (($44) + ($48))|0;
     $50 = (($$16) + 8|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = (($48) + ($52))|0;
     $54 = (($49) + ($53))|0;
     $55 = (($$16) + 9|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = (($53) + ($57))|0;
     $59 = (($54) + ($58))|0;
     $60 = (($$16) + 10|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = (($58) + ($62))|0;
     $64 = (($59) + ($63))|0;
     $65 = (($$16) + 11|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66&255;
     $68 = (($63) + ($67))|0;
     $69 = (($64) + ($68))|0;
     $70 = (($$16) + 12|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     $73 = (($68) + ($72))|0;
     $74 = (($69) + ($73))|0;
     $75 = (($$16) + 13|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $78 = (($73) + ($77))|0;
     $79 = (($74) + ($78))|0;
     $80 = (($$16) + 14|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81&255;
     $83 = (($78) + ($82))|0;
     $84 = (($79) + ($83))|0;
     $85 = (($$16) + 15|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&255;
     $88 = (($83) + ($87))|0;
     $89 = (($84) + ($88))|0;
     $90 = (($$16) + 16|0);
     $91 = (($k$09) + -16)|0;
     $92 = ($91|0)>(15);
     if ($92) {
      $$16 = $90;$k$09 = $91;$s1$17 = $88;$s2$18 = $89;
     } else {
      $$lcssa = $88;$$lcssa31 = $89;
      break;
     }
    }
    $93 = (($9) - ($10))|0;
    $scevgep$sum = (($10) + 16)|0;
    $scevgep29 = (($$0113) + ($scevgep$sum)|0);
    $$1$lcssa = $scevgep29;$k$0$lcssa = $93;$s1$1$lcssa = $$lcssa;$s2$1$lcssa = $$lcssa31;
   } else {
    $$1$lcssa = $$0113;$k$0$lcssa = $$014;$s1$1$lcssa = $s1$015;$s2$1$lcssa = $s2$016;
   }
   $94 = ($k$0$lcssa|0)==(0);
   if ($94) {
    $$3 = $$1$lcssa;$s1$3 = $s1$1$lcssa;$s2$3 = $s2$1$lcssa;
   } else {
    $$2 = $$1$lcssa;$k$1 = $k$0$lcssa;$s1$2 = $s1$1$lcssa;$s2$2 = $s2$1$lcssa;
    while(1) {
     $95 = (($$2) + 1|0);
     $96 = HEAP8[$$2>>0]|0;
     $97 = $96&255;
     $98 = (($97) + ($s1$2))|0;
     $99 = (($98) + ($s2$2))|0;
     $100 = (($k$1) + -1)|0;
     $101 = ($100|0)==(0);
     if ($101) {
      $$lcssa32 = $98;$$lcssa33 = $99;
      break;
     } else {
      $$2 = $95;$k$1 = $100;$s1$2 = $98;$s2$2 = $99;
     }
    }
    $scevgep30 = (($$1$lcssa) + ($k$0$lcssa)|0);
    $$3 = $scevgep30;$s1$3 = $$lcssa32;$s2$3 = $$lcssa33;
   }
   $102 = (($s1$3>>>0) % 65521)&-1;
   $103 = (($s2$3>>>0) % 65521)&-1;
   $104 = ($$014|0)==($5|0);
   if ($104) {
    $s1$0$lcssa = $102;$s2$0$lcssa = $103;
    break;
   } else {
    $$0113 = $$3;$$014 = $6;$s1$015 = $102;$s2$016 = $103;
   }
  }
 }
 $105 = $s2$0$lcssa << 16;
 $106 = $105 | $s1$0$lcssa;
 $$02 = $106;
 return ($$02|0);
}
function _crc32($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buf|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_crc32_little($crc,$buf,$len)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _crc32_little($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$01$lcssa$ph = 0, $$0116 = 0, $$0116$lcssa = 0, $$017 = 0, $$017$lcssa = 0, $$1$lcssa = 0, $$12 = 0, $$19 = 0, $$2$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa42 = 0, $$lcssa43 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf4$0$lcssa = 0, $buf4$011 = 0, $buf4$1$lcssa = 0, $buf4$16 = 0, $c$0$lcssa$ph = 0;
 var $c$0$masked = 0, $c$018 = 0, $c$018$lcssa = 0, $c$1$lcssa = 0, $c$110 = 0, $c$2$lcssa = 0, $c$25 = 0, $c$3 = 0, $c$3$masked = 0, $c$4 = 0, $scevgep = 0, $scevgep40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $crc ^ -1;
 $1 = ($len|0)==(0);
 L1: do {
  if ($1) {
   $$01$lcssa$ph = $buf;$c$0$lcssa$ph = $0;
   label = 4;
  } else {
   $$0116 = $buf;$$017 = $len;$c$018 = $0;
   while(1) {
    $2 = $$0116;
    $3 = $2 & 3;
    $4 = ($3|0)==(0);
    if ($4) {
     $$0116$lcssa = $$0116;$$017$lcssa = $$017;$c$018$lcssa = $c$018;
     break;
    }
    $5 = (($$0116) + 1|0);
    $6 = HEAP8[$$0116>>0]|0;
    $7 = $6&255;
    $c$0$masked = $c$018 & 255;
    $8 = $7 ^ $c$0$masked;
    $9 = (6975080 + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $c$018 >>> 8;
    $12 = $10 ^ $11;
    $13 = (($$017) + -1)|0;
    $14 = ($13|0)==(0);
    if ($14) {
     $$01$lcssa$ph = $5;$c$0$lcssa$ph = $12;
     label = 4;
     break L1;
    } else {
     $$0116 = $5;$$017 = $13;$c$018 = $12;
    }
   }
   $15 = ($$017$lcssa>>>0)>(31);
   if ($15) {
    $16 = (($$017$lcssa) + -32)|0;
    $17 = $16 & -32;
    $18 = (($17) + 32)|0;
    $scevgep40 = (($$0116$lcssa) + ($18)|0);
    $$19 = $$017$lcssa;$buf4$011 = $$0116$lcssa;$c$110 = $c$018$lcssa;
    while(1) {
     $25 = (($buf4$011) + 4|0);
     $26 = HEAP32[$buf4$011>>2]|0;
     $27 = $26 ^ $c$110;
     $28 = $27 & 255;
     $29 = ((6975080 + ($28<<2)|0) + 3072|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $27 >>> 8;
     $32 = $31 & 255;
     $33 = ((6975080 + ($32<<2)|0) + 2048|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $34 ^ $30;
     $36 = $27 >>> 16;
     $37 = $36 & 255;
     $38 = ((6975080 + ($37<<2)|0) + 1024|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $35 ^ $39;
     $41 = $27 >>> 24;
     $42 = (6975080 + ($41<<2)|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $40 ^ $43;
     $45 = (($buf4$011) + 8|0);
     $46 = HEAP32[$25>>2]|0;
     $47 = $44 ^ $46;
     $48 = $47 & 255;
     $49 = ((6975080 + ($48<<2)|0) + 3072|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $47 >>> 8;
     $52 = $51 & 255;
     $53 = ((6975080 + ($52<<2)|0) + 2048|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $54 ^ $50;
     $56 = $47 >>> 16;
     $57 = $56 & 255;
     $58 = ((6975080 + ($57<<2)|0) + 1024|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $55 ^ $59;
     $61 = $47 >>> 24;
     $62 = (6975080 + ($61<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $60 ^ $63;
     $65 = (($buf4$011) + 12|0);
     $66 = HEAP32[$45>>2]|0;
     $67 = $64 ^ $66;
     $68 = $67 & 255;
     $69 = ((6975080 + ($68<<2)|0) + 3072|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $67 >>> 8;
     $72 = $71 & 255;
     $73 = ((6975080 + ($72<<2)|0) + 2048|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $74 ^ $70;
     $76 = $67 >>> 16;
     $77 = $76 & 255;
     $78 = ((6975080 + ($77<<2)|0) + 1024|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $75 ^ $79;
     $81 = $67 >>> 24;
     $82 = (6975080 + ($81<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $80 ^ $83;
     $85 = (($buf4$011) + 16|0);
     $86 = HEAP32[$65>>2]|0;
     $87 = $84 ^ $86;
     $88 = $87 & 255;
     $89 = ((6975080 + ($88<<2)|0) + 3072|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $87 >>> 8;
     $92 = $91 & 255;
     $93 = ((6975080 + ($92<<2)|0) + 2048|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $94 ^ $90;
     $96 = $87 >>> 16;
     $97 = $96 & 255;
     $98 = ((6975080 + ($97<<2)|0) + 1024|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = $95 ^ $99;
     $101 = $87 >>> 24;
     $102 = (6975080 + ($101<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $100 ^ $103;
     $105 = (($buf4$011) + 20|0);
     $106 = HEAP32[$85>>2]|0;
     $107 = $104 ^ $106;
     $108 = $107 & 255;
     $109 = ((6975080 + ($108<<2)|0) + 3072|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $107 >>> 8;
     $112 = $111 & 255;
     $113 = ((6975080 + ($112<<2)|0) + 2048|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $114 ^ $110;
     $116 = $107 >>> 16;
     $117 = $116 & 255;
     $118 = ((6975080 + ($117<<2)|0) + 1024|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $115 ^ $119;
     $121 = $107 >>> 24;
     $122 = (6975080 + ($121<<2)|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $120 ^ $123;
     $125 = (($buf4$011) + 24|0);
     $126 = HEAP32[$105>>2]|0;
     $127 = $124 ^ $126;
     $128 = $127 & 255;
     $129 = ((6975080 + ($128<<2)|0) + 3072|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $127 >>> 8;
     $132 = $131 & 255;
     $133 = ((6975080 + ($132<<2)|0) + 2048|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 ^ $130;
     $136 = $127 >>> 16;
     $137 = $136 & 255;
     $138 = ((6975080 + ($137<<2)|0) + 1024|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $135 ^ $139;
     $141 = $127 >>> 24;
     $142 = (6975080 + ($141<<2)|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $140 ^ $143;
     $145 = (($buf4$011) + 28|0);
     $146 = HEAP32[$125>>2]|0;
     $147 = $144 ^ $146;
     $148 = $147 & 255;
     $149 = ((6975080 + ($148<<2)|0) + 3072|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $147 >>> 8;
     $152 = $151 & 255;
     $153 = ((6975080 + ($152<<2)|0) + 2048|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $154 ^ $150;
     $156 = $147 >>> 16;
     $157 = $156 & 255;
     $158 = ((6975080 + ($157<<2)|0) + 1024|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $155 ^ $159;
     $161 = $147 >>> 24;
     $162 = (6975080 + ($161<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $160 ^ $163;
     $165 = (($buf4$011) + 32|0);
     $166 = HEAP32[$145>>2]|0;
     $167 = $164 ^ $166;
     $168 = $167 & 255;
     $169 = ((6975080 + ($168<<2)|0) + 3072|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = $167 >>> 8;
     $172 = $171 & 255;
     $173 = ((6975080 + ($172<<2)|0) + 2048|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = $174 ^ $170;
     $176 = $167 >>> 16;
     $177 = $176 & 255;
     $178 = ((6975080 + ($177<<2)|0) + 1024|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $175 ^ $179;
     $181 = $167 >>> 24;
     $182 = (6975080 + ($181<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $180 ^ $183;
     $185 = (($$19) + -32)|0;
     $186 = ($185>>>0)>(31);
     if ($186) {
      $$19 = $185;$buf4$011 = $165;$c$110 = $184;
     } else {
      $$lcssa43 = $184;
      break;
     }
    }
    $19 = (($16) - ($17))|0;
    $$1$lcssa = $19;$buf4$0$lcssa = $scevgep40;$c$1$lcssa = $$lcssa43;
   } else {
    $$1$lcssa = $$017$lcssa;$buf4$0$lcssa = $$0116$lcssa;$c$1$lcssa = $c$018$lcssa;
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$1$lcssa = 0;$buf4$0$lcssa = $$01$lcssa$ph;$c$1$lcssa = $c$0$lcssa$ph;
 }
 $20 = ($$1$lcssa>>>0)>(3);
 if ($20) {
  $21 = (($$1$lcssa) + -4)|0;
  $22 = $21 >>> 2;
  $23 = $22 << 2;
  $24 = (($22) + 1)|0;
  $$24 = $$1$lcssa;$buf4$16 = $buf4$0$lcssa;$c$25 = $c$1$lcssa;
  while(1) {
   $187 = (($buf4$16) + 4|0);
   $188 = HEAP32[$buf4$16>>2]|0;
   $189 = $188 ^ $c$25;
   $190 = $189 & 255;
   $191 = ((6975080 + ($190<<2)|0) + 3072|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = $189 >>> 8;
   $194 = $193 & 255;
   $195 = ((6975080 + ($194<<2)|0) + 2048|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = $196 ^ $192;
   $198 = $189 >>> 16;
   $199 = $198 & 255;
   $200 = ((6975080 + ($199<<2)|0) + 1024|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $197 ^ $201;
   $203 = $189 >>> 24;
   $204 = (6975080 + ($203<<2)|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $202 ^ $205;
   $207 = (($$24) + -4)|0;
   $208 = ($207>>>0)>(3);
   if ($208) {
    $$24 = $207;$buf4$16 = $187;$c$25 = $206;
   } else {
    $$lcssa42 = $206;
    break;
   }
  }
  $209 = (($21) - ($23))|0;
  $scevgep = (($buf4$0$lcssa) + ($24<<2)|0);
  $$2$lcssa = $209;$buf4$1$lcssa = $scevgep;$c$2$lcssa = $$lcssa42;
 } else {
  $$2$lcssa = $$1$lcssa;$buf4$1$lcssa = $buf4$0$lcssa;$c$2$lcssa = $c$1$lcssa;
 }
 $210 = ($$2$lcssa|0)==(0);
 if ($210) {
  $c$4 = $c$2$lcssa;
  $221 = $c$4 ^ -1;
  return ($221|0);
 }
 $$12 = $buf4$1$lcssa;$$3 = $$2$lcssa;$c$3 = $c$2$lcssa;
 while(1) {
  $211 = (($$12) + 1|0);
  $212 = HEAP8[$$12>>0]|0;
  $213 = $212&255;
  $c$3$masked = $c$3 & 255;
  $214 = $213 ^ $c$3$masked;
  $215 = (6975080 + ($214<<2)|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = $c$3 >>> 8;
  $218 = $216 ^ $217;
  $219 = (($$3) + -1)|0;
  $220 = ($219|0)==(0);
  if ($220) {
   $c$4 = $218;
   break;
  } else {
   $$12 = $211;$$3 = $219;$c$3 = $218;
  }
 }
 $221 = $c$4 ^ -1;
 return ($221|0);
}
function _uncompress($dest,$destLen,$source,$sourceLen) {
 $dest = $dest|0;
 $destLen = $destLen|0;
 $source = $source|0;
 $sourceLen = $sourceLen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $stream = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $stream = sp;
 HEAP32[$stream>>2] = $source;
 $0 = (($stream) + 4|0);
 HEAP32[$0>>2] = $sourceLen;
 $1 = (($stream) + 12|0);
 HEAP32[$1>>2] = $dest;
 $2 = HEAP32[$destLen>>2]|0;
 $3 = (($stream) + 16|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$destLen>>2]|0;
 $5 = ($2|0)==($4|0);
 do {
  if ($5) {
   $6 = (($stream) + 32|0);
   HEAP32[$6>>2] = 0;
   $7 = (($stream) + 36|0);
   HEAP32[$7>>2] = 0;
   $8 = (_inflateInit_($stream,6983272,56)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = (_inflate($stream,4)|0);
    $11 = ($10|0)==(1);
    if ($11) {
     $14 = (($stream) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$destLen>>2] = $15;
     $16 = (_inflateEnd($stream)|0);
     $$0 = $16;
     break;
    }
    (_inflateEnd($stream)|0);
    if ((($10|0) == 2)) {
     $$0 = -3;
     break;
    } else if ((($10|0) == -5)) {
     $12 = HEAP32[$0>>2]|0;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0 = -3;
      break;
     }
    }
    $$0 = $10;
   } else {
    $$0 = $8;
   }
  } else {
   $$0 = -5;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _zcalloc($opaque,$items,$size) {
 $opaque = $opaque|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($size, $items)|0;
 $1 = (_malloc($0)|0);
 return ($1|0);
}
function _zcfree($opaque,$ptr) {
 $opaque = $opaque|0;
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  return;
 }
 _free($ptr);
 return;
}
function _inflateReset($strm) {
 $strm = $strm|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0 = -2;
  return ($$0|0);
 }
 $1 = (($strm) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -2;
  return ($$0|0);
 }
 $4 = (($2) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = (($strm) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = (($strm) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (($strm) + 24|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$2>>2] = 0;
 $8 = (($2) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = (($2) + 12|0);
 HEAP32[$9>>2] = 0;
 $10 = (($2) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = (($2) + 36|0);
 HEAP32[$11>>2] = 0;
 $12 = (($2) + 48|0);
 HEAP32[$12>>2] = 0;
 $13 = (($2) + 52|0);
 HEAP32[$13>>2] = 0;
 $14 = (($2) + 1320|0);
 $15 = (($2) + 100|0);
 HEAP32[$15>>2] = $14;
 $16 = (($2) + 72|0);
 HEAP32[$16>>2] = $14;
 $17 = (($2) + 68|0);
 HEAP32[$17>>2] = $14;
 $$0 = 0;
 return ($$0|0);
}
function _inflateInit2_($strm,$windowBits,$version,$stream_size) {
 $strm = $strm|0;
 $windowBits = $windowBits|0;
 $version = $version|0;
 $stream_size = $stream_size|0;
 var $$0 = 0, $$04 = 0, $$windowBits = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($version|0)==(0|0);
 if ($0) {
  $$0 = -6;
  return ($$0|0);
 }
 $1 = HEAP8[$version>>0]|0;
 $2 = ($1<<24>>24)!=(49);
 $3 = ($stream_size|0)!=(56);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $$0 = -6;
  return ($$0|0);
 }
 $4 = ($strm|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = (($strm) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = (($strm) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$6>>2] = 2;
  $9 = (($strm) + 40|0);
  HEAP32[$9>>2] = 0;
 }
 $10 = (($strm) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$10>>2] = 2;
 }
 $13 = HEAP32[$6>>2]|0;
 $14 = (($strm) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_iiii[$13 & 3]($15,1,7080)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = -4;
  return ($$0|0);
 }
 $18 = (($strm) + 28|0);
 HEAP32[$18>>2] = $16;
 $19 = ($windowBits|0)<(0);
 if ($19) {
  $20 = (($16) + 8|0);
  HEAP32[$20>>2] = 0;
  $21 = (0 - ($windowBits))|0;
  $$04 = $21;
 } else {
  $22 = $windowBits >> 4;
  $23 = (($22) + 1)|0;
  $24 = (($16) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ($windowBits|0)<(48);
  $26 = $windowBits & 15;
  $$windowBits = $25 ? $26 : $windowBits;
  $$04 = $$windowBits;
 }
 $27 = $$04 & -8;
 $28 = ($27|0)==(8);
 if ($28) {
  $31 = (($16) + 28|0);
  HEAP32[$31>>2] = $$04;
  $32 = (($16) + 44|0);
  HEAP32[$32>>2] = 0;
  $33 = (_inflateReset($strm)|0);
  $$0 = $33;
  return ($$0|0);
 } else {
  $29 = HEAP32[$10>>2]|0;
  $30 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vii[$29 & 3]($30,$16);
  HEAP32[$18>>2] = 0;
  $$0 = -2;
  return ($$0|0);
 }
 return (0)|0;
}
function _inflateInit_($strm,$version,$stream_size) {
 $strm = $strm|0;
 $version = $version|0;
 $stream_size = $stream_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_inflateInit2_($strm,15,$version,$stream_size)|0);
 return ($0|0);
}
function _inflate($strm,$flush) {
 $strm = $strm|0;
 $flush = $flush|0;
 var $$0 = 0, $$copy$7 = 0, $$lcssa101 = 0, $$lcssa101$in = 0, $$lcssa1307 = 0, $$lcssa1308 = 0, $$lcssa1309 = 0, $$lcssa1310 = 0, $$lcssa1311 = 0, $$lcssa1312 = 0, $$lcssa1313 = 0, $$lcssa1342 = 0, $$lcssa1343 = 0, $$lcssa1347 = 0, $$lcssa1348 = 0, $$lcssa1349 = 0, $$lcssa1350 = 0, $$lcssa1351 = 0, $$lcssa1352 = 0, $$lcssa1353 = 0;
 var $$lcssa1354 = 0, $$lcssa1376 = 0, $$lcssa1377 = 0, $$lcssa1378 = 0, $$lcssa1379 = 0, $$lcssa1380 = 0, $$lcssa1381 = 0, $$lcssa1382 = 0, $$lcssa1383 = 0, $$lcssa1447 = 0, $$lcssa1448 = 0, $$lcssa1449 = 0, $$lcssa1450 = 0, $$lcssa174 = 0, $$lcssa174$in = 0, $$lcssa176 = 0, $$lcssa178 = 0, $$lcssa178$in = 0, $$lcssa180 = 0, $$lcssa186 = 0;
 var $$lcssa188 = 0, $$lcssa190 = 0, $$lcssa196 = 0, $$lcssa204 = 0, $$lcssa204$in = 0, $$lcssa206 = 0, $$lcssa208 = 0, $$lcssa208$in = 0, $$lcssa210 = 0, $$lcssa216 = 0, $$lcssa218 = 0, $$lcssa220 = 0, $$lcssa226 = 0, $$lcssa574$pn = 0, $$lcssa95 = 0, $$ret$7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$0 = 0, $bits$0$lcssa1613 = 0;
 var $bits$0$phi = 0, $bits$1$lcssa = 0, $bits$10 = 0, $bits$11 = 0, $bits$12$lcssa = 0, $bits$12789 = 0, $bits$13 = 0, $bits$14733 = 0, $bits$15 = 0, $bits$15$lcssa = 0, $bits$16 = 0, $bits$17 = 0, $bits$1799 = 0, $bits$18$lcssa = 0, $bits$18742 = 0, $bits$19$lcssa = 0, $bits$19722 = 0, $bits$2$lcssa = 0, $bits$20 = 0, $bits$21$lcssa = 0;
 var $bits$21530 = 0, $bits$22$lcssa = 0, $bits$22$ph = 0, $bits$22550 = 0, $bits$23$lcssa = 0, $bits$23540 = 0, $bits$24$be = 0, $bits$24$ph = 0, $bits$24622 = 0, $bits$25$lcssa = 0, $bits$25564 = 0, $bits$26$lcssa = 0, $bits$26612 = 0, $bits$27$lcssa = 0, $bits$2752 = 0, $bits$27591 = 0, $bits$28$lcssa = 0, $bits$28581 = 0, $bits$29$lcssa = 0, $bits$29601 = 0;
 var $bits$30 = 0, $bits$30$lcssa = 0, $bits$31 = 0, $bits$32 = 0, $bits$33$lcssa = 0, $bits$33632 = 0, $bits$34$lcssa = 0, $bits$34653 = 0, $bits$35 = 0, $bits$36 = 0, $bits$37$lcssa = 0, $bits$3762 = 0, $bits$37666 = 0, $bits$38 = 0, $bits$39$lcssa = 0, $bits$39$ph = 0, $bits$39677 = 0, $bits$40$lcssa = 0, $bits$40698 = 0, $bits$41 = 0;
 var $bits$42 = 0, $bits$43$lcssa = 0, $bits$43711 = 0, $bits$44 = 0, $bits$45 = 0, $bits$46$lcssa = 0, $bits$46513 = 0, $bits$47 = 0, $bits$4771 = 0, $bits$48 = 0, $bits$49$lcssa = 0, $bits$49520 = 0, $bits$5 = 0, $bits$50 = 0, $bits$52 = 0, $bits$6780 = 0, $bits$7 = 0, $bits$8 = 0, $bits$9 = 0, $copy$1 = 0;
 var $copy$10 = 0, $copy$2 = 0, $copy$4 = 0, $copy$5 = 0, $copy$6608 = 0, $copy$7 = 0, $copy$8 = 0, $exitcond = 0, $from$0 = 0, $from$1 = 0, $from$2 = 0, $have$0 = 0, $have$0$lcssa1525 = 0, $have$0$phi = 0, $have$1$lcssa = 0, $have$10 = 0, $have$11 = 0, $have$12 = 0, $have$13 = 0, $have$14 = 0;
 var $have$15 = 0, $have$16$lcssa = 0, $have$16787 = 0, $have$17 = 0, $have$1797 = 0, $have$18$lcssa = 0, $have$18731 = 0, $have$19 = 0, $have$19$lcssa = 0, $have$2$lcssa = 0, $have$20 = 0, $have$21 = 0, $have$22$lcssa = 0, $have$22740 = 0, $have$23$lcssa = 0, $have$23720 = 0, $have$24 = 0, $have$24$ = 0, $have$25$lcssa = 0, $have$25528 = 0;
 var $have$26$lcssa = 0, $have$26$ph = 0, $have$26548 = 0, $have$27$lcssa = 0, $have$2750 = 0, $have$27538 = 0, $have$28$be = 0, $have$28$ph = 0, $have$28620 = 0, $have$29$lcssa = 0, $have$29562 = 0, $have$3$lcssa = 0, $have$30$lcssa = 0, $have$30610 = 0, $have$31$lcssa = 0, $have$31$lcssa$lcssa = 0, $have$31589 = 0, $have$32$lcssa = 0, $have$32579 = 0, $have$33$lcssa = 0;
 var $have$33599 = 0, $have$34 = 0, $have$34$lcssa = 0, $have$35 = 0, $have$36 = 0, $have$37$lcssa = 0, $have$3760 = 0, $have$37630 = 0, $have$38$lcssa = 0, $have$38651 = 0, $have$39 = 0, $have$4$lcssa = 0, $have$40 = 0, $have$41$lcssa = 0, $have$41664 = 0, $have$42 = 0, $have$43$lcssa = 0, $have$43$ph = 0, $have$43675 = 0, $have$44$lcssa = 0;
 var $have$44696 = 0, $have$45 = 0, $have$46 = 0, $have$47$lcssa = 0, $have$4769 = 0, $have$47709 = 0, $have$48 = 0, $have$49 = 0, $have$5 = 0, $have$50$lcssa = 0, $have$50511 = 0, $have$51 = 0, $have$52 = 0, $have$53$lcssa = 0, $have$53518 = 0, $have$54 = 0, $have$56 = 0, $have$6$lcssa = 0, $have$6778 = 0, $have$7 = 0;
 var $have$8 = 0, $have$8$ = 0, $have$9 = 0, $hbuf = 0, $hold$0 = 0, $hold$0$lcssa1584 = 0, $hold$0$phi = 0, $hold$1$lcssa = 0, $hold$10 = 0, $hold$11 = 0, $hold$12$lcssa = 0, $hold$12788 = 0, $hold$13 = 0, $hold$14$lcssa = 0, $hold$14732 = 0, $hold$15 = 0, $hold$15$lcssa = 0, $hold$16 = 0, $hold$17 = 0, $hold$1798 = 0;
 var $hold$18$lcssa = 0, $hold$18741 = 0, $hold$19$lcssa = 0, $hold$19721 = 0, $hold$2$lcssa = 0, $hold$20 = 0, $hold$21$lcssa = 0, $hold$21529 = 0, $hold$22$lcssa = 0, $hold$22$ph = 0, $hold$22549 = 0, $hold$23$lcssa = 0, $hold$23539 = 0, $hold$24$be = 0, $hold$24$ph = 0, $hold$24621 = 0, $hold$25$lcssa = 0, $hold$25563 = 0, $hold$26$lcssa = 0, $hold$26611 = 0;
 var $hold$27$lcssa = 0, $hold$2751 = 0, $hold$27590 = 0, $hold$28$lcssa = 0, $hold$28580 = 0, $hold$29$lcssa = 0, $hold$29600 = 0, $hold$3$lcssa = 0, $hold$30 = 0, $hold$30$lcssa = 0, $hold$31 = 0, $hold$32 = 0, $hold$33$lcssa = 0, $hold$33631 = 0, $hold$34$lcssa = 0, $hold$34652 = 0, $hold$35 = 0, $hold$36 = 0, $hold$37$lcssa = 0, $hold$3761 = 0;
 var $hold$37665 = 0, $hold$38 = 0, $hold$39$lcssa = 0, $hold$39$ph = 0, $hold$39676 = 0, $hold$4$lcssa = 0, $hold$40$lcssa = 0, $hold$40697 = 0, $hold$41 = 0, $hold$42 = 0, $hold$43$lcssa = 0, $hold$43710 = 0, $hold$44 = 0, $hold$45 = 0, $hold$46$lcssa = 0, $hold$46512 = 0, $hold$47 = 0, $hold$4770 = 0, $hold$48 = 0, $hold$49$lcssa = 0;
 var $hold$49519 = 0, $hold$5 = 0, $hold$50 = 0, $hold$52 = 0, $hold$6$lcssa = 0, $hold$6779 = 0, $hold$7 = 0, $hold$8 = 0, $hold$9 = 0, $left$0 = 0, $left$0$copy$8 = 0, $left$0$lcssa1554 = 0, $left$0$lcssa1557 = 0, $left$0$lcssa1574 = 0, $left$0$phi = 0, $left$01582 = 0, $len$0 = 0, $next$0 = 0, $next$0$lcssa1466 = 0, $next$0$phi = 0;
 var $next$1$lcssa = 0, $next$10 = 0, $next$11 = 0, $next$12 = 0, $next$13 = 0, $next$14 = 0, $next$15 = 0, $next$16$lcssa = 0, $next$16786 = 0, $next$17 = 0, $next$1796 = 0, $next$18$lcssa = 0, $next$18730 = 0, $next$19 = 0, $next$19$lcssa = 0, $next$2$lcssa = 0, $next$20 = 0, $next$21 = 0, $next$22$lcssa = 0, $next$22739 = 0;
 var $next$23$lcssa = 0, $next$23719 = 0, $next$24 = 0, $next$25$lcssa = 0, $next$25527 = 0, $next$26$lcssa = 0, $next$26$ph = 0, $next$26547 = 0, $next$27$lcssa = 0, $next$2749 = 0, $next$27537 = 0, $next$28$be = 0, $next$28$ph = 0, $next$28619 = 0, $next$29$lcssa = 0, $next$29561 = 0, $next$3$lcssa = 0, $next$30$lcssa = 0, $next$30609 = 0, $next$31$lcssa = 0;
 var $next$31$lcssa$lcssa = 0, $next$31588 = 0, $next$32$lcssa = 0, $next$32578 = 0, $next$33$lcssa = 0, $next$33598 = 0, $next$34 = 0, $next$34$lcssa = 0, $next$35 = 0, $next$36 = 0, $next$37$lcssa = 0, $next$3759 = 0, $next$37629 = 0, $next$38$lcssa = 0, $next$38650 = 0, $next$39 = 0, $next$4$lcssa = 0, $next$40 = 0, $next$41$lcssa = 0, $next$41663 = 0;
 var $next$42 = 0, $next$43$lcssa = 0, $next$43$ph = 0, $next$43674 = 0, $next$44$lcssa = 0, $next$44695 = 0, $next$45 = 0, $next$46 = 0, $next$47$lcssa = 0, $next$4768 = 0, $next$47708 = 0, $next$48 = 0, $next$49 = 0, $next$5 = 0, $next$50$lcssa = 0, $next$50510 = 0, $next$51 = 0, $next$52 = 0, $next$53$lcssa = 0, $next$53517 = 0;
 var $next$54 = 0, $next$56 = 0, $next$6$lcssa = 0, $next$6777 = 0, $next$7 = 0, $next$8 = 0, $next$9 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond13 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0, $out$0 = 0, $out$0$lcssa1642 = 0, $out$0$phi = 0, $out$1 = 0;
 var $out$2 = 0, $out$2$lcssa = 0, $out$4 = 0, $put$0 = 0, $put$0$lcssa1495 = 0, $put$0$lcssa1498 = 0, $put$0$lcssa1515 = 0, $put$0$phi = 0, $put$01523 = 0, $put$1 = 0, $ret$0 = 0, $ret$0$phi = 0, $ret$1$ph = 0, $ret$2 = 0, $ret$3 = 0, $ret$4$ph = 0, $ret$5 = 0, $ret$6 = 0, $ret$7 = 0, $scevgep$sum = 0;
 var $scevgep1240 = 0, $this$sroa$0$0 = 0, $this$sroa$0$1 = 0, $this$sroa$16$0 = 0, $this$sroa$16$1 = 0, $this$sroa$39$0 = 0, $this$sroa$39$1 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hbuf = sp;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($strm) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($strm) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$strm>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (($strm) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(11);
 if ($14) {
  HEAP32[$12>>2] = 12;
 }
 $15 = HEAP32[$4>>2]|0;
 $16 = (($strm) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$strm>>2]|0;
 $19 = (($strm) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($12) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($12) + 52|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($12) + 8|0);
 $26 = (($12) + 20|0);
 $27 = (($hbuf) + 1|0);
 $28 = (($12) + 16|0);
 $29 = (($strm) + 24|0);
 $30 = (($12) + 28|0);
 $31 = (($strm) + 24|0);
 $32 = (($12) + 20|0);
 $33 = (($strm) + 48|0);
 $34 = (($strm) + 24|0);
 $35 = (($12) + 16|0);
 $36 = (($12) + 56|0);
 $37 = (($hbuf) + 1|0);
 $38 = (($12) + 20|0);
 $39 = (($12) + 16|0);
 $40 = (($12) + 56|0);
 $41 = (($12) + 20|0);
 $42 = (($12) + 16|0);
 $43 = (($12) + 20|0);
 $44 = (($12) + 16|0);
 $45 = (($12) + 20|0);
 $46 = (($12) + 16|0);
 $47 = (($12) + 20|0);
 $48 = (($strm) + 48|0);
 $49 = (($12) + 20|0);
 $50 = (($strm) + 24|0);
 $51 = (($12) + 12|0);
 $52 = (($12) + 20|0);
 $53 = (($strm) + 48|0);
 $54 = ($flush|0)==(5);
 $55 = (($12) + 4|0);
 $56 = (($strm) + 24|0);
 $57 = (($12) + 56|0);
 $58 = (($strm) + 24|0);
 $59 = (($12) + 56|0);
 $60 = (($12) + 76|0);
 $61 = (($12) + 68|0);
 $62 = (($12) + 56|0);
 $63 = (($12) + 64|0);
 $64 = (($strm) + 24|0);
 $65 = (($12) + 64|0);
 $66 = (($12) + 56|0);
 $67 = (($12) + 64|0);
 $68 = (($12) + 60|0);
 $69 = (($12) + 36|0);
 $70 = (($strm) + 24|0);
 $71 = (($12) + 60|0);
 $72 = (($12) + 60|0);
 $73 = (($12) + 40|0);
 $74 = (($12) + 44|0);
 $75 = (($12) + 32|0);
 $76 = (($12) + 56|0);
 $77 = (($12) + 44|0);
 $78 = (($12) + 56|0);
 $79 = (($12) + 56|0);
 $80 = (($12) + 56|0);
 $81 = (($12) + 8|0);
 $82 = (($strm) + 20|0);
 $83 = (($12) + 24|0);
 $84 = (($12) + 16|0);
 $85 = (($12) + 20|0);
 $86 = (($strm) + 24|0);
 $87 = (($12) + 16|0);
 $88 = (($12) + 20|0);
 $89 = (($strm) + 48|0);
 $90 = (($12) + 8|0);
 $91 = (($12) + 16|0);
 $92 = (($12) + 24|0);
 $93 = (($strm) + 24|0);
 $94 = (($12) + 16|0);
 $95 = (($hbuf) + 1|0);
 $96 = (($12) + 20|0);
 $97 = (($12) + 16|0);
 $98 = (($hbuf) + 1|0);
 $99 = (($hbuf) + 2|0);
 $100 = (($hbuf) + 3|0);
 $101 = (($12) + 20|0);
 $102 = (($12) + 16|0);
 $103 = (($hbuf) + 1|0);
 $104 = (($12) + 20|0);
 $105 = (($strm) + 24|0);
 $106 = (($strm) + 24|0);
 $107 = (($12) + 20|0);
 $108 = (($strm) + 48|0);
 $109 = (($12) + 80|0);
 $110 = (($12) + 72|0);
 $111 = (($12) + 60|0);
 $112 = (($12) + 64|0);
 $113 = (($strm) + 24|0);
 $114 = (($12) + 96|0);
 $115 = (($12) + 88|0);
 $116 = (($12) + 92|0);
 $117 = (($12) + 1320|0);
 $118 = (($12) + 100|0);
 $119 = (($12) + 68|0);
 $120 = (($12) + 76|0);
 $121 = (($12) + 104|0);
 $122 = (($12) + 744|0);
 $123 = (($12) + 72|0);
 $124 = (($12) + 80|0);
 $125 = (($strm) + 24|0);
 $126 = (($strm) + 24|0);
 $127 = (($12) + 76|0);
 $128 = (($12) + 68|0);
 $129 = (($strm) + 24|0);
 $130 = (($strm) + 24|0);
 $131 = (($12) + 96|0);
 $132 = (($12) + 84|0);
 $133 = (($12) + 1320|0);
 $134 = (($12) + 100|0);
 $135 = (($12) + 68|0);
 $136 = (($12) + 76|0);
 $137 = (($12) + 104|0);
 $138 = (($12) + 744|0);
 $139 = (($strm) + 24|0);
 $140 = (($12) + 88|0);
 $141 = (($12) + 92|0);
 $142 = (($12) + 84|0);
 $143 = (($strm) + 24|0);
 $144 = (($12) + 96|0);
 $bits$0 = $24;$have$0 = $20;$hold$0 = $22;$left$0 = $17;$next$0 = $18;$out$0 = $17;$put$0 = $15;$ret$0 = 0;
 L17: while(1) {
  $145 = HEAP32[$12>>2]|0;
  L19: do {
   switch ($145|0) {
   case 22:  {
    $bits$45 = $bits$0;$have$49 = $have$0;$hold$45 = $hold$0;$next$49 = $next$0;$ret$6 = $ret$0;
    label = 207;
    break;
   }
   case 23:  {
    $836 = ($left$0|0)==(0);
    if ($836) {
     $bits$52 = $bits$0;$have$56 = $have$0;$hold$52 = $hold$0;$left$01582 = $left$0;$next$56 = $next$0;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
     break L17;
    }
    $837 = HEAP32[$80>>2]|0;
    $838 = $837&255;
    $839 = (($put$0) + 1|0);
    HEAP8[$put$0>>0] = $838;
    $840 = (($left$0) + -1)|0;
    HEAP32[$12>>2] = 18;
    $ret$0$phi = $ret$0;$out$0$phi = $out$0;$next$0$phi = $next$0;$hold$0$phi = $hold$0;$have$0$phi = $have$0;$bits$0$phi = $bits$0;$left$0 = $840;$put$0 = $839;$ret$0 = $ret$0$phi;$out$0 = $out$0$phi;$next$0 = $next$0$phi;$hold$0 = $hold$0$phi;$have$0 = $have$0$phi;$bits$0 = $bits$0$phi;
    continue L17;
    break;
   }
   case 24:  {
    $841 = HEAP32[$81>>2]|0;
    $842 = ($841|0)==(0);
    if ($842) {
     $bits$47 = $bits$0;$have$51 = $have$0;$hold$47 = $hold$0;$next$51 = $next$0;$out$1 = $out$0;
    } else {
     $843 = ($bits$0>>>0)<(32);
     if ($843) {
      $bits$46513 = $bits$0;$have$50511 = $have$0;$hold$46512 = $hold$0;$next$50510 = $next$0;
      while(1) {
       $844 = ($have$50511|0)==(0);
       if ($844) {
        $bits$52 = $bits$46513;$have$56 = 0;$hold$52 = $hold$46512;$left$01582 = $left$0;$next$56 = $next$50510;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
        break L17;
       }
       $845 = (($have$50511) + -1)|0;
       $846 = (($next$50510) + 1|0);
       $847 = HEAP8[$next$50510>>0]|0;
       $848 = $847&255;
       $849 = $848 << $bits$46513;
       $850 = (($849) + ($hold$46512))|0;
       $851 = (($bits$46513) + 8)|0;
       $852 = ($851>>>0)<(32);
       if ($852) {
        $bits$46513 = $851;$have$50511 = $845;$hold$46512 = $850;$next$50510 = $846;
       } else {
        $bits$46$lcssa = $851;$have$50$lcssa = $845;$hold$46$lcssa = $850;$next$50$lcssa = $846;
        break;
       }
      }
     } else {
      $bits$46$lcssa = $bits$0;$have$50$lcssa = $have$0;$hold$46$lcssa = $hold$0;$next$50$lcssa = $next$0;
     }
     $853 = (($out$0) - ($left$0))|0;
     $854 = HEAP32[$82>>2]|0;
     $855 = (($854) + ($853))|0;
     HEAP32[$82>>2] = $855;
     $856 = HEAP32[$83>>2]|0;
     $857 = (($856) + ($853))|0;
     HEAP32[$83>>2] = $857;
     $858 = ($out$0|0)==($left$0|0);
     if (!($858)) {
      $859 = HEAP32[$87>>2]|0;
      $860 = ($859|0)==(0);
      $861 = HEAP32[$88>>2]|0;
      $862 = (0 - ($853))|0;
      $863 = (($put$0) + ($862)|0);
      if ($860) {
       $865 = (_adler32($861,$863,$853)|0);
       $866 = $865;
      } else {
       $864 = (_crc32($861,$863,$853)|0);
       $866 = $864;
      }
      HEAP32[$88>>2] = $866;
      HEAP32[$89>>2] = $866;
     }
     $867 = HEAP32[$84>>2]|0;
     $868 = ($867|0)==(0);
     if ($868) {
      $869 = (_llvm_bswap_i32(($hold$46$lcssa|0))|0);
      $872 = $869;
     } else {
      $872 = $hold$46$lcssa;
     }
     $870 = HEAP32[$85>>2]|0;
     $871 = ($872|0)==($870|0);
     if ($871) {
      $bits$47 = 0;$have$51 = $have$50$lcssa;$hold$47 = 0;$next$51 = $next$50$lcssa;$out$1 = $left$0;
     } else {
      HEAP32[$86>>2] = 6983672;
      HEAP32[$12>>2] = 27;
      $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $left$0;$left$0$phi = $left$0;$bits$0 = $bits$46$lcssa;$have$0 = $have$50$lcssa;$hold$0 = $hold$46$lcssa;$next$0 = $next$50$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
      continue L17;
     }
    }
    HEAP32[$12>>2] = 25;
    $bits$48 = $bits$47;$have$52 = $have$51;$hold$48 = $hold$47;$next$52 = $next$51;$out$2 = $out$1;
    label = 234;
    break;
   }
   case 25:  {
    $bits$48 = $bits$0;$have$52 = $have$0;$hold$48 = $hold$0;$next$52 = $next$0;$out$2 = $out$0;
    label = 234;
    break;
   }
   case 21:  {
    $bits$42 = $bits$0;$have$46 = $have$0;$hold$42 = $hold$0;$next$46 = $next$0;$ret$5 = $ret$0;
    label = 199;
    break;
   }
   case 27:  {
    $bits$0$lcssa1613 = $bits$0;$have$0$lcssa1525 = $have$0;$hold$0$lcssa1584 = $hold$0;$left$0$lcssa1554 = $left$0;$next$0$lcssa1466 = $next$0;$out$0$lcssa1642 = $out$0;$put$0$lcssa1495 = $put$0;
    label = 242;
    break L17;
    break;
   }
   case 26:  {
    $bits$52 = $bits$0;$have$56 = $have$0;$hold$52 = $hold$0;$left$01582 = $left$0;$next$56 = $next$0;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = 1;
    break L17;
    break;
   }
   case 19:  {
    $bits$36 = $bits$0;$have$40 = $have$0;$hold$36 = $hold$0;$next$40 = $next$0;$ret$3 = $ret$0;
    label = 181;
    break;
   }
   case 15:  {
    $146 = ($bits$0>>>0)<(14);
    if ($146) {
     $bits$21530 = $bits$0;$have$25528 = $have$0;$hold$21529 = $hold$0;$next$25527 = $next$0;
     while(1) {
      $399 = ($have$25528|0)==(0);
      if ($399) {
       $bits$52 = $bits$21530;$have$56 = 0;$hold$52 = $hold$21529;$left$01582 = $left$0;$next$56 = $next$25527;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
       break L17;
      }
      $400 = (($have$25528) + -1)|0;
      $401 = (($next$25527) + 1|0);
      $402 = HEAP8[$next$25527>>0]|0;
      $403 = $402&255;
      $404 = $403 << $bits$21530;
      $405 = (($404) + ($hold$21529))|0;
      $406 = (($bits$21530) + 8)|0;
      $407 = ($406>>>0)<(14);
      if ($407) {
       $bits$21530 = $406;$have$25528 = $400;$hold$21529 = $405;$next$25527 = $401;
      } else {
       $bits$21$lcssa = $406;$have$25$lcssa = $400;$hold$21$lcssa = $405;$next$25$lcssa = $401;
       break;
      }
     }
    } else {
     $bits$21$lcssa = $bits$0;$have$25$lcssa = $have$0;$hold$21$lcssa = $hold$0;$next$25$lcssa = $next$0;
    }
    $408 = $hold$21$lcssa & 31;
    $409 = (($408) + 257)|0;
    HEAP32[$140>>2] = $409;
    $410 = $hold$21$lcssa >>> 5;
    $411 = $410 & 31;
    $412 = (($411) + 1)|0;
    HEAP32[$141>>2] = $412;
    $413 = $hold$21$lcssa >>> 10;
    $414 = $413 & 15;
    $415 = (($414) + 4)|0;
    HEAP32[$142>>2] = $415;
    $416 = $hold$21$lcssa >>> 14;
    $417 = (($bits$21$lcssa) + -14)|0;
    $418 = HEAP32[$140>>2]|0;
    $419 = ($418>>>0)>(286);
    if (!($419)) {
     $420 = HEAP32[$141>>2]|0;
     $421 = ($420>>>0)>(30);
     if (!($421)) {
      HEAP32[$144>>2] = 0;
      HEAP32[$12>>2] = 16;
      $bits$22$ph = $417;$have$26$ph = $have$25$lcssa;$hold$22$ph = $416;$next$26$ph = $next$25$lcssa;
      label = 118;
      break L19;
     }
    }
    HEAP32[$143>>2] = 6983512;
    HEAP32[$12>>2] = 27;
    $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $417;$have$0 = $have$25$lcssa;$hold$0 = $416;$next$0 = $next$25$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
    continue L17;
    break;
   }
   case 9:  {
    $147 = ($bits$0>>>0)<(32);
    if ($147) {
     $bits$14733 = $bits$0;$have$18731 = $have$0;$hold$14732 = $hold$0;$next$18730 = $next$0;
     while(1) {
      $338 = ($have$18731|0)==(0);
      if ($338) {
       $bits$52 = $bits$14733;$have$56 = 0;$hold$52 = $hold$14732;$left$01582 = $left$0;$next$56 = $next$18730;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
       break L17;
      }
      $339 = (($have$18731) + -1)|0;
      $340 = (($next$18730) + 1|0);
      $341 = HEAP8[$next$18730>>0]|0;
      $342 = $341&255;
      $343 = $342 << $bits$14733;
      $344 = (($343) + ($hold$14732))|0;
      $345 = (($bits$14733) + 8)|0;
      $346 = ($345>>>0)<(32);
      if ($346) {
       $bits$14733 = $345;$have$18731 = $339;$hold$14732 = $344;$next$18730 = $340;
      } else {
       $have$18$lcssa = $339;$hold$14$lcssa = $344;$next$18$lcssa = $340;
       break;
      }
     }
    } else {
     $have$18$lcssa = $have$0;$hold$14$lcssa = $hold$0;$next$18$lcssa = $next$0;
    }
    $347 = (_llvm_bswap_i32(($hold$14$lcssa|0))|0);
    HEAP32[$107>>2] = $347;
    HEAP32[$108>>2] = $347;
    HEAP32[$12>>2] = 10;
    $bits$15 = 0;$have$19 = $have$18$lcssa;$hold$15 = 0;$next$19 = $next$18$lcssa;
    label = 87;
    break;
   }
   case 1:  {
    $148 = ($bits$0>>>0)<(16);
    if ($148) {
     $bits$2752 = $bits$0;$have$2750 = $have$0;$hold$2751 = $hold$0;$next$2749 = $next$0;
     while(1) {
      $192 = ($have$2750|0)==(0);
      if ($192) {
       $bits$52 = $bits$2752;$have$56 = 0;$hold$52 = $hold$2751;$left$01582 = $left$0;$next$56 = $next$2749;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
       break L17;
      }
      $193 = (($have$2750) + -1)|0;
      $194 = (($next$2749) + 1|0);
      $195 = HEAP8[$next$2749>>0]|0;
      $196 = $195&255;
      $197 = $196 << $bits$2752;
      $198 = (($197) + ($hold$2751))|0;
      $199 = (($bits$2752) + 8)|0;
      $200 = ($199>>>0)<(16);
      if ($200) {
       $bits$2752 = $199;$have$2750 = $193;$hold$2751 = $198;$next$2749 = $194;
      } else {
       $bits$2$lcssa = $199;$have$2$lcssa = $193;$hold$2$lcssa = $198;$next$2$lcssa = $194;
       break;
      }
     }
    } else {
     $bits$2$lcssa = $bits$0;$have$2$lcssa = $have$0;$hold$2$lcssa = $hold$0;$next$2$lcssa = $next$0;
    }
    HEAP32[$102>>2] = $hold$2$lcssa;
    $201 = $hold$2$lcssa & 255;
    $202 = ($201|0)==(8);
    if (!($202)) {
     HEAP32[$106>>2] = 6983344;
     HEAP32[$12>>2] = 27;
     $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$2$lcssa;$have$0 = $have$2$lcssa;$hold$0 = $hold$2$lcssa;$next$0 = $next$2$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
    $203 = $hold$2$lcssa & 57344;
    $204 = ($203|0)==(0);
    if (!($204)) {
     HEAP32[$105>>2] = 6983400;
     HEAP32[$12>>2] = 27;
     $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$2$lcssa;$have$0 = $have$2$lcssa;$hold$0 = $hold$2$lcssa;$next$0 = $next$2$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
    $205 = $hold$2$lcssa & 512;
    $206 = ($205|0)==(0);
    if (!($206)) {
     $207 = $hold$2$lcssa&255;
     HEAP8[$hbuf>>0] = $207;
     $208 = $hold$2$lcssa >>> 8;
     $209 = $208&255;
     HEAP8[$103>>0] = $209;
     $210 = HEAP32[$104>>2]|0;
     $211 = (_crc32($210,$hbuf,2)|0);
     HEAP32[$104>>2] = $211;
    }
    HEAP32[$12>>2] = 2;
    $bits$3762 = 0;$have$3760 = $have$2$lcssa;$hold$3761 = 0;$next$3759 = $next$2$lcssa;
    label = 38;
    break;
   }
   case 0:  {
    $149 = HEAP32[$25>>2]|0;
    $150 = ($149|0)==(0);
    if ($150) {
     HEAP32[$12>>2] = 12;
     $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$next$0$phi = $next$0;$left$0$phi = $left$0;$hold$0$phi = $hold$0;$have$0$phi = $have$0;$bits$0$phi = $bits$0;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$next$0 = $next$0$phi;$left$0 = $left$0$phi;$hold$0 = $hold$0$phi;$have$0 = $have$0$phi;$bits$0 = $bits$0$phi;
     continue L17;
    }
    $151 = ($bits$0>>>0)<(16);
    if ($151) {
     $bits$1799 = $bits$0;$have$1797 = $have$0;$hold$1798 = $hold$0;$next$1796 = $next$0;
     while(1) {
      $152 = ($have$1797|0)==(0);
      if ($152) {
       $bits$52 = $bits$1799;$have$56 = 0;$hold$52 = $hold$1798;$left$01582 = $left$0;$next$56 = $next$1796;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
       break L17;
      }
      $153 = (($have$1797) + -1)|0;
      $154 = (($next$1796) + 1|0);
      $155 = HEAP8[$next$1796>>0]|0;
      $156 = $155&255;
      $157 = $156 << $bits$1799;
      $158 = (($157) + ($hold$1798))|0;
      $159 = (($bits$1799) + 8)|0;
      $160 = ($159>>>0)<(16);
      if ($160) {
       $bits$1799 = $159;$have$1797 = $153;$hold$1798 = $158;$next$1796 = $154;
      } else {
       $bits$1$lcssa = $159;$have$1$lcssa = $153;$hold$1$lcssa = $158;$next$1$lcssa = $154;
       break;
      }
     }
    } else {
     $bits$1$lcssa = $bits$0;$have$1$lcssa = $have$0;$hold$1$lcssa = $hold$0;$next$1$lcssa = $next$0;
    }
    $161 = HEAP32[$25>>2]|0;
    $162 = $161 & 2;
    $163 = ($162|0)!=(0);
    $164 = ($hold$1$lcssa|0)==(35615);
    $or$cond = $163 & $164;
    if ($or$cond) {
     $165 = (_crc32(0,0,0)|0);
     HEAP32[$26>>2] = $165;
     $166 = $hold$1$lcssa&255;
     HEAP8[$hbuf>>0] = $166;
     $167 = $hold$1$lcssa >>> 8;
     $168 = $167&255;
     HEAP8[$27>>0] = $168;
     $169 = HEAP32[$26>>2]|0;
     $170 = (_crc32($169,$hbuf,2)|0);
     HEAP32[$26>>2] = $170;
     HEAP32[$12>>2] = 1;
     $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = 0;$have$0 = $have$1$lcssa;$hold$0 = 0;$next$0 = $next$1$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
    HEAP32[$28>>2] = 0;
    $171 = HEAP32[$25>>2]|0;
    $172 = $171 & 1;
    $173 = ($172|0)==(0);
    if (!($173)) {
     $174 = $hold$1$lcssa << 8;
     $175 = $174 & 65280;
     $176 = $hold$1$lcssa >>> 8;
     $177 = (($175) + ($176))|0;
     $178 = (($177>>>0) % 31)&-1;
     $179 = ($178|0)==(0);
     if ($179) {
      $180 = $hold$1$lcssa & 15;
      $181 = ($180|0)==(8);
      if (!($181)) {
       HEAP32[$34>>2] = 6983344;
       HEAP32[$12>>2] = 27;
       $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$1$lcssa;$have$0 = $have$1$lcssa;$hold$0 = $hold$1$lcssa;$next$0 = $next$1$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
       continue L17;
      }
      $182 = $hold$1$lcssa >>> 4;
      $183 = $182 & 15;
      $184 = (($183) + 8)|0;
      $185 = HEAP32[$30>>2]|0;
      $186 = ($184>>>0)>($185>>>0);
      if ($186) {
       $187 = (($bits$1$lcssa) + -4)|0;
       HEAP32[$31>>2] = 6983376;
       HEAP32[$12>>2] = 27;
       $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $187;$have$0 = $have$1$lcssa;$hold$0 = $182;$next$0 = $next$1$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
       continue L17;
      } else {
       $188 = (_adler32(0,0,0)|0);
       HEAP32[$32>>2] = $188;
       HEAP32[$33>>2] = $188;
       $189 = $hold$1$lcssa >>> 12;
       $190 = $189 & 2;
       $191 = $190 ^ 11;
       HEAP32[$12>>2] = $191;
       $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = 0;$have$0 = $have$1$lcssa;$hold$0 = 0;$next$0 = $next$1$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
       continue L17;
      }
     }
    }
    HEAP32[$29>>2] = 6983320;
    HEAP32[$12>>2] = 27;
    $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$1$lcssa;$have$0 = $have$1$lcssa;$hold$0 = $hold$1$lcssa;$next$0 = $next$1$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
    continue L17;
    break;
   }
   case 2:  {
    $212 = ($bits$0>>>0)<(32);
    if ($212) {
     $bits$3762 = $bits$0;$have$3760 = $have$0;$hold$3761 = $hold$0;$next$3759 = $next$0;
     label = 38;
    } else {
     $have$3$lcssa = $have$0;$hold$3$lcssa = $hold$0;$next$3$lcssa = $next$0;
     label = 40;
    }
    break;
   }
   case 3:  {
    $234 = ($bits$0>>>0)<(16);
    if ($234) {
     $bits$4771 = $bits$0;$have$4769 = $have$0;$hold$4770 = $hold$0;$next$4768 = $next$0;
     label = 44;
    } else {
     $have$4$lcssa = $have$0;$hold$4$lcssa = $hold$0;$next$4$lcssa = $next$0;
     label = 46;
    }
    break;
   }
   case 4:  {
    $bits$5 = $bits$0;$have$5 = $have$0;$hold$5 = $hold$0;$next$5 = $next$0;
    label = 49;
    break;
   }
   case 5:  {
    $bits$8 = $bits$0;$have$8 = $have$0;$hold$8 = $hold$0;$next$8 = $next$0;
    label = 56;
    break;
   }
   case 6:  {
    $bits$9 = $bits$0;$have$11 = $have$0;$hold$9 = $hold$0;$next$11 = $next$0;
    label = 63;
    break;
   }
   case 7:  {
    $bits$10 = $bits$0;$have$13 = $have$0;$hold$10 = $hold$0;$next$13 = $next$0;
    label = 70;
    break;
   }
   case 11:  {
    $bits$16 = $bits$0;$have$20 = $have$0;$hold$16 = $hold$0;$next$20 = $next$0;
    label = 90;
    break;
   }
   case 12:  {
    $bits$17 = $bits$0;$have$21 = $have$0;$hold$17 = $hold$0;$next$21 = $next$0;
    label = 91;
    break;
   }
   case 13:  {
    $371 = $bits$0 & 7;
    $372 = $hold$0 >>> $371;
    $373 = (($bits$0) - ($371))|0;
    $374 = ($373>>>0)<(32);
    if ($374) {
     $bits$19722 = $373;$have$23720 = $have$0;$hold$19721 = $372;$next$23719 = $next$0;
     while(1) {
      $375 = ($have$23720|0)==(0);
      if ($375) {
       $bits$52 = $bits$19722;$have$56 = 0;$hold$52 = $hold$19721;$left$01582 = $left$0;$next$56 = $next$23719;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
       break L17;
      }
      $376 = (($have$23720) + -1)|0;
      $377 = (($next$23719) + 1|0);
      $378 = HEAP8[$next$23719>>0]|0;
      $379 = $378&255;
      $380 = $379 << $bits$19722;
      $381 = (($380) + ($hold$19721))|0;
      $382 = (($bits$19722) + 8)|0;
      $383 = ($382>>>0)<(32);
      if ($383) {
       $bits$19722 = $382;$have$23720 = $376;$hold$19721 = $381;$next$23719 = $377;
      } else {
       $bits$19$lcssa = $382;$have$23$lcssa = $376;$hold$19$lcssa = $381;$next$23$lcssa = $377;
       break;
      }
     }
    } else {
     $bits$19$lcssa = $373;$have$23$lcssa = $have$0;$hold$19$lcssa = $372;$next$23$lcssa = $next$0;
    }
    $384 = $hold$19$lcssa & 65535;
    $385 = $hold$19$lcssa >>> 16;
    $386 = $385 ^ 65535;
    $387 = ($384|0)==($386|0);
    if ($387) {
     HEAP32[$57>>2] = $384;
     HEAP32[$12>>2] = 14;
     $bits$20 = 0;$have$24 = $have$23$lcssa;$hold$20 = 0;$next$24 = $next$23$lcssa;
     label = 108;
     break L19;
    } else {
     HEAP32[$58>>2] = 6983480;
     HEAP32[$12>>2] = 27;
     $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$19$lcssa;$have$0 = $have$23$lcssa;$hold$0 = $hold$19$lcssa;$next$0 = $next$23$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
    break;
   }
   case 14:  {
    $bits$20 = $bits$0;$have$24 = $have$0;$hold$20 = $hold$0;$next$24 = $next$0;
    label = 108;
    break;
   }
   case 16:  {
    $bits$22$ph = $bits$0;$have$26$ph = $have$0;$hold$22$ph = $hold$0;$next$26$ph = $next$0;
    label = 118;
    break;
   }
   case 17:  {
    $bits$24$ph = $bits$0;$have$28$ph = $have$0;$hold$24$ph = $hold$0;$next$28$ph = $next$0;$ret$1$ph = $ret$0;
    label = 129;
    break;
   }
   case 20:  {
    $bits$39$ph = $bits$0;$have$43$ph = $have$0;$hold$39$ph = $hold$0;$next$43$ph = $next$0;$ret$4$ph = $ret$0;
    label = 187;
    break;
   }
   case 8:  {
    $bits$11 = $bits$0;$have$15 = $have$0;$hold$11 = $hold$0;$next$15 = $next$0;
    break;
   }
   case 18:  {
    $bits$32 = $bits$0;$have$36 = $have$0;$hold$32 = $hold$0;$next$36 = $next$0;$ret$2 = $ret$0;
    label = 163;
    break;
   }
   case 10:  {
    $bits$15 = $bits$0;$have$19 = $have$0;$hold$15 = $hold$0;$next$19 = $next$0;
    label = 87;
    break;
   }
   case 28:  {
    $$0 = -4;
    label = 255;
    break L17;
    break;
   }
   default: {
    label = 254;
    break L17;
   }
   }
  } while(0);
  do {
   if ((label|0) == 38) {
    while(1) {
     label = 0;
     $213 = ($have$3760|0)==(0);
     if ($213) {
      $bits$52 = $bits$3762;$have$56 = 0;$hold$52 = $hold$3761;$left$01582 = $left$0;$next$56 = $next$3759;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
      break L17;
     }
     $214 = (($have$3760) + -1)|0;
     $215 = (($next$3759) + 1|0);
     $216 = HEAP8[$next$3759>>0]|0;
     $217 = $216&255;
     $218 = $217 << $bits$3762;
     $219 = (($218) + ($hold$3761))|0;
     $220 = (($bits$3762) + 8)|0;
     $221 = ($220>>>0)<(32);
     if ($221) {
      $bits$3762 = $220;$have$3760 = $214;$hold$3761 = $219;$next$3759 = $215;
      label = 38;
     } else {
      $have$3$lcssa = $214;$hold$3$lcssa = $219;$next$3$lcssa = $215;
      label = 40;
      break;
     }
    }
   }
   else if ((label|0) == 87) {
    label = 0;
    $348 = HEAP32[$51>>2]|0;
    $349 = ($348|0)==(0);
    if ($349) {
     $bits$15$lcssa = $bits$15;$have$19$lcssa = $have$19;$hold$15$lcssa = $hold$15;$left$0$lcssa1574 = $left$0;$next$19$lcssa = $next$19;$put$0$lcssa1515 = $put$0;
     label = 88;
     break L17;
    }
    $350 = (_adler32(0,0,0)|0);
    HEAP32[$52>>2] = $350;
    HEAP32[$53>>2] = $350;
    HEAP32[$12>>2] = 11;
    $bits$16 = $bits$15;$have$20 = $have$19;$hold$16 = $hold$15;$next$20 = $next$19;
    label = 90;
   }
   else if ((label|0) == 108) {
    label = 0;
    $388 = HEAP32[$59>>2]|0;
    $389 = ($388|0)==(0);
    if ($389) {
     HEAP32[$12>>2] = 11;
     $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$20;$have$0 = $have$24;$hold$0 = $hold$20;$next$0 = $next$24;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
    $390 = ($388>>>0)>($have$24>>>0);
    $have$24$ = $390 ? $have$24 : $388;
    $391 = ($have$24$>>>0)>($left$0>>>0);
    $copy$4 = $391 ? $left$0 : $have$24$;
    $392 = ($copy$4|0)==(0);
    if ($392) {
     $bits$52 = $bits$20;$have$56 = $have$24;$hold$52 = $hold$20;$left$01582 = $left$0;$next$56 = $next$24;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
     break L17;
    }
    _memcpy(($put$0|0),($next$24|0),($copy$4|0))|0;
    $393 = (($have$24) - ($copy$4))|0;
    $394 = (($next$24) + ($copy$4)|0);
    $395 = (($left$0) - ($copy$4))|0;
    $396 = (($put$0) + ($copy$4)|0);
    $397 = HEAP32[$59>>2]|0;
    $398 = (($397) - ($copy$4))|0;
    HEAP32[$59>>2] = $398;
    $ret$0$phi = $ret$0;$out$0$phi = $out$0;$bits$0 = $bits$20;$have$0 = $393;$hold$0 = $hold$20;$left$0 = $395;$next$0 = $394;$put$0 = $396;$ret$0 = $ret$0$phi;$out$0 = $out$0$phi;
    continue L17;
   }
   else if ((label|0) == 118) {
    label = 0;
    $422 = HEAP32[$131>>2]|0;
    $423 = HEAP32[$132>>2]|0;
    $424 = ($422>>>0)<($423>>>0);
    if ($424) {
     $bits$22550 = $bits$22$ph;$have$26548 = $have$26$ph;$hold$22549 = $hold$22$ph;$next$26547 = $next$26$ph;
     while(1) {
      $426 = ($bits$22550>>>0)<(3);
      if ($426) {
       $bits$23540 = $bits$22550;$have$27538 = $have$26548;$hold$23539 = $hold$22549;$next$27537 = $next$26547;
       while(1) {
        $427 = ($have$27538|0)==(0);
        if ($427) {
         $bits$52 = $bits$23540;$have$56 = 0;$hold$52 = $hold$23539;$left$01582 = $left$0;$next$56 = $next$27537;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
         break L17;
        }
        $428 = (($have$27538) + -1)|0;
        $429 = (($next$27537) + 1|0);
        $430 = HEAP8[$next$27537>>0]|0;
        $431 = $430&255;
        $432 = $431 << $bits$23540;
        $433 = (($432) + ($hold$23539))|0;
        $434 = (($bits$23540) + 8)|0;
        $435 = ($434>>>0)<(3);
        if ($435) {
         $bits$23540 = $434;$have$27538 = $428;$hold$23539 = $433;$next$27537 = $429;
        } else {
         $bits$23$lcssa = $434;$have$27$lcssa = $428;$hold$23$lcssa = $433;$next$27$lcssa = $429;
         break;
        }
       }
      } else {
       $bits$23$lcssa = $bits$22550;$have$27$lcssa = $have$26548;$hold$23$lcssa = $hold$22549;$next$27$lcssa = $next$26547;
      }
      $436 = $hold$23$lcssa & 7;
      $437 = $436&65535;
      $438 = HEAP32[$131>>2]|0;
      $439 = (($438) + 1)|0;
      HEAP32[$131>>2] = $439;
      $440 = (6983280 + ($438<<1)|0);
      $441 = HEAP16[$440>>1]|0;
      $442 = $441&65535;
      $443 = ((($12) + ($442<<1)|0) + 104|0);
      HEAP16[$443>>1] = $437;
      $444 = $hold$23$lcssa >>> 3;
      $445 = (($bits$23$lcssa) + -3)|0;
      $446 = HEAP32[$131>>2]|0;
      $447 = HEAP32[$132>>2]|0;
      $448 = ($446>>>0)<($447>>>0);
      if ($448) {
       $bits$22550 = $445;$have$26548 = $have$27$lcssa;$hold$22549 = $444;$next$26547 = $next$27$lcssa;
      } else {
       $$lcssa95 = $446;$bits$22$lcssa = $445;$have$26$lcssa = $have$27$lcssa;$hold$22$lcssa = $444;$next$26$lcssa = $next$27$lcssa;
       break;
      }
     }
    } else {
     $$lcssa95 = $422;$bits$22$lcssa = $bits$22$ph;$have$26$lcssa = $have$26$ph;$hold$22$lcssa = $hold$22$ph;$next$26$lcssa = $next$26$ph;
    }
    $425 = ($$lcssa95>>>0)<(19);
    if ($425) {
     $450 = $$lcssa95;
     while(1) {
      $449 = (($450) + 1)|0;
      $451 = (6983280 + ($450<<1)|0);
      $452 = HEAP16[$451>>1]|0;
      $453 = $452&65535;
      $454 = ((($12) + ($453<<1)|0) + 104|0);
      HEAP16[$454>>1] = 0;
      $exitcond = ($449|0)==(19);
      if ($exitcond) {
       break;
      } else {
       $450 = $449;
      }
     }
     HEAP32[$131>>2] = 19;
    }
    HEAP32[$134>>2] = $133;
    HEAP32[$135>>2] = $133;
    HEAP32[$136>>2] = 7;
    $455 = (_inflate_table(0,$137,19,$134,$136,$138)|0);
    $456 = ($455|0)==(0);
    if ($456) {
     HEAP32[$131>>2] = 0;
     HEAP32[$12>>2] = 17;
     $bits$24$ph = $bits$22$lcssa;$have$28$ph = $have$26$lcssa;$hold$24$ph = $hold$22$lcssa;$next$28$ph = $next$26$lcssa;$ret$1$ph = 0;
     label = 129;
     break;
    } else {
     HEAP32[$139>>2] = 6983552;
     HEAP32[$12>>2] = 27;
     $put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$22$lcssa;$have$0 = $have$26$lcssa;$hold$0 = $hold$22$lcssa;$next$0 = $next$26$lcssa;$ret$0 = $455;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
   }
   else if ((label|0) == 234) {
    label = 0;
    $873 = HEAP32[$90>>2]|0;
    $874 = ($873|0)==(0);
    if ($874) {
     $bits$50 = $bits$48;$have$54 = $have$52;$hold$50 = $hold$48;$left$0$lcssa1557 = $left$0;$next$54 = $next$52;$out$2$lcssa = $out$2;$put$0$lcssa1498 = $put$0;
     label = 241;
     break L17;
    }
    $875 = HEAP32[$91>>2]|0;
    $876 = ($875|0)==(0);
    if ($876) {
     $bits$50 = $bits$48;$have$54 = $have$52;$hold$50 = $hold$48;$left$0$lcssa1557 = $left$0;$next$54 = $next$52;$out$2$lcssa = $out$2;$put$0$lcssa1498 = $put$0;
     label = 241;
     break L17;
    }
    $877 = ($bits$48>>>0)<(32);
    if ($877) {
     $bits$49520 = $bits$48;$have$53518 = $have$52;$hold$49519 = $hold$48;$next$53517 = $next$52;
     while(1) {
      $878 = ($have$53518|0)==(0);
      if ($878) {
       $bits$52 = $bits$49520;$have$56 = 0;$hold$52 = $hold$49519;$left$01582 = $left$0;$next$56 = $next$53517;$out$4 = $out$2;$put$01523 = $put$0;$ret$7 = $ret$0;
       break L17;
      }
      $879 = (($have$53518) + -1)|0;
      $880 = (($next$53517) + 1|0);
      $881 = HEAP8[$next$53517>>0]|0;
      $882 = $881&255;
      $883 = $882 << $bits$49520;
      $884 = (($883) + ($hold$49519))|0;
      $885 = (($bits$49520) + 8)|0;
      $886 = ($885>>>0)<(32);
      if ($886) {
       $bits$49520 = $885;$have$53518 = $879;$hold$49519 = $884;$next$53517 = $880;
      } else {
       $bits$49$lcssa = $885;$have$53$lcssa = $879;$hold$49$lcssa = $884;$next$53$lcssa = $880;
       break;
      }
     }
    } else {
     $bits$49$lcssa = $bits$48;$have$53$lcssa = $have$52;$hold$49$lcssa = $hold$48;$next$53$lcssa = $next$52;
    }
    $887 = HEAP32[$92>>2]|0;
    $888 = ($hold$49$lcssa|0)==($887|0);
    if ($888) {
     $bits$50 = 0;$have$54 = $have$53$lcssa;$hold$50 = 0;$left$0$lcssa1557 = $left$0;$next$54 = $next$53$lcssa;$out$2$lcssa = $out$2;$put$0$lcssa1498 = $put$0;
     label = 241;
     break L17;
    }
    HEAP32[$93>>2] = 6983696;
    HEAP32[$12>>2] = 27;
    $ret$0$phi = $ret$0;$put$0$phi = $put$0;$left$0$phi = $left$0;$bits$0 = $bits$49$lcssa;$have$0 = $have$53$lcssa;$hold$0 = $hold$49$lcssa;$next$0 = $next$53$lcssa;$out$0 = $out$2;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$left$0 = $left$0$phi;
    continue L17;
   }
  } while(0);
  do {
   if ((label|0) == 40) {
    label = 0;
    $222 = HEAP32[$97>>2]|0;
    $223 = $222 & 512;
    $224 = ($223|0)==(0);
    if (!($224)) {
     $225 = $hold$3$lcssa&255;
     HEAP8[$hbuf>>0] = $225;
     $226 = $hold$3$lcssa >>> 8;
     $227 = $226&255;
     HEAP8[$98>>0] = $227;
     $228 = $hold$3$lcssa >>> 16;
     $229 = $228&255;
     HEAP8[$99>>0] = $229;
     $230 = $hold$3$lcssa >>> 24;
     $231 = $230&255;
     HEAP8[$100>>0] = $231;
     $232 = HEAP32[$101>>2]|0;
     $233 = (_crc32($232,$hbuf,4)|0);
     HEAP32[$101>>2] = $233;
    }
    HEAP32[$12>>2] = 3;
    $bits$4771 = 0;$have$4769 = $have$3$lcssa;$hold$4770 = 0;$next$4768 = $next$3$lcssa;
    label = 44;
   }
   else if ((label|0) == 90) {
    label = 0;
    if ($54) {
     $bits$52 = $bits$16;$have$56 = $have$20;$hold$52 = $hold$16;$left$01582 = $left$0;$next$56 = $next$20;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
     break L17;
    } else {
     $bits$17 = $bits$16;$have$21 = $have$20;$hold$17 = $hold$16;$next$21 = $next$20;
     label = 91;
    }
   }
   else if ((label|0) == 129) {
    label = 0;
    $457 = HEAP32[$114>>2]|0;
    $458 = HEAP32[$115>>2]|0;
    $459 = HEAP32[$116>>2]|0;
    $460 = (($459) + ($458))|0;
    $461 = ($457>>>0)<($460>>>0);
    L151: do {
     if ($461) {
      $bits$24622 = $bits$24$ph;$have$28620 = $have$28$ph;$hold$24621 = $hold$24$ph;$next$28619 = $next$28$ph;
      while(1) {
       $462 = HEAP32[$127>>2]|0;
       $463 = 1 << $462;
       $464 = (($463) + -1)|0;
       $465 = $464 & $hold$24621;
       $466 = HEAP32[$128>>2]|0;
       $467 = ((($466) + ($465<<2)|0) + 1|0);
       $468 = HEAP8[$467>>0]|0;
       $469 = ((($466) + ($465<<2)|0) + 2|0);
       $470 = $468&255;
       $471 = ($470>>>0)>($bits$24622>>>0);
       if ($471) {
        $bits$25564 = $bits$24622;$have$29562 = $have$28620;$hold$25563 = $hold$24621;$next$29561 = $next$28619;
        while(1) {
         $472 = ($have$29562|0)==(0);
         if ($472) {
          $bits$52 = $bits$25564;$have$56 = 0;$hold$52 = $hold$25563;$left$01582 = $left$0;$next$56 = $next$29561;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$1$ph;
          break L17;
         }
         $473 = (($have$29562) + -1)|0;
         $474 = (($next$29561) + 1|0);
         $475 = HEAP8[$next$29561>>0]|0;
         $476 = $475&255;
         $477 = $476 << $bits$25564;
         $478 = (($477) + ($hold$25563))|0;
         $479 = (($bits$25564) + 8)|0;
         $480 = HEAP32[$127>>2]|0;
         $481 = 1 << $480;
         $482 = (($481) + -1)|0;
         $483 = $482 & $478;
         $484 = HEAP32[$128>>2]|0;
         $485 = ((($484) + ($483<<2)|0) + 1|0);
         $486 = HEAP8[$485>>0]|0;
         $487 = $486&255;
         $488 = ($487>>>0)>($479>>>0);
         if ($488) {
          $bits$25564 = $479;$have$29562 = $473;$hold$25563 = $478;$next$29561 = $474;
         } else {
          $$lcssa1307 = $473;$$lcssa1308 = $474;$$lcssa1309 = $478;$$lcssa1310 = $479;$$lcssa1311 = $483;$$lcssa1312 = $484;$$lcssa1313 = $487;
          break;
         }
        }
        $489 = ((($$lcssa1312) + ($$lcssa1311<<2)|0) + 2|0);
        $$lcssa101$in = $489;$$lcssa574$pn = $$lcssa1313;$bits$25$lcssa = $$lcssa1310;$have$29$lcssa = $$lcssa1307;$hold$25$lcssa = $$lcssa1309;$next$29$lcssa = $$lcssa1308;
       } else {
        $$lcssa101$in = $469;$$lcssa574$pn = $470;$bits$25$lcssa = $bits$24622;$have$29$lcssa = $have$28620;$hold$25$lcssa = $hold$24621;$next$29$lcssa = $next$28619;
       }
       $$lcssa101 = HEAP16[$$lcssa101$in>>1]|0;
       $490 = ($$lcssa101&65535)<(16);
       if ($490) {
        $491 = ($bits$25$lcssa>>>0)<($$lcssa574$pn>>>0);
        if ($491) {
         $bits$26612 = $bits$25$lcssa;$have$30610 = $have$29$lcssa;$hold$26611 = $hold$25$lcssa;$next$30609 = $next$29$lcssa;
         while(1) {
          $492 = ($have$30610|0)==(0);
          if ($492) {
           $bits$52 = $bits$26612;$have$56 = 0;$hold$52 = $hold$26611;$left$01582 = $left$0;$next$56 = $next$30609;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$1$ph;
           break L17;
          }
          $493 = (($have$30610) + -1)|0;
          $494 = (($next$30609) + 1|0);
          $495 = HEAP8[$next$30609>>0]|0;
          $496 = $495&255;
          $497 = $496 << $bits$26612;
          $498 = (($497) + ($hold$26611))|0;
          $499 = (($bits$26612) + 8)|0;
          $500 = ($499>>>0)<($$lcssa574$pn>>>0);
          if ($500) {
           $bits$26612 = $499;$have$30610 = $493;$hold$26611 = $498;$next$30609 = $494;
          } else {
           $bits$26$lcssa = $499;$have$30$lcssa = $493;$hold$26$lcssa = $498;$next$30$lcssa = $494;
           break;
          }
         }
        } else {
         $bits$26$lcssa = $bits$25$lcssa;$have$30$lcssa = $have$29$lcssa;$hold$26$lcssa = $hold$25$lcssa;$next$30$lcssa = $next$29$lcssa;
        }
        $501 = $hold$26$lcssa >>> $$lcssa574$pn;
        $502 = (($bits$26$lcssa) - ($$lcssa574$pn))|0;
        $503 = HEAP32[$114>>2]|0;
        $504 = (($503) + 1)|0;
        HEAP32[$114>>2] = $504;
        $505 = ((($12) + ($503<<1)|0) + 104|0);
        HEAP16[$505>>1] = $$lcssa101;
        $bits$24$be = $502;$have$28$be = $have$30$lcssa;$hold$24$be = $501;$next$28$be = $next$30$lcssa;
       } else {
        if ((($$lcssa101<<16>>16) == 17)) {
         $511 = (($$lcssa574$pn) + 3)|0;
         $512 = ($bits$25$lcssa>>>0)<($511>>>0);
         if ($512) {
          $bits$28581 = $bits$25$lcssa;$have$32579 = $have$29$lcssa;$hold$28580 = $hold$25$lcssa;$next$32578 = $next$29$lcssa;
          while(1) {
           $537 = ($have$32579|0)==(0);
           if ($537) {
            $bits$52 = $bits$28581;$have$56 = 0;$hold$52 = $hold$28580;$left$01582 = $left$0;$next$56 = $next$32578;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$1$ph;
            break L17;
           }
           $538 = (($have$32579) + -1)|0;
           $539 = (($next$32578) + 1|0);
           $540 = HEAP8[$next$32578>>0]|0;
           $541 = $540&255;
           $542 = $541 << $bits$28581;
           $543 = (($542) + ($hold$28580))|0;
           $544 = (($bits$28581) + 8)|0;
           $545 = ($544>>>0)<($511>>>0);
           if ($545) {
            $bits$28581 = $544;$have$32579 = $538;$hold$28580 = $543;$next$32578 = $539;
           } else {
            $bits$28$lcssa = $544;$have$32$lcssa = $538;$hold$28$lcssa = $543;$next$32$lcssa = $539;
            break;
           }
          }
         } else {
          $bits$28$lcssa = $bits$25$lcssa;$have$32$lcssa = $have$29$lcssa;$hold$28$lcssa = $hold$25$lcssa;$next$32$lcssa = $next$29$lcssa;
         }
         $546 = $hold$28$lcssa >>> $$lcssa574$pn;
         $547 = $546 & 7;
         $548 = (($547) + 3)|0;
         $549 = $546 >>> 3;
         $550 = (-3 - ($$lcssa574$pn))|0;
         $551 = (($550) + ($bits$28$lcssa))|0;
         $bits$30 = $551;$copy$5 = $548;$have$34 = $have$32$lcssa;$hold$30 = $549;$len$0 = 0;$next$34 = $next$32$lcssa;
        } else if ((($$lcssa101<<16>>16) == 16)) {
         $513 = (($$lcssa574$pn) + 2)|0;
         $514 = ($bits$25$lcssa>>>0)<($513>>>0);
         if ($514) {
          $bits$27591 = $bits$25$lcssa;$have$31589 = $have$29$lcssa;$hold$27590 = $hold$25$lcssa;$next$31588 = $next$29$lcssa;
          while(1) {
           $517 = ($have$31589|0)==(0);
           if ($517) {
            $bits$52 = $bits$27591;$have$56 = 0;$hold$52 = $hold$27590;$left$01582 = $left$0;$next$56 = $next$31588;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$1$ph;
            break L17;
           }
           $518 = (($have$31589) + -1)|0;
           $519 = (($next$31588) + 1|0);
           $520 = HEAP8[$next$31588>>0]|0;
           $521 = $520&255;
           $522 = $521 << $bits$27591;
           $523 = (($522) + ($hold$27590))|0;
           $524 = (($bits$27591) + 8)|0;
           $525 = ($524>>>0)<($513>>>0);
           if ($525) {
            $bits$27591 = $524;$have$31589 = $518;$hold$27590 = $523;$next$31588 = $519;
           } else {
            $bits$27$lcssa = $524;$have$31$lcssa = $518;$hold$27$lcssa = $523;$next$31$lcssa = $519;
            break;
           }
          }
         } else {
          $bits$27$lcssa = $bits$25$lcssa;$have$31$lcssa = $have$29$lcssa;$hold$27$lcssa = $hold$25$lcssa;$next$31$lcssa = $next$29$lcssa;
         }
         $526 = $hold$27$lcssa >>> $$lcssa574$pn;
         $527 = (($bits$27$lcssa) - ($$lcssa574$pn))|0;
         $528 = HEAP32[$114>>2]|0;
         $529 = ($528|0)==(0);
         if ($529) {
          $$lcssa1342 = $526;$$lcssa1343 = $527;$have$31$lcssa$lcssa = $have$31$lcssa;$next$31$lcssa$lcssa = $next$31$lcssa;
          label = 147;
          break;
         }
         $530 = (($528) + -1)|0;
         $531 = ((($12) + ($530<<1)|0) + 104|0);
         $532 = HEAP16[$531>>1]|0;
         $533 = $526 & 3;
         $534 = (($533) + 3)|0;
         $535 = $526 >>> 2;
         $536 = (($527) + -2)|0;
         $bits$30 = $536;$copy$5 = $534;$have$34 = $have$31$lcssa;$hold$30 = $535;$len$0 = $532;$next$34 = $next$31$lcssa;
        } else {
         $515 = (($$lcssa574$pn) + 7)|0;
         $516 = ($bits$25$lcssa>>>0)<($515>>>0);
         if ($516) {
          $bits$29601 = $bits$25$lcssa;$have$33599 = $have$29$lcssa;$hold$29600 = $hold$25$lcssa;$next$33598 = $next$29$lcssa;
          while(1) {
           $552 = ($have$33599|0)==(0);
           if ($552) {
            $bits$52 = $bits$29601;$have$56 = 0;$hold$52 = $hold$29600;$left$01582 = $left$0;$next$56 = $next$33598;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$1$ph;
            break L17;
           }
           $553 = (($have$33599) + -1)|0;
           $554 = (($next$33598) + 1|0);
           $555 = HEAP8[$next$33598>>0]|0;
           $556 = $555&255;
           $557 = $556 << $bits$29601;
           $558 = (($557) + ($hold$29600))|0;
           $559 = (($bits$29601) + 8)|0;
           $560 = ($559>>>0)<($515>>>0);
           if ($560) {
            $bits$29601 = $559;$have$33599 = $553;$hold$29600 = $558;$next$33598 = $554;
           } else {
            $bits$29$lcssa = $559;$have$33$lcssa = $553;$hold$29$lcssa = $558;$next$33$lcssa = $554;
            break;
           }
          }
         } else {
          $bits$29$lcssa = $bits$25$lcssa;$have$33$lcssa = $have$29$lcssa;$hold$29$lcssa = $hold$25$lcssa;$next$33$lcssa = $next$29$lcssa;
         }
         $561 = $hold$29$lcssa >>> $$lcssa574$pn;
         $562 = $561 & 127;
         $563 = (($562) + 11)|0;
         $564 = $561 >>> 7;
         $565 = (-7 - ($$lcssa574$pn))|0;
         $566 = (($565) + ($bits$29$lcssa))|0;
         $bits$30 = $566;$copy$5 = $563;$have$34 = $have$33$lcssa;$hold$30 = $564;$len$0 = 0;$next$34 = $next$33$lcssa;
        }
        $567 = HEAP32[$114>>2]|0;
        $568 = (($567) + ($copy$5))|0;
        $569 = HEAP32[$115>>2]|0;
        $570 = HEAP32[$116>>2]|0;
        $571 = (($570) + ($569))|0;
        $572 = ($568>>>0)>($571>>>0);
        if ($572) {
         $bits$30$lcssa = $bits$30;$have$34$lcssa = $have$34;$hold$30$lcssa = $hold$30;$next$34$lcssa = $next$34;
         label = 156;
         break;
        } else {
         $copy$6608 = $copy$5;
        }
        while(1) {
         $573 = (($copy$6608) + -1)|0;
         $574 = HEAP32[$114>>2]|0;
         $575 = (($574) + 1)|0;
         HEAP32[$114>>2] = $575;
         $576 = ((($12) + ($574<<1)|0) + 104|0);
         HEAP16[$576>>1] = $len$0;
         $577 = ($573|0)==(0);
         if ($577) {
          $bits$24$be = $bits$30;$have$28$be = $have$34;$hold$24$be = $hold$30;$next$28$be = $next$34;
          break;
         } else {
          $copy$6608 = $573;
         }
        }
       }
       $506 = HEAP32[$114>>2]|0;
       $507 = HEAP32[$115>>2]|0;
       $508 = HEAP32[$116>>2]|0;
       $509 = (($508) + ($507))|0;
       $510 = ($506>>>0)<($509>>>0);
       if ($510) {
        $bits$24622 = $bits$24$be;$have$28620 = $have$28$be;$hold$24621 = $hold$24$be;$next$28619 = $next$28$be;
       } else {
        $bits$31 = $bits$24$be;$have$35 = $have$28$be;$hold$31 = $hold$24$be;$next$35 = $next$28$be;
        break L151;
       }
      }
      if ((label|0) == 147) {
       label = 0;
       HEAP32[$130>>2] = 6983584;
       HEAP32[$12>>2] = 27;
       $bits$31 = $$lcssa1343;$have$35 = $have$31$lcssa$lcssa;$hold$31 = $$lcssa1342;$next$35 = $next$31$lcssa$lcssa;
       break;
      }
      else if ((label|0) == 156) {
       label = 0;
       HEAP32[$129>>2] = 6983584;
       HEAP32[$12>>2] = 27;
       $bits$31 = $bits$30$lcssa;$have$35 = $have$34$lcssa;$hold$31 = $hold$30$lcssa;$next$35 = $next$34$lcssa;
       break;
      }
     } else {
      $bits$31 = $bits$24$ph;$have$35 = $have$28$ph;$hold$31 = $hold$24$ph;$next$35 = $next$28$ph;
     }
    } while(0);
    HEAP32[$118>>2] = $117;
    HEAP32[$119>>2] = $117;
    HEAP32[$120>>2] = 9;
    $578 = HEAP32[$115>>2]|0;
    $579 = (_inflate_table(1,$121,$578,$118,$120,$122)|0);
    $580 = ($579|0)==(0);
    if (!($580)) {
     HEAP32[$126>>2] = 6983616;
     HEAP32[$12>>2] = 27;
     $put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$31;$have$0 = $have$35;$hold$0 = $hold$31;$next$0 = $next$35;$ret$0 = $579;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
    $581 = HEAP32[$118>>2]|0;
    HEAP32[$123>>2] = $581;
    HEAP32[$124>>2] = 6;
    $582 = HEAP32[$115>>2]|0;
    $583 = ((($12) + ($582<<1)|0) + 104|0);
    $584 = HEAP32[$116>>2]|0;
    $585 = (_inflate_table(2,$583,$584,$118,$124,$122)|0);
    $586 = ($585|0)==(0);
    if ($586) {
     HEAP32[$12>>2] = 18;
     $bits$32 = $bits$31;$have$36 = $have$35;$hold$32 = $hold$31;$next$36 = $next$35;$ret$2 = 0;
     label = 163;
     break;
    } else {
     HEAP32[$125>>2] = 6983648;
     HEAP32[$12>>2] = 27;
     $put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$31;$have$0 = $have$35;$hold$0 = $hold$31;$next$0 = $next$35;$ret$0 = $585;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
   }
  } while(0);
  do {
   if ((label|0) == 44) {
    while(1) {
     label = 0;
     $235 = ($have$4769|0)==(0);
     if ($235) {
      $bits$52 = $bits$4771;$have$56 = 0;$hold$52 = $hold$4770;$left$01582 = $left$0;$next$56 = $next$4768;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
      break L17;
     }
     $236 = (($have$4769) + -1)|0;
     $237 = (($next$4768) + 1|0);
     $238 = HEAP8[$next$4768>>0]|0;
     $239 = $238&255;
     $240 = $239 << $bits$4771;
     $241 = (($240) + ($hold$4770))|0;
     $242 = (($bits$4771) + 8)|0;
     $243 = ($242>>>0)<(16);
     if ($243) {
      $bits$4771 = $242;$have$4769 = $236;$hold$4770 = $241;$next$4768 = $237;
      label = 44;
     } else {
      $have$4$lcssa = $236;$hold$4$lcssa = $241;$next$4$lcssa = $237;
      label = 46;
      break;
     }
    }
   }
   else if ((label|0) == 91) {
    label = 0;
    $351 = HEAP32[$55>>2]|0;
    $352 = ($351|0)==(0);
    if (!($352)) {
     $354 = $bits$17 & 7;
     $355 = $hold$17 >>> $354;
     $356 = (($bits$17) - ($354))|0;
     HEAP32[$12>>2] = 24;
     $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $356;$have$0 = $have$21;$hold$0 = $355;$next$0 = $next$21;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
    $353 = ($bits$17>>>0)<(3);
    if ($353) {
     $bits$18742 = $bits$17;$have$22740 = $have$21;$hold$18741 = $hold$17;$next$22739 = $next$21;
     while(1) {
      $357 = ($have$22740|0)==(0);
      if ($357) {
       $bits$52 = $bits$18742;$have$56 = 0;$hold$52 = $hold$18741;$left$01582 = $left$0;$next$56 = $next$22739;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
       break L17;
      }
      $358 = (($have$22740) + -1)|0;
      $359 = (($next$22739) + 1|0);
      $360 = HEAP8[$next$22739>>0]|0;
      $361 = $360&255;
      $362 = $361 << $bits$18742;
      $363 = (($362) + ($hold$18741))|0;
      $364 = (($bits$18742) + 8)|0;
      $365 = ($364>>>0)<(3);
      if ($365) {
       $bits$18742 = $364;$have$22740 = $358;$hold$18741 = $363;$next$22739 = $359;
      } else {
       $bits$18$lcssa = $364;$have$22$lcssa = $358;$hold$18$lcssa = $363;$next$22$lcssa = $359;
       break;
      }
     }
    } else {
     $bits$18$lcssa = $bits$17;$have$22$lcssa = $have$21;$hold$18$lcssa = $hold$17;$next$22$lcssa = $next$21;
    }
    $366 = $hold$18$lcssa & 1;
    HEAP32[$55>>2] = $366;
    $367 = $hold$18$lcssa >>> 1;
    $368 = $367 & 3;
    if ((($368|0) == 0)) {
     HEAP32[$12>>2] = 13;
    } else if ((($368|0) == 1)) {
     _fixedtables($12);
     HEAP32[$12>>2] = 18;
    } else if ((($368|0) == 2)) {
     HEAP32[$12>>2] = 15;
    } else if ((($368|0) == 3)) {
     HEAP32[$56>>2] = 6983456;
     HEAP32[$12>>2] = 27;
    }
    $369 = $hold$18$lcssa >>> 3;
    $370 = (($bits$18$lcssa) + -3)|0;
    $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $370;$have$0 = $have$22$lcssa;$hold$0 = $369;$next$0 = $next$22$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
    continue L17;
   }
   else if ((label|0) == 163) {
    label = 0;
    $587 = ($have$36>>>0)>(5);
    $588 = ($left$0>>>0)>(257);
    $or$cond4 = $587 & $588;
    if ($or$cond4) {
     HEAP32[$4>>2] = $put$0;
     HEAP32[$16>>2] = $left$0;
     HEAP32[$strm>>2] = $next$36;
     HEAP32[$19>>2] = $have$36;
     HEAP32[$21>>2] = $hold$32;
     HEAP32[$23>>2] = $bits$32;
     _inflate_fast($strm,$out$0);
     $600 = HEAP32[$4>>2]|0;
     $601 = HEAP32[$16>>2]|0;
     $602 = HEAP32[$strm>>2]|0;
     $603 = HEAP32[$19>>2]|0;
     $604 = HEAP32[$21>>2]|0;
     $605 = HEAP32[$23>>2]|0;
     $out$0$phi = $out$0;$bits$0 = $605;$have$0 = $603;$hold$0 = $604;$left$0 = $601;$next$0 = $602;$put$0 = $600;$ret$0 = $ret$2;$out$0 = $out$0$phi;
     continue L17;
    }
    $589 = HEAP32[$60>>2]|0;
    $590 = 1 << $589;
    $591 = (($590) + -1)|0;
    $592 = $591 & $hold$32;
    $593 = HEAP32[$61>>2]|0;
    $594 = (($593) + ($592<<2)|0);
    $595 = ((($593) + ($592<<2)|0) + 1|0);
    $596 = HEAP8[$595>>0]|0;
    $597 = ((($593) + ($592<<2)|0) + 2|0);
    $598 = $596&255;
    $599 = ($598>>>0)>($bits$32>>>0);
    if ($599) {
     $bits$33632 = $bits$32;$have$37630 = $have$36;$hold$33631 = $hold$32;$next$37629 = $next$36;
     while(1) {
      $606 = ($have$37630|0)==(0);
      if ($606) {
       $bits$52 = $bits$33632;$have$56 = 0;$hold$52 = $hold$33631;$left$01582 = $left$0;$next$56 = $next$37629;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$2;
       break L17;
      }
      $607 = (($have$37630) + -1)|0;
      $608 = (($next$37629) + 1|0);
      $609 = HEAP8[$next$37629>>0]|0;
      $610 = $609&255;
      $611 = $610 << $bits$33632;
      $612 = (($611) + ($hold$33631))|0;
      $613 = (($bits$33632) + 8)|0;
      $614 = HEAP32[$60>>2]|0;
      $615 = 1 << $614;
      $616 = (($615) + -1)|0;
      $617 = $616 & $612;
      $618 = HEAP32[$61>>2]|0;
      $619 = ((($618) + ($617<<2)|0) + 1|0);
      $620 = HEAP8[$619>>0]|0;
      $621 = $620&255;
      $622 = ($621>>>0)>($613>>>0);
      if ($622) {
       $bits$33632 = $613;$have$37630 = $607;$hold$33631 = $612;$next$37629 = $608;
      } else {
       $$lcssa1347 = $607;$$lcssa1348 = $608;$$lcssa1349 = $612;$$lcssa1350 = $613;$$lcssa1351 = $617;$$lcssa1352 = $618;$$lcssa1353 = $620;$$lcssa1354 = $621;
       break;
      }
     }
     $623 = (($$lcssa1352) + ($$lcssa1351<<2)|0);
     $624 = ((($$lcssa1352) + ($$lcssa1351<<2)|0) + 2|0);
     $$lcssa174$in = $623;$$lcssa176 = $$lcssa1353;$$lcssa178$in = $624;$$lcssa180 = $$lcssa1354;$bits$33$lcssa = $$lcssa1350;$have$37$lcssa = $$lcssa1347;$hold$33$lcssa = $$lcssa1349;$next$37$lcssa = $$lcssa1348;
    } else {
     $$lcssa174$in = $594;$$lcssa176 = $596;$$lcssa178$in = $597;$$lcssa180 = $598;$bits$33$lcssa = $bits$32;$have$37$lcssa = $have$36;$hold$33$lcssa = $hold$32;$next$37$lcssa = $next$36;
    }
    $$lcssa174 = HEAP8[$$lcssa174$in>>0]|0;
    $$lcssa178 = HEAP16[$$lcssa178$in>>1]|0;
    $625 = $$lcssa174&255;
    $626 = ($$lcssa174<<24>>24)!=(0);
    $627 = $625 & 240;
    $628 = ($627|0)==(0);
    $or$cond16 = $626 & $628;
    if ($or$cond16) {
     $629 = $$lcssa178&65535;
     $630 = (($$lcssa180) + ($625))|0;
     $631 = 1 << $630;
     $632 = (($631) + -1)|0;
     $633 = $hold$33$lcssa & $632;
     $634 = $633 >>> $$lcssa180;
     $635 = (($634) + ($629))|0;
     $636 = HEAP32[$61>>2]|0;
     $637 = ((($636) + ($635<<2)|0) + 1|0);
     $638 = HEAP8[$637>>0]|0;
     $639 = $638&255;
     $640 = (($639) + ($$lcssa180))|0;
     $641 = ($640>>>0)>($bits$33$lcssa>>>0);
     if ($641) {
      $bits$34653 = $bits$33$lcssa;$have$38651 = $have$37$lcssa;$hold$34652 = $hold$33$lcssa;$next$38650 = $next$37$lcssa;
      while(1) {
       $642 = ($have$38651|0)==(0);
       if ($642) {
        $bits$52 = $bits$34653;$have$56 = 0;$hold$52 = $hold$34652;$left$01582 = $left$0;$next$56 = $next$38650;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$2;
        break L17;
       }
       $643 = (($have$38651) + -1)|0;
       $644 = (($next$38650) + 1|0);
       $645 = HEAP8[$next$38650>>0]|0;
       $646 = $645&255;
       $647 = $646 << $bits$34653;
       $648 = (($647) + ($hold$34652))|0;
       $649 = (($bits$34653) + 8)|0;
       $650 = $648 & $632;
       $651 = $650 >>> $$lcssa180;
       $652 = (($651) + ($629))|0;
       $653 = HEAP32[$61>>2]|0;
       $654 = ((($653) + ($652<<2)|0) + 1|0);
       $655 = HEAP8[$654>>0]|0;
       $656 = $655&255;
       $657 = (($656) + ($$lcssa180))|0;
       $658 = ($657>>>0)>($649>>>0);
       if ($658) {
        $bits$34653 = $649;$have$38651 = $643;$hold$34652 = $648;$next$38650 = $644;
       } else {
        $$lcssa186 = $652;$$lcssa188 = $653;$$lcssa190 = $655;$bits$34$lcssa = $649;$have$38$lcssa = $643;$hold$34$lcssa = $648;$next$38$lcssa = $644;
        break;
       }
      }
     } else {
      $$lcssa186 = $635;$$lcssa188 = $636;$$lcssa190 = $638;$bits$34$lcssa = $bits$33$lcssa;$have$38$lcssa = $have$37$lcssa;$hold$34$lcssa = $hold$33$lcssa;$next$38$lcssa = $next$37$lcssa;
     }
     $659 = ((($$lcssa188) + ($$lcssa186<<2)|0) + 2|0);
     $660 = HEAP16[$659>>1]|0;
     $661 = (($$lcssa188) + ($$lcssa186<<2)|0);
     $662 = HEAP8[$661>>0]|0;
     $663 = $hold$34$lcssa >>> $$lcssa180;
     $664 = (($bits$34$lcssa) - ($$lcssa180))|0;
     $bits$35 = $664;$have$39 = $have$38$lcssa;$hold$35 = $663;$next$39 = $next$38$lcssa;$this$sroa$0$0 = $662;$this$sroa$16$0 = $$lcssa190;$this$sroa$39$0 = $660;
    } else {
     $bits$35 = $bits$33$lcssa;$have$39 = $have$37$lcssa;$hold$35 = $hold$33$lcssa;$next$39 = $next$37$lcssa;$this$sroa$0$0 = $$lcssa174;$this$sroa$16$0 = $$lcssa176;$this$sroa$39$0 = $$lcssa178;
    }
    $665 = $this$sroa$16$0&255;
    $666 = $hold$35 >>> $665;
    $667 = (($bits$35) - ($665))|0;
    $668 = $this$sroa$39$0&65535;
    HEAP32[$62>>2] = $668;
    $669 = $this$sroa$0$0&255;
    $670 = ($this$sroa$0$0<<24>>24)==(0);
    if ($670) {
     HEAP32[$12>>2] = 23;
     $put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $667;$have$0 = $have$39;$hold$0 = $666;$next$0 = $next$39;$ret$0 = $ret$2;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
    $671 = $669 & 32;
    $672 = ($671|0)==(0);
    if (!($672)) {
     HEAP32[$12>>2] = 11;
     $put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $667;$have$0 = $have$39;$hold$0 = $666;$next$0 = $next$39;$ret$0 = $ret$2;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
    $673 = $669 & 64;
    $674 = ($673|0)==(0);
    if ($674) {
     $675 = $669 & 15;
     HEAP32[$63>>2] = $675;
     HEAP32[$12>>2] = 19;
     $bits$36 = $667;$have$40 = $have$39;$hold$36 = $666;$next$40 = $next$39;$ret$3 = $ret$2;
     label = 181;
     break;
    } else {
     HEAP32[$64>>2] = 6986208;
     HEAP32[$12>>2] = 27;
     $put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $667;$have$0 = $have$39;$hold$0 = $666;$next$0 = $next$39;$ret$0 = $ret$2;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
   }
  } while(0);
  if ((label|0) == 46) {
   label = 0;
   $244 = HEAP32[$94>>2]|0;
   $245 = $244 & 512;
   $246 = ($245|0)==(0);
   if (!($246)) {
    $247 = $hold$4$lcssa&255;
    HEAP8[$hbuf>>0] = $247;
    $248 = $hold$4$lcssa >>> 8;
    $249 = $248&255;
    HEAP8[$95>>0] = $249;
    $250 = HEAP32[$96>>2]|0;
    $251 = (_crc32($250,$hbuf,2)|0);
    HEAP32[$96>>2] = $251;
   }
   HEAP32[$12>>2] = 4;
   $bits$5 = 0;$have$5 = $have$4$lcssa;$hold$5 = 0;$next$5 = $next$4$lcssa;
   label = 49;
  }
  else if ((label|0) == 181) {
   label = 0;
   $676 = HEAP32[$65>>2]|0;
   $677 = ($676|0)==(0);
   if ($677) {
    $bits$38 = $bits$36;$have$42 = $have$40;$hold$38 = $hold$36;$next$42 = $next$40;
   } else {
    $678 = HEAP32[$65>>2]|0;
    $679 = ($bits$36>>>0)<($678>>>0);
    if ($679) {
     $bits$37666 = $bits$36;$have$41664 = $have$40;$hold$37665 = $hold$36;$next$41663 = $next$40;
     while(1) {
      $680 = ($have$41664|0)==(0);
      if ($680) {
       $bits$52 = $bits$37666;$have$56 = 0;$hold$52 = $hold$37665;$left$01582 = $left$0;$next$56 = $next$41663;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$3;
       break L17;
      }
      $681 = (($have$41664) + -1)|0;
      $682 = (($next$41663) + 1|0);
      $683 = HEAP8[$next$41663>>0]|0;
      $684 = $683&255;
      $685 = $684 << $bits$37666;
      $686 = (($685) + ($hold$37665))|0;
      $687 = (($bits$37666) + 8)|0;
      $688 = HEAP32[$65>>2]|0;
      $689 = ($687>>>0)<($688>>>0);
      if ($689) {
       $bits$37666 = $687;$have$41664 = $681;$hold$37665 = $686;$next$41663 = $682;
      } else {
       $$lcssa196 = $688;$bits$37$lcssa = $687;$have$41$lcssa = $681;$hold$37$lcssa = $686;$next$41$lcssa = $682;
       break;
      }
     }
    } else {
     $$lcssa196 = $678;$bits$37$lcssa = $bits$36;$have$41$lcssa = $have$40;$hold$37$lcssa = $hold$36;$next$41$lcssa = $next$40;
    }
    $690 = 1 << $$lcssa196;
    $691 = (($690) + -1)|0;
    $692 = $691 & $hold$37$lcssa;
    $693 = HEAP32[$66>>2]|0;
    $694 = (($693) + ($692))|0;
    HEAP32[$66>>2] = $694;
    $695 = HEAP32[$65>>2]|0;
    $696 = $hold$37$lcssa >>> $695;
    $697 = (($bits$37$lcssa) - ($695))|0;
    $bits$38 = $697;$have$42 = $have$41$lcssa;$hold$38 = $696;$next$42 = $next$41$lcssa;
   }
   HEAP32[$12>>2] = 20;
   $bits$39$ph = $bits$38;$have$43$ph = $have$42;$hold$39$ph = $hold$38;$next$43$ph = $next$42;$ret$4$ph = $ret$3;
   label = 187;
  }
  do {
   if ((label|0) == 49) {
    label = 0;
    $252 = HEAP32[$35>>2]|0;
    $253 = $252 & 1024;
    $254 = ($253|0)==(0);
    if ($254) {
     $bits$7 = $bits$5;$have$7 = $have$5;$hold$7 = $hold$5;$next$7 = $next$5;
    } else {
     $255 = ($bits$5>>>0)<(16);
     if ($255) {
      $bits$6780 = $bits$5;$have$6778 = $have$5;$hold$6779 = $hold$5;$next$6777 = $next$5;
      while(1) {
       $256 = ($have$6778|0)==(0);
       if ($256) {
        $bits$52 = $bits$6780;$have$56 = 0;$hold$52 = $hold$6779;$left$01582 = $left$0;$next$56 = $next$6777;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
        break L17;
       }
       $257 = (($have$6778) + -1)|0;
       $258 = (($next$6777) + 1|0);
       $259 = HEAP8[$next$6777>>0]|0;
       $260 = $259&255;
       $261 = $260 << $bits$6780;
       $262 = (($261) + ($hold$6779))|0;
       $263 = (($bits$6780) + 8)|0;
       $264 = ($263>>>0)<(16);
       if ($264) {
        $bits$6780 = $263;$have$6778 = $257;$hold$6779 = $262;$next$6777 = $258;
       } else {
        $have$6$lcssa = $257;$hold$6$lcssa = $262;$next$6$lcssa = $258;
        break;
       }
      }
     } else {
      $have$6$lcssa = $have$5;$hold$6$lcssa = $hold$5;$next$6$lcssa = $next$5;
     }
     HEAP32[$36>>2] = $hold$6$lcssa;
     $265 = HEAP32[$35>>2]|0;
     $266 = $265 & 512;
     $267 = ($266|0)==(0);
     if ($267) {
      $bits$7 = 0;$have$7 = $have$6$lcssa;$hold$7 = 0;$next$7 = $next$6$lcssa;
     } else {
      $268 = $hold$6$lcssa&255;
      HEAP8[$hbuf>>0] = $268;
      $269 = $hold$6$lcssa >>> 8;
      $270 = $269&255;
      HEAP8[$37>>0] = $270;
      $271 = HEAP32[$38>>2]|0;
      $272 = (_crc32($271,$hbuf,2)|0);
      HEAP32[$38>>2] = $272;
      $bits$7 = 0;$have$7 = $have$6$lcssa;$hold$7 = 0;$next$7 = $next$6$lcssa;
     }
    }
    HEAP32[$12>>2] = 5;
    $bits$8 = $bits$7;$have$8 = $have$7;$hold$8 = $hold$7;$next$8 = $next$7;
    label = 56;
   }
   else if ((label|0) == 187) {
    label = 0;
    $698 = HEAP32[$109>>2]|0;
    $699 = 1 << $698;
    $700 = (($699) + -1)|0;
    $701 = $700 & $hold$39$ph;
    $702 = HEAP32[$110>>2]|0;
    $703 = (($702) + ($701<<2)|0);
    $704 = ((($702) + ($701<<2)|0) + 1|0);
    $705 = HEAP8[$704>>0]|0;
    $706 = ((($702) + ($701<<2)|0) + 2|0);
    $707 = $705&255;
    $708 = ($707>>>0)>($bits$39$ph>>>0);
    if ($708) {
     $bits$39677 = $bits$39$ph;$have$43675 = $have$43$ph;$hold$39676 = $hold$39$ph;$next$43674 = $next$43$ph;
     while(1) {
      $709 = ($have$43675|0)==(0);
      if ($709) {
       $bits$52 = $bits$39677;$have$56 = 0;$hold$52 = $hold$39676;$left$01582 = $left$0;$next$56 = $next$43674;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$4$ph;
       break L17;
      }
      $710 = (($have$43675) + -1)|0;
      $711 = (($next$43674) + 1|0);
      $712 = HEAP8[$next$43674>>0]|0;
      $713 = $712&255;
      $714 = $713 << $bits$39677;
      $715 = (($714) + ($hold$39676))|0;
      $716 = (($bits$39677) + 8)|0;
      $717 = HEAP32[$109>>2]|0;
      $718 = 1 << $717;
      $719 = (($718) + -1)|0;
      $720 = $719 & $715;
      $721 = HEAP32[$110>>2]|0;
      $722 = ((($721) + ($720<<2)|0) + 1|0);
      $723 = HEAP8[$722>>0]|0;
      $724 = $723&255;
      $725 = ($724>>>0)>($716>>>0);
      if ($725) {
       $bits$39677 = $716;$have$43675 = $710;$hold$39676 = $715;$next$43674 = $711;
      } else {
       $$lcssa1376 = $710;$$lcssa1377 = $711;$$lcssa1378 = $715;$$lcssa1379 = $716;$$lcssa1380 = $720;$$lcssa1381 = $721;$$lcssa1382 = $723;$$lcssa1383 = $724;
       break;
      }
     }
     $726 = (($$lcssa1381) + ($$lcssa1380<<2)|0);
     $727 = ((($$lcssa1381) + ($$lcssa1380<<2)|0) + 2|0);
     $$lcssa204$in = $726;$$lcssa206 = $$lcssa1382;$$lcssa208$in = $727;$$lcssa210 = $$lcssa1383;$bits$39$lcssa = $$lcssa1379;$have$43$lcssa = $$lcssa1376;$hold$39$lcssa = $$lcssa1378;$next$43$lcssa = $$lcssa1377;
    } else {
     $$lcssa204$in = $703;$$lcssa206 = $705;$$lcssa208$in = $706;$$lcssa210 = $707;$bits$39$lcssa = $bits$39$ph;$have$43$lcssa = $have$43$ph;$hold$39$lcssa = $hold$39$ph;$next$43$lcssa = $next$43$ph;
    }
    $$lcssa204 = HEAP8[$$lcssa204$in>>0]|0;
    $$lcssa208 = HEAP16[$$lcssa208$in>>1]|0;
    $728 = $$lcssa204&255;
    $729 = $728 & 240;
    $730 = ($729|0)==(0);
    if ($730) {
     $731 = $$lcssa208&65535;
     $732 = (($$lcssa210) + ($728))|0;
     $733 = 1 << $732;
     $734 = (($733) + -1)|0;
     $735 = $hold$39$lcssa & $734;
     $736 = $735 >>> $$lcssa210;
     $737 = (($736) + ($731))|0;
     $738 = HEAP32[$110>>2]|0;
     $739 = ((($738) + ($737<<2)|0) + 1|0);
     $740 = HEAP8[$739>>0]|0;
     $741 = $740&255;
     $742 = (($741) + ($$lcssa210))|0;
     $743 = ($742>>>0)>($bits$39$lcssa>>>0);
     if ($743) {
      $bits$40698 = $bits$39$lcssa;$have$44696 = $have$43$lcssa;$hold$40697 = $hold$39$lcssa;$next$44695 = $next$43$lcssa;
      while(1) {
       $744 = ($have$44696|0)==(0);
       if ($744) {
        $bits$52 = $bits$40698;$have$56 = 0;$hold$52 = $hold$40697;$left$01582 = $left$0;$next$56 = $next$44695;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$4$ph;
        break L17;
       }
       $745 = (($have$44696) + -1)|0;
       $746 = (($next$44695) + 1|0);
       $747 = HEAP8[$next$44695>>0]|0;
       $748 = $747&255;
       $749 = $748 << $bits$40698;
       $750 = (($749) + ($hold$40697))|0;
       $751 = (($bits$40698) + 8)|0;
       $752 = $750 & $734;
       $753 = $752 >>> $$lcssa210;
       $754 = (($753) + ($731))|0;
       $755 = HEAP32[$110>>2]|0;
       $756 = ((($755) + ($754<<2)|0) + 1|0);
       $757 = HEAP8[$756>>0]|0;
       $758 = $757&255;
       $759 = (($758) + ($$lcssa210))|0;
       $760 = ($759>>>0)>($751>>>0);
       if ($760) {
        $bits$40698 = $751;$have$44696 = $745;$hold$40697 = $750;$next$44695 = $746;
       } else {
        $$lcssa216 = $754;$$lcssa218 = $755;$$lcssa220 = $757;$bits$40$lcssa = $751;$have$44$lcssa = $745;$hold$40$lcssa = $750;$next$44$lcssa = $746;
        break;
       }
      }
     } else {
      $$lcssa216 = $737;$$lcssa218 = $738;$$lcssa220 = $740;$bits$40$lcssa = $bits$39$lcssa;$have$44$lcssa = $have$43$lcssa;$hold$40$lcssa = $hold$39$lcssa;$next$44$lcssa = $next$43$lcssa;
     }
     $761 = ((($$lcssa218) + ($$lcssa216<<2)|0) + 2|0);
     $762 = HEAP16[$761>>1]|0;
     $763 = (($$lcssa218) + ($$lcssa216<<2)|0);
     $764 = HEAP8[$763>>0]|0;
     $765 = $hold$40$lcssa >>> $$lcssa210;
     $766 = (($bits$40$lcssa) - ($$lcssa210))|0;
     $bits$41 = $766;$have$45 = $have$44$lcssa;$hold$41 = $765;$next$45 = $next$44$lcssa;$this$sroa$0$1 = $764;$this$sroa$16$1 = $$lcssa220;$this$sroa$39$1 = $762;
    } else {
     $bits$41 = $bits$39$lcssa;$have$45 = $have$43$lcssa;$hold$41 = $hold$39$lcssa;$next$45 = $next$43$lcssa;$this$sroa$0$1 = $$lcssa204;$this$sroa$16$1 = $$lcssa206;$this$sroa$39$1 = $$lcssa208;
    }
    $767 = $this$sroa$16$1&255;
    $768 = $hold$41 >>> $767;
    $769 = (($bits$41) - ($767))|0;
    $770 = $this$sroa$0$1&255;
    $771 = $770 & 64;
    $772 = ($771|0)==(0);
    if ($772) {
     $773 = $this$sroa$39$1&65535;
     HEAP32[$111>>2] = $773;
     $774 = $770 & 15;
     HEAP32[$112>>2] = $774;
     HEAP32[$12>>2] = 21;
     $bits$42 = $769;$have$46 = $have$45;$hold$42 = $768;$next$46 = $next$45;$ret$5 = $ret$4$ph;
     label = 199;
     break;
    } else {
     HEAP32[$113>>2] = 6986184;
     HEAP32[$12>>2] = 27;
     $put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $769;$have$0 = $have$45;$hold$0 = $768;$next$0 = $next$45;$ret$0 = $ret$4$ph;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    }
   }
  } while(0);
  do {
   if ((label|0) == 56) {
    label = 0;
    $273 = HEAP32[$39>>2]|0;
    $274 = $273 & 1024;
    $275 = ($274|0)==(0);
    if ($275) {
     $have$10 = $have$8;$next$10 = $next$8;
    } else {
     $276 = HEAP32[$40>>2]|0;
     $277 = ($276>>>0)>($have$8>>>0);
     $have$8$ = $277 ? $have$8 : $276;
     $278 = ($have$8$|0)==(0);
     if ($278) {
      $288 = $276;$have$9 = $have$8;$next$9 = $next$8;
     } else {
      $279 = $273 & 512;
      $280 = ($279|0)==(0);
      if (!($280)) {
       $281 = HEAP32[$41>>2]|0;
       $282 = (_crc32($281,$next$8,$have$8$)|0);
       HEAP32[$41>>2] = $282;
      }
      $283 = (($have$8) - ($have$8$))|0;
      $284 = (($next$8) + ($have$8$)|0);
      $285 = HEAP32[$40>>2]|0;
      $286 = (($285) - ($have$8$))|0;
      HEAP32[$40>>2] = $286;
      $288 = $286;$have$9 = $283;$next$9 = $284;
     }
     $287 = ($288|0)==(0);
     if ($287) {
      $have$10 = $have$9;$next$10 = $next$9;
     } else {
      $bits$52 = $bits$8;$have$56 = $have$9;$hold$52 = $hold$8;$left$01582 = $left$0;$next$56 = $next$9;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
      break L17;
     }
    }
    HEAP32[$12>>2] = 6;
    $bits$9 = $bits$8;$have$11 = $have$10;$hold$9 = $hold$8;$next$11 = $next$10;
    label = 63;
   }
   else if ((label|0) == 199) {
    label = 0;
    $775 = HEAP32[$67>>2]|0;
    $776 = ($775|0)==(0);
    if ($776) {
     $bits$44 = $bits$42;$have$48 = $have$46;$hold$44 = $hold$42;$next$48 = $next$46;
    } else {
     $777 = HEAP32[$67>>2]|0;
     $778 = ($bits$42>>>0)<($777>>>0);
     if ($778) {
      $bits$43711 = $bits$42;$have$47709 = $have$46;$hold$43710 = $hold$42;$next$47708 = $next$46;
      while(1) {
       $779 = ($have$47709|0)==(0);
       if ($779) {
        $bits$52 = $bits$43711;$have$56 = 0;$hold$52 = $hold$43710;$left$01582 = $left$0;$next$56 = $next$47708;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$5;
        break L17;
       }
       $780 = (($have$47709) + -1)|0;
       $781 = (($next$47708) + 1|0);
       $782 = HEAP8[$next$47708>>0]|0;
       $783 = $782&255;
       $784 = $783 << $bits$43711;
       $785 = (($784) + ($hold$43710))|0;
       $786 = (($bits$43711) + 8)|0;
       $787 = HEAP32[$67>>2]|0;
       $788 = ($786>>>0)<($787>>>0);
       if ($788) {
        $bits$43711 = $786;$have$47709 = $780;$hold$43710 = $785;$next$47708 = $781;
       } else {
        $$lcssa226 = $787;$bits$43$lcssa = $786;$have$47$lcssa = $780;$hold$43$lcssa = $785;$next$47$lcssa = $781;
        break;
       }
      }
     } else {
      $$lcssa226 = $777;$bits$43$lcssa = $bits$42;$have$47$lcssa = $have$46;$hold$43$lcssa = $hold$42;$next$47$lcssa = $next$46;
     }
     $789 = 1 << $$lcssa226;
     $790 = (($789) + -1)|0;
     $791 = $790 & $hold$43$lcssa;
     $792 = HEAP32[$71>>2]|0;
     $793 = (($792) + ($791))|0;
     HEAP32[$71>>2] = $793;
     $794 = HEAP32[$67>>2]|0;
     $795 = $hold$43$lcssa >>> $794;
     $796 = (($bits$43$lcssa) - ($794))|0;
     $bits$44 = $796;$have$48 = $have$47$lcssa;$hold$44 = $795;$next$48 = $next$47$lcssa;
    }
    $797 = HEAP32[$68>>2]|0;
    $798 = HEAP32[$69>>2]|0;
    $799 = (($out$0) - ($left$0))|0;
    $800 = (($799) + ($798))|0;
    $801 = ($797>>>0)>($800>>>0);
    if ($801) {
     HEAP32[$70>>2] = 6986152;
     HEAP32[$12>>2] = 27;
     $put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$44;$have$0 = $have$48;$hold$0 = $hold$44;$next$0 = $next$48;$ret$0 = $ret$5;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
     continue L17;
    } else {
     HEAP32[$12>>2] = 22;
     $bits$45 = $bits$44;$have$49 = $have$48;$hold$45 = $hold$44;$next$49 = $next$48;$ret$6 = $ret$5;
     label = 207;
     break;
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   $289 = HEAP32[$42>>2]|0;
   $290 = $289 & 2048;
   $291 = ($290|0)==(0);
   if ($291) {
    $have$12 = $have$11;$next$12 = $next$11;
   } else {
    $292 = ($have$11|0)==(0);
    if ($292) {
     $bits$52 = $bits$9;$have$56 = 0;$hold$52 = $hold$9;$left$01582 = $left$0;$next$56 = $next$11;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
     break;
    } else {
     $copy$1 = 0;
    }
    while(1) {
     $293 = (($copy$1) + 1)|0;
     $294 = (($next$11) + ($copy$1)|0);
     $295 = HEAP8[$294>>0]|0;
     $296 = ($295<<24>>24)!=(0);
     $297 = ($have$11>>>0)>($293>>>0);
     $or$cond13 = $296 & $297;
     if ($or$cond13) {
      $copy$1 = $293;
     } else {
      $$lcssa1447 = $293;$$lcssa1448 = $296;
      break;
     }
    }
    $298 = HEAP32[$42>>2]|0;
    $299 = $298 & 8192;
    $300 = ($299|0)==(0);
    if (!($300)) {
     $301 = HEAP32[$43>>2]|0;
     $302 = (_crc32($301,$next$11,$$lcssa1447)|0);
     HEAP32[$43>>2] = $302;
    }
    $303 = (($have$11) - ($$lcssa1447))|0;
    $304 = (($next$11) + ($$lcssa1447)|0);
    if ($$lcssa1448) {
     $bits$52 = $bits$9;$have$56 = $303;$hold$52 = $hold$9;$left$01582 = $left$0;$next$56 = $304;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
     break;
    } else {
     $have$12 = $303;$next$12 = $304;
    }
   }
   HEAP32[$12>>2] = 7;
   $bits$10 = $bits$9;$have$13 = $have$12;$hold$10 = $hold$9;$next$13 = $next$12;
   label = 70;
  }
  else if ((label|0) == 207) {
   label = 0;
   $802 = ($left$0|0)==(0);
   if ($802) {
    $bits$52 = $bits$45;$have$56 = $have$49;$hold$52 = $hold$45;$left$01582 = $left$0;$next$56 = $next$49;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$6;
    break;
   }
   $803 = (($out$0) - ($left$0))|0;
   $804 = HEAP32[$72>>2]|0;
   $805 = ($804>>>0)>($803>>>0);
   if ($805) {
    $806 = (($804) - ($803))|0;
    $807 = HEAP32[$73>>2]|0;
    $808 = ($806>>>0)>($807>>>0);
    if ($808) {
     $809 = (($806) - ($807))|0;
     $810 = HEAP32[$74>>2]|0;
     $811 = HEAP32[$75>>2]|0;
     $812 = (($811) - ($809))|0;
     $813 = (($810) + ($812)|0);
     $copy$7 = $809;$from$0 = $813;
    } else {
     $814 = HEAP32[$77>>2]|0;
     $815 = (($807) - ($806))|0;
     $816 = (($814) + ($815)|0);
     $copy$7 = $806;$from$0 = $816;
    }
    $817 = HEAP32[$76>>2]|0;
    $818 = ($copy$7>>>0)>($817>>>0);
    $$copy$7 = $818 ? $817 : $copy$7;
    $copy$8 = $$copy$7;$from$1 = $from$0;
   } else {
    $819 = (0 - ($804))|0;
    $820 = (($put$0) + ($819)|0);
    $821 = HEAP32[$79>>2]|0;
    $copy$8 = $821;$from$1 = $820;
   }
   $822 = ($copy$8>>>0)>($left$0>>>0);
   $left$0$copy$8 = $822 ? $left$0 : $copy$8;
   $823 = HEAP32[$78>>2]|0;
   $824 = (($823) - ($left$0$copy$8))|0;
   HEAP32[$78>>2] = $824;
   $825 = $left$0 ^ -1;
   $826 = $copy$8 ^ -1;
   $827 = ($825>>>0)>($826>>>0);
   $umax = $827 ? $825 : $826;
   $copy$10 = $left$0$copy$8;$from$2 = $from$1;$put$1 = $put$0;
   while(1) {
    $828 = (($from$2) + 1|0);
    $829 = HEAP8[$from$2>>0]|0;
    $830 = (($put$1) + 1|0);
    HEAP8[$put$1>>0] = $829;
    $831 = (($copy$10) + -1)|0;
    $832 = ($831|0)==(0);
    if ($832) {
     break;
    } else {
     $copy$10 = $831;$from$2 = $828;$put$1 = $830;
    }
   }
   $833 = (($left$0) - ($left$0$copy$8))|0;
   $scevgep$sum = $umax ^ -1;
   $scevgep1240 = (($put$0) + ($scevgep$sum)|0);
   $834 = HEAP32[$78>>2]|0;
   $835 = ($834|0)==(0);
   if (!($835)) {
    $out$0$phi = $out$0;$bits$0 = $bits$45;$have$0 = $have$49;$hold$0 = $hold$45;$left$0 = $833;$next$0 = $next$49;$put$0 = $scevgep1240;$ret$0 = $ret$6;$out$0 = $out$0$phi;
    continue;
   }
   HEAP32[$12>>2] = 18;
   $out$0$phi = $out$0;$bits$0 = $bits$45;$have$0 = $have$49;$hold$0 = $hold$45;$left$0 = $833;$next$0 = $next$49;$put$0 = $scevgep1240;$ret$0 = $ret$6;$out$0 = $out$0$phi;
   continue;
  }
  if ((label|0) == 70) {
   label = 0;
   $305 = HEAP32[$44>>2]|0;
   $306 = $305 & 4096;
   $307 = ($306|0)==(0);
   if ($307) {
    $have$14 = $have$13;$next$14 = $next$13;
   } else {
    $308 = ($have$13|0)==(0);
    if ($308) {
     $bits$52 = $bits$10;$have$56 = 0;$hold$52 = $hold$10;$left$01582 = $left$0;$next$56 = $next$13;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
     break;
    } else {
     $copy$2 = 0;
    }
    while(1) {
     $309 = (($copy$2) + 1)|0;
     $310 = (($next$13) + ($copy$2)|0);
     $311 = HEAP8[$310>>0]|0;
     $312 = ($311<<24>>24)!=(0);
     $313 = ($have$13>>>0)>($309>>>0);
     $or$cond14 = $312 & $313;
     if ($or$cond14) {
      $copy$2 = $309;
     } else {
      $$lcssa1449 = $309;$$lcssa1450 = $312;
      break;
     }
    }
    $314 = HEAP32[$44>>2]|0;
    $315 = $314 & 8192;
    $316 = ($315|0)==(0);
    if (!($316)) {
     $317 = HEAP32[$45>>2]|0;
     $318 = (_crc32($317,$next$13,$$lcssa1449)|0);
     HEAP32[$45>>2] = $318;
    }
    $319 = (($have$13) - ($$lcssa1449))|0;
    $320 = (($next$13) + ($$lcssa1449)|0);
    if ($$lcssa1450) {
     $bits$52 = $bits$10;$have$56 = $319;$hold$52 = $hold$10;$left$01582 = $left$0;$next$56 = $320;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
     break;
    } else {
     $have$14 = $319;$next$14 = $320;
    }
   }
   HEAP32[$12>>2] = 8;
   $bits$11 = $bits$10;$have$15 = $have$14;$hold$11 = $hold$10;$next$15 = $next$14;
  }
  $321 = HEAP32[$46>>2]|0;
  $322 = $321 & 512;
  $323 = ($322|0)==(0);
  if ($323) {
   $bits$13 = $bits$11;$have$17 = $have$15;$hold$13 = $hold$11;$next$17 = $next$15;
  } else {
   $324 = ($bits$11>>>0)<(16);
   if ($324) {
    $bits$12789 = $bits$11;$have$16787 = $have$15;$hold$12788 = $hold$11;$next$16786 = $next$15;
    while(1) {
     $325 = ($have$16787|0)==(0);
     if ($325) {
      $bits$52 = $bits$12789;$have$56 = 0;$hold$52 = $hold$12788;$left$01582 = $left$0;$next$56 = $next$16786;$out$4 = $out$0;$put$01523 = $put$0;$ret$7 = $ret$0;
      break L17;
     }
     $326 = (($have$16787) + -1)|0;
     $327 = (($next$16786) + 1|0);
     $328 = HEAP8[$next$16786>>0]|0;
     $329 = $328&255;
     $330 = $329 << $bits$12789;
     $331 = (($330) + ($hold$12788))|0;
     $332 = (($bits$12789) + 8)|0;
     $333 = ($332>>>0)<(16);
     if ($333) {
      $bits$12789 = $332;$have$16787 = $326;$hold$12788 = $331;$next$16786 = $327;
     } else {
      $bits$12$lcssa = $332;$have$16$lcssa = $326;$hold$12$lcssa = $331;$next$16$lcssa = $327;
      break;
     }
    }
   } else {
    $bits$12$lcssa = $bits$11;$have$16$lcssa = $have$15;$hold$12$lcssa = $hold$11;$next$16$lcssa = $next$15;
   }
   $334 = HEAP32[$49>>2]|0;
   $335 = $334 & 65535;
   $336 = ($hold$12$lcssa|0)==($335|0);
   if ($336) {
    $bits$13 = 0;$have$17 = $have$16$lcssa;$hold$13 = 0;$next$17 = $next$16$lcssa;
   } else {
    HEAP32[$50>>2] = 6983432;
    HEAP32[$12>>2] = 27;
    $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$12$lcssa;$have$0 = $have$16$lcssa;$hold$0 = $hold$12$lcssa;$next$0 = $next$16$lcssa;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
    continue;
   }
  }
  $337 = (_crc32(0,0,0)|0);
  HEAP32[$47>>2] = $337;
  HEAP32[$48>>2] = $337;
  HEAP32[$12>>2] = 11;
  $ret$0$phi = $ret$0;$put$0$phi = $put$0;$out$0$phi = $out$0;$left$0$phi = $left$0;$bits$0 = $bits$13;$have$0 = $have$17;$hold$0 = $hold$13;$next$0 = $next$17;$ret$0 = $ret$0$phi;$put$0 = $put$0$phi;$out$0 = $out$0$phi;$left$0 = $left$0$phi;
 }
 if ((label|0) == 88) {
  HEAP32[$4>>2] = $put$0$lcssa1515;
  HEAP32[$16>>2] = $left$0$lcssa1574;
  HEAP32[$strm>>2] = $next$19$lcssa;
  HEAP32[$19>>2] = $have$19$lcssa;
  HEAP32[$21>>2] = $hold$15$lcssa;
  HEAP32[$23>>2] = $bits$15$lcssa;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 241) {
  HEAP32[$12>>2] = 26;
  $bits$52 = $bits$50;$have$56 = $have$54;$hold$52 = $hold$50;$left$01582 = $left$0$lcssa1557;$next$56 = $next$54;$out$4 = $out$2$lcssa;$put$01523 = $put$0$lcssa1498;$ret$7 = 1;
 }
 else if ((label|0) == 242) {
  $bits$52 = $bits$0$lcssa1613;$have$56 = $have$0$lcssa1525;$hold$52 = $hold$0$lcssa1584;$left$01582 = $left$0$lcssa1554;$next$56 = $next$0$lcssa1466;$out$4 = $out$0$lcssa1642;$put$01523 = $put$0$lcssa1495;$ret$7 = -3;
 }
 else if ((label|0) == 254) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 255) {
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$4>>2] = $put$01523;
 HEAP32[$16>>2] = $left$01582;
 HEAP32[$strm>>2] = $next$56;
 HEAP32[$19>>2] = $have$56;
 HEAP32[$21>>2] = $hold$52;
 HEAP32[$23>>2] = $bits$52;
 $889 = (($12) + 32|0);
 $890 = HEAP32[$889>>2]|0;
 $891 = ($890|0)==(0);
 if ($891) {
  $892 = HEAP32[$12>>2]|0;
  $893 = ($892>>>0)<(24);
  if ($893) {
   $894 = HEAP32[$16>>2]|0;
   $895 = ($out$4|0)==($894|0);
   if (!($895)) {
    label = 246;
   }
  }
 } else {
  label = 246;
 }
 if ((label|0) == 246) {
  $896 = (_updatewindow($strm,$out$4)|0);
  $897 = ($896|0)==(0);
  if (!($897)) {
   HEAP32[$12>>2] = 28;
   $$0 = -4;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $898 = HEAP32[$19>>2]|0;
 $899 = (($20) - ($898))|0;
 $900 = HEAP32[$16>>2]|0;
 $901 = (($out$4) - ($900))|0;
 $902 = (($strm) + 8|0);
 $903 = HEAP32[$902>>2]|0;
 $904 = (($899) + ($903))|0;
 HEAP32[$902>>2] = $904;
 $905 = (($strm) + 20|0);
 $906 = HEAP32[$905>>2]|0;
 $907 = (($906) + ($901))|0;
 HEAP32[$905>>2] = $907;
 $908 = (($12) + 24|0);
 $909 = HEAP32[$908>>2]|0;
 $910 = (($909) + ($901))|0;
 HEAP32[$908>>2] = $910;
 $911 = (($12) + 8|0);
 $912 = HEAP32[$911>>2]|0;
 $913 = ($912|0)!=(0);
 $914 = ($out$4|0)!=($900|0);
 $or$cond6 = $913 & $914;
 if ($or$cond6) {
  $915 = (($12) + 16|0);
  $916 = HEAP32[$915>>2]|0;
  $917 = ($916|0)==(0);
  $918 = (($12) + 20|0);
  $919 = HEAP32[$918>>2]|0;
  $920 = HEAP32[$4>>2]|0;
  $921 = (0 - ($901))|0;
  $922 = (($920) + ($921)|0);
  if ($917) {
   $924 = (_adler32($919,$922,$901)|0);
   $925 = $924;
  } else {
   $923 = (_crc32($919,$922,$901)|0);
   $925 = $923;
  }
  HEAP32[$918>>2] = $925;
  $926 = (($strm) + 48|0);
  HEAP32[$926>>2] = $925;
 }
 $927 = HEAP32[$23>>2]|0;
 $928 = (($12) + 4|0);
 $929 = HEAP32[$928>>2]|0;
 $930 = ($929|0)!=(0);
 $931 = $930 ? 64 : 0;
 $932 = (($931) + ($927))|0;
 $933 = HEAP32[$12>>2]|0;
 $934 = ($933|0)==(11);
 $935 = $934 ? 128 : 0;
 $936 = (($932) + ($935))|0;
 $937 = (($strm) + 44|0);
 HEAP32[$937>>2] = $936;
 $938 = ($20|0)==($898|0);
 $939 = ($out$4|0)==($900|0);
 $or$cond8 = $938 & $939;
 $940 = ($flush|0)==(4);
 $or$cond10 = $or$cond8 | $940;
 $941 = ($ret$7|0)==(0);
 $or$cond12 = $or$cond10 & $941;
 $$ret$7 = $or$cond12 ? -5 : $ret$7;
 $$0 = $$ret$7;
 STACKTOP = sp;return ($$0|0);
}
function _inflateEnd($strm) {
 $strm = $strm|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0 = -2;
  return ($$0|0);
 }
 $1 = (($strm) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -2;
  return ($$0|0);
 }
 $4 = (($strm) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = -2;
  return ($$0|0);
 }
 $7 = (($2) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = (($strm) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vii[$5 & 3]($11,$8);
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = (($strm) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$12 & 3]($14,$15);
 HEAP32[$1>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _fixedtables($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($state) + 68|0);
 HEAP32[$0>>2] = 6983720;
 $1 = (($state) + 76|0);
 HEAP32[$1>>2] = 9;
 $2 = (($state) + 72|0);
 HEAP32[$2>>2] = 6985768;
 $3 = (($state) + 80|0);
 HEAP32[$3>>2] = 5;
 return;
}
function _updatewindow($strm,$out) {
 $strm = $strm|0;
 $out = $out|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($strm) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (($strm) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($strm) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($1) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = 1 << $10;
  $12 = (FUNCTION_TABLE_iiii[$6 & 3]($8,$11,1)|0);
  HEAP32[$2>>2] = $12;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $14 = (($1) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = (($1) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = 1 << $18;
  HEAP32[$14>>2] = $19;
  $20 = (($1) + 40|0);
  HEAP32[$20>>2] = 0;
  $21 = (($1) + 36|0);
  HEAP32[$21>>2] = 0;
 }
 $22 = (($strm) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($out) - ($23))|0;
 $25 = HEAP32[$14>>2]|0;
 $26 = ($24>>>0)<($25>>>0);
 if (!($26)) {
  $27 = HEAP32[$2>>2]|0;
  $28 = (($strm) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (0 - ($25))|0;
  $31 = (($29) + ($30)|0);
  _memcpy(($27|0),($31|0),($25|0))|0;
  $32 = (($1) + 40|0);
  HEAP32[$32>>2] = 0;
  $33 = HEAP32[$14>>2]|0;
  $34 = (($1) + 36|0);
  HEAP32[$34>>2] = $33;
  $$0 = 0;
  return ($$0|0);
 }
 $35 = (($1) + 40|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($25) - ($36))|0;
 $38 = ($37>>>0)>($24>>>0);
 $$ = $38 ? $24 : $37;
 $39 = HEAP32[$2>>2]|0;
 $40 = (($39) + ($36)|0);
 $41 = (($strm) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (0 - ($24))|0;
 $44 = (($42) + ($43)|0);
 _memcpy(($40|0),($44|0),($$|0))|0;
 $45 = (($24) - ($$))|0;
 $46 = ($24|0)==($$|0);
 if (!($46)) {
  $47 = HEAP32[$2>>2]|0;
  $48 = HEAP32[$41>>2]|0;
  $49 = (0 - ($45))|0;
  $50 = (($48) + ($49)|0);
  _memcpy(($47|0),($50|0),($45|0))|0;
  HEAP32[$35>>2] = $45;
  $51 = HEAP32[$14>>2]|0;
  $52 = (($1) + 36|0);
  HEAP32[$52>>2] = $51;
  $$0 = 0;
  return ($$0|0);
 }
 $53 = HEAP32[$35>>2]|0;
 $54 = (($53) + ($$))|0;
 $55 = HEAP32[$14>>2]|0;
 $56 = ($54|0)==($55|0);
 $$1 = $56 ? 0 : $54;
 HEAP32[$35>>2] = $$1;
 $57 = (($1) + 36|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$14>>2]|0;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  $$0 = 0;
  return ($$0|0);
 }
 $61 = (($58) + ($$))|0;
 HEAP32[$57>>2] = $61;
 $$0 = 0;
 return ($$0|0);
}
function _inflate_table($type,$lens,$codes,$table,$bits,$work) {
 $type = $type|0;
 $lens = $lens|0;
 $codes = $codes|0;
 $table = $table|0;
 $bits = $bits|0;
 $work = $work|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa89 = 0, $$lcssa90 = 0, $$lcssa96 = 0, $$ph = 0, $$ph18 = 0, $$ph18$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base$012$ph = 0, $count = 0, $curr$0$ph = 0, $curr$1$lcssa = 0, $curr$145 = 0, $drop$0$ph = 0, $drop$0$ph$lcssa = 0, $drop$241 = 0, $drop$3 = 0, $end$014$ph = 0, $exitcond = 0, $exitcond79 = 0, $exitcond80 = 0, $extra$013$ph = 0, $fill$0 = 0;
 var $huff$0 = 0, $huff$0$ph = 0, $huff$1 = 0, $huff$1$lcssa = 0, $huff$1$lcssa87 = 0, $huff$242 = 0, $incr$0 = 0, $incr$0$lcssa = 0, $incr$1 = 0, $incr$1$lcssa = 0, $left$057 = 0, $left$146 = 0, $len$156 = 0, $len$255 = 0, $len$3 = 0, $len$3$lcssa = 0, $len$3$ph = 0, $len$4 = 0, $len$4$lcssa = 0, $len$540 = 0;
 var $len$6 = 0, $low$0$ph = 0, $low$0$ph$lcssa = 0, $max$0$8 = 0, $max$059 = 0, $max$059$lcssa = 0, $min$0$lcssa = 0, $min$0$max$0$ = 0, $min$0$max$0$$drop$0 = 0, $min$058 = 0, $next$0$ph = 0, $next$0$ph20 = 0, $next$0$ph20$lcssa = 0, $next$144 = 0, $next$2 = 0, $offs = 0, $or$cond3 = 0, $or$cond5 = 0, $sym$060 = 0, $sym$152 = 0;
 var $sym$2 = 0, $sym$2$ph = 0, $this$sroa$0$0 = 0, $this$sroa$6$043 = 0, $this$sroa$6$1 = 0, $this$sroa$9$0 = 0, $used$0$ph19 = 0, $used$0$ph19$lcssa = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 32|0;
 $offs = sp;
 dest=$count+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $0 = ($codes|0)==(0);
 if (!($0)) {
  $sym$060 = 0;
  while(1) {
   $1 = (($lens) + ($sym$060<<1)|0);
   $2 = HEAP16[$1>>1]|0;
   $3 = $2&65535;
   $4 = (($count) + ($3<<1)|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = (($5) + 1)<<16>>16;
   HEAP16[$4>>1] = $6;
   $7 = (($sym$060) + 1)|0;
   $exitcond80 = ($7|0)==($codes|0);
   if ($exitcond80) {
    break;
   } else {
    $sym$060 = $7;
   }
  }
 }
 $8 = HEAP32[$bits>>2]|0;
 $max$059 = 15;
 while(1) {
  $11 = (($count) + ($max$059<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($12<<16>>16)==(0);
  $10 = (($max$059) + -1)|0;
  if (!($13)) {
   $max$059$lcssa = $max$059;
   break;
  }
  $9 = ($10|0)==(0);
  if ($9) {
   $$0 = -1;
   label = 55;
   break;
  } else {
   $max$059 = $10;
  }
 }
 if ((label|0) == 55) {
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($8>>>0)>($max$059$lcssa>>>0);
 $max$0$8 = $14 ? $max$059$lcssa : $8;
 $min$058 = 1;
 while(1) {
  $17 = (($count) + ($min$058<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = ($18<<16>>16)==(0);
  $16 = (($min$058) + 1)|0;
  if (!($19)) {
   $min$0$lcssa = $min$058;
   break;
  }
  $15 = ($16>>>0)<(16);
  if ($15) {
   $min$058 = $16;
  } else {
   $min$0$lcssa = $16;
   break;
  }
 }
 $20 = ($max$0$8>>>0)<($min$0$lcssa>>>0);
 $min$0$max$0$ = $20 ? $min$0$lcssa : $max$0$8;
 $left$057 = 1;$len$156 = 1;
 while(1) {
  $23 = $left$057 << 1;
  $24 = (($count) + ($len$156<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = (($23) - ($26))|0;
  $28 = ($27|0)<(0);
  $22 = (($len$156) + 1)|0;
  if ($28) {
   $$0 = -1;
   label = 55;
   break;
  }
  $21 = ($22>>>0)<(16);
  if ($21) {
   $left$057 = $27;$len$156 = $22;
  } else {
   $$lcssa96 = $27;
   break;
  }
 }
 if ((label|0) == 55) {
  STACKTOP = sp;return ($$0|0);
 }
 $29 = ($$lcssa96|0)>(0);
 if ($29) {
  $30 = ($type|0)==(0);
  if ($30) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $31 = HEAP16[$count>>1]|0;
  $32 = $31&65535;
  $33 = (($codes) - ($32))|0;
  $34 = ($33|0)==(1);
  if (!($34)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $35 = (($offs) + 2|0);
 HEAP16[$35>>1] = 0;
 $len$255 = 1;
 while(1) {
  $37 = (($offs) + ($len$255<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = (($count) + ($len$255<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = (($42) + ($39))|0;
  $44 = $43&65535;
  $45 = (($len$255) + 1)|0;
  $46 = (($offs) + ($45<<1)|0);
  HEAP16[$46>>1] = $44;
  $exitcond79 = ($45|0)==(15);
  if ($exitcond79) {
   break;
  } else {
   $len$255 = $45;
  }
 }
 $36 = ($codes|0)==(0);
 if (!($36)) {
  $sym$152 = 0;
  while(1) {
   $47 = (($lens) + ($sym$152<<1)|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = ($48<<16>>16)==(0);
   if (!($49)) {
    $50 = $48&65535;
    $51 = $sym$152&65535;
    $52 = (($offs) + ($50<<1)|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = (($53) + 1)<<16>>16;
    HEAP16[$52>>1] = $54;
    $55 = $53&65535;
    $56 = (($work) + ($55<<1)|0);
    HEAP16[$56>>1] = $51;
   }
   $57 = (($sym$152) + 1)|0;
   $exitcond = ($57|0)==($codes|0);
   if ($exitcond) {
    break;
   } else {
    $sym$152 = $57;
   }
  }
 }
 if ((($type|0) == 1)) {
  $58 = ($min$0$max$0$>>>0)>(10);
  if ($58) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$ph = 1;$base$012$ph = ((6985896 + -514|0));$end$014$ph = 256;$extra$013$ph = ((6985960 + -514|0));
  }
 } else if ((($type|0) == 0)) {
  $$ph = 0;$base$012$ph = $work;$end$014$ph = 19;$extra$013$ph = $work;
 } else {
  $$ph = 0;$base$012$ph = 6986024;$end$014$ph = -1;$extra$013$ph = 6986088;
 }
 $$ph18$in = 1 << $min$0$max$0$;
 $next$0$ph = HEAP32[$table>>2]|0;
 $$ph18 = (($$ph18$in) + -1)|0;
 $59 = $min$0$max$0$&255;
 $curr$0$ph = $min$0$max$0$;$drop$0$ph = 0;$huff$0$ph = 0;$len$3$ph = $min$0$lcssa;$low$0$ph = -1;$next$0$ph20 = $next$0$ph;$sym$2$ph = 0;$used$0$ph19 = $$ph18$in;
 L43: while(1) {
  $60 = 1 << $curr$0$ph;
  $huff$0 = $huff$0$ph;$len$3 = $len$3$ph;$sym$2 = $sym$2$ph;
  while(1) {
   $61 = (($len$3) - ($drop$0$ph))|0;
   $62 = $61&255;
   $63 = (($work) + ($sym$2<<1)|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64&65535;
   $66 = ($65|0)<($end$014$ph|0);
   if ($66) {
    $this$sroa$0$0 = 0;$this$sroa$9$0 = $64;
   } else {
    $67 = ($65|0)>($end$014$ph|0);
    if ($67) {
     $68 = (($extra$013$ph) + ($65<<1)|0);
     $69 = HEAP16[$68>>1]|0;
     $70 = $69&255;
     $71 = (($base$012$ph) + ($65<<1)|0);
     $72 = HEAP16[$71>>1]|0;
     $this$sroa$0$0 = $70;$this$sroa$9$0 = $72;
    } else {
     $this$sroa$0$0 = 96;$this$sroa$9$0 = 0;
    }
   }
   $73 = 1 << $61;
   $74 = $huff$0 >>> $drop$0$ph;
   $fill$0 = $60;
   while(1) {
    $75 = (($fill$0) - ($73))|0;
    $76 = (($75) + ($74))|0;
    $77 = (($next$0$ph20) + ($76<<2)|0);
    HEAP8[$77>>0] = $this$sroa$0$0;
    $78 = ((($next$0$ph20) + ($76<<2)|0) + 1|0);
    HEAP8[$78>>0] = $62;
    $79 = ((($next$0$ph20) + ($76<<2)|0) + 2|0);
    HEAP16[$79>>1] = $this$sroa$9$0;
    $80 = ($fill$0|0)==($73|0);
    if ($80) {
     break;
    } else {
     $fill$0 = $75;
    }
   }
   $81 = (($len$3) + -1)|0;
   $82 = 1 << $81;
   $incr$0 = $82;
   while(1) {
    $83 = $incr$0 & $huff$0;
    $84 = ($83|0)==(0);
    $85 = $incr$0 >>> 1;
    if ($84) {
     $incr$0$lcssa = $incr$0;
     break;
    } else {
     $incr$0 = $85;
    }
   }
   $86 = ($incr$0$lcssa|0)==(0);
   if ($86) {
    $huff$1 = 0;
   } else {
    $87 = (($incr$0$lcssa) + -1)|0;
    $88 = $87 & $huff$0;
    $89 = (($88) + ($incr$0$lcssa))|0;
    $huff$1 = $89;
   }
   $90 = (($sym$2) + 1)|0;
   $91 = (($count) + ($len$3<<1)|0);
   $92 = HEAP16[$91>>1]|0;
   $93 = (($92) + -1)<<16>>16;
   HEAP16[$91>>1] = $93;
   $94 = ($93<<16>>16)==(0);
   if ($94) {
    $95 = ($len$3|0)==($max$059$lcssa|0);
    if ($95) {
     $$lcssa = $62;$drop$0$ph$lcssa = $drop$0$ph;$huff$1$lcssa = $huff$1;$len$3$lcssa = $len$3;$low$0$ph$lcssa = $low$0$ph;$next$0$ph20$lcssa = $next$0$ph20;$used$0$ph19$lcssa = $used$0$ph19;
     break L43;
    }
    $98 = (($work) + ($90<<1)|0);
    $99 = HEAP16[$98>>1]|0;
    $100 = $99&65535;
    $101 = (($lens) + ($100<<1)|0);
    $102 = HEAP16[$101>>1]|0;
    $103 = $102&65535;
    $len$4 = $103;
   } else {
    $len$4 = $len$3;
   }
   $104 = ($len$4>>>0)>($min$0$max$0$>>>0);
   if (!($104)) {
    $huff$0 = $huff$1;$len$3 = $len$4;$sym$2 = $90;
    continue;
   }
   $105 = $huff$1 & $$ph18;
   $106 = ($105|0)==($low$0$ph|0);
   if ($106) {
    $huff$0 = $huff$1;$len$3 = $len$4;$sym$2 = $90;
   } else {
    $$lcssa89 = $90;$$lcssa90 = $105;$huff$1$lcssa87 = $huff$1;$len$4$lcssa = $len$4;
    break;
   }
  }
  $107 = ($drop$0$ph|0)==(0);
  $min$0$max$0$$drop$0 = $107 ? $min$0$max$0$ : $drop$0$ph;
  $108 = (($next$0$ph20) + ($60<<2)|0);
  $109 = (($len$4$lcssa) - ($min$0$max$0$$drop$0))|0;
  $110 = ($len$4$lcssa>>>0)<($max$059$lcssa>>>0);
  L66: do {
   if ($110) {
    $111 = 1 << $109;
    $113 = $len$4$lcssa;$curr$145 = $109;$left$146 = $111;
    while(1) {
     $112 = (($count) + ($113<<1)|0);
     $114 = HEAP16[$112>>1]|0;
     $115 = $114&65535;
     $116 = (($left$146) - ($115))|0;
     $117 = ($116|0)<(1);
     if ($117) {
      $curr$1$lcssa = $curr$145;
      break L66;
     }
     $118 = (($curr$145) + 1)|0;
     $119 = $116 << 1;
     $120 = (($118) + ($min$0$max$0$$drop$0))|0;
     $121 = ($120>>>0)<($max$059$lcssa>>>0);
     if ($121) {
      $113 = $120;$curr$145 = $118;$left$146 = $119;
     } else {
      $curr$1$lcssa = $118;
      break;
     }
    }
   } else {
    $curr$1$lcssa = $109;
   }
  } while(0);
  $122 = 1 << $curr$1$lcssa;
  $123 = (($122) + ($used$0$ph19))|0;
  $124 = ($123>>>0)>(1285);
  $or$cond3 = $$ph & $124;
  if ($or$cond3) {
   $$0 = 1;
   label = 55;
   break;
  }
  $125 = $curr$1$lcssa&255;
  $126 = HEAP32[$table>>2]|0;
  $127 = (($126) + ($$lcssa90<<2)|0);
  HEAP8[$127>>0] = $125;
  $128 = HEAP32[$table>>2]|0;
  $129 = ((($128) + ($$lcssa90<<2)|0) + 1|0);
  HEAP8[$129>>0] = $59;
  $130 = HEAP32[$table>>2]|0;
  $131 = $108;
  $132 = $130;
  $133 = (($131) - ($132))|0;
  $134 = $133 >>> 2;
  $135 = $134&65535;
  $136 = ((($130) + ($$lcssa90<<2)|0) + 2|0);
  HEAP16[$136>>1] = $135;
  $curr$0$ph = $curr$1$lcssa;$drop$0$ph = $min$0$max$0$$drop$0;$huff$0$ph = $huff$1$lcssa87;$len$3$ph = $len$4$lcssa;$low$0$ph = $$lcssa90;$next$0$ph20 = $108;$sym$2$ph = $$lcssa89;$used$0$ph19 = $123;
 }
 if ((label|0) == 55) {
  STACKTOP = sp;return ($$0|0);
 }
 $96 = ($huff$1$lcssa|0)==(0);
 L76: do {
  if (!($96)) {
   $97 = $min$0$max$0$&255;
   $drop$241 = $drop$0$ph$lcssa;$huff$242 = $huff$1$lcssa;$len$540 = $len$3$lcssa;$next$144 = $next$0$ph20$lcssa;$this$sroa$6$043 = $$lcssa;
   while(1) {
    $137 = ($drop$241|0)==(0);
    $138 = $huff$242 & $$ph18;
    $139 = ($138|0)==($low$0$ph$lcssa|0);
    $or$cond5 = $137 | $139;
    if ($or$cond5) {
     $drop$3 = $drop$241;$len$6 = $len$540;$next$2 = $next$144;$this$sroa$6$1 = $this$sroa$6$043;
    } else {
     $140 = HEAP32[$table>>2]|0;
     $drop$3 = 0;$len$6 = $min$0$max$0$;$next$2 = $140;$this$sroa$6$1 = $97;
    }
    $141 = $huff$242 >>> $drop$3;
    $142 = (($next$2) + ($141<<2)|0);
    HEAP8[$142>>0] = 64;
    $143 = ((($next$2) + ($141<<2)|0) + 1|0);
    HEAP8[$143>>0] = $this$sroa$6$1;
    $144 = ((($next$2) + ($141<<2)|0) + 2|0);
    HEAP16[$144>>1] = 0;
    $145 = (($len$6) + -1)|0;
    $146 = 1 << $145;
    $incr$1 = $146;
    while(1) {
     $147 = $incr$1 & $huff$242;
     $148 = ($147|0)==(0);
     $149 = $incr$1 >>> 1;
     if ($148) {
      $incr$1$lcssa = $incr$1;
      break;
     } else {
      $incr$1 = $149;
     }
    }
    $150 = ($incr$1$lcssa|0)==(0);
    if ($150) {
     break L76;
    }
    $151 = (($incr$1$lcssa) + -1)|0;
    $152 = $151 & $huff$242;
    $153 = (($152) + ($incr$1$lcssa))|0;
    $154 = ($153|0)==(0);
    if ($154) {
     break;
    } else {
     $drop$241 = $drop$3;$huff$242 = $153;$len$540 = $len$6;$next$144 = $next$2;$this$sroa$6$043 = $this$sroa$6$1;
    }
   }
  }
 } while(0);
 $155 = HEAP32[$table>>2]|0;
 $156 = (($155) + ($used$0$ph19$lcssa<<2)|0);
 HEAP32[$table>>2] = $156;
 HEAP32[$bits>>2] = $min$0$max$0$;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _inflate_fast($strm,$start) {
 $strm = $strm|0;
 $start = $start|0;
 var $$in = 0, $$in4 = 0, $$lcssa = 0, $$lcssa145 = 0, $$lcssa146 = 0, $$lcssa148 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa152 = 0, $$lcssa156 = 0, $$lcssa157 = 0, $$lcssa158 = 0, $$lcssa160 = 0, $$lcssa166 = 0, $$lcssa167 = 0, $$lcssa175 = 0, $$lcssa176 = 0, $$lcssa20 = 0, $$lcssa27 = 0, $$lcssa29 = 0;
 var $$lcssa31 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum2 = 0, $$sum3 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $165$phi = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$0 = 0, $bits$1 = 0, $bits$3 = 0, $bits$4 = 0, $bits$5 = 0, $bits$7 = 0, $bits$8 = 0, $bits$9 = 0, $extract$t = 0, $extract$t80 = 0;
 var $from$0 = 0, $from$1 = 0, $from$2 = 0, $from$3 = 0, $from$4$lcssa = 0, $from$4$ph = 0, $from$474 = 0, $from$5 = 0, $hold$0 = 0, $hold$1 = 0, $hold$3 = 0, $hold$4 = 0, $hold$5 = 0, $hold$7 = 0, $hold$8 = 0, $hold$9 = 0, $in$0 = 0, $in$1 = 0, $in$1$lcssa172 = 0, $in$2 = 0;
 var $in$3 = 0, $in$4 = 0, $in$4$lcssa = 0, $in$5 = 0, $in$5$lcssa = 0, $in$6 = 0, $in$7 = 0, $len$0 = 0, $len$1$lcssa = 0, $len$1$ph = 0, $len$173 = 0, $len$2 = 0, $op$0 = 0, $op$1 = 0, $op$2 = 0, $op$3 = 0, $or$cond = 0, $out$0 = 0, $out$0$lcssa = 0, $out$0$lcssa168 = 0;
 var $out$0$lcssa169 = 0, $out$1 = 0, $out$2 = 0, $out$3 = 0, $out$4 = 0, $out$5$lcssa = 0, $out$5$ph = 0, $out$572 = 0, $out$6 = 0, $out$7 = 0, $out$8 = 0, $scevgep$sum = 0, $scevgep121 = 0, $scevgep122$sum = 0, $scevgep122$sum143 = 0, $scevgep123$sum = 0, $scevgep123$sum144 = 0, $scevgep124$sum = 0, $scevgep125 = 0, $scevgep126$sum = 0;
 var $scevgep127$sum = 0, $scevgep129$sum = 0, $scevgep130 = 0, $scevgep131$sum = 0, $scevgep132 = 0, $scevgep134$sum = 0, $scevgep135 = 0, $scevgep136$sum = 0, $scevgep137$sum = 0, $scevgep139$sum = 0, $scevgep140 = 0, $scevgep141$sum = 0, $scevgep142 = 0, $this$sroa$0$0 = 0, $this$sroa$0$0$in = 0, $this$sroa$0$0$in49 = 0, $this$sroa$0$052 = 0, $this$sroa$0$1 = 0, $this$sroa$0$1$in = 0, $this$sroa$0$1$in58 = 0;
 var $this$sroa$0$161 = 0, $this$sroa$6$0 = 0, $this$sroa$6$0$in = 0, $this$sroa$6$0$in50 = 0, $this$sroa$6$053 = 0, $this$sroa$6$1 = 0, $this$sroa$6$1$in = 0, $this$sroa$6$1$in59 = 0, $this$sroa$6$162 = 0, $this$sroa$8$0 = 0, $this$sroa$8$0$in = 0, $this$sroa$8$0$in51 = 0, $this$sroa$8$0$lcssa = 0, $this$sroa$8$0$lcssa$off0 = 0, $this$sroa$8$054 = 0, $this$sroa$8$055 = 0, $this$sroa$8$055$lcssa = 0, $this$sroa$8$1 = 0, $this$sroa$8$1$in = 0, $this$sroa$8$1$in60 = 0;
 var $this$sroa$8$1$lcssa = 0, $this$sroa$8$163 = 0, $this$sroa$8$164 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($strm) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$strm>>2]|0;
 $3 = (($2) + -1|0);
 $4 = (($strm) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $$sum = (($5) + -6)|0;
 $6 = (($2) + ($$sum)|0);
 $7 = (($strm) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1|0);
 $10 = (($strm) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $start ^ -1;
 $$sum1 = (($11) + ($12))|0;
 $13 = (($8) + ($$sum1)|0);
 $$sum2 = (($11) + -258)|0;
 $14 = (($8) + ($$sum2)|0);
 $15 = (($1) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($1) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($1) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($1) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($1) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($1) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($1) + 68|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($1) + 72|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($1) + 76|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = 1 << $32;
 $34 = (($33) + -1)|0;
 $35 = (($1) + 80|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = 1 << $36;
 $38 = (($37) + -1)|0;
 $39 = $13;
 $40 = (($22) + -1|0);
 $41 = ($20|0)==(0);
 $42 = (($16) + -1)|0;
 $43 = (($16) + -1)|0;
 $44 = (($43) + ($20))|0;
 $45 = (($20) + -1)|0;
 $46 = (($39) + -1)|0;
 $47 = (($39) - ($20))|0;
 $48 = (($46) - ($20))|0;
 $bits$0 = $26;$hold$0 = $24;$in$0 = $3;$out$0 = $9;
 L1: while(1) {
  $49 = ($bits$0>>>0)<(15);
  if ($49) {
   $50 = (($in$0) + 1|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $52 << $bits$0;
   $54 = (($53) + ($hold$0))|0;
   $55 = (($bits$0) + 8)|0;
   $56 = (($in$0) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 << $55;
   $60 = (($54) + ($59))|0;
   $61 = (($bits$0) + 16)|0;
   $bits$1 = $61;$hold$1 = $60;$in$1 = $56;
  } else {
   $bits$1 = $bits$0;$hold$1 = $hold$0;$in$1 = $in$0;
  }
  $62 = $hold$1 & $34;
  $this$sroa$0$0$in49 = (($28) + ($62<<2)|0);
  $this$sroa$6$0$in50 = ((($28) + ($62<<2)|0) + 1|0);
  $this$sroa$8$0$in51 = ((($28) + ($62<<2)|0) + 2|0);
  $this$sroa$0$052 = HEAP8[$this$sroa$0$0$in49>>0]|0;
  $this$sroa$6$053 = HEAP8[$this$sroa$6$0$in50>>0]|0;
  $this$sroa$8$054 = HEAP16[$this$sroa$8$0$in51>>1]|0;
  $63 = $this$sroa$6$053&255;
  $64 = $hold$1 >>> $63;
  $65 = (($bits$1) - ($63))|0;
  $66 = ($this$sroa$0$052<<24>>24)==(0);
  $extract$t80 = $this$sroa$8$054&255;
  do {
   if ($66) {
    $$lcssa = $64;$$lcssa20 = $65;$this$sroa$8$0$lcssa$off0 = $extract$t80;
    label = 7;
   } else {
    $67 = $this$sroa$0$052&255;
    $259 = $64;$264 = $65;$70 = $67;$this$sroa$8$055 = $this$sroa$8$054;
    while(1) {
     $69 = $70 & 16;
     $71 = ($69|0)==(0);
     if (!($71)) {
      $$lcssa145 = $70;$$lcssa148 = $264;$$lcssa151 = $259;$this$sroa$8$055$lcssa = $this$sroa$8$055;
      break;
     }
     $253 = $70 & 64;
     $254 = ($253|0)==(0);
     if (!($254)) {
      $$lcssa146 = $70;$$lcssa149 = $264;$$lcssa152 = $259;$in$1$lcssa172 = $in$1;$out$0$lcssa169 = $out$0;
      label = 56;
      break L1;
     }
     $255 = $this$sroa$8$055&65535;
     $256 = 1 << $70;
     $257 = (($256) + -1)|0;
     $258 = $259 & $257;
     $260 = (($258) + ($255))|0;
     $this$sroa$0$0$in = (($28) + ($260<<2)|0);
     $this$sroa$6$0$in = ((($28) + ($260<<2)|0) + 1|0);
     $this$sroa$8$0$in = ((($28) + ($260<<2)|0) + 2|0);
     $this$sroa$0$0 = HEAP8[$this$sroa$0$0$in>>0]|0;
     $this$sroa$6$0 = HEAP8[$this$sroa$6$0$in>>0]|0;
     $this$sroa$8$0 = HEAP16[$this$sroa$8$0$in>>1]|0;
     $261 = $this$sroa$6$0&255;
     $262 = $259 >>> $261;
     $263 = (($264) - ($261))|0;
     $265 = $this$sroa$0$0&255;
     $266 = ($this$sroa$0$0<<24>>24)==(0);
     if ($266) {
      $$lcssa156 = $262;$$lcssa157 = $263;$this$sroa$8$0$lcssa = $this$sroa$8$0;
      label = 6;
      break;
     } else {
      $259 = $262;$264 = $263;$70 = $265;$this$sroa$8$055 = $this$sroa$8$0;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     $extract$t = $this$sroa$8$0$lcssa&255;
     $$lcssa = $$lcssa156;$$lcssa20 = $$lcssa157;$this$sroa$8$0$lcssa$off0 = $extract$t;
     label = 7;
     break;
    }
    $72 = $this$sroa$8$055$lcssa&65535;
    $73 = $$lcssa145 & 15;
    $74 = ($73|0)==(0);
    if ($74) {
     $bits$4 = $$lcssa148;$hold$4 = $$lcssa151;$in$3 = $in$1;$len$0 = $72;
    } else {
     $75 = ($$lcssa148>>>0)<($73>>>0);
     if ($75) {
      $76 = (($in$1) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = $77&255;
      $79 = $78 << $$lcssa148;
      $80 = (($79) + ($$lcssa151))|0;
      $81 = (($$lcssa148) + 8)|0;
      $bits$3 = $81;$hold$3 = $80;$in$2 = $76;
     } else {
      $bits$3 = $$lcssa148;$hold$3 = $$lcssa151;$in$2 = $in$1;
     }
     $82 = 1 << $73;
     $83 = (($82) + -1)|0;
     $84 = $hold$3 & $83;
     $85 = (($84) + ($72))|0;
     $86 = $hold$3 >>> $73;
     $87 = (($bits$3) - ($73))|0;
     $bits$4 = $87;$hold$4 = $86;$in$3 = $in$2;$len$0 = $85;
    }
    $88 = ($bits$4>>>0)<(15);
    if ($88) {
     $89 = (($in$3) + 1|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $90&255;
     $92 = $91 << $bits$4;
     $93 = (($92) + ($hold$4))|0;
     $94 = (($bits$4) + 8)|0;
     $95 = (($in$3) + 2|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96&255;
     $98 = $97 << $94;
     $99 = (($93) + ($98))|0;
     $100 = (($bits$4) + 16)|0;
     $bits$5 = $100;$hold$5 = $99;$in$4 = $95;
    } else {
     $bits$5 = $bits$4;$hold$5 = $hold$4;$in$4 = $in$3;
    }
    $101 = $hold$5 & $38;
    $this$sroa$0$1$in58 = (($30) + ($101<<2)|0);
    $this$sroa$6$1$in59 = ((($30) + ($101<<2)|0) + 1|0);
    $this$sroa$8$1$in60 = ((($30) + ($101<<2)|0) + 2|0);
    $this$sroa$0$161 = HEAP8[$this$sroa$0$1$in58>>0]|0;
    $this$sroa$6$162 = HEAP8[$this$sroa$6$1$in59>>0]|0;
    $this$sroa$8$163 = HEAP16[$this$sroa$8$1$in60>>1]|0;
    $102 = $this$sroa$6$162&255;
    $103 = $hold$5 >>> $102;
    $104 = (($bits$5) - ($102))|0;
    $105 = $this$sroa$0$161&255;
    $106 = $105 & 16;
    $107 = ($106|0)==(0);
    if ($107) {
     $237 = $105;$243 = $103;$248 = $104;$this$sroa$8$164 = $this$sroa$8$163;
     while(1) {
      $236 = $237 & 64;
      $238 = ($236|0)==(0);
      if (!($238)) {
       $$lcssa158 = $248;$$lcssa160 = $243;$in$4$lcssa = $in$4;$out$0$lcssa = $out$0;
       label = 53;
       break L1;
      }
      $239 = $this$sroa$8$164&65535;
      $240 = 1 << $237;
      $241 = (($240) + -1)|0;
      $242 = $243 & $241;
      $244 = (($242) + ($239))|0;
      $this$sroa$0$1$in = (($30) + ($244<<2)|0);
      $this$sroa$6$1$in = ((($30) + ($244<<2)|0) + 1|0);
      $this$sroa$8$1$in = ((($30) + ($244<<2)|0) + 2|0);
      $this$sroa$0$1 = HEAP8[$this$sroa$0$1$in>>0]|0;
      $this$sroa$6$1 = HEAP8[$this$sroa$6$1$in>>0]|0;
      $this$sroa$8$1 = HEAP16[$this$sroa$8$1$in>>1]|0;
      $245 = $this$sroa$6$1&255;
      $246 = $243 >>> $245;
      $247 = (($248) - ($245))|0;
      $249 = $this$sroa$0$1&255;
      $250 = $249 & 16;
      $251 = ($250|0)==(0);
      if ($251) {
       $237 = $249;$243 = $246;$248 = $247;$this$sroa$8$164 = $this$sroa$8$1;
      } else {
       $$lcssa27 = $246;$$lcssa29 = $247;$$lcssa31 = $249;$this$sroa$8$1$lcssa = $this$sroa$8$1;
       break;
      }
     }
    } else {
     $$lcssa27 = $103;$$lcssa29 = $104;$$lcssa31 = $105;$this$sroa$8$1$lcssa = $this$sroa$8$163;
    }
    $108 = $this$sroa$8$1$lcssa&65535;
    $109 = $$lcssa31 & 15;
    $110 = ($$lcssa29>>>0)<($109>>>0);
    if ($110) {
     $111 = (($in$4) + 1|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = $113 << $$lcssa29;
     $115 = (($114) + ($$lcssa27))|0;
     $116 = (($$lcssa29) + 8)|0;
     $117 = ($116>>>0)<($109>>>0);
     if ($117) {
      $118 = (($in$4) + 2|0);
      $119 = HEAP8[$118>>0]|0;
      $120 = $119&255;
      $121 = $120 << $116;
      $122 = (($121) + ($115))|0;
      $123 = (($$lcssa29) + 16)|0;
      $bits$7 = $123;$hold$7 = $122;$in$5 = $118;
     } else {
      $bits$7 = $116;$hold$7 = $115;$in$5 = $111;
     }
    } else {
     $bits$7 = $$lcssa29;$hold$7 = $$lcssa27;$in$5 = $in$4;
    }
    $124 = 1 << $109;
    $125 = (($124) + -1)|0;
    $126 = $hold$7 & $125;
    $127 = (($126) + ($108))|0;
    $128 = $hold$7 >>> $109;
    $129 = (($bits$7) - ($109))|0;
    $130 = $out$0;
    $131 = (($130) - ($39))|0;
    $132 = ($127>>>0)>($131>>>0);
    if (!($132)) {
     $205 = (0 - ($127))|0;
     $206 = (($out$0) + ($205)|0);
     $207 = (2 - ($len$0))|0;
     $208 = ($207>>>0)>(4294967293);
     $umax = $208 ? $207 : -3;
     $209 = (($len$0) + ($umax))|0;
     $210 = (($209>>>0) % 3)&-1;
     $211 = (($209) - ($210))|0;
     $212 = $this$sroa$8$1$lcssa&65535;
     $213 = (($126) + ($212))|0;
     $214 = (($211) - ($213))|0;
     $from$5 = $206;$len$2 = $len$0;$out$6 = $out$0;
     while(1) {
      $215 = (($from$5) + 1|0);
      $216 = HEAP8[$215>>0]|0;
      $217 = (($out$6) + 1|0);
      HEAP8[$217>>0] = $216;
      $218 = (($from$5) + 2|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = (($out$6) + 2|0);
      HEAP8[$220>>0] = $219;
      $221 = (($from$5) + 3|0);
      $222 = HEAP8[$221>>0]|0;
      $223 = (($out$6) + 3|0);
      HEAP8[$223>>0] = $222;
      $224 = (($len$2) + -3)|0;
      $225 = ($224>>>0)>(2);
      if ($225) {
       $from$5 = $221;$len$2 = $224;$out$6 = $223;
      } else {
       break;
      }
     }
     $226 = (($len$0) + -3)|0;
     $scevgep$sum = (($211) + 3)|0;
     $scevgep121 = (($out$0) + ($scevgep$sum)|0);
     $227 = ($226|0)==($211|0);
     if ($227) {
      $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $scevgep121;
      break;
     }
     $228 = (($226) - ($211))|0;
     $scevgep122$sum = (($214) + 4)|0;
     $229 = (($out$0) + ($scevgep122$sum)|0);
     $230 = HEAP8[$229>>0]|0;
     $scevgep123$sum = (($211) + 4)|0;
     $231 = (($out$0) + ($scevgep123$sum)|0);
     HEAP8[$231>>0] = $230;
     $232 = ($228>>>0)>(1);
     if (!($232)) {
      $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $231;
      break;
     }
     $scevgep122$sum143 = (($214) + 5)|0;
     $233 = (($out$0) + ($scevgep122$sum143)|0);
     $234 = HEAP8[$233>>0]|0;
     $scevgep123$sum144 = (($211) + 5)|0;
     $235 = (($out$0) + ($scevgep123$sum144)|0);
     HEAP8[$235>>0] = $234;
     $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $235;
     break;
    }
    $133 = (($127) - ($131))|0;
    $134 = ($133>>>0)>($18>>>0);
    if ($134) {
     $$lcssa175 = $128;$$lcssa176 = $129;$in$5$lcssa = $in$5;$out$0$lcssa168 = $out$0;
     label = 21;
     break L1;
    }
    do {
     if ($41) {
      $$sum9 = (($42) - ($133))|0;
      $136 = (($22) + ($$sum9)|0);
      $137 = ($len$0>>>0)>($133>>>0);
      if ($137) {
       $138 = (($len$0) - ($133))|0;
       $139 = $this$sroa$8$1$lcssa&65535;
       $140 = (($126) + ($139))|0;
       $141 = (($140) - ($130))|0;
       $from$0 = $136;$op$0 = $133;$out$1 = $out$0;
       while(1) {
        $142 = (($from$0) + 1|0);
        $143 = HEAP8[$142>>0]|0;
        $144 = (($out$1) + 1|0);
        HEAP8[$144>>0] = $143;
        $145 = (($op$0) + -1)|0;
        $146 = ($145|0)==(0);
        if ($146) {
         break;
        } else {
         $from$0 = $142;$op$0 = $145;$out$1 = $144;
        }
       }
       $scevgep134$sum = (($39) + ($141))|0;
       $scevgep135 = (($out$0) + ($scevgep134$sum)|0);
       $scevgep136$sum = (($46) + ($141))|0;
       $$sum10 = (1 - ($127))|0;
       $scevgep137$sum = (($scevgep136$sum) + ($$sum10))|0;
       $147 = (($out$0) + ($scevgep137$sum)|0);
       $from$4$ph = $147;$len$1$ph = $138;$out$5$ph = $scevgep135;
      } else {
       $from$4$ph = $136;$len$1$ph = $len$0;$out$5$ph = $out$0;
      }
     } else {
      $148 = ($133>>>0)>($20>>>0);
      if (!($148)) {
       $$sum5 = (($45) - ($133))|0;
       $170 = (($22) + ($$sum5)|0);
       $171 = ($len$0>>>0)>($133>>>0);
       if (!($171)) {
        $from$4$ph = $170;$len$1$ph = $len$0;$out$5$ph = $out$0;
        break;
       }
       $172 = (($len$0) - ($133))|0;
       $173 = $this$sroa$8$1$lcssa&65535;
       $174 = (($126) + ($173))|0;
       $175 = (($174) - ($130))|0;
       $from$3 = $170;$op$3 = $133;$out$4 = $out$0;
       while(1) {
        $176 = (($from$3) + 1|0);
        $177 = HEAP8[$176>>0]|0;
        $178 = (($out$4) + 1|0);
        HEAP8[$178>>0] = $177;
        $179 = (($op$3) + -1)|0;
        $180 = ($179|0)==(0);
        if ($180) {
         break;
        } else {
         $from$3 = $176;$op$3 = $179;$out$4 = $178;
        }
       }
       $scevgep124$sum = (($39) + ($175))|0;
       $scevgep125 = (($out$0) + ($scevgep124$sum)|0);
       $scevgep126$sum = (($46) + ($175))|0;
       $$sum6 = (1 - ($127))|0;
       $scevgep127$sum = (($scevgep126$sum) + ($$sum6))|0;
       $181 = (($out$0) + ($scevgep127$sum)|0);
       $from$4$ph = $181;$len$1$ph = $172;$out$5$ph = $scevgep125;
       break;
      }
      $$sum7 = (($44) - ($133))|0;
      $149 = (($22) + ($$sum7)|0);
      $150 = (($133) - ($20))|0;
      $151 = ($len$0>>>0)>($150>>>0);
      if ($151) {
       $152 = (($len$0) - ($150))|0;
       $153 = $this$sroa$8$1$lcssa&65535;
       $154 = (($126) + ($153))|0;
       $155 = (($154) - ($130))|0;
       $from$1 = $149;$op$1 = $150;$out$2 = $out$0;
       while(1) {
        $156 = (($from$1) + 1|0);
        $157 = HEAP8[$156>>0]|0;
        $158 = (($out$2) + 1|0);
        HEAP8[$158>>0] = $157;
        $159 = (($op$1) + -1)|0;
        $160 = ($159|0)==(0);
        if ($160) {
         break;
        } else {
         $from$1 = $156;$op$1 = $159;$out$2 = $158;
        }
       }
       $scevgep129$sum = (($47) + ($155))|0;
       $scevgep130 = (($out$0) + ($scevgep129$sum)|0);
       $161 = ($152>>>0)>($20>>>0);
       if ($161) {
        $scevgep131$sum = (($48) + ($155))|0;
        $scevgep132 = (($out$0) + ($scevgep131$sum)|0);
        $165 = $scevgep132;$from$2 = $40;$op$2 = $20;$out$3 = $scevgep130;
        while(1) {
         $162 = (($from$2) + 1|0);
         $163 = HEAP8[$162>>0]|0;
         $164 = (($165) + 2|0);
         HEAP8[$164>>0] = $163;
         $166 = (($op$2) + -1)|0;
         $167 = ($166|0)==(0);
         if ($167) {
          $$lcssa166 = $165;$$lcssa167 = $164;
          break;
         } else {
          $165$phi = $out$3;$from$2 = $162;$op$2 = $166;$out$3 = $164;$165 = $165$phi;
         }
        }
        $168 = (($152) - ($20))|0;
        $$sum8 = (2 - ($127))|0;
        $169 = (($$lcssa166) + ($$sum8)|0);
        $from$4$ph = $169;$len$1$ph = $168;$out$5$ph = $$lcssa167;
       } else {
        $from$4$ph = $40;$len$1$ph = $152;$out$5$ph = $scevgep130;
       }
      } else {
       $from$4$ph = $149;$len$1$ph = $len$0;$out$5$ph = $out$0;
      }
     }
    } while(0);
    $182 = ($len$1$ph>>>0)>(2);
    if ($182) {
     $183 = (($len$1$ph) + -3)|0;
     $184 = (($183>>>0) % 3)&-1;
     $185 = (($183) - ($184))|0;
     $from$474 = $from$4$ph;$len$173 = $len$1$ph;$out$572 = $out$5$ph;
     while(1) {
      $186 = (($from$474) + 1|0);
      $187 = HEAP8[$186>>0]|0;
      $188 = (($out$572) + 1|0);
      HEAP8[$188>>0] = $187;
      $189 = (($from$474) + 2|0);
      $190 = HEAP8[$189>>0]|0;
      $191 = (($out$572) + 2|0);
      HEAP8[$191>>0] = $190;
      $192 = (($from$474) + 3|0);
      $193 = HEAP8[$192>>0]|0;
      $194 = (($out$572) + 3|0);
      HEAP8[$194>>0] = $193;
      $195 = (($len$173) + -3)|0;
      $196 = ($195>>>0)>(2);
      if ($196) {
       $from$474 = $192;$len$173 = $195;$out$572 = $194;
      } else {
       break;
      }
     }
     $scevgep139$sum = (($185) + 3)|0;
     $scevgep140 = (($out$5$ph) + ($scevgep139$sum)|0);
     $scevgep141$sum = (($185) + 3)|0;
     $scevgep142 = (($from$4$ph) + ($scevgep141$sum)|0);
     $from$4$lcssa = $scevgep142;$len$1$lcssa = $184;$out$5$lcssa = $scevgep140;
    } else {
     $from$4$lcssa = $from$4$ph;$len$1$lcssa = $len$1$ph;$out$5$lcssa = $out$5$ph;
    }
    $197 = ($len$1$lcssa|0)==(0);
    if ($197) {
     $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $out$5$lcssa;
    } else {
     $198 = (($from$4$lcssa) + 1|0);
     $199 = HEAP8[$198>>0]|0;
     $200 = (($out$5$lcssa) + 1|0);
     HEAP8[$200>>0] = $199;
     $201 = ($len$1$lcssa>>>0)>(1);
     if ($201) {
      $202 = (($from$4$lcssa) + 2|0);
      $203 = HEAP8[$202>>0]|0;
      $204 = (($out$5$lcssa) + 2|0);
      HEAP8[$204>>0] = $203;
      $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $204;
     } else {
      $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $200;
     }
    }
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $68 = (($out$0) + 1|0);
   HEAP8[$68>>0] = $this$sroa$8$0$lcssa$off0;
   $bits$8 = $$lcssa20;$hold$8 = $$lcssa;$in$6 = $in$1;$out$7 = $68;
  }
  $270 = ($in$6>>>0)<($6>>>0);
  $271 = ($out$7>>>0)<($14>>>0);
  $or$cond = $270 & $271;
  if ($or$cond) {
   $bits$0 = $bits$8;$hold$0 = $hold$8;$in$0 = $in$6;$out$0 = $out$7;
  } else {
   $bits$9 = $bits$8;$hold$9 = $hold$8;$in$7 = $in$6;$out$8 = $out$7;
   break;
  }
 }
 do {
  if ((label|0) == 21) {
   $135 = (($strm) + 24|0);
   HEAP32[$135>>2] = 6986152;
   HEAP32[$1>>2] = 27;
   $bits$9 = $$lcssa176;$hold$9 = $$lcssa175;$in$7 = $in$5$lcssa;$out$8 = $out$0$lcssa168;
  }
  else if ((label|0) == 53) {
   $252 = (($strm) + 24|0);
   HEAP32[$252>>2] = 6986184;
   HEAP32[$1>>2] = 27;
   $bits$9 = $$lcssa158;$hold$9 = $$lcssa160;$in$7 = $in$4$lcssa;$out$8 = $out$0$lcssa;
  }
  else if ((label|0) == 56) {
   $267 = $$lcssa146 & 32;
   $268 = ($267|0)==(0);
   if ($268) {
    $269 = (($strm) + 24|0);
    HEAP32[$269>>2] = 6986208;
    HEAP32[$1>>2] = 27;
    $bits$9 = $$lcssa149;$hold$9 = $$lcssa152;$in$7 = $in$1$lcssa172;$out$8 = $out$0$lcssa169;
    break;
   } else {
    HEAP32[$1>>2] = 11;
    $bits$9 = $$lcssa149;$hold$9 = $$lcssa152;$in$7 = $in$1$lcssa172;$out$8 = $out$0$lcssa169;
    break;
   }
  }
 } while(0);
 $272 = $bits$9 >>> 3;
 $273 = (0 - ($272))|0;
 $274 = (($in$7) + ($273)|0);
 $275 = $272 << 3;
 $276 = (($bits$9) - ($275))|0;
 $277 = 1 << $276;
 $278 = (($277) + -1)|0;
 $279 = $278 & $hold$9;
 $$sum3 = (1 - ($272))|0;
 $280 = (($in$7) + ($$sum3)|0);
 HEAP32[$strm>>2] = $280;
 $281 = (($out$8) + 1|0);
 HEAP32[$7>>2] = $281;
 $282 = ($274>>>0)<($6>>>0);
 if ($282) {
  $283 = $6;
  $284 = $274;
  $285 = (($283) - ($284))|0;
  $$in4 = $285;
 } else {
  $286 = $274;
  $287 = $6;
  $288 = (($287) - ($286))|0;
  $$in4 = $288;
 }
 $289 = (($$in4) + 5)|0;
 HEAP32[$4>>2] = $289;
 $290 = ($out$8>>>0)<($14>>>0);
 if ($290) {
  $291 = $14;
  $292 = $out$8;
  $293 = (($291) - ($292))|0;
  $$in = $293;
  $297 = (($$in) + 257)|0;
  HEAP32[$10>>2] = $297;
  HEAP32[$23>>2] = $279;
  HEAP32[$25>>2] = $276;
  return;
 } else {
  $294 = $out$8;
  $295 = $14;
  $296 = (($295) - ($294))|0;
  $$in = $296;
  $297 = (($$in) + 257)|0;
  HEAP32[$10>>2] = $297;
  HEAP32[$23>>2] = $279;
  HEAP32[$25>>2] = $276;
  return;
 }
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa112 = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa127 = 0, $$lcssa130 = 0, $$lcssa132 = 0, $$lcssa134 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0;
 var $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0;
 var $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0;
 var $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0;
 var $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$014$i$i$lcssa = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0;
 var $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0;
 var $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0$i$i$lcssa = 0, $sp$074$i = 0, $sp$074$i$lcssa = 0, $sp$173$i = 0, $sp$173$i$lcssa = 0, $ssize$0$i = 0;
 var $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[6986240>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((6986240 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((6986240 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[6986240>>2] = $22;
     } else {
      $23 = HEAP32[((6986240 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((6986240 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((6986240 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((6986240 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[6986240>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[((6986240 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((6986240 + 8|0))>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[((6986240 + 20|0))>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = ((6986240 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[6986240>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[6986240>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((6986240 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((6986240 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((6986240 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((6986240 + 8|0))>>2] = $81;
     HEAP32[((6986240 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((6986240 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((6986240 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((6986240 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((6986240 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((6986240 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((6986240 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((6986240 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((6986240 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((6986240 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((6986240 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((6986240 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((6986240 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[6986240>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[6986240>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((6986240 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((6986240 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((6986240 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((6986240 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((6986240 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((6986240 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((6986240 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L126: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((6986240 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((6986240 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((6986240 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((6986240 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((6986240 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((6986240 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((6986240 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((6986240 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((6986240 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((6986240 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[6986240>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[6986240>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((6986240 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((6986240 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((6986240 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((6986240 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((6986240 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((6986240 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa134 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L225;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[((6986240 + 16|0))>>2]|0;
           $495 = ($$lcssa134>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa134>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L204;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((6986240 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((6986240 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((6986240 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((6986240 + 20|0))>>2] = $514;
   HEAP32[((6986240 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((6986240 + 8|0))>>2] = 0;
   HEAP32[((6986240 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((6986240 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((6986240 + 12|0))>>2] = $528;
  $529 = HEAP32[((6986240 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((6986240 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[6986712>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((6986712 + 8|0))>>2] = $538;
    HEAP32[((6986712 + 4|0))>>2] = $538;
    HEAP32[((6986712 + 12|0))>>2] = -1;
    HEAP32[((6986712 + 16|0))>>2] = -1;
    HEAP32[((6986712 + 20|0))>>2] = 0;
    HEAP32[((6986240 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[6986712>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((6986712 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((6986240 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((6986240 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((6986240 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((6986240 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((6986240 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa130 = $sp$0$i$i;$$lcssa132 = $565;$sp$0$i$i$lcssa = $sp$0$i$i;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i$lcssa|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((6986240 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$$lcssa130>>2]|0;
       $601 = HEAP32[$$lcssa132>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((6986712 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((6986240 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((6986240 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((6986712 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((6986240 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((6986240 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((6986240 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((6986240 + 432|0))>>2] = $633;
  $634 = HEAP32[((6986240 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((6986240 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((6986240 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((6986240 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((6986240 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((6986240 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((6986240 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((6986240 + 460|0))>>2] = 0;
    $641 = HEAP32[6986712>>2]|0;
    HEAP32[((6986240 + 36|0))>>2] = $641;
    HEAP32[((6986240 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((6986240 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((6986240 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((6986240 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((6986240 + 24|0))>>2] = $654;
    HEAP32[((6986240 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((6986712 + 16|0))>>2]|0;
    HEAP32[((6986240 + 28|0))>>2] = $660;
   } else {
    $sp$074$i = ((6986240 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$074$i>>2]|0;
     $662 = (($sp$074$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      $$lcssa123 = $661;$$lcssa125 = $662;$$lcssa127 = $663;$sp$074$i$lcssa = $sp$074$i;
      label = 213;
      break;
     }
     $666 = (($sp$074$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$074$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$074$i$lcssa) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($$lcssa123>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($$lcssa127) + ($tsize$244$i))|0;
       HEAP32[$$lcssa125>>2] = $675;
       $676 = HEAP32[((6986240 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((6986240 + 24|0))>>2] = $684;
       HEAP32[((6986240 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((6986712 + 16|0))>>2]|0;
       HEAP32[((6986240 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((6986240 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((6986240 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$173$i = ((6986240 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$173$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      $$lcssa120 = $sp$173$i;$sp$173$i$lcssa = $sp$173$i;
      label = 223;
      break;
     }
     $696 = (($sp$173$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$173$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$173$i$lcssa) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$$lcssa120>>2] = $tbase$245$i;
      $703 = (($sp$173$i$lcssa) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((6986240 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((6986240 + 12|0))>>2] = $731;
        HEAP32[((6986240 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((6986240 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((6986240 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((6986240 + 8|0))>>2] = $737;
         HEAP32[((6986240 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L353: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((6986240 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[6986240>>2]|0;
            $764 = $763 & $762;
            HEAP32[6986240>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i$lcssa>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((6986240 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((6986240 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((6986240 + 4|0))>>2] = $807;
             break L353;
            } else {
             $808 = HEAP32[((6986240 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L353;
             }
            }
           } while(0);
           $815 = HEAP32[((6986240 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((6986240 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((6986240 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[6986240>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[6986240>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((6986240 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((6986240 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((6986240 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((6986240 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((6986240 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((6986240 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L442: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            $$lcssa = $909;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L442;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((6986240 + 16|0))>>2]|0;
          $912 = ($$lcssa>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((6986240 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((6986240 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       $$lcssa116 = $926;$$lcssa117 = $929;$$lcssa118 = $930;
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($$lcssa117) + -47)|0;
    $$sum1$i14$i = (($$lcssa117) + -39)|0;
    $934 = (($$lcssa116) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($$lcssa116) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((6986240 + 24|0))>>2] = $953;
    HEAP32[((6986240 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((6986712 + 16|0))>>2]|0;
    HEAP32[((6986240 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((6986240 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((6986240 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((6986240 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((6986240 + 448|0))+12>>2]|0;
    HEAP32[((6986240 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((6986240 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((6986240 + 460|0))>>2] = 0;
    HEAP32[((6986240 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($$lcssa118>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($$lcssa118>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((6986240 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[6986240>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[6986240>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((6986240 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((6986240 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((6986240 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((6986240 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((6986240 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((6986240 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         $$lcssa112 = $1048;$T$014$i$i$lcssa = $T$014$i$i;
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((6986240 + 16|0))>>2]|0;
       $1051 = ($$lcssa112>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa112>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i$lcssa;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((6986240 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((6986240 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((6986240 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((6986240 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((6986240 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0;
 var $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$060 = 0, $R$0 = 0, $R$0$lcssa = 0;
 var $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$059 = 0, $T$059$lcssa = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((6986240 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((6986240 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((6986240 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((6986240 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[6986240>>2]|0;
     $36 = $35 & $34;
     HEAP32[6986240>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((6986240 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((6986240 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((6986240 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((6986240 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((6986240 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((6986240 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((6986240 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((6986240 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((6986240 + 12|0))>>2] = $120;
   HEAP32[((6986240 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((6986240 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((6986240 + 20|0))>>2] = 0;
   HEAP32[((6986240 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((6986240 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((6986240 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((6986240 + 8|0))>>2] = $128;
   HEAP32[((6986240 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((6986240 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((6986240 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[6986240>>2]|0;
     $152 = $151 & $150;
     HEAP32[6986240>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((6986240 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((6986240 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((6986240 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((6986240 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((6986240 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((6986240 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((6986240 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((6986240 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((6986240 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((6986240 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((6986240 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((6986240 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[6986240>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[6986240>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((6986240 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((6986240 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((6986240 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((6986240 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((6986240 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((6986240 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L204: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$060 = $292;$T$059 = $284;
     while(1) {
      $300 = $K19$060 >>> 31;
      $301 = ((($T$059) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$059$lcssa = $T$059;
       break;
      }
      $294 = $K19$060 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L204;
      } else {
       $K19$060 = $294;$T$059 = $296;
      }
     }
     $303 = HEAP32[((6986240 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$059$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((6986240 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((6986240 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((6986240 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((6986240 + 456|0));
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((6986240 + 32|0))>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$124 = 0, $$125 = 0, $$22 = 0, $$23 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$sum = 0, $$sum14 = 0, $$sum1447 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum1867 = 0, $$sum19 = 0, $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$126 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$373 = 0;
 var $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$755 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond42 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$084 = 0, $x$148 = 0, $x$268 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa114 = $13;
   break;
  }
 }
 $16 = ($$lcssa114|0)==(45);
 do {
  if ((($$lcssa114|0) == 43) | (($$lcssa114|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa114;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$125 = 8;$c$126 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (6986736 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   } else {
    $$125 = 16;$c$126 = $46;
    label = 46;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (6986736 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$084 = 0;
    while(1) {
     $69 = ($x$084*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $$ = $80 & $81;
     if ($$) {
      $71 = $79;$x$084 = $70;
     } else {
      $$lcssa113 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $281 = $$lcssa113;$282 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$89 = $82;$c$373 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $88 = ($89|0)<(0);
     $90 = $88 << 31 >> 31;
     $91 = $89 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $89;$283 = $84;$284 = $85;$c$3$lcssa = $c$373;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($89|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond7 = $108 & $113;
     if ($or$cond7) {
      $84 = $98;$85 = $99;$89 = $107;$c$373 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $253 = $284;$255 = $283;
    } else {
     $$124 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $253 = $282;$255 = $281;
   }
  } else {
   $$125 = $$1;$c$126 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $115 = (($$125) + -1)|0;
   $116 = $115 & $$125;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$125*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (6987000 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1447 = (($c$126) + 1)|0;
    $128 = (6986736 + ($$sum1447)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$125>>>0);
    if ($131) {
     $134 = $130;$x$148 = 0;
     while(1) {
      $132 = $x$148 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $142 = (6986736 + ($$sum14)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$125>>>0);
      $146 = ($133>>>0)<(134217728);
      $$22 = $145 & $146;
      if ($$22) {
       $134 = $144;$x$148 = $133;
      } else {
       $$lcssa109 = $133;$$lcssa110 = $143;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $150 = $$lcssa110;$153 = 0;$155 = $$lcssa109;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $150 = $129;$153 = 0;$155 = 0;$c$4$lcssa = $c$126;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$125>>>0);
    $152 = ($153>>>0)>($148>>>0);
    $154 = ($155>>>0)>($147>>>0);
    $156 = ($153|0)==($148|0);
    $157 = $156 & $154;
    $158 = $152 | $157;
    $or$cond42 = $151 | $158;
    if ($or$cond42) {
     $$124 = $$125;$285 = $155;$286 = $153;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $159 = $155;$160 = $153;$164 = $150;
    }
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $173 = (6986736 + ($$sum15)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$125>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $$124 = $$125;$285 = $165;$286 = $162;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
   }
   $$sum1867 = (($c$126) + 1)|0;
   $118 = (6986736 + ($$sum1867)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$125>>>0);
   if ($121) {
    $184 = $120;$x$268 = 0;
    while(1) {
     $182 = Math_imul($x$268, $$125)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $192 = (6986736 + ($$sum18)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$125>>>0);
     $196 = ($183>>>0)<(119304647);
     $$23 = $195 & $196;
     if ($$23) {
      $184 = $194;$x$268 = $183;
     } else {
      $$lcssa111 = $183;$$lcssa112 = $193;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $198 = $$lcssa112;$287 = $$lcssa111;$288 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$126;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$125>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$125|0),0)|0);
    $201 = tempRet0;
    $203 = $288;$205 = $287;$212 = $198;$c$755 = $c$6$lcssa;
    while(1) {
     $202 = ($203>>>0)>($201>>>0);
     $204 = ($205>>>0)>($200>>>0);
     $206 = ($203|0)==($201|0);
     $207 = $206 & $204;
     $208 = $202 | $207;
     if ($208) {
      $$124 = $$125;$285 = $205;$286 = $203;$c$8 = $c$755;
      label = 72;
      break L69;
     }
     $209 = (___muldi3(($205|0),($203|0),($$125|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $$124 = $$125;$285 = $205;$286 = $203;$c$8 = $c$755;
      label = 72;
      break L69;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $228 = (6986736 + ($$sum19)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$125>>>0);
     if ($231) {
      $203 = $220;$205 = $219;$212 = $229;$c$755 = $c$7$be;
     } else {
      $$124 = $$125;$285 = $219;$286 = $220;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$124 = $$125;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum16 = (($c$8) + 1)|0;
  $232 = (6986736 + ($$sum16)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$124>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $243 = (6986736 + ($$sum17)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$124>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $253 = $1;$255 = $0;
  } else {
   $253 = $286;$255 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $252 = ($253>>>0)<($1>>>0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = ($253|0)==($1|0);
 $257 = $256 & $254;
 $258 = $252 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond12 = $262 | $263;
  if (!($or$cond12)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   return ($280|0);
  }
  $267 = ($253>>>0)>($1>>>0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = ($253|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $255 ^ $neg$0;
 $276 = $253 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 return ($280|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 6987016;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 6987016;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 6987016;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 3]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 3]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa7 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $8 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 3]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa7 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 3]($f,$s,$i$0$lcssa7)|0);
   $26 = ($25>>>0)<($i$0$lcssa7>>>0);
   if ($26) {
    $$0 = $i$0$lcssa7;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa7)|0);
    $28 = (($l) - ($i$0$lcssa7))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa7;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 3]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=6987592+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$12 = 0, $$lcssa4 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa4 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa4>>0]|0;
  $$1$ph = $$lcssa4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 return ($22|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = (($s) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = (($f$i) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,-2147483648,0)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return ($6|0);
 }
 $9 = (($f$i) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 STACKTOP = sp;return ($6|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $3 & $4;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$110;$w$0$lcssa = $w$011;
        break L11;
       }
       $26 = (($w$011) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa18 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $6 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $6;$r$0$lcssa = $r$04;
     break L1;
    }
    $5 = ($6<<24>>24)==($3<<24>>24);
    if (!($5)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa18 = $l$03;$r$04$lcssa17 = $r$04;
      break;
     }
    }
    $13 = (($l$03) + 1|0);
    $14 = (($r$04) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $6 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa18>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa17;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $13 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$7 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $4 = ($3<<24>>24)!=(0);
    $5 = ($$08|0)!=(0);
    $or$cond = $4 & $5;
    $6 = ($7<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond & $6;
    if (!($or$cond4)) {
     $13 = $7;$r$0$lcssa = $r$07;
     break L4;
    }
    $8 = (($l$06) + 1|0);
    $9 = (($r$07) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $13 = 0;$r$0$lcssa = $9;
     break;
    } else {
     $$08$in = $$08;$7 = $10;$l$06 = $8;$r$07 = $9;
    }
   }
  }
 } while(0);
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((6986240 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((6986712 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((6986240 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((6986240 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((6986240 + 24|0))>>2] = $36;
  HEAP32[((6986240 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((6986240 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((6986240 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((6986240 + 8|0))>>2] = $storemerge21;
  HEAP32[((6986240 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((6986240 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[6986240>>2]|0;
    $88 = $87 & $86;
    HEAP32[6986240>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((6986240 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((6986240 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((6986240 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((6986240 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((6986240 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((6986240 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0;
 var $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$051 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$050 = 0, $T$050$lcssa = 0;
 var $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((6986240 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((6986240 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((6986240 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((6986240 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[6986240>>2]|0;
     $32 = $31 & $30;
     HEAP32[6986240>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((6986240 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((6986240 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((6986240 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((6986240 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((6986240 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((6986240 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((6986240 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((6986240 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((6986240 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((6986240 + 12|0))>>2] = $115;
   HEAP32[((6986240 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((6986240 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((6986240 + 20|0))>>2] = 0;
   HEAP32[((6986240 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((6986240 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((6986240 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((6986240 + 8|0))>>2] = $123;
   HEAP32[((6986240 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((6986240 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[6986240>>2]|0;
     $146 = $145 & $144;
     HEAP32[6986240>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((6986240 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((6986240 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((6986240 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((6986240 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((6986240 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((6986240 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((6986240 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((6986240 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((6986240 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[6986240>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[6986240>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((6986240 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((6986240 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((6986240 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((6986240 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((6986240 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((6986240 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$051 = $283;$T$050 = $275;
   while(1) {
    $291 = $K20$051 >>> 31;
    $292 = ((($T$050) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$050$lcssa = $T$050;
     break;
    }
    $285 = $K20$051 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$051 = $285;$T$050 = $287;
    }
   }
   $294 = HEAP32[((6986240 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$050$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((6986240 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0;
 var $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0, $$01$i69$i = 0, $$01$i74 = 0;
 var $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$100 = 0, $$12$i = 0, $$12$i$i = 0, $$12$i118$i = 0;
 var $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0, $$29$i = 0, $$3$i = 0.0;
 var $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa283$i = 0, $$lcssa291 = 0, $$lcssa297 = 0, $$lcssa298 = 0;
 var $$lcssa299 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa304 = 0, $$lcssa305 = 0, $$lcssa311 = 0, $$lcssa315 = 0, $$lcssa317 = 0, $$lcssa320 = 0, $$lcssa321 = 0, $$lcssa324 = 0.0, $$lcssa325 = 0, $$lcssa328 = 0, $$lcssa332 = 0, $$mask$i = 0, $$mask$i39 = 0, $$mask1$i = 0, $$mask1$i38 = 0, $$neg159$i = 0;
 var $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0, $$pre269 = 0, $$pre270 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0.0, $1031 = 0.0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $1039$phi = 0, $104 = 0, $1040 = 0, $1040$phi = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $124$phi = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $579$phi = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $879$phi = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0;
 var $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0;
 var $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0;
 var $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0;
 var $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0115 = 0, $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0;
 var $fl$4 = 0, $fl$6 = 0, $fmt88$lcssa = 0, $fmt88167 = 0, $fmt89 = 0, $fmt90 = 0, $fmt91 = 0, $fmt93 = 0, $fmt93$lcssa294 = 0, $fmt94 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1191 = 0, $i$1230$i = 0, $i$2166 = 0;
 var $i$2217$i = 0, $i$3164 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0;
 var $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0, $or$cond$i60$i = 0, $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0;
 var $or$cond279 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0;
 var $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s9$0$i = 0, $s9$1200$i = 0;
 var $s9$2$i = 0, $sext = 0, $sext101 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa295 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0;
 var $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0168 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0;
 var $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1039 = 0;$1040 = 0;$cnt$0 = 0;$fmt90 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt90>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 351;
   break;
  } else {
   $1041 = $22;$fmt89 = $fmt90;
  }
  while(1) {
   if ((($1041<<24>>24) == 37)) {
    $fmt88167 = $fmt89;$z$0168 = $fmt89;
    label = 9;
    break;
   } else if ((($1041<<24>>24) == 0)) {
    $fmt88$lcssa = $fmt89;$z$0$lcssa = $fmt89;
    break;
   }
   $24 = (($fmt89) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1041 = $$pre;$fmt89 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = (($fmt88167) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt88$lcssa = $fmt88167;$z$0$lcssa = $z$0168;
      break L12;
     }
     $28 = (($z$0168) + 1|0);
     $29 = (($fmt88167) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt88167 = $29;$z$0168 = $28;
      label = 9;
     } else {
      $fmt88$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt90;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt90,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt90|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1040$phi = $1040;$1039$phi = $1039;$cnt$0 = $cnt$1;$fmt90 = $fmt88$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1040 = $1040$phi;$1039 = $1039$phi;
   continue;
  }
  $36 = (($fmt88$lcssa) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = (($fmt88$lcssa) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   $42 = (($fmt88$lcssa) + 3|0);
   $$100 = $41 ? $42 : $36;
   $$l10n$0 = $41 ? 1 : $l10n$0;
   $isdigittmp$ = $41 ? $isdigittmp : -1;
   $$pre269 = HEAP8[$$100>>0]|0;
   $44 = $$pre269;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$100;
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L24: do {
   if ($46) {
    $48 = $43;$53 = $44;$fl$0175 = 0;$storemerge8174 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $63 = $53;$fl$0115 = $fl$0175;$storemerge8113 = $storemerge8174;
      break L24;
     }
     $52 = $53 << 24 >> 24;
     $54 = (($52) + -32)|0;
     $55 = 1 << $54;
     $56 = $55 | $fl$0175;
     $57 = (($storemerge8174) + 1|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58 << 24 >> 24;
     $60 = $59 & -32;
     $61 = ($60|0)==(32);
     if ($61) {
      $48 = $59;$53 = $58;$fl$0175 = $56;$storemerge8174 = $57;
     } else {
      $63 = $58;$fl$0115 = $56;$storemerge8113 = $57;
      break;
     }
    }
   } else {
    $63 = $44;$fl$0115 = 0;$storemerge8113 = $storemerge;
   }
  } while(0);
  $62 = ($63<<24>>24)==(42);
  do {
   if ($62) {
    $64 = (($storemerge8113) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $isdigittmp11 = (($66) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $67 = (($storemerge8113) + 2|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = ($68<<24>>24)==(36);
     if ($69) {
      $70 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$70>>2] = 10;
      $71 = HEAP8[$64>>0]|0;
      $72 = $71 << 24 >> 24;
      $73 = (($72) + -48)|0;
      $74 = (($nl_arg) + ($73<<3)|0);
      $75 = $74;
      $76 = $75;
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 4)|0;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($storemerge8113) + 3|0);
      $l10n$2 = 1;$storemerge13 = $81;$w$0 = $77;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $82 = ($l10n$1|0)==(0);
     if (!($82)) {
      $$0 = -1;
      label = 369;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0115;$fmt91 = $64;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $83 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $64;$w$0 = $83;
    }
    $84 = ($w$0|0)<(0);
    if ($84) {
     $85 = $fl$0115 | 8192;
     $86 = (0 - ($w$0))|0;
     $fl$1 = $85;$fmt91 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $86;
    } else {
     $fl$1 = $fl$0115;$fmt91 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $87 = $63 << 24 >> 24;
    $isdigittmp1$i = (($87) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $91 = $storemerge8113;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $88 = ($i$03$i*10)|0;
      $89 = (($88) + ($isdigittmp4$i))|0;
      $90 = (($91) + 1|0);
      $92 = HEAP8[$90>>0]|0;
      $93 = $92 << 24 >> 24;
      $isdigittmp$i = (($93) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $91 = $90;$i$03$i = $89;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $89;$$lcssa291 = $90;
       break;
      }
     }
     $94 = ($$lcssa|0)<(0);
     if ($94) {
      $$0 = -1;
      label = 369;
      break L1;
     } else {
      $fl$1 = $fl$0115;$fmt91 = $$lcssa291;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$0115;$fmt91 = $storemerge8113;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $95 = HEAP8[$fmt91>>0]|0;
  $96 = ($95<<24>>24)==(46);
  L45: do {
   if ($96) {
    $97 = (($fmt91) + 1|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = ($98<<24>>24)==(42);
    if (!($99)) {
     $120 = $98 << 24 >> 24;
     $isdigittmp1$i28 = (($120) + -48)|0;
     $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
     if ($isdigit2$i29) {
      $1042 = $97;$124 = $fmt91;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
     } else {
      $fmt94 = $97;$p$0 = 0;
      break;
     }
     while(1) {
      $121 = ($i$03$i31*10)|0;
      $122 = (($121) + ($isdigittmp4$i30))|0;
      $123 = (($124) + 2|0);
      $125 = HEAP8[$123>>0]|0;
      $126 = $125 << 24 >> 24;
      $isdigittmp$i32 = (($126) + -48)|0;
      $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
      if ($isdigit$i33) {
       $124$phi = $1042;$1042 = $123;$i$03$i31 = $122;$isdigittmp4$i30 = $isdigittmp$i32;$124 = $124$phi;
      } else {
       $fmt94 = $123;$p$0 = $122;
       break L45;
      }
     }
    }
    $100 = (($fmt91) + 2|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101 << 24 >> 24;
    $isdigittmp9 = (($102) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $103 = (($fmt91) + 3|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = ($104<<24>>24)==(36);
     if ($105) {
      $106 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$106>>2] = 10;
      $107 = HEAP8[$100>>0]|0;
      $108 = $107 << 24 >> 24;
      $109 = (($108) + -48)|0;
      $110 = (($nl_arg) + ($109<<3)|0);
      $111 = $110;
      $112 = $111;
      $113 = HEAP32[$112>>2]|0;
      $114 = (($111) + 4)|0;
      $115 = $114;
      $116 = HEAP32[$115>>2]|0;
      $117 = (($fmt91) + 4|0);
      $fmt94 = $117;$p$0 = $113;
      break;
     }
    }
    $118 = ($l10n$3|0)==(0);
    if (!($118)) {
     $$0 = -1;
     label = 369;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $119 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt94 = $100;$p$0 = $119;
    } else {
     $fmt94 = $100;$p$0 = 0;
    }
   } else {
    $fmt94 = $fmt91;$p$0 = -1;
   }
  } while(0);
  $fmt93 = $fmt94;$st$0 = 0;
  while(1) {
   $127 = HEAP8[$fmt93>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = (($128) + -65)|0;
   $130 = ($129>>>0)>(57);
   if ($130) {
    $$0 = -1;
    label = 369;
    break L1;
   }
   $131 = (($fmt93) + 1|0);
   $132 = ((6987024 + (($st$0*58)|0)|0) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + -1)|0;
   $136 = ($135>>>0)<(8);
   if ($136) {
    $fmt93 = $131;$st$0 = $134;
   } else {
    $$lcssa297 = $127;$$lcssa298 = $131;$$lcssa299 = $133;$$lcssa300 = $134;$fmt93$lcssa294 = $fmt93;$st$0$lcssa295 = $st$0;
    break;
   }
  }
  $137 = ($$lcssa299<<24>>24)==(0);
  if ($137) {
   $$0 = -1;
   label = 369;
   break;
  }
  $138 = ($$lcssa299<<24>>24)==(19);
  $139 = ($argpos$0|0)>(-1);
  L64: do {
   if ($138) {
    if ($139) {
     $$0 = -1;
     label = 369;
     break L1;
    } else {
     $1043 = $1039;$1044 = $1040;
     label = 62;
    }
   } else {
    if ($139) {
     $140 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$140>>2] = $$lcssa300;
     $141 = (($nl_arg) + ($argpos$0<<3)|0);
     $142 = $141;
     $143 = $142;
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 4)|0;
     $146 = $145;
     $147 = HEAP32[$146>>2]|0;
     $1043 = $144;$1044 = $147;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 369;
     break L1;
    }
    $148 = ($$lcssa299&255)>(20);
    if ($148) {
     $182 = $$lcssa297;$191 = $1039;$218 = $1040;
    } else {
     do {
      switch ($$lcssa300|0) {
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $149 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $150 = $149;
       $1045 = $1040;$1046 = $150;
       label = 63;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $151 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $152 = ($151|0)<(0);
       $153 = $152 << 31 >> 31;
       $1045 = $153;$1046 = $151;
       label = 63;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1045 = 0;$1046 = $154;
       label = 63;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $155 = $arglist_current14;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (($155) + 4)|0;
       $159 = $158;
       $160 = HEAP32[$159>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1045 = $160;$1046 = $157;
       label = 63;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $161 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $162 = $161&65535;
       $163 = $162 << 16 >> 16;
       $164 = ($163|0)<(0);
       $165 = $164 << 31 >> 31;
       $sext101 = $161 << 16;
       $166 = $sext101 >> 16;
       $1045 = $165;$1046 = $166;
       label = 63;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $167 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i38 = $167 & 65535;
       $1045 = 0;$1046 = $$mask1$i38;
       label = 63;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $168 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $169 = $168&255;
       $170 = $169 << 24 >> 24;
       $171 = ($170|0)<(0);
       $172 = $171 << 31 >> 31;
       $sext = $168 << 24;
       $173 = $sext >> 24;
       $1045 = $172;$1046 = $173;
       label = 63;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $174 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i39 = $174 & 255;
       $1045 = 0;$1046 = $$mask$i39;
       label = 63;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
       $177 = HEAP32[tempDoublePtr+4>>2]|0;
       $1045 = $177;$1046 = $176;
       label = 63;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
       $180 = HEAP32[tempDoublePtr+4>>2]|0;
       $1043 = $179;$1044 = $180;
       label = 62;
       break L64;
       break;
      }
      default: {
       $1045 = $1040;$1046 = $1039;
       label = 63;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $1045 = $1044;$1046 = $1043;
    label = 63;
   } else {
    $1039 = $1043;$1040 = $1044;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 63) {
   label = 0;
   $$pre270 = HEAP8[$fmt93$lcssa294>>0]|0;
   $182 = $$pre270;$191 = $1046;$218 = $1045;
  }
  $181 = $182 << 24 >> 24;
  $183 = ($st$0$lcssa295|0)!=(0);
  $184 = $181 & 15;
  $185 = ($184|0)==(3);
  $or$cond15 = $183 & $185;
  $186 = $181 & -33;
  $t$0 = $or$cond15 ? $186 : $181;
  $187 = $fl$1 & 8192;
  $188 = ($187|0)==(0);
  $189 = $fl$1 & -65537;
  $fl$1$ = $188 ? $fl$1 : $189;
  L88: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa295|0) {
    case 0:  {
     $190 = $191;
     HEAP32[$190>>2] = $cnt$1;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $192 = $191;
     HEAP32[$192>>2] = $cnt$1;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $193 = ($cnt$1|0)<(0);
     $194 = $193 << 31 >> 31;
     $195 = $191;
     $196 = $195;
     $197 = $196;
     HEAP32[$197>>2] = $cnt$1;
     $198 = (($196) + 4)|0;
     $199 = $198;
     HEAP32[$199>>2] = $194;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $200 = $cnt$1&65535;
     $201 = $191;
     HEAP16[$201>>1] = $200;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $202 = $cnt$1&255;
     $203 = $191;
     HEAP8[$203>>0] = $202;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $204 = $191;
     HEAP32[$204>>2] = $cnt$1;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $205 = ($cnt$1|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = $191;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $cnt$1;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $212 = ($p$0>>>0)>(8);
    $213 = $212 ? $p$0 : 8;
    $214 = $fl$1$ | 8;
    $fl$3 = $214;$p$1 = $213;$t$1 = 120;
    label = 74;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 74;
    break;
   }
   case 111:  {
    $238 = ($191|0)==(0);
    $239 = ($218|0)==(0);
    $240 = $238 & $239;
    if ($240) {
     $$0$lcssa$i52 = $2;
    } else {
     $$03$i49 = $2;$242 = $191;$246 = $218;
     while(1) {
      $241 = $242 & 7;
      $243 = $241 | 48;
      $244 = $243&255;
      $245 = (($$03$i49) + -1|0);
      HEAP8[$245>>0] = $244;
      $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
      $248 = tempRet0;
      $249 = ($247|0)==(0);
      $250 = ($248|0)==(0);
      $251 = $249 & $250;
      if ($251) {
       $$0$lcssa$i52 = $245;
       break;
      } else {
       $$03$i49 = $245;$242 = $247;$246 = $248;
      }
     }
    }
    $252 = $fl$1$ & 8;
    $253 = ($252|0)==(0);
    $or$cond19 = $253 | $240;
    $$25 = $or$cond19 ? 6987488 : ((6987488 + 5|0));
    $254 = $or$cond19&1;
    $$26 = $254 ^ 1;
    $293 = $191;$295 = $218;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
    label = 90;
    break;
   }
   case 105: case 100:  {
    $255 = ($218|0)<(0);
    if ($255) {
     $256 = (_i64Subtract(0,0,($191|0),($218|0))|0);
     $257 = tempRet0;
     $263 = $257;$265 = $256;$pl$0 = 1;$prefix$0 = 6987488;
     label = 85;
     break L88;
    }
    $258 = $fl$1$ & 2048;
    $259 = ($258|0)==(0);
    if ($259) {
     $260 = $fl$1$ & 1;
     $261 = ($260|0)==(0);
     $$ = $261 ? 6987488 : ((6987488 + 2|0));
     $263 = $218;$265 = $191;$pl$0 = $260;$prefix$0 = $$;
     label = 85;
    } else {
     $263 = $218;$265 = $191;$pl$0 = 1;$prefix$0 = ((6987488 + 1|0));
     label = 85;
    }
    break;
   }
   case 117:  {
    $263 = $218;$265 = $191;$pl$0 = 0;$prefix$0 = 6987488;
    label = 85;
    break;
   }
   case 99:  {
    $304 = $191&255;
    HEAP8[$4>>0] = $304;
    $1047 = $191;$1048 = $218;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 6987488;$z$2 = $2;
    break;
   }
   case 109:  {
    $305 = (___errno_location()|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (_strerror(($306|0))|0);
    $a$1 = $307;
    label = 95;
    break;
   }
   case 115:  {
    $308 = $191;
    $309 = ($191|0)==(0);
    $$21 = $309 ? 6987504 : $308;
    $a$1 = $$21;
    label = 95;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $191;
    HEAP32[$5>>2] = 0;
    $1051 = $wc;$1052 = $6;$p$4274 = -1;
    label = 100;
    break;
   }
   case 83:  {
    $316 = $191;
    $317 = ($p$0|0)==(0);
    if ($317) {
     $1053 = $191;$1054 = $316;$i$0$lcssa275 = 0;
     label = 105;
    } else {
     $1051 = $316;$1052 = $191;$p$4274 = $p$0;
     label = 100;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $191;HEAP32[tempDoublePtr+4>>2] = $218;$355 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $356 = ($218|0)<(0);
    if ($356) {
     $357 = -$355;
     $$013$i = $357;$pl$0$i = 1;$prefix$0$i = 6987512;
    } else {
     $358 = $fl$1$ & 2048;
     $359 = ($358|0)==(0);
     if ($359) {
      $360 = $fl$1$ & 1;
      $361 = ($360|0)==(0);
      $$$i = $361 ? ((6987512 + 1|0)) : ((6987512 + 6|0));
      $$013$i = $355;$pl$0$i = $360;$prefix$0$i = $$$i;
     } else {
      $$013$i = $355;$pl$0$i = 1;$prefix$0$i = ((6987512 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$013$i;$362 = HEAP32[tempDoublePtr>>2]|0;
    $363 = HEAP32[tempDoublePtr+4>>2]|0;
    $364 = $363 & 2146435072;
    $365 = ($364>>>0)<(2146435072);
    $366 = (0)<(0);
    $367 = ($364|0)==(2146435072);
    $368 = $367 & $366;
    $369 = $365 | $368;
    if (!($369)) {
     $370 = $t$0 & 32;
     $371 = ($370|0)!=(0);
     $372 = $371 ? 6987536 : 6987544;
     $373 = ($$013$i != $$013$i) | (0.0 != 0.0);
     if ($373) {
      $374 = $371 ? 6987552 : 6987560;
      $pl$1$i = 0;$s1$0$i = $374;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $372;
     }
     $375 = (($pl$1$i) + 3)|0;
     $376 = $fl$1$ & 8192;
     $377 = ($376|0)==(0);
     $378 = ($w$1|0)>($375|0);
     $or$cond$i43$i = $377 & $378;
     if ($or$cond$i43$i) {
      $379 = (($w$1) - ($375))|0;
      $380 = ($379>>>0)>(256);
      $381 = $380 ? 256 : $379;
      _memset(($pad$i|0),32,($381|0))|0;
      $382 = ($379>>>0)>(255);
      if ($382) {
       $$01$i45$i = $379;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $383 = (($$01$i45$i) + -256)|0;
        $384 = ($383>>>0)>(255);
        if ($384) {
         $$01$i45$i = $383;
        } else {
         break;
        }
       }
       $385 = $379 & 255;
       $$0$lcssa$i47$i = $385;
      } else {
       $$0$lcssa$i47$i = $379;
      }
      (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $386 = $fl$1$ & 73728;
     $387 = ($386|0)==(8192);
     $or$cond$i50$i = $387 & $378;
     if ($or$cond$i50$i) {
      $388 = (($w$1) - ($375))|0;
      $389 = ($388>>>0)>(256);
      $390 = $389 ? 256 : $388;
      _memset(($pad$i|0),32,($390|0))|0;
      $391 = ($388>>>0)>(255);
      if ($391) {
       $$01$i52$i = $388;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $392 = (($$01$i52$i) + -256)|0;
        $393 = ($392>>>0)>(255);
        if ($393) {
         $$01$i52$i = $392;
        } else {
         break;
        }
       }
       $394 = $388 & 255;
       $$0$lcssa$i54$i = $394;
      } else {
       $$0$lcssa$i54$i = $388;
      }
      (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
     }
     $w$$i = $378 ? $w$1 : $375;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $395 = (+_frexpl($$013$i,$e2$i));
    $396 = $395 * 2.0;
    $397 = $396 != 0.0;
    if ($397) {
     $398 = HEAP32[$e2$i>>2]|0;
     $399 = (($398) + -1)|0;
     HEAP32[$e2$i>>2] = $399;
    }
    $400 = $t$0 | 32;
    $401 = ($400|0)==(97);
    if ($401) {
     $402 = $t$0 & 32;
     $403 = ($402|0)==(0);
     $404 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $403 ? $prefix$0$i : $404;
     $405 = $pl$0$i | 2;
     $406 = ($p$0>>>0)>(11);
     $407 = (12 - ($p$0))|0;
     $re$0$i = $406 ? 0 : $407;
     $408 = ($re$0$i|0)==(0);
     do {
      if ($408) {
       $$1$i = $396;
      } else {
       $re$1187$i = $re$0$i;$round$0186$i = 8.0;
       while(1) {
        $409 = (($re$1187$i) + -1)|0;
        $410 = $round$0186$i * 16.0;
        $411 = ($409|0)==(0);
        if ($411) {
         $$lcssa324 = $410;
         break;
        } else {
         $re$1187$i = $409;$round$0186$i = $410;
        }
       }
       $412 = HEAP8[$prefix$0$$i>>0]|0;
       $413 = ($412<<24>>24)==(45);
       if ($413) {
        $414 = -$396;
        $415 = $414 - $$lcssa324;
        $416 = $$lcssa324 + $415;
        $417 = -$416;
        $$1$i = $417;
        break;
       } else {
        $418 = $396 + $$lcssa324;
        $419 = $418 - $$lcssa324;
        $$1$i = $419;
        break;
       }
      }
     } while(0);
     $420 = HEAP32[$e2$i>>2]|0;
     $421 = ($420|0)<(0);
     $422 = (0 - ($420))|0;
     $423 = $421 ? $422 : $420;
     $424 = ($423|0)<(0);
     if ($424) {
      $425 = ($423|0)<(0);
      $426 = $425 << 31 >> 31;
      $$05$i$i = $7;$427 = $423;$428 = $426;
      while(1) {
       $429 = (___uremdi3(($427|0),($428|0),10,0)|0);
       $430 = tempRet0;
       $431 = $429 | 48;
       $432 = $431&255;
       $433 = (($$05$i$i) + -1|0);
       HEAP8[$433>>0] = $432;
       $434 = (___udivdi3(($427|0),($428|0),10,0)|0);
       $435 = tempRet0;
       $436 = ($428>>>0)>(9);
       $437 = ($427>>>0)>(4294967295);
       $438 = ($428|0)==(9);
       $439 = $438 & $437;
       $440 = $436 | $439;
       if ($440) {
        $$05$i$i = $433;$427 = $434;$428 = $435;
       } else {
        $$lcssa325 = $433;$1055 = $434;$1056 = $435;
        break;
       }
      }
      $$0$lcssa$i56$i = $$lcssa325;$$01$lcssa$off0$i$i = $1055;
     } else {
      $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $423;
     }
     $441 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($441) {
      $$1$lcssa$i$i = $$0$lcssa$i56$i;
     } else {
      $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $442 = (($y$03$i$i>>>0) % 10)&-1;
       $443 = $442 | 48;
       $444 = $443&255;
       $445 = (($$12$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (($y$03$i$i>>>0) / 10)&-1;
       $447 = ($y$03$i$i>>>0)<(10);
       if ($447) {
        $$1$lcssa$i$i = $445;
        break;
       } else {
        $$12$i$i = $445;$y$03$i$i = $446;
       }
      }
     }
     $448 = ($$1$lcssa$i$i|0)==($7|0);
     if ($448) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $449 = HEAP32[$e2$i>>2]|0;
     $450 = $449 >> 31;
     $451 = $450 & 2;
     $452 = (($451) + 43)|0;
     $453 = $452&255;
     $454 = (($estr$0$i) + -1|0);
     HEAP8[$454>>0] = $453;
     $455 = (($t$0) + 15)|0;
     $456 = $455&255;
     $457 = (($estr$0$i) + -2|0);
     HEAP8[$457>>0] = $456;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $458 = $fl$1$ & 8;
      $459 = ($458|0)==(0);
      if ($459) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $460 = (~~(($$2$us$us$i)));
        $461 = (6987568 + ($460)|0);
        $462 = HEAP8[$461>>0]|0;
        $463 = $462&255;
        $464 = $463 | $402;
        $465 = $464&255;
        $466 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $465;
        $467 = (+($460|0));
        $468 = $$2$us$us$i - $467;
        $469 = $468 * 16.0;
        $470 = $466;
        $471 = (($470) - ($0))|0;
        $472 = ($471|0)!=(1);
        $notlhs$us$us$i = $469 == 0.0;
        $or$cond$i80 = $472 | $notlhs$us$us$i;
        if ($or$cond$i80) {
         $s$1$us$us$i = $466;
        } else {
         $473 = (($s$0$us$us$i) + 2|0);
         HEAP8[$466>>0] = 46;
         $s$1$us$us$i = $473;
        }
        $474 = $469 != 0.0;
        if ($474) {
         $$2$us$us$i = $469;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $475 = (~~(($$2$us$i)));
        $476 = (6987568 + ($475)|0);
        $477 = HEAP8[$476>>0]|0;
        $478 = $477&255;
        $479 = $478 | $402;
        $480 = $479&255;
        $481 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $480;
        $482 = (+($475|0));
        $483 = $$2$us$i - $482;
        $484 = $483 * 16.0;
        $485 = $481;
        $486 = (($485) - ($0))|0;
        $487 = ($486|0)==(1);
        if ($487) {
         $488 = (($s$0$us$i) + 2|0);
         HEAP8[$481>>0] = 46;
         $s$1$us$i = $488;
        } else {
         $s$1$us$i = $481;
        }
        $489 = $484 != 0.0;
        if ($489) {
         $$2$us$i = $484;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $490 = (~~(($$2$i)));
       $491 = (6987568 + ($490)|0);
       $492 = HEAP8[$491>>0]|0;
       $493 = $492&255;
       $494 = $493 | $402;
       $495 = $494&255;
       $496 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $495;
       $497 = (+($490|0));
       $498 = $$2$i - $497;
       $499 = $498 * 16.0;
       $500 = $496;
       $501 = (($500) - ($0))|0;
       $502 = ($501|0)==(1);
       if ($502) {
        $503 = (($s$0$i) + 2|0);
        HEAP8[$496>>0] = 46;
        $s$1$i = $503;
       } else {
        $s$1$i = $496;
       }
       $504 = $499 != 0.0;
       if ($504) {
        $$2$i = $499;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $505 = ($p$0|0)!=(0);
     $$pre308$i = $s$1$lcssa$i;
     $506 = (($11) + ($$pre308$i))|0;
     $507 = ($506|0)<($p$0|0);
     $or$cond279 = $505 & $507;
     $508 = $457;
     if ($or$cond279) {
      $509 = (($12) + ($p$0))|0;
      $510 = (($509) - ($508))|0;
      $l$0$i = $510;
     } else {
      $511 = (($10) - ($508))|0;
      $512 = (($511) + ($$pre308$i))|0;
      $l$0$i = $512;
     }
     $513 = (($l$0$i) + ($405))|0;
     $514 = $fl$1$ & 73728;
     $515 = ($514|0)==(0);
     $516 = ($w$1|0)>($513|0);
     $or$cond$i60$i = $515 & $516;
     if ($or$cond$i60$i) {
      $517 = (($w$1) - ($513))|0;
      $518 = ($517>>>0)>(256);
      $519 = $518 ? 256 : $517;
      _memset(($pad$i|0),32,($519|0))|0;
      $520 = ($517>>>0)>(255);
      if ($520) {
       $$01$i62$i = $517;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $521 = (($$01$i62$i) + -256)|0;
        $522 = ($521>>>0)>(255);
        if ($522) {
         $$01$i62$i = $521;
        } else {
         break;
        }
       }
       $523 = $517 & 255;
       $$0$lcssa$i64$i = $523;
      } else {
       $$0$lcssa$i64$i = $517;
      }
      (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$405,$f)|0);
     $524 = ($514|0)==(65536);
     $or$cond$i67$i = $524 & $516;
     if ($or$cond$i67$i) {
      $525 = (($w$1) - ($513))|0;
      $526 = ($525>>>0)>(256);
      $527 = $526 ? 256 : $525;
      _memset(($pad$i|0),48,($527|0))|0;
      $528 = ($525>>>0)>(255);
      if ($528) {
       $$01$i69$i = $525;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $529 = (($$01$i69$i) + -256)|0;
        $530 = ($529>>>0)>(255);
        if ($530) {
         $$01$i69$i = $529;
        } else {
         break;
        }
       }
       $531 = $525 & 255;
       $$0$lcssa$i71$i = $531;
      } else {
       $$0$lcssa$i71$i = $525;
      }
      (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
     }
     $532 = (($$pre308$i) - ($0))|0;
     (___fwritex($buf$i,$532,$f)|0);
     $533 = $457;
     $534 = (($9) - ($533))|0;
     $535 = (($l$0$i) - ($534))|0;
     $536 = (($535) - ($532))|0;
     $537 = ($536|0)>(0);
     if ($537) {
      $538 = ($536>>>0)>(256);
      $539 = $538 ? 256 : $536;
      _memset(($pad$i|0),48,($539|0))|0;
      $540 = ($536>>>0)>(255);
      if ($540) {
       $$01$i75$i = $536;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $541 = (($$01$i75$i) + -256)|0;
        $542 = ($541>>>0)>(255);
        if ($542) {
         $$01$i75$i = $541;
        } else {
         break;
        }
       }
       $543 = $536 & 255;
       $$0$lcssa$i77$i = $543;
      } else {
       $$0$lcssa$i77$i = $536;
      }
      (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
     }
     (___fwritex($457,$534,$f)|0);
     $544 = ($514|0)==(8192);
     $or$cond$i80$i = $544 & $516;
     if ($or$cond$i80$i) {
      $545 = (($w$1) - ($513))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i82$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i82$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i82$i = $549;
        } else {
         break;
        }
       }
       $551 = $545 & 255;
       $$0$lcssa$i84$i = $551;
      } else {
       $$0$lcssa$i84$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
     }
     $w$25$i = $516 ? $w$1 : $513;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $w$25$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $552 = ($p$0|0)<(0);
    $$p$i = $552 ? 6 : $p$0;
    if ($397) {
     $553 = $396 * 268435456.0;
     $554 = HEAP32[$e2$i>>2]|0;
     $555 = (($554) + -28)|0;
     HEAP32[$e2$i>>2] = $555;
     $$3$i = $553;$557 = $555;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $396;$557 = $$pre$i;
    }
    $556 = ($557|0)<(0);
    $$39$i = $556 ? $big$i : $13;
    $558 = $$39$i;
    $$4$i = $$3$i;$z$0$i = $$39$i;
    while(1) {
     $559 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $559;
     $560 = (($z$0$i) + 4|0);
     $561 = (+($559>>>0));
     $562 = $$4$i - $561;
     $563 = $562 * 1.0E+9;
     $564 = $563 != 0.0;
     if ($564) {
      $$4$i = $563;$z$0$i = $560;
     } else {
      $$lcssa301 = $560;
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $565 = ($$pr$i|0)>(0);
    if ($565) {
     $567 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa301;
     while(1) {
      $566 = ($567|0)>(29);
      $568 = $566 ? 29 : $567;
      $d$0253$i = (($z$1260$i) + -4|0);
      $569 = ($d$0253$i>>>0)<($a$1261$i>>>0);
      do {
       if ($569) {
        $a$2$ph$i = $a$1261$i;
       } else {
        $579 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
        while(1) {
         $570 = HEAP32[$d$0255$i>>2]|0;
         $571 = (_bitshift64Shl(($570|0),0,($568|0))|0);
         $572 = tempRet0;
         $573 = (_i64Add(($571|0),($572|0),($carry$0254$i|0),0)|0);
         $574 = tempRet0;
         $575 = (___uremdi3(($573|0),($574|0),1000000000,0)|0);
         $576 = tempRet0;
         HEAP32[$d$0255$i>>2] = $575;
         $577 = (___udivdi3(($573|0),($574|0),1000000000,0)|0);
         $578 = tempRet0;
         $d$0$i = (($579) + -8|0);
         $580 = ($d$0$i>>>0)<($a$1261$i>>>0);
         if ($580) {
          $$lcssa302 = $577;
          break;
         } else {
          $579$phi = $d$0255$i;$carry$0254$i = $577;$d$0255$i = $d$0$i;$579 = $579$phi;
         }
        }
        $581 = ($$lcssa302|0)==(0);
        if ($581) {
         $a$2$ph$i = $a$1261$i;
         break;
        }
        $582 = (($a$1261$i) + -4|0);
        HEAP32[$582>>2] = $$lcssa302;
        $a$2$ph$i = $582;
       }
      } while(0);
      $z$2$i = $z$1260$i;
      while(1) {
       $583 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($583)) {
        $z$2$i$lcssa = $z$2$i;
        break;
       }
       $584 = (($z$2$i) + -4|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = ($585|0)==(0);
       if ($586) {
        $z$2$i = $584;
       } else {
        $z$2$i$lcssa = $z$2$i;
        break;
       }
      }
      $587 = HEAP32[$e2$i>>2]|0;
      $588 = (($587) - ($568))|0;
      HEAP32[$e2$i>>2] = $588;
      $589 = ($588|0)>(0);
      if ($589) {
       $567 = $588;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
      } else {
       $$pr154$i = $588;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
       break;
      }
     }
    } else {
     $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa301;
    }
    $590 = ($$pr154$i|0)<(0);
    L246: do {
     if ($590) {
      $591 = (($$p$i) + 25)|0;
      $592 = (($591|0) / 9)&-1;
      $593 = (($592) + 1)|0;
      $594 = ($400|0)==(102);
      if ($594) {
       $595 = (($$39$i) + ($593<<2)|0);
       $597 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
       while(1) {
        $596 = ($597|0)<(-9);
        $598 = (0 - ($597))|0;
        $$26$us$i = $596 ? 9 : $598;
        $599 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
        do {
         if ($599) {
          $624 = 1 << $$26$us$i;
          $617 = (($624) + -1)|0;
          $621 = 1000000000 >>> $$26$us$i;
          $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
          while(1) {
           $615 = HEAP32[$d$1241$us$i>>2]|0;
           $616 = $615 & $617;
           $618 = $615 >>> $$26$us$i;
           $619 = (($618) + ($carry3$0242$us$i))|0;
           HEAP32[$d$1241$us$i>>2] = $619;
           $620 = Math_imul($616, $621)|0;
           $622 = (($d$1241$us$i) + 4|0);
           $623 = ($622>>>0)<($z$3247$us$i>>>0);
           if ($623) {
            $carry3$0242$us$i = $620;$d$1241$us$i = $622;
           } else {
            $$lcssa305 = $620;
            break;
           }
          }
          $603 = HEAP32[$a$3248$us$i>>2]|0;
          $604 = ($603|0)==(0);
          $605 = (($a$3248$us$i) + 4|0);
          $$a$3$us$i = $604 ? $605 : $a$3248$us$i;
          $606 = ($$lcssa305|0)==(0);
          if ($606) {
           $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
           break;
          }
          $607 = (($z$3247$us$i) + 4|0);
          HEAP32[$z$3247$us$i>>2] = $$lcssa305;
          $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $607;
         } else {
          $600 = HEAP32[$a$3248$us$i>>2]|0;
          $601 = ($600|0)==(0);
          $602 = (($a$3248$us$i) + 4|0);
          $$a$3$us309$i = $601 ? $602 : $a$3248$us$i;
          $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
         }
        } while(0);
        $608 = $z$4$us$i;
        $609 = (($608) - ($558))|0;
        $610 = $609 >> 2;
        $611 = ($610|0)>($593|0);
        $$z$4$us$i = $611 ? $595 : $z$4$us$i;
        $612 = HEAP32[$e2$i>>2]|0;
        $613 = (($612) + ($$26$us$i))|0;
        HEAP32[$e2$i>>2] = $613;
        $614 = ($613|0)<(0);
        if ($614) {
         $597 = $613;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us310$i;$z$3$lcssa$i = $$z$4$us$i;
         break L246;
        }
       }
      } else {
       $626 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
      }
      while(1) {
       $625 = ($626|0)<(-9);
       $627 = (0 - ($626))|0;
       $$26$i = $625 ? 9 : $627;
       $628 = ($a$3248$i>>>0)<($z$3247$i>>>0);
       do {
        if ($628) {
         $632 = 1 << $$26$i;
         $633 = (($632) + -1)|0;
         $634 = 1000000000 >>> $$26$i;
         $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
         while(1) {
          $635 = HEAP32[$d$1241$i>>2]|0;
          $636 = $635 & $633;
          $637 = $635 >>> $$26$i;
          $638 = (($637) + ($carry3$0242$i))|0;
          HEAP32[$d$1241$i>>2] = $638;
          $639 = Math_imul($636, $634)|0;
          $640 = (($d$1241$i) + 4|0);
          $641 = ($640>>>0)<($z$3247$i>>>0);
          if ($641) {
           $carry3$0242$i = $639;$d$1241$i = $640;
          } else {
           $$lcssa304 = $639;
           break;
          }
         }
         $642 = HEAP32[$a$3248$i>>2]|0;
         $643 = ($642|0)==(0);
         $644 = (($a$3248$i) + 4|0);
         $$a$3$i = $643 ? $644 : $a$3248$i;
         $645 = ($$lcssa304|0)==(0);
         if ($645) {
          $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
          break;
         }
         $646 = (($z$3247$i) + 4|0);
         HEAP32[$z$3247$i>>2] = $$lcssa304;
         $$a$3312$i = $$a$3$i;$z$4$i = $646;
        } else {
         $629 = HEAP32[$a$3248$i>>2]|0;
         $630 = ($629|0)==(0);
         $631 = (($a$3248$i) + 4|0);
         $$a$3311$i = $630 ? $631 : $a$3248$i;
         $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
        }
       } while(0);
       $647 = $z$4$i;
       $648 = $$a$3312$i;
       $649 = (($647) - ($648))|0;
       $650 = $649 >> 2;
       $651 = ($650|0)>($593|0);
       if ($651) {
        $652 = (($$a$3312$i) + ($593<<2)|0);
        $z$5$i = $652;
       } else {
        $z$5$i = $z$4$i;
       }
       $653 = HEAP32[$e2$i>>2]|0;
       $654 = (($653) + ($$26$i))|0;
       HEAP32[$e2$i>>2] = $654;
       $655 = ($654|0)<(0);
       if ($655) {
        $626 = $654;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3312$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $656 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($656) {
      $657 = $a$3$lcssa$i;
      $658 = (($558) - ($657))|0;
      $659 = $658 >> 2;
      $660 = ($659*9)|0;
      $661 = HEAP32[$a$3$lcssa$i>>2]|0;
      $662 = ($661>>>0)<(10);
      if ($662) {
       $e$1$i = $660;
       break;
      } else {
       $e$0237$i = $660;$i$0236$i = 10;
      }
      while(1) {
       $663 = ($i$0236$i*10)|0;
       $664 = (($e$0237$i) + 1)|0;
       $665 = ($661>>>0)<($663>>>0);
       if ($665) {
        $e$1$i = $664;
        break;
       } else {
        $e$0237$i = $664;$i$0236$i = $663;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $666 = ($400|0)!=(102);
    $667 = $666 ? $e$1$i : 0;
    $668 = (($$p$i) - ($667))|0;
    $669 = ($400|0)==(103);
    $670 = ($$p$i|0)!=(0);
    $$27$i = $669 & $670;
    $$neg159$i = $$27$i << 31 >> 31;
    $671 = (($668) + ($$neg159$i))|0;
    $672 = $z$3$lcssa$i;
    $673 = (($672) - ($558))|0;
    $674 = $673 >> 2;
    $675 = ($674*9)|0;
    $676 = (($675) + -9)|0;
    $677 = ($671|0)<($676|0);
    if ($677) {
     $678 = (($671) + 9216)|0;
     $679 = (($678|0) / 9)&-1;
     $$sum$i = (($679) + -1023)|0;
     $680 = (($$39$i) + ($$sum$i<<2)|0);
     $681 = (($678|0) % 9)&-1;
     $j$0229$i = (($681) + 1)|0;
     $682 = ($j$0229$i|0)<(9);
     if ($682) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $683 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $683;
        break;
       } else {
        $i$1230$i = $683;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $684 = HEAP32[$680>>2]|0;
     $685 = (($684>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $686 = ($685|0)==(0);
     if ($686) {
      $$sum21$i = (($679) + -1022)|0;
      $687 = (($$39$i) + ($$sum21$i<<2)|0);
      $688 = ($687|0)==($z$3$lcssa$i|0);
      if ($688) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $680;$e$3$i = $e$1$i;
      } else {
       label = 231;
      }
     } else {
      label = 231;
     }
     do {
      if ((label|0) == 231) {
       label = 0;
       $689 = (($684>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $690 = $689 & 1;
       $691 = ($690|0)==(0);
       $$28$i = $691 ? 9007199254740992.0 : 9007199254740994.0;
       $692 = (($i$1$lcssa$i|0) / 2)&-1;
       $693 = ($685>>>0)<($692>>>0);
       do {
        if ($693) {
         $small$0$i = 0.5;
        } else {
         $694 = ($685|0)==($692|0);
         if ($694) {
          $$sum22$i = (($679) + -1022)|0;
          $695 = (($$39$i) + ($$sum22$i<<2)|0);
          $696 = ($695|0)==($z$3$lcssa$i|0);
          if ($696) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $697 = ($pl$0$i|0)==(0);
       do {
        if ($697) {
         $round6$1$i = $$28$i;$small$1$i = $small$0$i;
        } else {
         $698 = HEAP8[$prefix$0$i>>0]|0;
         $699 = ($698<<24>>24)==(45);
         if (!($699)) {
          $round6$1$i = $$28$i;$small$1$i = $small$0$i;
          break;
         }
         $700 = -$$28$i;
         $701 = -$small$0$i;
         $round6$1$i = $700;$small$1$i = $701;
        }
       } while(0);
       $702 = (($684) - ($685))|0;
       HEAP32[$680>>2] = $702;
       $703 = $round6$1$i + $small$1$i;
       $704 = $703 != $round6$1$i;
       if (!($704)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $680;$e$3$i = $e$1$i;
        break;
       }
       $705 = (($702) + ($i$1$lcssa$i))|0;
       HEAP32[$680>>2] = $705;
       $706 = ($705>>>0)>(999999999);
       if ($706) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $680;
        while(1) {
         $707 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $708 = ($707>>>0)<($a$5223$i>>>0);
         if ($708) {
          $709 = (($a$5223$i) + -4|0);
          HEAP32[$709>>2] = 0;
          $a$6$i = $709;
         } else {
          $a$6$i = $a$5223$i;
         }
         $710 = HEAP32[$707>>2]|0;
         $711 = (($710) + 1)|0;
         HEAP32[$707>>2] = $711;
         $712 = ($711>>>0)>(999999999);
         if ($712) {
          $a$5223$i = $a$6$i;$d$2222$i = $707;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $707;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $680;
       }
       $713 = $a$5$lcssa$i;
       $714 = (($558) - ($713))|0;
       $715 = $714 >> 2;
       $716 = ($715*9)|0;
       $717 = HEAP32[$a$5$lcssa$i>>2]|0;
       $718 = ($717>>>0)<(10);
       if ($718) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $716;
        break;
       } else {
        $e$2218$i = $716;$i$2217$i = 10;
       }
       while(1) {
        $719 = ($i$2217$i*10)|0;
        $720 = (($e$2218$i) + 1)|0;
        $721 = ($717>>>0)<($719>>>0);
        if ($721) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $720;
         break;
        } else {
         $e$2218$i = $720;$i$2217$i = $719;
        }
       }
      }
     } while(0);
     $722 = (($d$3$i) + 4|0);
     $723 = ($z$3$lcssa$i>>>0)>($722>>>0);
     $$z$3$i = $723 ? $722 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $a$8$ph294$i = $a$8$ph$i;
    $724 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $725 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($725)) {
      $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
      break;
     }
     $726 = (($z$6$i) + -4|0);
     $727 = HEAP32[$726>>2]|0;
     $728 = ($727|0)==(0);
     if ($728) {
      $z$6$i = $726;
     } else {
      $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
      break;
     }
    }
    do {
     if ($669) {
      $729 = ($$p$i|0)==(0);
      $730 = $729&1;
      $$$p$i = (($730) + ($$p$i))|0;
      $731 = ($$$p$i|0)>($e$4$ph$i|0);
      $732 = ($e$4$ph$i|0)>(-5);
      $or$cond6$i = $731 & $732;
      if ($or$cond6$i) {
       $733 = (($t$0) + -1)|0;
       $$neg160$i = (($$$p$i) + -1)|0;
       $734 = (($$neg160$i) - ($e$4$ph$i))|0;
       $$019$i = $733;$$216$i = $734;
      } else {
       $735 = (($t$0) + -2)|0;
       $736 = (($$$p$i) + -1)|0;
       $$019$i = $735;$$216$i = $736;
      }
      $737 = $fl$1$ & 8;
      $738 = ($737|0)==(0);
      if (!($738)) {
       $$120$i = $$019$i;$$317$i = $$216$i;
       break;
      }
      do {
       if ($$lcssa283$i) {
        $739 = (($z$6$i$lcssa) + -4|0);
        $740 = HEAP32[$739>>2]|0;
        $741 = ($740|0)==(0);
        if ($741) {
         $j$2$i = 9;
         break;
        }
        $742 = (($740>>>0) % 10)&-1;
        $743 = ($742|0)==(0);
        if ($743) {
         $i$3213$i = 10;$j$1214$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $744 = ($i$3213$i*10)|0;
         $745 = (($j$1214$i) + 1)|0;
         $746 = (($740>>>0) % ($744>>>0))&-1;
         $747 = ($746|0)==(0);
         if ($747) {
          $i$3213$i = $744;$j$1214$i = $745;
         } else {
          $j$2$i = $745;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $748 = $$019$i | 32;
      $749 = ($748|0)==(102);
      $750 = $z$6$i$lcssa;
      $751 = (($750) - ($558))|0;
      $752 = $751 >> 2;
      $753 = ($752*9)|0;
      $754 = (($753) + -9)|0;
      if ($749) {
       $755 = (($754) - ($j$2$i))|0;
       $756 = ($755|0)<(0);
       $$29$i = $756 ? 0 : $755;
       $757 = ($$216$i|0)<($$29$i|0);
       $$216$$29$i = $757 ? $$216$i : $$29$i;
       $$120$i = $$019$i;$$317$i = $$216$$29$i;
       break;
      } else {
       $758 = (($754) + ($e$4$ph$i))|0;
       $759 = (($758) - ($j$2$i))|0;
       $760 = ($759|0)<(0);
       $$31$i = $760 ? 0 : $759;
       $761 = ($$216$i|0)<($$31$i|0);
       $$216$$31$i = $761 ? $$216$i : $$31$i;
       $$120$i = $$019$i;$$317$i = $$216$$31$i;
       break;
      }
     } else {
      $$120$i = $t$0;$$317$i = $$p$i;
     }
    } while(0);
    $762 = ($$317$i|0)!=(0);
    if ($762) {
     $766 = 1;
    } else {
     $763 = $fl$1$ & 8;
     $764 = ($763|0)!=(0);
     $766 = $764;
    }
    $765 = $766&1;
    $767 = $$120$i | 32;
    $768 = ($767|0)==(102);
    if ($768) {
     $769 = ($e$4$ph$i|0)>(0);
     $770 = $769 ? $e$4$ph$i : 0;
     $$pn$i = $770;$estr$2$i = 0;
    } else {
     $771 = ($e$4$ph$i|0)<(0);
     $772 = $771 ? $724 : $e$4$ph$i;
     $773 = ($772|0)<(0);
     if ($773) {
      $774 = ($772|0)<(0);
      $775 = $774 << 31 >> 31;
      $$05$i87$i = $7;$776 = $772;$777 = $775;
      while(1) {
       $778 = (___uremdi3(($776|0),($777|0),10,0)|0);
       $779 = tempRet0;
       $780 = $778 | 48;
       $781 = $780&255;
       $782 = (($$05$i87$i) + -1|0);
       HEAP8[$782>>0] = $781;
       $783 = (___udivdi3(($776|0),($777|0),10,0)|0);
       $784 = tempRet0;
       $785 = ($777>>>0)>(9);
       $786 = ($776>>>0)>(4294967295);
       $787 = ($777|0)==(9);
       $788 = $787 & $786;
       $789 = $785 | $788;
       if ($789) {
        $$05$i87$i = $782;$776 = $783;$777 = $784;
       } else {
        $$lcssa311 = $782;$1057 = $783;$1058 = $784;
        break;
       }
      }
      $$0$lcssa$i92$i = $$lcssa311;$$01$lcssa$off0$i93$i = $1057;
     } else {
      $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $772;
     }
     $790 = ($$01$lcssa$off0$i93$i|0)==(0);
     if ($790) {
      $estr$1$ph$i = $$0$lcssa$i92$i;
     } else {
      $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
      while(1) {
       $791 = (($y$03$i94$i>>>0) % 10)&-1;
       $792 = $791 | 48;
       $793 = $792&255;
       $794 = (($$12$i95$i) + -1|0);
       HEAP8[$794>>0] = $793;
       $795 = (($y$03$i94$i>>>0) / 10)&-1;
       $796 = ($y$03$i94$i>>>0)<(10);
       if ($796) {
        $estr$1$ph$i = $794;
        break;
       } else {
        $$12$i95$i = $794;$y$03$i94$i = $795;
       }
      }
     }
     $797 = $estr$1$ph$i;
     $798 = (($9) - ($797))|0;
     $799 = ($798|0)<(2);
     if ($799) {
      $estr$1209$i = $estr$1$ph$i;
      while(1) {
       $800 = (($estr$1209$i) + -1|0);
       HEAP8[$800>>0] = 48;
       $801 = $800;
       $802 = (($9) - ($801))|0;
       $803 = ($802|0)<(2);
       if ($803) {
        $estr$1209$i = $800;
       } else {
        $estr$1$lcssa$i = $800;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $804 = $e$4$ph$i >> 31;
     $805 = $804 & 2;
     $806 = (($805) + 43)|0;
     $807 = $806&255;
     $808 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$808>>0] = $807;
     $809 = $$120$i&255;
     $810 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$810>>0] = $809;
     $811 = $810;
     $812 = (($9) - ($811))|0;
     $$pn$i = $812;$estr$2$i = $810;
    }
    $813 = (($pl$0$i) + 1)|0;
    $814 = (($813) + ($$317$i))|0;
    $l$1$i = (($814) + ($765))|0;
    $815 = (($l$1$i) + ($$pn$i))|0;
    $816 = $fl$1$ & 73728;
    $817 = ($816|0)==(0);
    $818 = ($w$1|0)>($815|0);
    $or$cond$i101$i = $817 & $818;
    if ($or$cond$i101$i) {
     $819 = (($w$1) - ($815))|0;
     $820 = ($819>>>0)>(256);
     $821 = $820 ? 256 : $819;
     _memset(($pad$i|0),32,($821|0))|0;
     $822 = ($819>>>0)>(255);
     if ($822) {
      $$01$i103$i = $819;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $823 = (($$01$i103$i) + -256)|0;
       $824 = ($823>>>0)>(255);
       if ($824) {
        $$01$i103$i = $823;
       } else {
        break;
       }
      }
      $825 = $819 & 255;
      $$0$lcssa$i105$i = $825;
     } else {
      $$0$lcssa$i105$i = $819;
     }
     (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $826 = ($816|0)==(65536);
    $or$cond$i108$i = $826 & $818;
    if ($or$cond$i108$i) {
     $827 = (($w$1) - ($815))|0;
     $828 = ($827>>>0)>(256);
     $829 = $828 ? 256 : $827;
     _memset(($pad$i|0),48,($829|0))|0;
     $830 = ($827>>>0)>(255);
     if ($830) {
      $$01$i110$i = $827;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $831 = (($$01$i110$i) + -256)|0;
       $832 = ($831>>>0)>(255);
       if ($832) {
        $$01$i110$i = $831;
       } else {
        break;
       }
      }
      $833 = $827 & 255;
      $$0$lcssa$i112$i = $833;
     } else {
      $$0$lcssa$i112$i = $827;
     }
     (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
    }
    do {
     if ($768) {
      $834 = ($a$8$ph$i>>>0)>($$39$i>>>0);
      $r$0$a$8$i = $834 ? $$39$i : $a$8$ph$i;
      $835 = $558 ^ -1;
      $836 = $a$8$ph294$i ^ -1;
      $837 = ($835>>>0)>($836>>>0);
      $umax$i = $837 ? $835 : $836;
      $838 = (3 - ($umax$i))|0;
      $uglygep$i = (($$39$i) + 1|0);
      $uglygep296$i = $uglygep$i;
      $839 = ($838>>>0)>($uglygep296$i>>>0);
      $umax297$i = $839 ? $838 : $uglygep296$i;
      $umax297298299$i = $umax297$i;
      $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
      $uglygep300301$i = $uglygep300$i;
      $840 = $umax$i ^ -1;
      $d$4199$i = $r$0$a$8$i;
      while(1) {
       $841 = HEAP32[$d$4199$i>>2]|0;
       $842 = ($841|0)==(0);
       if ($842) {
        $$1$lcssa$i120$i = $14;
       } else {
        $$12$i118$i = $14;$y$03$i117$i = $841;
        while(1) {
         $843 = (($y$03$i117$i>>>0) % 10)&-1;
         $844 = $843 | 48;
         $845 = $844&255;
         $846 = (($$12$i118$i) + -1|0);
         HEAP8[$846>>0] = $845;
         $847 = (($y$03$i117$i>>>0) / 10)&-1;
         $848 = ($y$03$i117$i>>>0)<(10);
         if ($848) {
          $$1$lcssa$i120$i = $846;
          break;
         } else {
          $$12$i118$i = $846;$y$03$i117$i = $847;
         }
        }
       }
       $849 = ($d$4199$i|0)==($r$0$a$8$i|0);
       do {
        if ($849) {
         $853 = ($$1$lcssa$i120$i|0)==($14|0);
         if (!($853)) {
          $s7$1$i = $$1$lcssa$i120$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $850 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
         if ($850) {
          $s7$0196$i = $$1$lcssa$i120$i;
         } else {
          $s7$1$i = $$1$lcssa$i120$i;
          break;
         }
         while(1) {
          $851 = (($s7$0196$i) + -1|0);
          HEAP8[$851>>0] = 48;
          $852 = ($851>>>0)>($buf$i>>>0);
          if ($852) {
           $s7$0196$i = $851;
          } else {
           $s7$1$i = $851;
           break;
          }
         }
        }
       } while(0);
       $854 = $s7$1$i;
       $855 = (($15) - ($854))|0;
       (___fwritex($s7$1$i,$855,$f)|0);
       $856 = (($d$4199$i) + 4|0);
       $857 = ($856>>>0)>($$39$i>>>0);
       if ($857) {
        $$lcssa320 = $856;
        break;
       } else {
        $d$4199$i = $856;
       }
      }
      $858 = $uglygep300301$i & -4;
      $859 = (($858) + ($840))|0;
      $860 = $859;
      $$not$i = $762 ^ 1;
      $861 = $fl$1$ & 8;
      $862 = ($861|0)==(0);
      $or$cond35$i = $862 & $$not$i;
      if (!($or$cond35$i)) {
       (___fwritex(6987584,1,$f)|0);
      }
      $863 = ($$lcssa320>>>0)<($z$6$i$lcssa>>>0);
      $864 = ($$317$i|0)>(0);
      $or$cond10191$i = $863 & $864;
      if ($or$cond10191$i) {
       $$418193$i = $$317$i;$879 = $860;$d$5192$i = $$lcssa320;
       while(1) {
        $865 = HEAP32[$d$5192$i>>2]|0;
        $866 = ($865|0)==(0);
        if ($866) {
         $s8$0188$i = $14;
         label = 300;
        } else {
         $$12$i127$i = $14;$y$03$i126$i = $865;
         while(1) {
          $867 = (($y$03$i126$i>>>0) % 10)&-1;
          $868 = $867 | 48;
          $869 = $868&255;
          $870 = (($$12$i127$i) + -1|0);
          HEAP8[$870>>0] = $869;
          $871 = (($y$03$i126$i>>>0) / 10)&-1;
          $872 = ($y$03$i126$i>>>0)<(10);
          if ($872) {
           $$lcssa321 = $870;
           break;
          } else {
           $$12$i127$i = $870;$y$03$i126$i = $871;
          }
         }
         $873 = ($$lcssa321>>>0)>($buf$i>>>0);
         if ($873) {
          $s8$0188$i = $$lcssa321;
          label = 300;
         } else {
          $s8$0$lcssa$i = $$lcssa321;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $874 = (($s8$0188$i) + -1|0);
          HEAP8[$874>>0] = 48;
          $875 = ($874>>>0)>($buf$i>>>0);
          if ($875) {
           $s8$0188$i = $874;
           label = 300;
          } else {
           $s8$0$lcssa$i = $874;
           break;
          }
         }
        }
        $876 = ($$418193$i|0)>(9);
        $877 = $876 ? 9 : $$418193$i;
        (___fwritex($s8$0$lcssa$i,$877,$f)|0);
        $878 = (($879) + 8|0);
        $880 = (($$418193$i) + -9)|0;
        $881 = ($878>>>0)<($z$6$i$lcssa>>>0);
        $882 = ($880|0)>(0);
        $or$cond10$i = $881 & $882;
        if ($or$cond10$i) {
         $879$phi = $d$5192$i;$$418193$i = $880;$d$5192$i = $878;$879 = $879$phi;
        } else {
         $$418$lcssa$i = $880;
         break;
        }
       }
      } else {
       $$418$lcssa$i = $$317$i;
      }
      $883 = ($$418$lcssa$i|0)>(0);
      if (!($883)) {
       break;
      }
      $884 = ($$418$lcssa$i>>>0)>(256);
      $885 = $884 ? 256 : $$418$lcssa$i;
      _memset(($pad$i|0),48,($885|0))|0;
      $886 = ($$418$lcssa$i>>>0)>(255);
      if ($886) {
       $$01$i134$i = $$418$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $887 = (($$01$i134$i) + -256)|0;
        $888 = ($887>>>0)>(255);
        if ($888) {
         $$01$i134$i = $887;
        } else {
         break;
        }
       }
       $889 = $$418$lcssa$i & 255;
       $$0$lcssa$i136$i = $889;
      } else {
       $$0$lcssa$i136$i = $$418$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
     } else {
      $890 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $890;
      $891 = ($$317$i|0)>(-1);
      do {
       if ($891) {
        $892 = $fl$1$ & 8;
        $893 = ($892|0)==(0);
        $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
        while(1) {
         $894 = HEAP32[$d$6204$i>>2]|0;
         $895 = ($894|0)==(0);
         if ($895) {
          label = 312;
         } else {
          $$12$i142$i = $14;$y$03$i141$i = $894;
          while(1) {
           $896 = (($y$03$i141$i>>>0) % 10)&-1;
           $897 = $896 | 48;
           $898 = $897&255;
           $899 = (($$12$i142$i) + -1|0);
           HEAP8[$899>>0] = $898;
           $900 = (($y$03$i141$i>>>0) / 10)&-1;
           $901 = ($y$03$i141$i>>>0)<(10);
           if ($901) {
            $$12$i142$i$lcssa = $$12$i142$i;$$lcssa315 = $899;
            break;
           } else {
            $$12$i142$i = $899;$y$03$i141$i = $900;
           }
          }
          $902 = ($$lcssa315|0)==($14|0);
          if ($902) {
           label = 312;
          } else {
           $1059 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa315;
          }
         }
         if ((label|0) == 312) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $1059 = $14;$s9$0$i = $16;
         }
         $903 = ($d$6204$i|0)==($a$8$ph$i|0);
         do {
          if ($903) {
           (___fwritex($s9$0$i,1,$f)|0);
           $907 = ($$5205$i|0)<(1);
           $or$cond37$i = $907 & $893;
           if ($or$cond37$i) {
            $s9$2$i = $1059;
            break;
           }
           (___fwritex(6987584,1,$f)|0);
           $s9$2$i = $1059;
          } else {
           $904 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($904) {
            $s9$1200$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $905 = (($s9$1200$i) + -1|0);
            HEAP8[$905>>0] = 48;
            $906 = ($905>>>0)>($buf$i>>>0);
            if ($906) {
             $s9$1200$i = $905;
            } else {
             $s9$2$i = $905;
             break;
            }
           }
          }
         } while(0);
         $908 = $s9$2$i;
         $909 = (($15) - ($908))|0;
         $910 = ($$5205$i|0)>($909|0);
         $$$5$i = $910 ? $909 : $$5205$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $911 = (($$5205$i) - ($909))|0;
         $912 = (($d$6204$i) + 4|0);
         $913 = ($912>>>0)<($z$6$$i>>>0);
         $914 = ($911|0)>(-1);
         $or$cond12$i = $913 & $914;
         if ($or$cond12$i) {
          $$5205$i = $911;$d$6204$i = $912;
         } else {
          $$lcssa317 = $911;
          break;
         }
        }
        $915 = ($$lcssa317|0)>(0);
        if (!($915)) {
         break;
        }
        $916 = ($$lcssa317>>>0)>(256);
        $917 = $916 ? 256 : $$lcssa317;
        _memset(($pad$i|0),48,($917|0))|0;
        $918 = ($$lcssa317>>>0)>(255);
        if ($918) {
         $$01$i149$i = $$lcssa317;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $919 = (($$01$i149$i) + -256)|0;
          $920 = ($919>>>0)>(255);
          if ($920) {
           $$01$i149$i = $919;
          } else {
           break;
          }
         }
         $921 = $$lcssa317 & 255;
         $$0$lcssa$i151$i = $921;
        } else {
         $$0$lcssa$i151$i = $$lcssa317;
        }
        (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
       }
      } while(0);
      $922 = $estr$2$i;
      $923 = (($9) - ($922))|0;
      (___fwritex($estr$2$i,$923,$f)|0);
     }
    } while(0);
    $924 = ($816|0)==(8192);
    $or$cond$i$i = $924 & $818;
    if ($or$cond$i$i) {
     $925 = (($w$1) - ($815))|0;
     $926 = ($925>>>0)>(256);
     $927 = $926 ? 256 : $925;
     _memset(($pad$i|0),32,($927|0))|0;
     $928 = ($925>>>0)>(255);
     if ($928) {
      $$01$i$i = $925;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $929 = (($$01$i$i) + -256)|0;
       $930 = ($929>>>0)>(255);
       if ($930) {
        $$01$i$i = $929;
       } else {
        break;
       }
      }
      $931 = $925 & 255;
      $$0$lcssa$i$i = $931;
     } else {
      $$0$lcssa$i$i = $925;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$38$i = $818 ? $w$1 : $815;
    $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $w$38$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $1047 = $191;$1048 = $218;$a$2 = $fmt90;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 6987488;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 74) {
    label = 0;
    $215 = $t$1 & 32;
    $216 = ($191|0)==(0);
    $217 = ($218|0)==(0);
    $219 = $216 & $217;
    if ($219) {
     $293 = $191;$295 = $218;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 6987488;
     label = 90;
    } else {
     $$012$i = $2;$221 = $191;$228 = $218;
     while(1) {
      $220 = $221 & 15;
      $222 = (6987568 + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      $225 = $224 | $215;
      $226 = $225&255;
      $227 = (($$012$i) + -1|0);
      HEAP8[$227>>0] = $226;
      $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
      $230 = tempRet0;
      $231 = ($229|0)==(0);
      $232 = ($230|0)==(0);
      $233 = $231 & $232;
      if ($233) {
       $$lcssa332 = $227;
       break;
      } else {
       $$012$i = $227;$221 = $229;$228 = $230;
      }
     }
     $234 = $fl$3 & 8;
     $235 = ($234|0)==(0);
     if ($235) {
      $293 = $191;$295 = $218;$a$0 = $$lcssa332;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 6987488;
      label = 90;
     } else {
      $236 = $t$1 >> 4;
      $237 = (6987488 + ($236)|0);
      $293 = $191;$295 = $218;$a$0 = $$lcssa332;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
      label = 90;
     }
    }
   }
   else if ((label|0) == 85) {
    label = 0;
    $262 = ($263>>>0)>(0);
    $264 = ($265>>>0)>(4294967295);
    $266 = ($263|0)==(0);
    $267 = $266 & $264;
    $268 = $262 | $267;
    if ($268) {
     $$05$i = $2;$269 = $265;$270 = $263;
     while(1) {
      $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
      $272 = tempRet0;
      $273 = $271 | 48;
      $274 = $273&255;
      $275 = (($$05$i) + -1|0);
      HEAP8[$275>>0] = $274;
      $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
      $277 = tempRet0;
      $278 = ($270>>>0)>(9);
      $279 = ($269>>>0)>(4294967295);
      $280 = ($270|0)==(9);
      $281 = $280 & $279;
      $282 = $278 | $281;
      if ($282) {
       $$05$i = $275;$269 = $276;$270 = $277;
      } else {
       $$lcssa328 = $275;$1049 = $276;$1050 = $277;
       break;
      }
     }
     $$0$lcssa$i54 = $$lcssa328;$$01$lcssa$off0$i = $1049;
    } else {
     $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $265;
    }
    $283 = ($$01$lcssa$off0$i|0)==(0);
    if ($283) {
     $293 = $265;$295 = $263;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 90;
    } else {
     $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $284 = (($y$03$i>>>0) % 10)&-1;
      $285 = $284 | 48;
      $286 = $285&255;
      $287 = (($$12$i) + -1|0);
      HEAP8[$287>>0] = $286;
      $288 = (($y$03$i>>>0) / 10)&-1;
      $289 = ($y$03$i>>>0)<(10);
      if ($289) {
       $293 = $265;$295 = $263;$a$0 = $287;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 90;
       break;
      } else {
       $$12$i = $287;$y$03$i = $288;
      }
     }
    }
   }
   else if ((label|0) == 95) {
    label = 0;
    $310 = (_memchr($a$1,0,$p$0)|0);
    $311 = ($310|0)==(0|0);
    if ($311) {
     $312 = (($a$1) + ($p$0)|0);
     $1047 = $191;$1048 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 6987488;$z$2 = $312;
     break;
    } else {
     $313 = $310;
     $314 = $a$1;
     $315 = (($313) - ($314))|0;
     $1047 = $191;$1048 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $315;$pl$2 = 0;$prefix$2 = 6987488;$z$2 = $310;
     break;
    }
   }
   else if ((label|0) == 100) {
    label = 0;
    $i$0180 = 0;$l$1179 = 0;$ws$0181 = $1051;
    while(1) {
     $318 = HEAP32[$ws$0181>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $i$0$lcssa = $i$0180;$l$2 = $l$1179;
      break;
     }
     $320 = (_wctomb($mb,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($p$4274) - ($i$0180))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond23 = $321 | $323;
     if ($or$cond23) {
      $i$0$lcssa = $i$0180;$l$2 = $320;
      break;
     }
     $324 = (($ws$0181) + 4|0);
     $325 = (($320) + ($i$0180))|0;
     $326 = ($p$4274>>>0)>($325>>>0);
     if ($326) {
      $i$0180 = $325;$l$1179 = $320;$ws$0181 = $324;
     } else {
      $i$0$lcssa = $325;$l$2 = $320;
      break;
     }
    }
    $327 = ($l$2|0)<(0);
    if ($327) {
     $$0 = -1;
     label = 369;
     break L1;
    } else {
     $1053 = $1052;$1054 = $1051;$i$0$lcssa275 = $i$0$lcssa;
     label = 105;
    }
   }
  } while(0);
  if ((label|0) == 90) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = ($293|0)!=(0);
   $294 = ($295|0)!=(0);
   $296 = $292 | $294;
   $297 = ($p$2|0)!=(0);
   $or$cond = $296 | $297;
   if ($or$cond) {
    $298 = $a$0;
    $299 = (($3) - ($298))|0;
    $300 = $296&1;
    $301 = $300 ^ 1;
    $302 = (($301) + ($299))|0;
    $303 = ($p$2|0)>($302|0);
    $p$2$ = $303 ? $p$2 : $302;
    $1047 = $293;$1048 = $295;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1047 = $293;$1048 = $295;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 105) {
   label = 0;
   $328 = $fl$1$ & 73728;
   $329 = ($328|0)==(0);
   $330 = ($w$1|0)>($i$0$lcssa275|0);
   $or$cond$i65 = $329 & $330;
   if ($or$cond$i65) {
    $331 = (($w$1) - ($i$0$lcssa275))|0;
    $332 = ($331>>>0)>(256);
    $333 = $332 ? 256 : $331;
    _memset(($pad$i|0),32,($333|0))|0;
    $334 = ($331>>>0)>(255);
    if ($334) {
     $$01$i67 = $331;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $335 = (($$01$i67) + -256)|0;
      $336 = ($335>>>0)>(255);
      if ($336) {
       $$01$i67 = $335;
      } else {
       break;
      }
     }
     $337 = $331 & 255;
     $$0$lcssa$i69 = $337;
    } else {
     $$0$lcssa$i69 = $331;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $338 = ($i$0$lcssa275|0)==(0);
   L478: do {
    if (!($338)) {
     $i$1191 = 0;$ws$1192 = $1054;
     while(1) {
      $339 = HEAP32[$ws$1192>>2]|0;
      $340 = ($339|0)==(0);
      if ($340) {
       break L478;
      }
      $341 = (_wctomb($mb,$339)|0);
      $342 = (($341) + ($i$1191))|0;
      $343 = ($342|0)>($i$0$lcssa275|0);
      if ($343) {
       break L478;
      }
      $344 = (($ws$1192) + 4|0);
      (___fwritex($mb,$341,$f)|0);
      $345 = ($342>>>0)<($i$0$lcssa275>>>0);
      if ($345) {
       $i$1191 = $342;$ws$1192 = $344;
      } else {
       break;
      }
     }
    }
   } while(0);
   $346 = ($328|0)==(8192);
   $or$cond$i72 = $346 & $330;
   if ($or$cond$i72) {
    $347 = (($w$1) - ($i$0$lcssa275))|0;
    $348 = ($347>>>0)>(256);
    $349 = $348 ? 256 : $347;
    _memset(($pad$i|0),32,($349|0))|0;
    $350 = ($347>>>0)>(255);
    if ($350) {
     $$01$i74 = $347;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $351 = (($$01$i74) + -256)|0;
      $352 = ($351>>>0)>(255);
      if ($352) {
       $$01$i74 = $351;
      } else {
       break;
      }
     }
     $353 = $347 & 255;
     $$0$lcssa$i76 = $353;
    } else {
     $$0$lcssa$i76 = $347;
    }
    (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
   }
   $354 = $330 ? $w$1 : $i$0$lcssa275;
   $1039 = $1053;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $354;$l10n$0 = $l10n$3;
   continue;
  }
  $932 = $z$2;
  $933 = $a$2;
  $934 = (($932) - ($933))|0;
  $935 = ($p$5|0)<($934|0);
  $$p$5 = $935 ? $934 : $p$5;
  $936 = (($pl$2) + ($$p$5))|0;
  $937 = ($w$1|0)<($936|0);
  $w$2 = $937 ? $936 : $w$1;
  $938 = $fl$6 & 73728;
  $939 = ($938|0)==(0);
  $940 = ($w$2|0)>($936|0);
  $or$cond$i82 = $939 & $940;
  if ($or$cond$i82) {
   $941 = (($w$2) - ($936))|0;
   $942 = ($941>>>0)>(256);
   $943 = $942 ? 256 : $941;
   _memset(($pad$i|0),32,($943|0))|0;
   $944 = ($941>>>0)>(255);
   if ($944) {
    $$01$i84 = $941;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $945 = (($$01$i84) + -256)|0;
     $946 = ($945>>>0)>(255);
     if ($946) {
      $$01$i84 = $945;
     } else {
      break;
     }
    }
    $947 = $941 & 255;
    $$0$lcssa$i86 = $947;
   } else {
    $$0$lcssa$i86 = $941;
   }
   (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $948 = ($938|0)==(65536);
  $or$cond$i58 = $948 & $940;
  if ($or$cond$i58) {
   $949 = (($w$2) - ($936))|0;
   $950 = ($949>>>0)>(256);
   $951 = $950 ? 256 : $949;
   _memset(($pad$i|0),48,($951|0))|0;
   $952 = ($949>>>0)>(255);
   if ($952) {
    $$01$i60 = $949;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $953 = (($$01$i60) + -256)|0;
     $954 = ($953>>>0)>(255);
     if ($954) {
      $$01$i60 = $953;
     } else {
      break;
     }
    }
    $955 = $949 & 255;
    $$0$lcssa$i62 = $955;
   } else {
    $$0$lcssa$i62 = $949;
   }
   (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
  }
  $956 = ($$p$5|0)>($934|0);
  if ($956) {
   $957 = (($$p$5) - ($934))|0;
   $958 = ($957>>>0)>(256);
   $959 = $958 ? 256 : $957;
   _memset(($pad$i|0),48,($959|0))|0;
   $960 = ($957>>>0)>(255);
   if ($960) {
    $$01$i45 = $957;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $961 = (($$01$i45) + -256)|0;
     $962 = ($961>>>0)>(255);
     if ($962) {
      $$01$i45 = $961;
     } else {
      break;
     }
    }
    $963 = $957 & 255;
    $$0$lcssa$i47 = $963;
   } else {
    $$0$lcssa$i47 = $957;
   }
   (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
  }
  (___fwritex($a$2,$934,$f)|0);
  $964 = ($938|0)==(8192);
  $or$cond$i = $964 & $940;
  if (!($or$cond$i)) {
   $1039 = $1047;$1040 = $1048;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $965 = (($w$2) - ($936))|0;
  $966 = ($965>>>0)>(256);
  $967 = $966 ? 256 : $965;
  _memset(($pad$i|0),32,($967|0))|0;
  $968 = ($965>>>0)>(255);
  if ($968) {
   $$01$i = $965;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $969 = (($$01$i) + -256)|0;
    $970 = ($969>>>0)>(255);
    if ($970) {
     $$01$i = $969;
    } else {
     break;
    }
   }
   $971 = $965 & 255;
   $$0$lcssa$i = $971;
  } else {
   $$0$lcssa$i = $965;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1039 = $1047;$1040 = $1048;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 351) {
  $972 = ($f|0)==(0|0);
  if (!($972)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $973 = ($l10n$0$lcssa|0)==(0);
  if ($973) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2166 = 1;
  }
  while(1) {
   $974 = (($nl_type) + ($i$2166<<2)|0);
   $975 = HEAP32[$974>>2]|0;
   $976 = ($975|0)==(0);
   if ($976) {
    $i$3164 = $i$2166;
    break;
   }
   $977 = (($nl_arg) + ($i$2166<<3)|0);
   $978 = ($975>>>0)>(20);
   L533: do {
    if (!($978)) {
     do {
      switch ($975|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $979 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$977>>2] = $979;
       break L533;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $980 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $981 = ($980|0)<(0);
       $982 = $981 << 31 >> 31;
       $983 = $977;
       $984 = $983;
       HEAP32[$984>>2] = $980;
       $985 = (($983) + 4)|0;
       $986 = $985;
       HEAP32[$986>>2] = $982;
       break L533;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $987 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $988 = $977;
       $989 = $988;
       HEAP32[$989>>2] = $987;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = 0;
       break L533;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $992 = $arglist_current44;
       $993 = $992;
       $994 = HEAP32[$993>>2]|0;
       $995 = (($992) + 4)|0;
       $996 = $995;
       $997 = HEAP32[$996>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $998 = $977;
       $999 = $998;
       HEAP32[$999>>2] = $994;
       $1000 = (($998) + 4)|0;
       $1001 = $1000;
       HEAP32[$1001>>2] = $997;
       break L533;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1002 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1003 = $1002&65535;
       $1004 = $1003 << 16 >> 16;
       $1005 = ($1004|0)<(0);
       $1006 = $1005 << 31 >> 31;
       $1007 = $977;
       $1008 = $1007;
       HEAP32[$1008>>2] = $1004;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = $1006;
       break L533;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1011 & 65535;
       $1012 = $977;
       $1013 = $1012;
       HEAP32[$1013>>2] = $$mask1$i;
       $1014 = (($1012) + 4)|0;
       $1015 = $1014;
       HEAP32[$1015>>2] = 0;
       break L533;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1016 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1017 = $1016&255;
       $1018 = $1017 << 24 >> 24;
       $1019 = ($1018|0)<(0);
       $1020 = $1019 << 31 >> 31;
       $1021 = $977;
       $1022 = $1021;
       HEAP32[$1022>>2] = $1018;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = $1020;
       break L533;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1025 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1025 & 255;
       $1026 = $977;
       $1027 = $1026;
       HEAP32[$1027>>2] = $$mask$i;
       $1028 = (($1026) + 4)|0;
       $1029 = $1028;
       HEAP32[$1029>>2] = 0;
       break L533;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1030 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$977>>3] = $1030;
       break L533;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1031 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$977>>3] = $1031;
       break L533;
       break;
      }
      default: {
       break L533;
      }
      }
     } while(0);
    }
   } while(0);
   $1032 = (($i$2166) + 1)|0;
   $1033 = ($1032|0)<(10);
   if ($1033) {
    $i$2166 = $1032;
   } else {
    $$0 = 1;
    label = 369;
    break;
   }
  }
  if ((label|0) == 369) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1036 = (($nl_type) + ($i$3164<<2)|0);
   $1037 = HEAP32[$1036>>2]|0;
   $1038 = ($1037|0)==(0);
   $1035 = (($i$3164) + 1)|0;
   if (!($1038)) {
    $$0 = -1;
    label = 369;
    break;
   }
   $1034 = ($1035|0)<(10);
   if ($1034) {
    $i$3164 = $1035;
   } else {
    $$0 = 1;
    label = 369;
    break;
   }
  }
  if ((label|0) == 369) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 369) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {
 
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&3](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&3](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&3](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&3]();
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b1(p0) { p0 = p0|0; nullFunc_vi(1); }
function b2(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(2); }
function b3(p0) { p0 = p0|0; nullFunc_ii(3);return 0; }
function b4() { ; nullFunc_v(4); }
function b5(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0; }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_sn_write,_zcalloc,b0];
var FUNCTION_TABLE_vi = [b1,_mips_get_context,_mips_set_context,_mips_reset];
var FUNCTION_TABLE_vii = [b2,_mips_set_info,_zcfree,b2];
var FUNCTION_TABLE_ii = [b3,_mips_execute];
var FUNCTION_TABLE_v = [b4,_mips_init,_mips_exit,b4];
var FUNCTION_TABLE_iii = [b5,_mips_dasm];

  return { _i64Add: _i64Add, _i64Subtract: _i64Subtract, _free: _free, _memcpy: _memcpy, _realloc: _realloc, _open_psf: _open_psf, _bitshift64Ashr: _bitshift64Ashr, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _strncpy: _strncpy, _generate_sound_data_psf: _generate_sound_data_psf, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _llvm_bswap_i32: _llvm_bswap_i32, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__open_psf = asm["_open_psf"]; asm["_open_psf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__open_psf.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Ashr.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__generate_sound_data_psf = asm["_generate_sound_data_psf"]; asm["_generate_sound_data_psf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__generate_sound_data_psf.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};

var real__emscripten_replace_memory = asm["_emscripten_replace_memory"]; asm["_emscripten_replace_memory"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_replace_memory.apply(null, arguments);
};
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _open_psf = Module["_open_psf"] = asm["_open_psf"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _generate_sound_data_psf = Module["_generate_sound_data_psf"] = asm["_generate_sound_data_psf"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    function applyMemoryInitializer(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



/* eslint no-undef:0 */
module.exports = {
    Module: Module,
    FS: FS,
    NODEFS: NODEFS
};

