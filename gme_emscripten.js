// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) return 0; }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;


var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}



// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');


var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 53024;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([69,114,114,111,114,58,32,37,115,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([116,114,97,99,107,67,111,117,110,116,0,0,0,0,0,0,108,101,110,103,116,104,0,0,115,121,115,116,101,109,0,0,103,97,109,101,0,0,0,0,115,111,110,103,0,0,0,0,97,117,116,104,111,114,0,0,99,111,112,121,114,105,103,104,116,0,0,0,0,0,0,0,99,111,109,109,101,110,116,0,100,117,109,112,101,114,0,0,9,0,0,0,0,0,0,0,21,1,25,61,42,62,38,2,0,2,3,4,6,8,11,16,23,32,45,64,90,128,180,255,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,65,121,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,0,119,114,105,116,101,95,100,97,116,97,95,0,0,0,0,0,102,105,110,97,108,95,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,0,0,45,114,101,109,97,105,110,32,60,61,32,101,110,118,95,112,101,114,105,111,100,0,0,0,101,110,118,46,100,101,108,97,121,32,62,32,48,0,0,0,101,110,118,46,112,111,115,32,60,32,48,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,65,121,95,67,112,117,46,99,112,112,0,0,0,0,0,0,0,0,0,0,0,0,144,137,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,232,177,0,0,240,177,0,0,248,177,0,0,232,136,0,0,66,101,101,112,101,114,0,0,0,1,0,0,1,1,0,0,2,1,0,0,0,3,0,0,90,88,32,83,112,101,99,116,114,117,109,0,0,0,0,0,0,137,0,0,0,0,0,0,1,0,0,0,2,0,0,0,112,195,0,0,1,0,0,0,70,105,108,101,32,100,97,116,97,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,66,97,100,32,100,97,116,97,32,98,108,111,99,107,32,115,105,122,101,0,0,0,0,0,243,205,0,0,237,94,251,118,24,250,0,0,0,0,0,0,243,205,0,0,237,86,251,118,205,0,0,24,247,0,0,0,54,65,121,95,69,109,117,0,54,65,121,95,67,112,117,0,104,201,0,0,128,137,0,0,240,201,0,0,120,137,0,0,0,0,0,0,2,0,0,0,136,137,0,0,0,16,1,0,112,141,0,0,2,0,0,0,33,98,117,102,32,38,38,32,110,101,119,95,98,117,102,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,67,108,97,115,115,105,99,95,69,109,117,46,104,0,0,0,0,0,115,101,116,95,98,117,102,102,101,114,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,65,121,95,65,112,117,46,104,0,0,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,112,111,115,32,60,61,32,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,102,105,108,101,95,115,105,122,101,32,45,32,50,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,65,121,95,69,109,117,46,99,112,112,0,0,0,0,0,0,0,0,103,101,116,95,100,97,116,97,0,0,0,0,0,0,0,0,90,88,65,89,69,77,85,76,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,116,114,97,99,107,32,100,97,116,97,0,0,0,0,0,0,0,0,0,0,40,139,0,0,7,0,0,0,8,0,0,0,3,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,55,65,121,95,70,105,108,101,0,0,0,0,0,0,0,0,144,201,0,0,24,139,0,0,0,165,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,66,108,105,112,95,66,117,102,102,101,114,46,99,112,112,0,0,0,48,0,0,0,0,0,0,0,98,117,102,102,101,114,95,115,105,122,101,95,32,33,61,32,115,105,108,101,110,116,95,98,117,102,95,115,105,122,101,0,108,101,110,103,116,104,95,32,61,61,32,109,115,101,99,0,102,97,99,116,111,114,32,62,32,48,32,124,124,32,33,115,97,109,112,108,101,95,114,97,116,101,95,0,0,0,0,0,99,108,111,99,107,95,114,97,116,101,95,102,97,99,116,111,114,0,0,0,0,0,0,0,115,97,109,112,108,101,115,95,97,118,97,105,108,40,41,32,60,61,32,40,108,111,110,103,41,32,98,117,102,102,101,114,95,115,105,122,101,95,0,0,99,111,117,110,116,32,60,61,32,115,97,109,112,108,101,115,95,97,118,97,105,108,40,41,0,0,0,0,0,0,0,0,114,101,109,111,118,101,95,115,105,108,101,110,99,101,0,0,99,111,117,110,116,95,99,108,111,99,107,115,0,0,0,0,107,101,114,110,101,108,95,117,110,105,116,32,62,32,48,0,118,111,108,117,109,101,95,117,110,105,116,0,0,0,0,0,0,0,0,0,112,141,0,0,11,0,0,0,12,0,0,0,3,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,40,99,104,46,99,101,110,116,101,114,32,38,38,32,99,104,46,108,101,102,116,32,38,38,32,99,104,46,114,105,103,104,116,41,32,124,124,32,40,33,99,104,46,99,101,110,116,101,114,32,38,38,32,33,99,104,46,108,101,102,116,32,38,38,32,33,99,104,46,114,105,103,104,116,41,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,67,108,97,115,115,105,99,95,69,109,117,46,99,112,112,0,0,0,109,117,116,101,95,118,111,105,99,101,115,95,0,0,0,0,99,108,111,99,107,115,95,101,109,117,108,97,116,101,100,0,112,108,97,121,95,0,0,0,49,49,67,108,97,115,115,105,99,95,69,109,117,0,0,0,144,201,0,0,96,141,0,0,144,164,0,0,0,0,0,0,85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,0,0,82,101,97,100,32,101,114,114,111,114,0,0,0,0,0,0,110,32,62,61,32,48,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,68,97,116,97,95,82,101,97,100,101,114,46,99,112,112,0,0,0,0,0,0,0,24,143,0,0,13,0,0,0,14,0,0,0,9,0,0,0,10,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,64,143,0,0,13,0,0,0,15,0,0,0,11,0,0,0,12,0,0,0,2,0,0,0,7,0,0,0,0,0,0,0,184,143,0,0,13,0,0,0,16,0,0,0,13,0,0,0,10,0,0,0,3,0,0,0,8,0,0,0,4,0,0,0,5,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,224,143,0,0,17,0,0,0,18,0,0,0,14,0,0,0,15,0,0,0,3,0,0,0,8,0,0,0,6,0,0,0,7,0,0,0,10,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,67,111,117,108,100,110,39,116,32,111,112,101,110,32,102,105,108,101,0,0,0,0,0,0,67,111,117,108,100,110,39,116,32,114,101,97,100,32,102,114,111,109,32,102,105,108,101,0,69,114,114,111,114,32,115,101,101,107,105,110,103,32,105,110,32,102,105,108,101,0,0,0,0,0,0,0,0,143,0,0,13,0,0,0,19,0,0,0,1,0,0,0,10,0,0,0,1,0,0,0,7,0,0,0,49,49,68,97,116,97,95,82,101,97,100,101,114,0,0,0,104,201,0,0,240,142,0,0,49,51,83,117,98,115,101,116,95,82,101,97,100,101,114,0,144,201,0,0,8,143,0,0,0,143,0,0,0,0,0,0,49,54,82,101,109,97,105,110,105,110,103,95,82,101,97,100,101,114,0,0,0,0,0,0,144,201,0,0,40,143,0,0,0,143,0,0,0,0,0,0,0,0,0,0,144,143,0,0,13,0,0,0,20,0,0,0,1,0,0,0,10,0,0,0,3,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,49,49,70,105,108,101,95,82,101,97,100,101,114,0,0,0,144,201,0,0,128,143,0,0,0,143,0,0,0,0,0,0,49,53,77,101,109,95,70,105,108,101,95,82,101,97,100,101,114,0,0,0,0,0,0,0,144,201,0,0,160,143,0,0,144,143,0,0,0,0,0,0,49,53,83,116,100,95,70,105,108,101,95,82,101,97,100,101,114,0,0,0,0,0,0,0,144,201,0,0,200,143,0,0,144,143,0,0,0,0,0,0,0,0,0,0,208,144,0,0,21,0,0,0,22,0,0,0,1,0,0,0,0,0,0,0,110,101,119,95,99,111,117,110,116,32,60,32,114,101,115,97,109,112,108,101,114,95,115,105,122,101,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,68,117,97,108,95,82,101,115,97,109,112,108,101,114,46,99,112,112,0,0,0,0,0,0,0,0,112,108,97,121,95,102,114,97,109,101,95,0,0,0,0,0,98,108,105,112,95,98,117,102,46,115,97,109,112,108,101,115,95,97,118,97,105,108,40,41,32,61,61,32,112,97,105,114,95,99,111,117,110,116,0,0,99,111,117,110,116,32,61,61,32,40,108,111,110,103,41,32,115,97,109,112,108,101,95,98,117,102,95,115,105,122,101,0,49,52,68,117,97,108,95,82,101,115,97,109,112,108,101,114,0,0,0,0,0,0,0,0,104,201,0,0,184,144,0,0,119,114,105,116,101,95,112,111,115,32,60,61,32,98,117,102,46,101,110,100,40,41,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,70,105,114,95,82,101,115,97,109,112,108,101,114,46,104,0,0,0,0,0,0,0,192,145,0,0,23,0,0,0,24,0,0,0,11,0,0,0,1,0,0,0,16,0,0,0,8,0,0,0,9,0,0,0,25,0,0,0,10,0,0,0,17,0,0,0,8,0,0,0,11,0,0,0,116,111,116,97,108,95,115,97,109,112,108,101,115,32,37,32,50,32,61,61,32,48,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,69,102,102,101,99,116,115,95,66,117,102,102,101,114,46,99,112,112,0,0,0,0,0,0,0,0,49,52,69,102,102,101,99,116,115,95,66,117,102,102,101,114,0,0,0,0,0,0,0,0,144,201,0,0,168,145,0,0,136,162,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,71,98,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,0,132,64,67,170,45,120,146,60,96,89,89,176,52,184,46,218,110,101,120,116,95,102,114,97,109,101,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,100,97,116,97,32,60,32,48,120,49,48,48,0,128,63,0,255,191,255,63,0,255,191,127,255,159,255,191,255,255,0,0,191,0,119,128,255,255,255,255,255,255,255,255,255,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,114,101,103,105,115,116,101,114,95,99,111,117,110,116,0,0,0,0,0,0,0,114,101,97,100,95,114,101,103,105,115,116,101,114,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,71,98,95,67,112,117,46,99,112,112,0,0,0,0,0,0,0,0,42,40,118,111,108,97,116,105,108,101,32,99,104,97,114,42,41,32,38,105,32,33,61,32,48,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,101,110,100,105,97,110,46,104,0,0,0,98,108,97,114,103,103,95,118,101,114,105,102,121,95,98,121,116,101,95,111,114,100,101,114,0,0,0,0,0,0,0,0,1,2,4,6,0,0,0,0,8,16,32,48,64,80,96,112,0,0,0,0,152,148,0,0,26,0,0,0,27,0,0,0,28,0,0,0,12,0,0,0,8,0,0,0,18,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,13,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,12,0,0,0,19,0,0,0,152,191,0,0,168,191,0,0,184,147,0,0,200,191,0,0,87,97,118,101,0,0,0,0,1,1,0,0,2,1,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,240,191,120,0,0,0,0,0,0,0,71,97,109,101,32,66,111,121,0,0,0,0,0,0,0,0,224,147,0,0,0,0,0,0,3,0,0,0,4,0,0,0,120,195,0,0,1,0,0,0,73,110,118,97,108,105,100,32,116,105,109,101,114,32,109,111,100,101,0,0,0,0,0,0,73,110,118,97,108,105,100,32,108,111,97,100,47,105,110,105,116,47,112,108,97,121,32,97,100,100,114,101,115,115,0,0,10,4,6,8,0,0,0,0,128,191,0,0,191,0,63,0,0,191,127,255,159,0,191,0,255,0,0,191,119,243,241,0,0,0,0,0,0,0,0,0,172,221,218,72,54,2,207,22,44,4,229,44,172,221,218,72,55,71,98,115,95,69,109,117,0,0,0,0,0,0,0,0,54,71,98,95,67,112,117,0,104,201,0,0,136,148,0,0,240,201,0,0,120,148,0,0,0,0,0,0,2,0,0,0,144,148,0,0,0,16,1,0,112,141,0,0,2,0,0,0,0,0,0,0,24,149,0,0,7,0,0,0,29,0,0,0,3,0,0,0,14,0,0,0,8,0,0,0,20,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,56,71,98,115,95,70,105,108,101,0,0,0,0,0,0,0,144,201,0,0,8,149,0,0,0,165,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,77,117,115,105,99,95,69,109,117,46,104,0,0,0,0,0,0,0,115,101,116,95,103,97,105,110,0,0,0,0,0,0,0,0,87,114,111,110,103,32,102,105,108,101,32,116,121,112,101,32,102,111,114,32,116,104,105,115,32,101,109,117,108,97,116,111,114,0,0,0,0,0,0,0,0,0,0,0,120,150,0,0,30,0,0,0,31,0,0,0,32,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,33,0,0,0,34,0,0,0,6,0,0,0,0,0,0,0,100,97,116,97,32,33,61,32,102,105,108,101,95,100,97,116,97,46,98,101,103,105,110,40,41,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,71,109,101,95,70,105,108,101,46,99,112,112,0,0,0,0,0,0,108,111,97,100,95,109,101,109,95,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,60,63,62,0,0,0,0,0,60,32,63,32,62,0,0,0,73,110,118,97,108,105,100,32,116,114,97,99,107,0,0,0,73,110,118,97,108,105,100,32,116,114,97,99,107,32,105,110,32,109,51,117,32,112,108,97,121,108,105,115,116,0,0,0,56,71,109,101,95,70,105,108,101,0,0,0,0,0,0,0,104,201,0,0,104,150,0,0,0,0,0,0,64,151,0,0,35,0,0,0,36,0,0,0,3,0,0,0,1,0,0,0,21,0,0,0,22,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,15,0,0,0,13,0,0,0,14,0,0,0,4,0,0,0,16,0,0,0,23,0,0,0,4,0,0,0,1,0,0,0,0,255,255,255,64,151,0,0,37,0,0,0,38,0,0,0,2,0,0,0,0,0,0,0,72,191,0,0,80,191,0,0,88,191,0,0,96,191,0,0,104,191,0,0,112,191,0,0,120,191,0,0,128,191,0,0,83,101,103,97,32,71,101,110,101,115,105,115,0,0,0,0,8,151,0,0,1,0,0,0,5,0,0,0,6,0,0,0,128,195,0,0,0,0,0,0,55,71,121,109,95,69,109,117,0,0,0,0,0,0,0,0,240,201,0,0,48,151,0,0,0,0,0,0,2,0,0,0,144,164,0,0,2,0,0,0,208,144,0,0,0,0,1,0,71,89,77,88,0,0,0,0,80,97,99,107,101,100,32,71,89,77,32,102,105,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,232,151,0,0,7,0,0,0,39,0,0,0,3,0,0,0,1,0,0,0,24,0,0,0,25,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,56,71,121,109,95,70,105,108,101,0,0,0,0,0,0,0,144,201,0,0,216,151,0,0,0,165,0,0,0,0,0,0,85,110,107,110,111,119,110,32,83,111,110,103,0,0,0,0,85,110,107,110,111,119,110,32,71,97,109,101,0,0,0,0,85,110,107,110,111,119,110,32,80,117,98,108,105,115,104,101,114,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,80,101,114,115,111,110,0,0,72,101,97,100,101,114,32,97,100,100,101,100,32,98,121,32,89,77,65,77,80,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,72,101,115,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,110,111,105,115,101,95,108,102,115,114,0,0,0,0,0,0,0,0,6,0,7,0,8,0,10,0,12,0,14,0,17,0,20,0,23,0,28,0,33,0,39,0,47,0,56,0,66,0,79,0,93,0,111,0,132,0,157,0,187,0,222,0,8,1,58,1,118,1,188,1,17,2,117,2,235,2,121,3,33,4,111,115,99,45,62,108,97,115,116,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,114,101,103,32,60,61,32,112,97,103,101,95,99,111,117,110,116,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,72,101,115,95,67,112,117,46,99,112,112,0,0,0,0,0,0,0,115,101,116,95,109,109,114,0,40,117,110,115,105,103,110,101,100,41,32,98,97,110,107,32,60,32,48,120,49,48,48,0,1,7,3,4,6,4,6,7,3,2,2,2,7,5,7,6,4,7,7,4,6,4,6,7,2,5,2,2,7,5,7,6,7,7,3,4,4,4,6,7,4,2,2,2,5,5,7,6,4,7,7,2,4,4,6,7,2,5,2,2,5,5,7,6,7,7,3,4,8,4,6,7,3,2,2,2,4,5,7,6,4,7,7,5,2,4,6,7,2,5,3,2,2,5,7,6,7,7,2,2,4,4,6,7,4,2,2,2,7,5,7,6,4,7,7,17,4,4,6,7,2,5,4,2,7,5,7,6,4,7,2,7,4,4,4,7,2,2,2,2,5,5,5,6,4,7,7,8,4,4,4,7,2,5,2,2,5,5,5,6,2,7,2,7,4,4,4,7,2,2,2,2,5,5,5,6,4,7,7,8,4,4,4,7,2,5,2,2,5,5,5,6,2,7,2,17,4,4,6,7,2,2,2,2,5,5,7,6,4,7,7,17,2,4,6,7,2,5,3,2,2,5,7,6,2,7,2,17,4,4,6,7,2,2,2,2,5,5,7,6,4,7,7,17,2,4,6,7,2,5,4,2,2,5,7,6,0,0,0,0,24,156,0,0,40,0,0,0,41,0,0,0,42,0,0,0,17,0,0,0,8,0,0,0,26,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,18,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,15,0,0,0,27,0,0,0,232,177,0,0,240,177,0,0,248,177,0,0,0,178,0,0,216,154,0,0,224,154,0,0,77,117,108,116,105,32,49,0,77,117,108,116,105,32,50,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,0,3,0,0,1,3,0,0,80,67,32,69,110,103,105,110,101,0,0,0,0,0,0,0,0,155,0,0,0,1,0,0,7,0,0,0,8,0,0,0,136,195,0,0,1,0,0,0,68,65,84,65,0,0,0,0,68,97,116,97,32,104,101,97,100,101,114,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,104,101,97,100,101,114,32,100,97,116,97,0,0,0,0,0,73,110,118,97,108,105,100,32,97,100,100,114,101,115,115,0,73,110,118,97,108,105,100,32,115,105,122,101,0,0,0,0,77,117,108,116,105,112,108,101,32,68,65,84,65,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,69,120,116,114,97,32,102,105,108,101,32,100,97,116,97,0,77,105,115,115,105,110,103,32,102,105,108,101,32,100,97,116,97,0,0,0,0,0,0,0,83,99,97,110,108,105,110,101,32,105,110,116,101,114,114,117,112,116,32,117,110,115,117,112,112,111,114,116,101,100,0,0,55,72,101,115,95,69,109,117,0,0,0,0,0,0,0,0,55,72,101,115,95,67,112,117,0,0,0,0,0,0,0,0,104,201,0,0,0,156,0,0,240,201,0,0,240,155,0,0,0,0,0,0,2,0,0,0,16,156,0,0,0,16,1,0,112,141,0,0,2,0,0,0,115,116,97,116,101,32,61,61,32,38,115,116,97,116,101,95,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,72,101,115,95,67,112,117,46,104,0,72,69,83,77,0,0,0,0,0,0,0,0,224,156,0,0,7,0,0,0,43,0,0,0,3,0,0,0,19,0,0,0,8,0,0,0,28,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,56,72,101,115,95,70,105,108,101,0,0,0,0,0,0,0,144,201,0,0,208,156,0,0,0,165,0,0,0,0,0,0,97,100,100,114,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,75,115,115,95,67,112,117,46,99,112,112,0,0,0,0,0,0,0,109,97,112,95,109,101,109,0,4,10,7,6,4,4,7,4,4,11,7,6,4,4,7,4,13,10,7,6,4,4,7,4,12,11,7,6,4,4,7,4,12,10,16,6,4,4,7,4,12,11,16,6,4,4,7,4,12,10,13,6,11,11,10,4,12,11,13,6,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,7,7,7,7,7,7,4,7,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,11,10,10,10,17,11,7,11,11,10,10,8,17,17,7,11,11,10,10,11,17,11,7,11,11,4,10,11,17,8,7,11,11,10,10,19,17,11,7,11,11,4,10,4,17,8,7,11,11,10,10,4,17,11,7,11,11,6,10,4,17,8,7,11,114,117,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,12,2,0,0,3,0,0,7,12,2,0,0,3,0,0,0,0,0,15,15,11,0,0,7,0,0,0,0,0,0,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,160,64,64,112,192,0,96,11,160,75,75,123,203,11,107,0,11,64,64,112,192,0,96,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,128,128,128,128,0,0,11,0,128,128,128,128,0,0,11,0,208,208,208,208,0,0,11,0,208,208,208,208,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,15,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,160,160,0,0,44,0,0,0,45,0,0,0,46,0,0,0,20,0,0,0,8,0,0,0,29,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,21,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,16,0,0,0,30,0,0,0,152,191,0,0,168,191,0,0,184,191,0,0,232,177,0,0,240,177,0,0,248,177,0,0,0,178,0,0,8,178,0,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,77,83,88,0,0,0,0,0,224,159,0,0,0,1,0,0,9,0,0,0,10,0,0,0,144,195,0,0,3,0,0,0,85,110,107,110,111,119,110,32,100,97,116,97,32,105,110,32,104,101,97,100,101,114,0,0,70,77,32,115,111,117,110,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,211,160,245,123,211,161,241,201,211,160,219,162,201,0,0,0,195,1,0,195,9,0,0,0,69,120,99,101,115,115,105,118,101,32,100,97,116,97,32,115,105,122,101,0,0,0,0,0,66,97,110,107,32,100,97,116,97,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,55,75,115,115,95,69,109,117,0,0,0,0,0,0,0,0,55,75,115,115,95,67,112,117,0,0,0,0,0,0,0,0,104,201,0,0,136,160,0,0,240,201,0,0,120,160,0,0,0,0,0,0,2,0,0,0,152,160,0,0,0,16,1,0,112,141,0,0,2,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,75,115,115,95,83,99,99,95,65,112,117,46,104,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,97,100,100,114,32,60,32,114,101,103,95,99,111,117,110,116,0,0,0,0,0,75,83,67,67,0,0,0,0,75,83,83,88,0,0,0,0,0,0,0,0,128,161,0,0,7,0,0,0,47,0,0,0,3,0,0,0,22,0,0,0,8,0,0,0,31,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,56,75,115,115,95,70,105,108,101,0,0,0,0,0,0,0,144,201,0,0,112,161,0,0,0,165,0,0,0,0,0,0,83,101,103,97,32,77,97,115,116,101,114,32,83,121,115,116,101,109,0,0,0,0,0,0,71,97,109,101,32,71,101,97,114,0,0,0,0,0,0,0,0,0,0,0,136,162,0,0,48,0,0,0,49,0,0,0,11,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,160,162,0,0,50,0,0,0,51,0,0,0,11,0,0,0,2,0,0,0,32,0,0,0,17,0,0,0,18,0,0,0,52,0,0,0,19,0,0,0,33,0,0,0,9,0,0,0,0,0,0,0,33,40,99,111,117,110,116,32,38,32,49,41,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,77,117,108,116,105,95,66,117,102,102,101,114,46,99,112,112,0,0,114,101,97,100,95,115,97,109,112,108,101,115,0,0,0,0,49,50,77,117,108,116,105,95,66,117,102,102,101,114,0,0,104,201,0,0,120,162,0,0,49,51,83,116,101,114,101,111,95,66,117,102,102,101,114,0,144,201,0,0,144,162,0,0,136,162,0,0,0,0,0,0,0,0,0,0,144,164,0,0,7,0,0,0,53,0,0,0,3,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,1,0,0,0,13,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,32,163,0,0,40,163,0,0,48,163,0,0,56,163,0,0,64,163,0,0,72,163,0,0,80,163,0,0,88,163,0,0,86,111,105,99,101,32,49,0,86,111,105,99,101,32,50,0,86,111,105,99,101,32,51,0,86,111,105,99,101,32,52,0,86,111,105,99,101,32,53,0,86,111,105,99,101,32,54,0,86,111,105,99,101,32,55,0,86,111,105,99,101,32,56,0,33,115,97,109,112,108,101,95,114,97,116,101,40,41,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,77,117,115,105,99,95,69,109,117,46,99,112,112,0,0,0,0,0,115,101,116,95,115,97,109,112,108,101,95,114,97,116,101,0,115,97,109,112,108,101,95,114,97,116,101,40,41,0,0,0,112,114,101,95,108,111,97,100,0,0,0,0,0,0,0,0,109,117,116,101,95,118,111,105,99,101,115,0,0,0,0,0,115,101,116,95,116,101,109,112,111,0,0,0,0,0,0,0,99,117,114,114,101,110,116,95,116,114,97,99,107,40,41,32,62,61,32,48,0,0,0,0,115,107,105,112,0,0,0,0,33,98,117,102,95,114,101,109,97,105,110,0,0,0,0,0,102,105,108,108,95,98,117,102,0,0,0,0,0,0,0,0,111,117,116,95,99,111,117,110,116,32,37,32,115,116,101,114,101,111,32,61,61,32,48,0,101,109,117,95,116,105,109,101,32,62,61,32,111,117,116,95,116,105,109,101,0,0,0,0,85,115,101,32,102,117,108,108,32,101,109,117,108,97,116,111,114,32,102,111,114,32,112,108,97,121,98,97,99,107,0,0,57,77,117,115,105,99,95,69,109,117,0,0,0,0,0,0,144,201,0,0,128,164,0,0,120,150,0,0,0,0,0,0,0,0,0,0,0,165,0,0,7,0,0,0,54,0,0,0,3,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,57,71,109,101,95,73,110,102,111,95,0,0,0,0,0,0,144,201,0,0,240,164,0,0,144,164,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,48,0,0,108,97,115,116,95,100,109,99,95,116,105,109,101,32,62,61,32,48,0,0,0,0,0,0,97,100,100,114,32,62,32,48,120,50,48,0,0,0,0,0,119,114,105,116,101,95,114,101,103,105,115,116,101,114,0,0,10,254,20,2,40,4,80,6,160,8,60,10,14,12,26,14,12,16,24,18,48,20,96,22,192,24,72,26,16,28,32,30,40,117,110,115,105,103,110,101,100,41,32,111,115,99,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,65,112,117,46,104,0,73,110,118,97,108,105,100,32,98,97,110,107,0,0,0,0,115,116,97,114,116,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,67,112,117,46,99,112,112,0,0,0,0,0,0,0,109,97,112,95,99,111,100,101,0,0,0,0,0,0,0,0,115,105,122,101,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,115,116,97,114,116,32,43,32,115,105,122,101,32,60,61,32,48,120,49,48,48,48,48,0,0,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,0,8,4,4,6,6,2,4,2,7,4,4,7,7,64,64,64,128,64,64,128,160,0,1,2,3,4,6,8,12,17,24,34,48,68,96,136,192,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,70,109,101,55,95,65,112,117,46,99,112,112,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,78,97,109,99,111,95,65,112,117,46,99,112,112,0,40,98,108,105,112,95,108,111,110,103,41,32,40,116,105,109,101,32,62,62,32,66,76,73,80,95,66,85,70,70,69,82,95,65,67,67,85,82,65,67,89,41,32,60,32,98,108,105,112,95,98,117,102,45,62,98,117,102,102,101,114,95,115,105,122,101,95,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,66,108,105,112,95,66,117,102,102,101,114,46,104,0,0,0,0,0,111,102,102,115,101,116,95,114,101,115,97,109,112,108,101,100,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,78,97,109,99,111,95,65,112,117,46,104,0,0,0,172,1,124,1,84,1,64,1,30,1,254,0,226,0,214,0,190,0,160,0,142,0,128,0,106,0,84,0,72,0,54,0,142,1,98,1,60,1,42,1,20,1,236,0,210,0,198,0,176,0,148,0,132,0,118,0,98,0,78,0,66,0,50,0,0,1,2,3,4,5,6,7,7,8,9,10,11,12,13,14,15,15,16,17,18,19,20,20,21,22,23,24,24,25,26,27,27,28,29,30,31,31,32,33,33,34,35,36,36,37,38,38,39,40,41,41,42,43,43,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,59,60,60,61,61,62,63,63,64,64,65,65,66,66,67,67,68,68,69,70,70,71,71,72,72,73,73,74,74,75,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,82,83,112,114,103,95,114,101,97,100,101,114,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,79,115,99,115,46,99,112,112,0,0,0,0,0,0,102,105,108,108,95,98,117,102,102,101,114,0,0,0,0,0,4,0,8,0,16,0,32,0,64,0,96,0,128,0,160,0,202,0,254,0,124,1,252,1,250,2,248,3,242,7,228,15,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,86,114,99,54,95,65,112,117,46,99,112,112,0,0,40,117,110,115,105,103,110,101,100,41,32,111,115,99,95,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,119,114,105,116,101,95,111,115,99,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,114,101,103,32,60,32,114,101,103,95,99,111,117,110,116,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,86,114,99,54,95,65,112,117,46,104,0,0,0,0,0,0,0,0,0,0,240,191,80,0,0,0,0,0,0,0,0,0,0,0,56,173,0,0,55,0,0,0,56,0,0,0,57,0,0,0,23,0,0,0,8,0,0,0,34,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,24,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,20,0,0,0,35,0,0,0,8,175,0,0,0,0,0,0,11,0,0,0,12,0,0,0,152,195,0,0,1,0,0,0,85,115,101,115,32,117,110,115,117,112,112,111,114,116,101,100,32,97,117,100,105,111,32,101,120,112,97,110,115,105,111,110,32,104,97,114,100,119,97,114,101,0,0,0,0,0,0,0,152,191,0,0,168,191,0,0,136,171,0,0,200,191,0,0,152,171,0,0,0,0,0,0,84,114,105,97,110,103,108,101,0,0,0,0,0,0,0,0,68,77,67,0,0,0,0,0,1,1,0,0,2,1,0,0,0,1,0,0,0,2,0,0,1,3,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,13,1,0,0,152,191,0,0,168,191,0,0,136,171,0,0,200,191,0,0,152,171,0,0,232,177,0,0,240,177,0,0,248,177,0,0,0,178,0,0,8,178,0,0,16,178,0,0,24,178,0,0,32,178,0,0,0,0,0,0,152,191,0,0,168,191,0,0,136,171,0,0,200,191,0,0,152,171,0,0,56,172,0,0,184,191,0,0,72,172,0,0,83,97,119,32,87,97,118,101,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,52,0,0,0,0,0,0,0,0,152,191,0,0,168,191,0,0,136,171,0,0,200,191,0,0,152,171,0,0,56,172,0,0,184,191,0,0,72,172,0,0,232,177,0,0,240,177,0,0,248,177,0,0,0,178,0,0,8,178,0,0,16,178,0,0,24,178,0,0,32,178,0,0,152,191,0,0,168,191,0,0,136,171,0,0,200,191,0,0,152,171,0,0,184,191,0,0,72,172,0,0,184,172,0,0,83,113,117,97,114,101,32,53,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,102,105,108,101,32,118,101,114,115,105,111,110,0,0,0,0,67,111,114,114,117,112,116,32,102,105,108,101,32,40,105,110,118,97,108,105,100,32,108,111,97,100,47,105,110,105,116,47,112,108,97,121,32,97,100,100,114,101,115,115,41,0,0,0,55,78,115,102,95,69,109,117,0,0,0,0,0,0,0,0,55,78,101,115,95,67,112,117,0,0,0,0,0,0,0,0,104,201,0,0,32,173,0,0,240,201,0,0,16,173,0,0,0,0,0,0,2,0,0,0,48,173,0,0,0,16,1,0,112,141,0,0,2,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,116,105,109,101,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,70,109,101,55,95,65,112,117,46,104,0,0,0,0,78,69,83,77,26,0,0,0,0,0,0,0,8,174,0,0,7,0,0,0,58,0,0,0,3,0,0,0,25,0,0,0,8,0,0,0,36,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,56,78,115,102,95,70,105,108,101,0,0,0,0,0,0,0,144,201,0,0,248,173,0,0,0,165,0,0,0,0,0,0,70,97,109,105,99,111,109,0,78,69,83,77,26,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,65,0,0,0,0,0,0,0,0,32,78,0,0,0,0,0,0,67,111,114,114,117,112,116,32,102,105,108,101,0,0,0,0,0,0,0,0,64,175,0,0,59,0,0,0,60,0,0,0,61,0,0,0,26,0,0,0,8,0,0,0,37,0,0,0,4,0,0,0,5,0,0,0,62,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,27,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,20,0,0,0,35,0,0,0,78,105,110,116,101,110,100,111,32,78,69,83,0,0,0,0,8,175,0,0,0,0,0,0,13,0,0,0,14,0,0,0,160,195,0,0,1,0,0,0,56,78,115,102,101,95,69,109,117], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+34616);
/* memory initializer */ allocate([144,201,0,0,48,175,0,0,56,173,0,0,0,0,0,0,110,32,60,61,32,115,105,122,101,95,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,99,111,109,109,111,110,46,104,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,0,0,0,0,0,176,0,0,63,0,0,0,64,0,0,0,3,0,0,0,28,0,0,0,8,0,0,0,38,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,57,78,115,102,101,95,70,105,108,101,0,0,0,0,0,0,144,201,0,0,240,175,0,0,0,165,0,0,0,0,0,0,4,2,0,0,0,0,0,0,85,85,0,0,0,0,0,0,64,16,32,8,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,83,97,112,95,65,112,117,46,104,0,0,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,0,0,0,0,216,178,0,0,65,0,0,0,66,0,0,0,3,0,0,0,1,0,0,0,39,0,0,0,40,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,8,0,0,0,29,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,21,0,0,0,41,0,0,0,232,177,0,0,240,177,0,0,248,177,0,0,0,178,0,0,8,178,0,0,16,178,0,0,24,178,0,0,32,178,0,0,87,97,118,101,32,49,0,0,87,97,118,101,32,50,0,0,87,97,118,101,32,51,0,0,87,97,118,101,32,52,0,0,87,97,118,101,32,53,0,0,87,97,118,101,32,54,0,0,87,97,118,101,32,55,0,0,87,97,118,101,32,56,0,0,1,1,0,0,2,1,0,0,3,1,0,0,0,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,4,1,0,0,65,116,97,114,105,32,88,76,0,0,0,0,0,0,0,0,72,178,0,0,0,0,0,0,15,0,0,0,16,0,0,0,168,195,0,0,1,0,0,0,73,110,118,97,108,105,100,32,102,105,108,101,32,100,97,116,97,32,98,108,111,99,107,0,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,55,83,97,112,95,69,109,117,0,0,0,0,0,0,0,0,55,83,97,112,95,67,112,117,0,0,0,0,0,0,0,0,104,201,0,0,192,178,0,0,240,201,0,0,176,178,0,0,0,0,0,0,2,0,0,0,208,178,0,0,0,16,1,0,112,141,0,0,2,0,0,0,83,65,80,13,10,0,0,0,73,78,73,84,0,0,0,0,73,110,118,97,108,105,100,32,105,110,105,116,32,97,100,100,114,101,115,115,0,0,0,0,80,76,65,89,69,82,0,0,73,110,118,97,108,105,100,32,112,108,97,121,32,97,100,100,114,101,115,115,0,0,0,0,77,85,83,73,67,0,0,0,73,110,118,97,108,105,100,32,109,117,115,105,99,32,97,100,100,114,101,115,115,0,0,0,83,79,78,71,83,0,0,0,73,110,118,97,108,105,100,32,116,114,97,99,107,32,99,111,117,110,116,0,0,0,0,0,84,89,80,69,0,0,0,0,68,105,103,105,109,117,115,105,99,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,85,110,115,117,112,112,111,114,116,101,100,32,112,108,97,121,101,114,32,116,121,112,101,0,83,84,69,82,69,79,0,0,70,65,83,84,80,76,65,89,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,102,97,115,116,112,108,97,121,32,118,97,108,117,101,0,0,65,85,84,72,79,82,0,0,78,65,77,69,0,0,0,0,68,65,84,69,0,0,0,0,82,79,77,32,100,97,116,97,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,120,180,0,0,7,0,0,0,67,0,0,0,3,0,0,0,1,0,0,0,42,0,0,0,43,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,56,83,97,112,95,70,105,108,101,0,0,0,0,0,0,0,144,201,0,0,104,180,0,0,0,165,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,83,109,115,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,40,99,101,110,116,101,114,32,38,38,32,108,101,102,116,32,38,38,32,114,105,103,104,116,41,32,124,124,32,40,33,99,101,110,116,101,114,32,38,38,32,33,108,101,102,116,32,38,38,32,33,114,105,103,104,116,41,0,0,0,0,0,0,0,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,119,114,105,116,101,95,103,103,115,116,101,114,101,111,0,0,119,114,105,116,101,95,100,97,116,97,0,0,0,0,0,0,64,50,39,31,24,19,15,12,9,7,5,4,3,2,1,0,0,1,0,0,0,2,0,0,0,4,0,0,0,0,0,0,78,111,116,32,97,110,32,83,80,67,32,102,105,108,101,0,101,110,97,98,108,101,100,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,83,110,101,115,95,83,112,99,46,99,112,112,0,0,0,0,0,0,114,117,110,95,117,110,116,105,108,95,0,0,0,0,0,0,115,97,109,112,108,101,95,98,117,102,32,60,61,32,98,117,102,95,101,110,100,0,0,0,114,117,110,95,100,115,112,95,0,0,0,0,0,0,0,0,114,101,97,100,0,0,0,0,99,111,117,110,116,32,37,32,50,32,61,61,32,48,0,0,112,108,97,121,0,0,0,0,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,47,117,110,115,117,112,112,111,114,116,101,100,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,0,0,0,0,110,101,120,116,95,100,115,112,32,61,61,32,99,108,111,99,107,115,95,112,101,114,95,115,97,109,112,108,101,0,0,0,111,117,116,32,61,61,32,115,107,105,112,95,115,101,110,116,105,110,101,108,32,124,124,32,115,97,109,112,108,101,95,98,117,102,32,45,32,111,117,116,32,61,61,32,99,111,117,110,116,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,83,112,99,95,68,115,112,46,104,0,2,8,4,5,3,4,3,6,2,6,5,4,5,4,6,8,2,8,4,5,4,5,5,6,5,5,6,5,2,2,4,6,2,8,4,5,3,4,3,6,2,6,5,4,5,4,5,4,2,8,4,5,4,5,5,6,5,5,6,5,2,2,3,8,2,8,4,5,3,4,3,6,2,6,4,4,5,4,6,6,2,8,4,5,4,5,5,6,5,5,4,5,2,2,4,3,2,8,4,5,3,4,3,6,2,6,4,4,5,4,5,5,2,8,4,5,4,5,5,6,5,5,5,5,2,2,3,6,2,8,4,5,3,4,3,6,2,6,5,4,5,2,4,5,2,8,4,5,4,5,5,6,5,5,5,5,2,2,12,5,3,8,4,5,3,4,3,6,2,6,4,4,5,2,4,4,2,8,4,5,4,5,5,6,5,5,5,5,2,2,3,4,3,8,4,5,4,5,4,7,2,5,6,4,5,2,4,9,2,8,4,5,5,6,6,7,4,5,4,5,2,2,6,3,2,8,4,5,3,4,3,6,2,4,5,3,4,3,4,3,2,8,4,5,4,5,5,6,3,4,5,4,2,2,4,3,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,114,101,103,105,115,116,101,114,95,99,111,117,110,116,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,83,112,99,95,68,115,112,46,99,112,112,0,0,0,0,0,0,0,119,114,105,116,101,0,0,0,0,0,15,0,20,0,24,0,30,0,40,0,48,0,60,0,80,0,96,0,120,0,160,0,192,0,240,0,64,1,128,1,224,1,128,2,0,3,192,3,0,5,0,6,128,7,0,10,0,12,0,15,0,20,0,24,0,30,0,40,0,60,0,120,114,1,25,5,110,1,25,5,106,1,24,5,102,1,24,5,98,1,24,5,95,1,24,5,91,1,24,5,87,1,23,5,83,1,23,5,80,1,23,5,76,1,22,5,72,1,22,5,69,1,21,5,65,1,20,5,62,1,20,5,58,1,19,5,55,1,18,5,51,1,17,5,48,1,17,5,44,1,16,5,41,1,15,5,37,1,14,5,34,1,13,5,30,1,12,5,27,1,11,5,24,1,10,5,20,1,8,5,17,1,7,5,14,1,6,5,11,1,4,5,7,1,3,5,4,1,2,5,1,1,0,5,254,0,255,4,251,0,253,4,248,0,251,4,245,0,250,4,242,0,248,4,239,0,246,4,236,0,245,4,233,0,243,4,230,0,241,4,227,0,239,4,224,0,237,4,221,0,235,4,218,0,233,4,215,0,231,4,212,0,229,4,210,0,227,4,207,0,224,4,204,0,222,4,201,0,220,4,199,0,217,4,196,0,215,4,193,0,213,4,191,0,210,4,188,0,208,4,186,0,205,4,183,0,203,4,180,0,200,4,178,0,197,4,175,0,195,4,173,0,192,4,171,0,189,4,168,0,186,4,166,0,183,4,163,0,181,4,161,0,178,4,159,0,175,4,156,0,172,4,154,0,169,4,152,0,166,4,150,0,162,4,147,0,159,4,145,0,156,4,143,0,153,4,141,0,150,4,139,0,146,4,137,0,143,4,134,0,140,4,132,0,136,4,130,0,133,4,128,0,129,4,126,0,126,4,124,0,122,4,122,0,119,4,120,0,115,4,118,0,112,4,117,0,108,4,115,0,104,4,113,0,101,4,111,0,97,4,109,0,93,4,107,0,89,4,106,0,85,4,104,0,82,4,102,0,78,4,100,0,74,4,99,0,70,4,97,0,66,4,95,0,62,4,94,0,58,4,92,0,54,4,90,0,50,4,89,0,46,4,87,0,42,4,86,0,37,4,84,0,33,4,83,0,29,4,81,0,25,4,80,0,21,4,78,0,16,4,77,0,12,4,76,0,8,4,74,0,3,4,73,0,255,3,71,0,251,3,70,0,246,3,69,0,242,3,67,0,237,3,66,0,233,3,65,0,229,3,64,0,224,3,62,0,220,3,61,0,215,3,60,0,210,3,59,0,206,3,58,0,201,3,56,0,197,3,55,0,192,3,54,0,187,3,53,0,183,3,52,0,178,3,51,0,173,3,50,0,169,3,49,0,164,3,48,0,159,3,47,0,155,3,46,0,150,3,45,0,145,3,44,0,140,3,43,0,136,3,42,0,131,3,41,0,126,3,40,0,121,3,39,0,116,3,38,0,112,3,37,0,107,3,36,0,102,3,36,0,97,3,35,0,92,3,34,0,87,3,33,0,83,3,32,0,78,3,32,0,73,3,31,0,68,3,30,0,63,3,29,0,58,3,29,0,53,3,28,0,48,3,27,0,43,3,27,0,38,3,26,0,34,3,25,0,29,3,24,0,24,3,24,0,19,3,23,0,14,3,23,0,9,3,22,0,4,3,21,0,255,2,21,0,250,2,20,0,245,2,20,0,240,2,19,0,235,2,19,0,230,2,18,0,225,2,17,0,220,2,17,0,216,2,16,0,211,2,16,0,206,2,15,0,201,2,15,0,196,2,15,0,191,2,14,0,186,2,14,0,181,2,13,0,176,2,13,0,171,2,12,0,166,2,12,0,162,2,11,0,157,2,11,0,152,2,11,0,147,2,10,0,142,2,10,0,137,2,10,0,132,2,9,0,128,2,9,0,123,2,9,0,118,2,8,0,113,2,8,0,108,2,8,0,103,2,7,0,99,2,7,0,94,2,7,0,89,2,6,0,84,2,6,0,80,2,6,0,75,2,6,0,70,2,5,0,65,2,5,0,61,2,5,0,56,2,5,0,51,2,4,0,47,2,4,0,42,2,4,0,38,2,4,0,33,2,4,0,28,2,3,0,24,2,3,0,19,2,3,0,15,2,3,0,10,2,3,0,5,2,2,0,1,2,2,0,252,1,2,0,248,1,2,0,243,1,2,0,239,1,2,0,235,1,2,0,230,1,1,0,226,1,1,0,221,1,1,0,217,1,1,0,213,1,1,0,208,1,1,0,204,1,1,0,200,1,1,0,195,1,1,0,191,1,1,0,187,1,1,0,183,1,0,0,178,1,0,0,174,1,0,0,170,1,0,0,166,1,0,0,162,1,0,0,158,1,0,0,154,1,0,0,149,1,0,0,145,1,0,0,141,1,0,0,137,1,0,0,133,1,0,0,129,1,0,0,125,1,0,0,122,1,0,0,118,1,0,0,0,0,144,189,0,0,68,0,0,0,69,0,0,0,3,0,0,0,1,0,0,0,44,0,0,0,45,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,30,0,0,0,13,0,0,0,22,0,0,0,9,0,0,0,31,0,0,0,46,0,0,0,32,0,0,0,0,0,0,0,24,189,0,0,32,189,0,0,40,189,0,0,48,189,0,0,56,189,0,0,64,189,0,0,72,189,0,0,80,189,0,0,68,83,80,32,49,0,0,0,68,83,80,32,50,0,0,0,68,83,80,32,51,0,0,0,68,83,80,32,52,0,0,0,68,83,80,32,53,0,0,0,68,83,80,32,54,0,0,0,68,83,80,32,55,0,0,0,68,83,80,32,56,0,0,0,83,117,112,101,114,32,78,105,110,116,101,110,100,111,0,0,88,189,0,0,1,0,0,0,17,0,0,0,18,0,0,0,176,195,0,0,0,0,0,0,55,83,112,99,95,69,109,117,0,0,0,0,0,0,0,0,144,201,0,0,128,189,0,0,144,164,0,0,0,0,0,0,83,78,69,83,45,83,80,67,55,48,48,32,83,111,117,110,100,32,70,105,108,101,32,68,97,116,97,0,0,0,0,0,0,0,0,0,32,190,0,0,70,0,0,0,71,0,0,0,3,0,0,0,33,0,0,0,8,0,0,0,47,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,56,83,112,99,95,70,105,108,101,0,0,0,0,0,0,0,144,201,0,0,16,190,0,0,0,165,0,0,0,0,0,0,120,105,100,54,0,0,0,0,0,0,0,0,0,192,0,0,72,0,0,0,73,0,0,0,3,0,0,0,1,0,0,0,48,0,0,0,49,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,34,0,0,0,2,0,0,0,23,0,0,0,10,0,0,0,35,0,0,0,50,0,0,0,4,0,0,0,7,0,0,0,24,0,0,0,51,0,0,0,3,0,0,0,240,254,255,255,0,192,0,0,74,0,0,0,75,0,0,0,4,0,0,0,1,1,0,0,0,1,0,0,2,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,80,0,0,0,0,0,0,0,83,101,103,97,32,83,77,83,47,71,101,110,101,115,105,115,0,0,0,0,0,0,0,0,216,190,0,0,1,0,0,0,19,0,0,0,20,0,0,0,184,195,0,0,1,0,0,0,86,71,90,0,0,0,0,0,216,190,0,0,1,0,0,0,19,0,0,0,20,0,0,0,8,191,0,0,1,0,0,0,72,191,0,0,80,191,0,0,88,191,0,0,96,191,0,0,104,191,0,0,112,191,0,0,120,191,0,0,128,191,0,0,70,77,32,49,0,0,0,0,70,77,32,50,0,0,0,0,70,77,32,51,0,0,0,0,70,77,32,52,0,0,0,0,70,77,32,53,0,0,0,0,70,77,32,54,0,0,0,0,80,67,77,0,0,0,0,0,80,83,71,0,0,0,0,0,152,191,0,0,168,191,0,0,184,191,0,0,200,191,0,0,83,113,117,97,114,101,32,49,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,50,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,51,0,0,0,0,0,0,0,0,78,111,105,115,101,0,0,0,89,77,50,52,49,51,32,70,77,32,115,111,117,110,100,32,105,115,110,39,116,32,115,117,112,112,111,114,116,101,100,0,55,86,103,109,95,69,109,117,0,0,0,0,0,0,0,0,144,201,0,0,240,191,0,0,168,193,0,0,0,0,0,0,86,103,109,32,0,0,0,0,0,0,0,0,120,192,0,0,76,0,0,0,77,0,0,0,3,0,0,0,36,0,0,0,8,0,0,0,52,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,56,86,103,109,95,70,105,108,101,0,0,0,0,0,0,0,144,201,0,0,104,192,0,0,0,165,0,0,0,0,0,0,71,100,51,32,0,0,0,0,83,116,114,101,97,109,32,108,97,99,107,101,100,32,101,110,100,32,101,118,101,110,116,0,85,110,107,110,111,119,110,32,115,116,114,101,97,109,32,101,118,101,110,116,0,0,0,0,116,111,95,102,109,95,116,105,109,101,40,32,118,103,109,95,116,105,109,101,32,41,32,60,61,32,109,105,110,95,112,97,105,114,115,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,86,103,109,95,69,109,117,95,73,109,112,108,46,99,112,112,0,0,112,108,97,121,95,102,114,97,109,101,0,0,0,0,0,0,0,0,0,0,168,193,0,0,78,0,0,0,79,0,0,0,3,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,240,254,255,255,168,193,0,0,80,0,0,0,81,0,0,0,4,0,0,0,49,50,86,103,109,95,69,109,117,95,73,109,112,108,0,0,240,201,0,0,152,193,0,0,0,0,0,0,2,0,0,0,112,141,0,0,2,0,0,0,208,144,0,0,0,16,1,0,101,110,97,98,108,101,100,40,41,0,0,0,0,0,0,0,98,101,103,105,110,95,102,114,97,109,101,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,3,3,31,4,1,0,0,0,0,0,0,1,2,3,4,6,12,24,115,97,109,112,108,101,95,114,97,116,101,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,89,109,50,54,49,50,95,69,109,117,46,99,112,112,0,0,0,0,115,101,116,95,114,97,116,101,0,0,0,0,0,0,0,0,99,108,111,99,107,95,114,97,116,101,32,62,32,115,97,109,112,108,101,95,114,97,116,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,5,6,6,7,8,8,8,8,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,5,6,6,7,8,8,9,10,11,12,13,14,16,16,16,16,2,2,2,2,2,3,3,3,4,4,4,5,5,6,6,7,8,8,9,10,11,12,13,14,16,17,19,20,22,22,22,22,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,40,117,110,115,105,103,110,101,100,41,32,100,97,116,97,32,60,61,32,48,120,70,70,0,119,114,105,116,101,49,0,0,119,114,105,116,101,48,0,0,16,137,0,0,240,147,0,0,24,151,0,0,16,155,0,0,232,159,0,0,40,171,0,0,24,175,0,0,88,178,0,0,104,189,0,0,240,190,0,0,16,191,0,0,0,0,0,0,65,89,0,0,0,0,0,0,71,66,83,0,0,0,0,0,71,89,77,0,0,0,0,0,72,69,83,0,0,0,0,0,75,83,83,0,0,0,0,0,78,83,70,0,0,0,0,0,78,83,70,69,0,0,0,0,83,65,80,0,0,0,0,0,83,80,67,0,0,0,0,0,86,71,77,0,0,0,0,0,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,103,109,101,46,99,112,112,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,112,97,116,104,32,38,38,32,111,117,116,0,0,0,0,0,103,109,101,95,111,112,101,110,95,102,105,108,101,0,0,0,101,109,115,99,114,105,112,116,101,110,47,106,115,111,110,47,99,99,97,110,47,106,115,111,110,47,106,115,111,110,46,99,0,0,0,0,0,0,0,0,111,98,106,101,99,116,45,62,116,97,103,32,61,61,32,74,83,79,78,95,79,66,74,69,67,84,0,0,0,0,0,0,106,115,111,110,95,97,112,112,101,110,100,95,109,101,109,98,101,114,0,0,0,0,0,0,118,97,108,117,101,45,62,112,97,114,101,110,116,32,61,61,32,78,85,76,76,0,0,0,117,116,102,56,95,118,97,108,105,100,97,116,101,40,115,116,114,41,0,0,0,0,0,0,101,109,105,116,95,115,116,114,105,110,103,0,0,0,0,0,102,97,108,115,101,0,0,0,117,110,105,99,111,100,101,32,60,61,32,48,120,49,48,70,70,70,70,0,0,0,0,0,117,110,105,99,111,100,101,32,62,61,32,48,120,49,48,48,48,48,32,38,38,32,117,110,105,99,111,100,101,32,60,61,32,48,120,49,48,70,70,70,70,0,0,0,0,0,0,0,116,111,95,115,117,114,114,111,103,97,116,101,95,112,97,105,114,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,0,0,0,0,0,0,117,116,102,56,95,118,97,108,105,100,97,116,101,95,99,122,40,115,41,0,0,0,0,0,117,116,102,56,95,114,101,97,100,95,99,104,97,114,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,46,10,0,116,97,103,95,105,115,95,118,97,108,105,100,40,110,111,100,101,45,62,116,97,103,41,0,101,109,105,116,95,118,97,108,117,101,95,105,110,100,101,110,116,101,100,0,0,0,0,0,110,117,108,108,0,0,0,0,116,114,117,101,0,0,0,0,123,125,0,0,0,0,0,0,123,10,0,0,0,0,0,0,58,32,0,0,0,0,0,0,44,10,0,0,0,0,0,0,10,0,0,0,0,0,0,0,91,93,0,0,0,0,0,0,91,10,0,0,0,0,0,0,37,46,49,54,103,0,0,0,101,109,105,116,95,118,97,108,117,101,0,0,0,0,0,0,115,98,45,62,115,116,97,114,116,32,60,61,32,115,98,45,62,99,117,114,32,38,38,32,115,116,114,108,101,110,40,115,98,45,62,115,116,97,114,116,41,32,61,61,32,40,115,105,122,101,95,116,41,40,115,98,45,62,99,117,114,32,45,32,115,98,45,62,115,116,97,114,116,41,0,0,0,0,0,0,115,98,95,102,105,110,105,115,104,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,120,198,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,16,200,0,0,82,0,0,0,83,0,0,0,10,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,144,201,0,0,0,200,0,0,96,200,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,104,201,0,0,80,200,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,104,201,0,0,104,200,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,144,201,0,0,128,200,0,0,120,200,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,144,201,0,0,184,200,0,0,168,200,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,144,201,0,0,24,201,0,0,168,200,0,0,0,0,0,0,144,201,0,0,240,200,0,0,64,201,0,0,0,0,0,0,0,0,0,0,224,200,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,53,0,0,0,1,0,0,0,8,0,0,0,11,0,0,0,0,0,0,0,216,201,0,0,84,0,0,0,88,0,0,0,86,0,0,0,87,0,0,0,53,0,0,0,2,0,0,0,9,0,0,0,12,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,144,201,0,0,176,201,0,0,224,200,0,0,0,0,0,0,0,0,0,0,56,202,0,0,84,0,0,0,89,0,0,0,86,0,0,0,87,0,0,0,53,0,0,0,3,0,0,0,10,0,0,0,13,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,144,201,0,0,16,202,0,0,224,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+44856);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

   
  Module["_strncpy"] = _strncpy;

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getchar() {
      // int getchar(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getchar.html
      return _fgetc(HEAP32[((_stdin)>>2)]);
    }

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _fabs=Math_abs;

  var _floor=Math_floor;


  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  var _sin=Math_sin;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  var _BDtoILow=true;

  var _BDtoIHigh=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _cos=Math_cos;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

   
  Module["_strcpy"] = _strcpy;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vid": nullFunc_vid, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vid": invoke_vid, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_sin": _sin, "_getchar": _getchar, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_fread": _fread, "_lseek": _lseek, "_open": _open, "_vfprintf": _vfprintf, "___assert_fail": ___assert_fail, "_write": _write, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_fsync": _fsync, "_floor": _floor, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_pthread_getspecific": _pthread_getspecific, "_cos": _cos, "_fseek": _fseek, "_pthread_once": _pthread_once, "_pread": _pread, "_mkport": _mkport, "_fclose": _fclose, "_pthread_key_create": _pthread_key_create, "_feof": _feof, "_ftell": _ftell, "___errno_location": ___errno_location, "_recv": _recv, "_pthread_setspecific": _pthread_setspecific, "_fgetc": _fgetc, "_printf": _printf, "___cxa_throw": ___cxa_throw, "__exit": __exit, "_read": _read, "_fputc": _fputc, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "__formatString": __formatString, "_fopen": _fopen, "_exit": _exit, "_close": _close, "___cxa_pure_virtual": ___cxa_pure_virtual, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vid=env.invoke_vid;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _getchar=env._getchar;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _fread=env._fread;
  var _lseek=env._lseek;
  var _open=env._open;
  var _vfprintf=env._vfprintf;
  var ___assert_fail=env.___assert_fail;
  var _write=env._write;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _fsync=env._fsync;
  var _floor=env._floor;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _pthread_getspecific=env._pthread_getspecific;
  var _cos=env._cos;
  var _fseek=env._fseek;
  var _pthread_once=env._pthread_once;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var _pthread_key_create=env._pthread_key_create;
  var _feof=env._feof;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fgetc=env._fgetc;
  var _printf=env._printf;
  var ___cxa_throw=env.___cxa_throw;
  var __exit=env.__exit;
  var _read=env._read;
  var _fputc=env._fputc;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _fopen=env._fopen;
  var _exit=env._exit;
  var _close=env._close;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z12handle_errorPKc($str) {
 $str = $str|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($str|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $str;
  (_printf((8|0),($vararg_buffer|0))|0);
  (_getchar()|0);
  _exit(1);
  // unreachable;
 }
}
function _open_file($filename,$track) {
 $filename = $filename|0;
 $track = $track|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_gme_open_file($filename,24,44100)|0);
 __Z12handle_errorPKc($0);
 $1 = HEAP32[24>>2]|0;
 $2 = (_gme_start_track($1,$track)|0);
 __Z12handle_errorPKc($2);
 return;
}
function _start_track($track) {
 $track = $track|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24>>2]|0;
 $1 = (_gme_start_track($0,$track)|0);
 __Z12handle_errorPKc($1);
 return;
}
function _seek($msec) {
 $msec = $msec|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24>>2]|0;
 $1 = (_gme_seek($0,$msec)|0);
 __Z12handle_errorPKc($1);
 return;
}
function _current_time() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24>>2]|0;
 $1 = (_gme_tell($0)|0);
 return ($1|0);
}
function _generate_sound_data() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24>>2]|0;
 $1 = (_gme_play($0,16384,32)|0);
 __Z12handle_errorPKc($1);
 return (32|0);
}
function _track_has_ended() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24>>2]|0;
 $1 = (_gme_track_ended($0)|0);
 return ($1|0);
}
function _current_track() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24>>2]|0;
 $1 = (__ZNK9Music_Emu13current_trackEv($0)|0);
 return ($1|0);
}
function __ZNK9Music_Emu13current_trackEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 196|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _song_info($filename,$track) {
 $filename = $filename|0;
 $track = $track|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Z13json_mkobjectv()|0);
 HEAP32[32800>>2] = $0;
 $1 = (_gme_open_file($filename,32808,44100)|0);
 __Z12handle_errorPKc($1);
 $2 = HEAP32[32808>>2]|0;
 $3 = (_gme_track_info($2,32816,$track)|0);
 __Z12handle_errorPKc($3);
 $4 = HEAP32[32800>>2]|0;
 $5 = HEAP32[32816>>2]|0;
 $6 = (+($5|0));
 $7 = (__Z13json_mknumberd($6)|0);
 __Z18json_append_memberP8JsonNodePKcS0_($4,34624,$7);
 $8 = HEAP32[32800>>2]|0;
 $9 = HEAP32[((32816 + 4|0))>>2]|0;
 $10 = (+($9|0));
 $11 = (__Z13json_mknumberd($10)|0);
 __Z18json_append_memberP8JsonNodePKcS0_($8,34640,$11);
 $12 = HEAP32[32800>>2]|0;
 $13 = (__Z13json_mkstringPKc(((32816 + 16|0)))|0);
 __Z18json_append_memberP8JsonNodePKcS0_($12,34648,$13);
 $14 = HEAP32[32800>>2]|0;
 $15 = (__Z13json_mkstringPKc(((32816 + 272|0)))|0);
 __Z18json_append_memberP8JsonNodePKcS0_($14,34656,$15);
 $16 = HEAP32[32800>>2]|0;
 $17 = (__Z13json_mkstringPKc(((32816 + 528|0)))|0);
 __Z18json_append_memberP8JsonNodePKcS0_($16,34664,$17);
 $18 = HEAP32[32800>>2]|0;
 $19 = (__Z13json_mkstringPKc(((32816 + 784|0)))|0);
 __Z18json_append_memberP8JsonNodePKcS0_($18,34672,$19);
 $20 = HEAP32[32800>>2]|0;
 $21 = (__Z13json_mkstringPKc(((32816 + 1040|0)))|0);
 __Z18json_append_memberP8JsonNodePKcS0_($20,34680,$21);
 $22 = HEAP32[32800>>2]|0;
 $23 = (__Z13json_mkstringPKc(((32816 + 1296|0)))|0);
 __Z18json_append_memberP8JsonNodePKcS0_($22,34696,$23);
 $24 = HEAP32[32800>>2]|0;
 $25 = (__Z13json_mkstringPKc(((32816 + 1552|0)))|0);
 __Z18json_append_memberP8JsonNodePKcS0_($24,34704,$25);
 $26 = HEAP32[32800>>2]|0;
 $27 = (__Z14json_stringifyPK8JsonNodePKc($26,34712)|0);
 return ($27|0);
}
function __ZN6Ay_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $flags$05 = 0, $out$07 = 0;
 var $phitmp = 0, $scevgep = 0, $x$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 480|0);
 __ZN10Blip_SynthILi12ELi1EEC2Ev($0);
 $2 = 7;
 while(1) {
  $4 = ((($this) + (($2*48)|0)|0) + 92|0);
  $5 = (34720 + ($2)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $flags$05 = $7;$out$07 = $4;$x$06 = 2;
  while(1) {
   $8 = $flags$05 & 1;
   $9 = (0 - ($8))|0;
   $10 = $flags$05 >>> 1;
   $11 = $10 & 1;
   $12 = (($11) - ($8))|0;
   $13 = $9 & 15;
   $14 = (34728 + ($13)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = (($out$07) + 1|0);
   HEAP8[$out$07>>0] = $15;
   $17 = (($12) + ($13))|0;
   $18 = (34728 + ($17)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = (($out$07) + 2|0);
   HEAP8[$16>>0] = $19;
   $21 = (($12) + ($17))|0;
   $22 = (34728 + ($21)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = (($out$07) + 3|0);
   HEAP8[$20>>0] = $23;
   $25 = (($12) + ($21))|0;
   $26 = (34728 + ($25)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = (($out$07) + 4|0);
   HEAP8[$24>>0] = $27;
   $29 = (($12) + ($25))|0;
   $30 = (34728 + ($29)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = (($out$07) + 5|0);
   HEAP8[$28>>0] = $31;
   $33 = (($12) + ($29))|0;
   $34 = (34728 + ($33)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = (($out$07) + 6|0);
   HEAP8[$32>>0] = $35;
   $37 = (($12) + ($33))|0;
   $38 = (34728 + ($37)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = (($out$07) + 7|0);
   HEAP8[$36>>0] = $39;
   $41 = (($12) + ($37))|0;
   $42 = (34728 + ($41)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = (($out$07) + 8|0);
   HEAP8[$40>>0] = $43;
   $45 = (($12) + ($41))|0;
   $46 = (34728 + ($45)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = (($out$07) + 9|0);
   HEAP8[$44>>0] = $47;
   $49 = (($12) + ($45))|0;
   $50 = (34728 + ($49)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = (($out$07) + 10|0);
   HEAP8[$48>>0] = $51;
   $53 = (($12) + ($49))|0;
   $54 = (34728 + ($53)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = (($out$07) + 11|0);
   HEAP8[$52>>0] = $55;
   $57 = (($12) + ($53))|0;
   $58 = (34728 + ($57)|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = (($out$07) + 12|0);
   HEAP8[$56>>0] = $59;
   $61 = (($12) + ($57))|0;
   $62 = (34728 + ($61)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = (($out$07) + 13|0);
   HEAP8[$60>>0] = $63;
   $65 = (($12) + ($61))|0;
   $66 = (34728 + ($65)|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = (($out$07) + 14|0);
   HEAP8[$64>>0] = $67;
   $69 = (($12) + ($65))|0;
   $70 = (34728 + ($69)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = (($out$07) + 15|0);
   HEAP8[$68>>0] = $71;
   $73 = (($12) + ($69))|0;
   $74 = (34728 + ($73)|0);
   $75 = HEAP8[$74>>0]|0;
   HEAP8[$72>>0] = $75;
   $scevgep = (($out$07) + 16|0);
   $76 = $flags$05 >> 2;
   $phitmp = (($x$06) + -1)|0;
   $77 = ($phitmp|0)>(-1);
   if ($77) {
    $flags$05 = $76;$out$07 = $scevgep;$x$06 = $phitmp;
   } else {
    break;
   }
  }
  $1 = (($2) + -1)|0;
  $3 = ($2|0)==(0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 __ZN6Ay_Apu6outputEP11Blip_Buffer($this,0);
 __ZN6Ay_Apu6volumeEd($this,1.0);
 __ZN6Ay_Apu5resetEv($this);
 return;
}
function __ZN6Ay_Apu5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 72|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 76|0);
 HEAP32[$2>>2] = 1;
 $3 = (($this) + 32|0);
 HEAP32[$3>>2] = 16;
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = (($this) + 40|0);
 HEAP16[$5>>1] = 0;
 $6 = (($this) + 42|0);
 HEAP16[$6>>1] = 0;
 $7 = (($this) + 16|0);
 HEAP32[$7>>2] = 16;
 $8 = (($this) + 20|0);
 HEAP32[$8>>2] = 0;
 $9 = (($this) + 24|0);
 HEAP16[$9>>1] = 0;
 $10 = (($this) + 26|0);
 HEAP16[$10>>1] = 0;
 HEAP32[$this>>2] = 16;
 $11 = (($this) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = (($this) + 8|0);
 HEAP16[$12>>1] = 0;
 $13 = (($this) + 10|0);
 HEAP16[$13>>1] = 0;
 $14 = (($this) + 53|0);
 $15 = (($this) + 60|0);
 dest=$14+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP8[$15>>0] = -1;
 __ZN6Ay_Apu11write_data_Eii($this,13,0);
 return;
}
function __ZN6Ay_Apu11write_data_Eii($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($addr>>>0)<(16);
 if (!($0)) {
  ___assert_fail((41200|0),(34744|0),122,(34792|0));
  // unreachable;
 }
 $1 = ($addr|0)==(13);
 if ($1) {
  $2 = $data & 8;
  $3 = ($2|0)==(0);
  if ($3) {
   $4 = $data & 4;
   $5 = ($4|0)!=(0);
   $6 = $5 ? 15 : 9;
   $$0 = $6;
  } else {
   $$0 = $data;
  }
  $7 = (($$0) + -7)|0;
  $8 = ((($this) + (($7*48)|0)|0) + 92|0);
  $9 = (($this) + 84|0);
  HEAP32[$9>>2] = $8;
  $10 = (($this) + 88|0);
  HEAP32[$10>>2] = -48;
  $11 = (($this) + 80|0);
  HEAP32[$11>>2] = 0;
  $$1 = $$0;
 } else {
  $$1 = $data;
 }
 $12 = $$1&255;
 $13 = ((($this) + ($addr)|0) + 53|0);
 HEAP8[$13>>0] = $12;
 $14 = $addr >> 1;
 $15 = ($14|0)<(3);
 if (!($15)) {
  return;
 }
 $16 = $14 << 1;
 $17 = $16 | 1;
 $18 = ((($this) + ($17)|0) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 12;
 $22 = $21 & 61440;
 $23 = ((($this) + ($16)|0) + 53|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 4;
 $27 = $22 | $26;
 $28 = ($27|0)!=(0);
 $$ = $28 ? $27 : 16;
 $29 = (($this) + ($14<<4)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($$) - ($30))|0;
 $32 = ((($this) + ($14<<4)|0) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + ($33))|0;
 $35 = ($34|0)<(0);
 $$2 = $35 ? 0 : $34;
 HEAP32[$32>>2] = $$2;
 HEAP32[$29>>2] = $$;
 return;
}
function __ZN6Ay_Apu9run_untilEi($this,$final_end_time) {
 $this = $this|0;
 $final_end_time = $final_end_time|0;
 var $$ = 0, $$2 = 0, $$6 = 0, $$8 = 0, $$8$v = 0, $$9 = 0, $$final_end_time = 0, $$lcssa = 0, $$osc_mode$0 = 0, $$osc_mode$05 = 0, $$volume$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $delta1$0 = 0, $delta1$119 = 0, $delta1$2 = 0, $delta1$3 = 0, $delta1$4$lcssa = 0, $delta1$5 = 0, $end_time$0 = 0, $end_time$1 = 0, $exitcond = 0, $final_end_time$ = 0, $final_end_time$10 = 0, $half_vol$0 = 0, $index$032 = 0, $noise_lfsr$0 = 0, $noise_lfsr$1 = 0;
 var $noise_lfsr$218 = 0, $noise_lfsr$3 = 0, $noise_lfsr$4 = 0, $noise_lfsr$4$lcssa = 0, $ntime$0 = 0, $ntime$1 = 0, $ntime$217 = 0, $ntime$3 = 0, $ntime$3$end_time$1 = 0, $ntime$4 = 0, $ntime$4$lcssa = 0, $or$cond = 0, $or$cond4 = 0, $or$cond7 = 0, $osc_env_pos$0 = 0, $osc_mode$0 = 0, $osc_mode$1 = 0, $phase$0 = 0, $phase$128 = 0, $phase$2 = 0;
 var $start_time$0 = 0, $start_time$0$phi = 0, $time$0 = 0, $time$1 = 0, $time$2 = 0, $time$2$end_time$1 = 0, $time$3$lcssa = 0, $time$322 = 0, $time$427 = 0, $time$5 = 0, $time$6 = 0, $time$6$lcssa = 0, $volume$0 = 0, $volume$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($final_end_time|0);
 if ($2) {
  ___assert_fail((34808|0),(34744|0),166,(46400|0));
  // unreachable;
 }
 $3 = (($this) + 59|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 5;
 $7 = $6 & 992;
 $8 = ($7|0)!=(0);
 $$ = $8 ? $7 : 32;
 $9 = (($this) + 72|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($this) + 76|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($this) + 65|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = (($this) + 64|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $16 | $19;
 $21 = $20 << 5;
 $22 = ($20|0)!=(0);
 $$2 = $22 ? $21 : 32;
 $23 = (($this) + 80|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  HEAP32[$23>>2] = $$2;
 }
 $26 = (($this) + 60|0);
 $27 = (($this) + 88|0);
 $28 = (($final_end_time) + -1)|0;
 $29 = (($this) + 480|0);
 $30 = (($this) + 480|0);
 $31 = (($this) + 84|0);
 $32 = (($this) + 480|0);
 $33 = (($this) + 84|0);
 $34 = (($this) + 66|0);
 $index$032 = 0;
 while(1) {
  $35 = HEAP8[$26>>0]|0;
  $36 = $35&255;
  $37 = $36 >>> $index$032;
  $38 = ((($this) + ($index$032<<4)|0) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   __ZN11Blip_Buffer12set_modifiedEv($39);
   $41 = (__ZNK11Blip_Buffer10clock_rateEv($39)|0);
   $42 = (($41) + 16384)|0;
   $43 = $42 >>> 15;
   $44 = (($this) + ($index$032<<4)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)<=($43|0);
   $47 = $37 & 1;
   $48 = ($47|0)==(0);
   $or$cond4 = $46 & $48;
   $half_vol$0 = $or$cond4&1;
   $49 = $or$cond4&1;
   $osc_mode$0 = $49 | $37;
   $50 = HEAP32[$0>>2]|0;
   $51 = (($index$032) + 8)|0;
   $52 = ((($this) + ($51)|0) + 53|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = $54 & 15;
   $56 = (34728 + ($55)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 >>> $half_vol$0;
   $60 = HEAP32[$27>>2]|0;
   $61 = $54 & 16;
   $62 = ($61|0)==(0);
   do {
    if ($62) {
     $76 = ($59|0)==(0);
     $$osc_mode$05 = $76 ? 9 : $osc_mode$0;
     $end_time$0 = $final_end_time;$osc_mode$1 = $$osc_mode$05;$volume$0 = $59;
    } else {
     $63 = HEAP32[$33>>2]|0;
     $64 = (($63) + ($60)|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65&255;
     $67 = $66 >>> $half_vol$0;
     $68 = HEAP8[$34>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     $71 = ($60|0)<(-32);
     $or$cond = $70 | $71;
     if ($or$cond) {
      $72 = HEAP32[$23>>2]|0;
      $73 = (($72) + ($50))|0;
      $74 = ($73|0)<($final_end_time|0);
      $$final_end_time = $74 ? $73 : $final_end_time;
      $end_time$0 = $$final_end_time;$osc_mode$1 = $osc_mode$0;$volume$0 = $67;
      break;
     } else {
      $75 = ($67|0)==(0);
      $$osc_mode$0 = $75 ? 9 : $osc_mode$0;
      $end_time$0 = $final_end_time;$osc_mode$1 = $$osc_mode$0;$volume$0 = $67;
      break;
     }
    }
   } while(0);
   $77 = HEAP32[$44>>2]|0;
   $78 = ((($this) + ($index$032<<4)|0) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + ($50))|0;
   $81 = $osc_mode$1 & 1;
   $82 = ($81|0)!=(0);
   if ($82) {
    $83 = (($28) + ($77))|0;
    $84 = (($83) - ($80))|0;
    $85 = (($84|0) / ($77|0))&-1;
    $86 = Math_imul($85, $77)|0;
    $87 = (($86) + ($80))|0;
    $88 = $85 & 1;
    $89 = ((($this) + ($index$032<<4)|0) + 10|0);
    $90 = HEAP16[$89>>1]|0;
    $91 = $90&65535;
    $92 = $91 ^ $88;
    $93 = $92&65535;
    HEAP16[$89>>1] = $93;
    $time$0 = $87;
   } else {
    $time$0 = $80;
   }
   $94 = $osc_mode$1 & 8;
   $95 = ($94|0)!=(0);
   $96 = (($50) + ($10))|0;
   $final_end_time$ = $95 ? $final_end_time : $96;
   $$6 = $95 ? 1 : $12;
   $97 = ((($this) + ($index$032<<4)|0) + 10|0);
   $98 = $osc_mode$1 >>> 3;
   $99 = ((($this) + ($index$032<<4)|0) + 8|0);
   $end_time$1 = $end_time$0;$noise_lfsr$0 = $$6;$ntime$0 = $final_end_time$;$osc_env_pos$0 = $60;$start_time$0 = $50;$time$1 = $time$0;$volume$1 = $volume$0;
   while(1) {
    $100 = HEAP16[$97>>1]|0;
    $101 = $100&65535;
    $102 = $101 | $osc_mode$1;
    $103 = $noise_lfsr$0 | $98;
    $104 = $103 & 1;
    $105 = $104 & $102;
    $106 = ($105|0)==(0);
    $$volume$1 = $106 ? 0 : $volume$1;
    $107 = HEAP16[$99>>1]|0;
    $108 = $107 << 16 >> 16;
    $109 = ($$volume$1|0)==($108|0);
    if (!($109)) {
     $110 = (($$volume$1) - ($108))|0;
     $111 = $$volume$1&65535;
     HEAP16[$99>>1] = $111;
     __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($32,$start_time$0,$110,$39);
    }
    $112 = ($ntime$0|0)<($end_time$1|0);
    $113 = ($time$1|0)<($end_time$1|0);
    $or$cond7 = $112 | $113;
    if ($or$cond7) {
     $114 = $$volume$1 << 1;
     $115 = (($114) - ($volume$1))|0;
     $116 = ($114|0)!=($volume$1|0);
     $117 = $116&1;
     $118 = HEAP16[$97>>1]|0;
     $119 = $118 << 16 >> 16;
     $120 = $119 | $81;
     $delta1$0 = $115;$noise_lfsr$1 = $noise_lfsr$0;$ntime$1 = $ntime$0;$phase$0 = $120;$time$2 = $time$1;
     while(1) {
      $121 = ($end_time$1|0)>($time$2|0);
      $time$2$end_time$1 = $121 ? $time$2 : $end_time$1;
      $122 = $phase$0 & $117;
      $123 = ($122|0)==(0);
      if ($123) {
       $136 = (($time$2$end_time$1) - ($ntime$1))|0;
       $137 = ($136|0)>(-1);
       if ($137) {
        $138 = (($136|0) % ($$|0))&-1;
        $139 = (($time$2$end_time$1) + ($$))|0;
        $140 = (($139) - ($138))|0;
        $delta1$3 = $delta1$0;$noise_lfsr$3 = $noise_lfsr$1;$ntime$3 = $140;
       } else {
        $delta1$3 = $delta1$0;$noise_lfsr$3 = $noise_lfsr$1;$ntime$3 = $ntime$1;
       }
      } else {
       $124 = ($time$2$end_time$1|0)<($ntime$1|0);
       if ($124) {
        $delta1$3 = $delta1$0;$noise_lfsr$3 = $noise_lfsr$1;$ntime$3 = $ntime$1;
       } else {
        $delta1$119 = $delta1$0;$noise_lfsr$218 = $noise_lfsr$1;$ntime$217 = $ntime$1;
        while(1) {
         $125 = (($noise_lfsr$218) + 1)|0;
         $126 = $noise_lfsr$218 & 1;
         $127 = (0 - ($126))|0;
         $128 = $127 & 73728;
         $129 = $noise_lfsr$218 >>> 1;
         $130 = $128 ^ $129;
         $131 = $125 & 2;
         $132 = ($131|0)==(0);
         if ($132) {
          $delta1$2 = $delta1$119;
         } else {
          $133 = (0 - ($delta1$119))|0;
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($30,$ntime$217,$133,$39);
          $delta1$2 = $133;
         }
         $134 = (($ntime$217) + ($$))|0;
         $135 = ($134|0)>($time$2$end_time$1|0);
         if ($135) {
          $delta1$3 = $delta1$2;$noise_lfsr$3 = $130;$ntime$3 = $134;
          break;
         } else {
          $delta1$119 = $delta1$2;$noise_lfsr$218 = $130;$ntime$217 = $134;
         }
        }
       }
      }
      $141 = ($end_time$1|0)>($ntime$3|0);
      $ntime$3$end_time$1 = $141 ? $ntime$3 : $end_time$1;
      $142 = $noise_lfsr$3 & $117;
      $143 = ($142|0)==(0);
      $144 = ($time$2|0)<($ntime$3$end_time$1|0);
      if ($143) {
       if ($144) {
        $phase$128 = $phase$0;$time$427 = $time$2;
        while(1) {
         $151 = (($time$427) + ($77))|0;
         $152 = $phase$128 ^ 1;
         $153 = ($151|0)<($ntime$3$end_time$1|0);
         if ($153) {
          $phase$128 = $152;$time$427 = $151;
         } else {
          $delta1$5 = $delta1$3;$phase$2 = $152;$time$5 = $151;
          break;
         }
        }
       } else {
        $delta1$5 = $delta1$3;$phase$2 = $phase$0;$time$5 = $time$2;
       }
      } else {
       $145 = (0 - ($delta1$3))|0;
       if ($144) {
        $146 = $145;$time$322 = $time$2;
        while(1) {
         __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($29,$time$322,$146,$39);
         $147 = (($time$322) + ($77))|0;
         $148 = ($147|0)<($ntime$3$end_time$1|0);
         $149 = (0 - ($146))|0;
         if ($148) {
          $146 = $149;$time$322 = $147;
         } else {
          $$lcssa = $149;$delta1$4$lcssa = $146;$time$3$lcssa = $147;
          break;
         }
        }
       } else {
        $$lcssa = $145;$delta1$4$lcssa = $delta1$3;$time$3$lcssa = $time$2;
       }
       $150 = $$lcssa >>> 31;
       $delta1$5 = $delta1$4$lcssa;$phase$2 = $150;$time$5 = $time$3$lcssa;
      }
      $154 = ($time$5|0)<($end_time$1|0);
      $brmerge = $154 | $141;
      if ($brmerge) {
       $delta1$0 = $delta1$5;$noise_lfsr$1 = $noise_lfsr$3;$ntime$1 = $ntime$3;$phase$0 = $phase$2;$time$2 = $time$5;
      } else {
       break;
      }
     }
     $155 = (($delta1$5) + ($volume$1))|0;
     $156 = $155 >>> 1;
     $157 = $156&65535;
     HEAP16[$99>>1] = $157;
     if ($82) {
      $noise_lfsr$4 = $noise_lfsr$3;$ntime$4 = $ntime$3;$time$6 = $time$5;
     } else {
      $158 = $phase$2&65535;
      HEAP16[$97>>1] = $158;
      $noise_lfsr$4 = $noise_lfsr$3;$ntime$4 = $ntime$3;$time$6 = $time$5;
     }
    } else {
     $noise_lfsr$4 = $noise_lfsr$0;$ntime$4 = $ntime$0;$time$6 = $time$1;
    }
    $159 = ($end_time$1|0)<($final_end_time|0);
    if (!($159)) {
     $noise_lfsr$4$lcssa = $noise_lfsr$4;$ntime$4$lcssa = $ntime$4;$time$6$lcssa = $time$6;
     break;
    }
    $160 = ($osc_env_pos$0|0)>(-2);
    $$8$v = $160 ? -31 : 1;
    $$8 = (($$8$v) + ($osc_env_pos$0))|0;
    $161 = HEAP32[$31>>2]|0;
    $162 = (($161) + ($$8)|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = $164 >>> $half_vol$0;
    $166 = (($end_time$1) + ($$2))|0;
    $167 = ($166|0)>($final_end_time|0);
    $final_end_time$10 = $167 ? $final_end_time : $166;
    $start_time$0$phi = $end_time$1;$end_time$1 = $final_end_time$10;$noise_lfsr$0 = $noise_lfsr$4;$ntime$0 = $ntime$4;$osc_env_pos$0 = $$8;$time$1 = $time$6;$volume$1 = $165;$start_time$0 = $start_time$0$phi;
   }
   $168 = (($time$6$lcssa) - ($final_end_time))|0;
   HEAP32[$78>>2] = $168;
   if (!($95)) {
    $169 = (($ntime$4$lcssa) - ($final_end_time))|0;
    HEAP32[$9>>2] = $169;
    HEAP32[$11>>2] = $noise_lfsr$4$lcssa;
   }
  }
  $170 = (($index$032) + 1)|0;
  $exitcond = ($170|0)==(3);
  if ($exitcond) {
   break;
  } else {
   $index$032 = $170;
  }
 }
 $171 = HEAP32[$0>>2]|0;
 $172 = (($final_end_time) - ($171))|0;
 $173 = HEAP32[$23>>2]|0;
 $174 = (($172) - ($173))|0;
 $175 = ($174|0)>(-1);
 if ($175) {
  $177 = (($174) + ($$2))|0;
  $178 = (($177|0) / ($$2|0))&-1;
  $179 = (($this) + 88|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + ($178))|0;
  $182 = ($181|0)>(-1);
  $183 = $181 | -32;
  $$9 = $182 ? $183 : $181;
  HEAP32[$179>>2] = $$9;
  $184 = Math_imul($178, $$2)|0;
  $185 = (($174) - ($184))|0;
  $186 = (0 - ($185))|0;
  $187 = ($$2|0)<($186|0);
  if ($187) {
   ___assert_fail((34840|0),(34744|0),388,(46400|0));
   // unreachable;
  }
  $188 = (0 - ($185))|0;
  HEAP32[$23>>2] = $188;
  $189 = ($185|0)<(0);
  if (!($189)) {
   ___assert_fail((34864|0),(34744|0),391,(46400|0));
   // unreachable;
  }
 } else {
  $176 = (0 - ($174))|0;
  HEAP32[$23>>2] = $176;
 }
 $190 = (($this) + 88|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = ($191|0)<(0);
 if ($192) {
  HEAP32[$0>>2] = $final_end_time;
  return;
 } else {
  ___assert_fail((34880|0),(34744|0),392,(46400|0));
  // unreachable;
 }
}
function __ZN10Blip_SynthILi12ELi1EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 __ZN11Blip_Synth_C2EPsi($this,$0,12);
 return;
}
function __ZN6Ay_Apu6outputEP11Blip_Buffer($this,$buf) {
 $this = $this|0;
 $buf = $buf|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
 __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
 __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
 return;
}
function __ZN6Ay_Apu6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 480|0);
 $1 = $v * 9.1503267973856196E-4;
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($0,$1);
 return;
}
function __ZN11Blip_Buffer12set_modifiedEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 HEAP32[$0>>2] = 1;
 return;
}
function __ZNK11Blip_Buffer10clock_rateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($this,$t,$delta,$buf) {
 $this = $this|0;
 $t = $t|0;
 $delta = $delta|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$buf>>2]|0;
 $1 = Math_imul($0, $t)|0;
 $2 = (($buf) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3))|0;
 __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$4,$delta,$buf);
 return;
}
function __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf) {
 $this = $this|0;
 $i = $i|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i>>>0)<(3);
 if ($0) {
  $1 = ((($this) + ($i<<4)|0) + 12|0);
  HEAP32[$1>>2] = $buf;
  return;
 } else {
  ___assert_fail((45096|0),(35328|0),87,(46296|0));
  // unreachable;
 }
}
function __ZN10Blip_SynthILi12ELi1EE6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Blip_Synth_11volume_unitEd($this,$v);
 return;
}
function __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$time,$delta,$blip_buf) {
 $this = $this|0;
 $time = $time|0;
 $delta = $delta|0;
 $blip_buf = $blip_buf|0;
 var $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1415 = 0, $$sum16 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum2021 = 0, $$sum22 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum2627 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum45 = 0, $$sum6 = 0;
 var $$sum7 = 0, $$sum8 = 0, $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $time >>> 16;
 $1 = (($blip_buf) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)<($2|0);
 if ($3) {
  $4 = (($this) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = Math_imul($5, $delta)|0;
  $7 = (($blip_buf) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $time >>> 10;
  $10 = $9 & 63;
  $$sum = (64 - ($10))|0;
  $11 = ((($this) + ($$sum<<1)|0) + 40|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = Math_imul($13, $6)|0;
  $$sum1 = (($0) + 2)|0;
  $15 = (($8) + ($$sum1<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + ($16))|0;
  $$sum2 = (($$sum) + 64)|0;
  $18 = ((($this) + ($$sum2<<1)|0) + 40|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = Math_imul($20, $6)|0;
  $$sum3 = (($0) + 3)|0;
  $22 = (($8) + ($$sum3<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23))|0;
  $$sum45 = $$sum | 128;
  $25 = ((($this) + ($$sum45<<1)|0) + 40|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  HEAP32[$15>>2] = $17;
  HEAP32[$22>>2] = $24;
  $28 = Math_imul($27, $6)|0;
  $$sum6 = (($0) + 4)|0;
  $29 = (($8) + ($$sum6<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + ($30))|0;
  $$sum7 = (($$sum) + 192)|0;
  $32 = ((($this) + ($$sum7<<1)|0) + 40|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = Math_imul($34, $6)|0;
  $$sum8 = (($0) + 5)|0;
  $36 = (($8) + ($$sum8<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + ($37))|0;
  $$sum910 = $$sum | 256;
  $39 = ((($this) + ($$sum910<<1)|0) + 40|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  HEAP32[$29>>2] = $31;
  HEAP32[$36>>2] = $38;
  $42 = Math_imul($41, $6)|0;
  $$sum11 = (($0) + 6)|0;
  $43 = (($8) + ($$sum11<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($42) + ($44))|0;
  $$sum12 = (($$sum) + 320)|0;
  $46 = ((($this) + ($$sum12<<1)|0) + 40|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = Math_imul($48, $6)|0;
  $$sum13 = (($0) + 7)|0;
  $50 = (($8) + ($$sum13<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51))|0;
  $53 = ((($this) + ($10<<1)|0) + 40|0);
  $$sum1415 = $10 | 320;
  $54 = ((($this) + ($$sum1415<<1)|0) + 40|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  HEAP32[$43>>2] = $45;
  HEAP32[$50>>2] = $52;
  $57 = Math_imul($56, $6)|0;
  $$sum16 = (($0) + 8)|0;
  $58 = (($8) + ($$sum16<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + ($59))|0;
  $$sum1718 = $10 | 256;
  $61 = ((($this) + ($$sum1718<<1)|0) + 40|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 << 16 >> 16;
  $64 = Math_imul($63, $6)|0;
  $$sum19 = (($0) + 9)|0;
  $65 = (($8) + ($$sum19<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + ($66))|0;
  $$sum2021 = $10 | 192;
  $68 = ((($this) + ($$sum2021<<1)|0) + 40|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  HEAP32[$58>>2] = $60;
  HEAP32[$65>>2] = $67;
  $71 = Math_imul($70, $6)|0;
  $$sum22 = (($0) + 10)|0;
  $72 = (($8) + ($$sum22<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + ($73))|0;
  $$sum2324 = $10 | 128;
  $75 = ((($this) + ($$sum2324<<1)|0) + 40|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = Math_imul($77, $6)|0;
  $$sum25 = (($0) + 11)|0;
  $79 = (($8) + ($$sum25<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + ($80))|0;
  $$sum2627 = $10 | 64;
  $82 = ((($this) + ($$sum2627<<1)|0) + 40|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  HEAP32[$72>>2] = $74;
  HEAP32[$79>>2] = $81;
  $85 = Math_imul($84, $6)|0;
  $$sum28 = (($0) + 12)|0;
  $86 = (($8) + ($$sum28<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) + ($87))|0;
  $89 = HEAP16[$53>>1]|0;
  $90 = $89 << 16 >> 16;
  $91 = Math_imul($90, $6)|0;
  $$sum29 = (($0) + 13)|0;
  $92 = (($8) + ($$sum29<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + ($93))|0;
  HEAP32[$86>>2] = $88;
  HEAP32[$92>>2] = $94;
  return;
 } else {
  ___assert_fail((43008|0),(43080|0),343,(43128|0));
  // unreachable;
 }
}
function __ZN6Ay_CpuC2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $even$0$lcssa = 0, $even$01 = 0, $i$03 = 0, $p$02 = 0, $phitmp = 0, $phitmp4 = 0, $phitmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 524|0);
 $1 = (($this) + 520|0);
 HEAP32[$1>>2] = $0;
 $i$03 = 255;
 while(1) {
  $2 = ($i$03|0)==(0);
  if ($2) {
   $even$0$lcssa = 4;
  } else {
   $even$01 = 1;$p$02 = $i$03;
   while(1) {
    $3 = $p$02 ^ $even$01;
    $4 = $p$02 >> 1;
    $5 = ($4|0)==(0);
    if ($5) {
     $$lcssa = $3;
     break;
    } else {
     $even$01 = $3;$p$02 = $4;
    }
   }
   $phitmp4 = $$lcssa << 2;
   $phitmp5 = $phitmp4 & 4;
   $even$0$lcssa = $phitmp5;
  }
  $6 = $i$03 & 168;
  $7 = $even$0$lcssa | $6;
  $8 = $7&255;
  $9 = (($this) + ($i$03)|0);
  HEAP8[$9>>0] = $8;
  $10 = $7 | 1;
  $11 = $10&255;
  $12 = (($i$03) + 256)|0;
  $13 = (($this) + ($12)|0);
  HEAP8[$13>>0] = $11;
  $phitmp = (($i$03) + -1)|0;
  $14 = ($phitmp|0)>(-1);
  if ($14) {
   $i$03 = $phitmp;
  } else {
   break;
  }
 }
 $15 = HEAP8[$this>>0]|0;
 $16 = $15&255;
 $17 = $16 | 64;
 $18 = $17&255;
 HEAP8[$this>>0] = $18;
 $19 = (($this) + 256|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 | 64;
 $23 = $22&255;
 HEAP8[$19>>0] = $23;
 return;
}
function __ZN6Ay_Cpu5resetEPv($this,$m) {
 $this = $this|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 512|0);
 HEAP32[$0>>2] = $m;
 $1 = (($this) + 524|0);
 $2 = (($this) + 520|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 516|0);
 HEAP32[$3>>2] = 0;
 dest=$1+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$1+36>>1]=0|0;
 return;
}
function __ZN6Ay_Cpu3runEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$ = 0, $$14 = 0, $$14$v = 0, $$17 = 0, $$18 = 0, $$18$v = 0, $$19 = 0, $$20 = 0, $$21 = 0, $$21$v = 0, $$22 = 0, $$24 = 0, $$25 = 0, $$27 = 0, $$28 = 0, $$29 = 0, $$flags$0 = 0, $$in = 0, $$in$lcssa162 = 0, $$lcssa159 = 0;
 var $$masked = 0, $$masked8 = 0, $$pc$1 = 0, $$pc$123 = 0, $$sink = 0, $$sink$in = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0;
 var $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0;
 var $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0;
 var $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0;
 var $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0;
 var $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0;
 var $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0;
 var $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0;
 var $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0;
 var $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0;
 var $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0;
 var $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0;
 var $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0;
 var $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0;
 var $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0;
 var $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0;
 var $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0;
 var $1474 = 0, $1475 = 0, $1476 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $adjust$0 = 0, $adjust$0$ = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$18 = 0;
 var $data$19 = 0, $data$2 = 0, $data$3 = 0, $data$4 = 0, $data$5 = 0, $data$6 = 0, $data$7 = 0, $data$8 = 0, $data$9 = 0, $data269$0 = 0, $data269$1 = 0, $flags$0$be = 0, $flags$033 = 0, $flags$061 = 0, $flags$061$lcssa177 = 0, $flags$1 = 0, $flags$10 = 0, $flags$11 = 0, $flags$2 = 0, $flags$3 = 0;
 var $flags$4 = 0, $flags$6 = 0, $flags$8 = 0, $flags$9 = 0, $inc$0 = 0, $inc59$0 = 0, $inc62$0 = 0, $inc65$0 = 0, $ix$0$be = 0, $ix$041 = 0, $ix$082 = 0, $ix$082$lcssa171 = 0, $ix$1 = 0, $ix$2 = 0, $ixy$0 = 0, $ixy$1 = 0, $ixy$1$ix$0 = 0, $ixy$2 = 0, $ixy$2$ix$0 = 0, $ixy$3 = 0;
 var $ixy$3$ix$0 = 0, $iy$0$be = 0, $iy$0$ixy$1 = 0, $iy$0$ixy$2 = 0, $iy$0$ixy$3 = 0, $iy$037 = 0, $iy$067 = 0, $iy$067$lcssa174 = 0, $iy$1 = 0, $iy$2 = 0, $opcode$0 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond1360 = 0, $or$cond16 = 0, $or$cond3 = 0, $or$cond5 = 0, $pc$0 = 0, $pc$1$ = 0, $pc$1$26 = 0;
 var $pc$1$be = 0, $pc$10 = 0, $pc$11 = 0, $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$149 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$2 = 0, $pc$20 = 0, $pc$21 = 0, $pc$22 = 0, $pc$23 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0;
 var $pc$8 = 0, $pc$9 = 0, $s = 0, $s_time$0 = 0, $s_time$1$be = 0, $s_time$10 = 0, $s_time$11 = 0, $s_time$12 = 0, $s_time$13 = 0, $s_time$14 = 0, $s_time$15 = 0, $s_time$16 = 0, $s_time$17 = 0, $s_time$18 = 0, $s_time$19 = 0, $s_time$2 = 0, $s_time$22 = 0, $s_time$3 = 0, $s_time$4 = 0, $s_time$5 = 0;
 var $s_time$6 = 0, $s_time$7 = 0, $s_time$8 = 0, $s_time$9 = 0, $sp$0$be = 0, $sp$045 = 0, $sp$097 = 0, $sp$097$lcssa168 = 0, $sp$1 = 0, $temp45$0 = 0, $temp47$0 = 0, $temp50$0 = 0, $temp70$0 = 0, $warning$0$off0$be = 0, $warning$0$off0115 = 0, $warning$0$off0115$lcssa165 = 0, $warning$0$off056 = 0, $warning$1$off0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 8|0;
 $0 = sp;
 __ZN6Ay_Cpu12set_end_timeEi($this,$end_time);
 $1 = (($this) + 524|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $s;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = (($this) + 520|0);
 HEAP32[$12>>2] = $s;
 $13 = (($this) + 540|0);
 $14 = $13;
 $15 = $14;
 $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8)|(HEAPU8[$18+2>>0]<<16)|(HEAPU8[$18+3>>0]<<24);
 $20 = $0;
 $21 = $20;
 HEAP32[$21>>2] = $16;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $19;
 $24 = (($s) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($this) + 512|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($this) + 532|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = (($this) + 534|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($this) + 536|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = (($this) + 538|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = (($13) + 7|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = (($27) + ($30)|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = (40256 + ($45)|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = (($48) + ($25))|0;
 $50 = ($49|0)<(0);
 $51 = ($49|0)<($48|0);
 $or$cond1360 = $50 | $51;
 if (!($or$cond1360)) {
  $flags$033 = $42;$ix$041 = $36;$iy$037 = $39;$pc$149 = $30;$s_time$22 = $25;$sp$045 = $33;$warning$0$off056 = 0;
  HEAP32[$24>>2] = $s_time$22;
  $1451 = $flags$033&255;
  $1452 = (($0) + 7|0);
  HEAP8[$1452>>0] = $1451;
  $1453 = $ix$041&65535;
  HEAP16[$34>>1] = $1453;
  $1454 = $iy$037&65535;
  HEAP16[$37>>1] = $1454;
  $1455 = $sp$045&65535;
  HEAP16[$31>>1] = $1455;
  $1456 = $pc$149&65535;
  HEAP16[$28>>1] = $1456;
  $1457 = $0;
  $1458 = $1457;
  $1459 = HEAP32[$1458>>2]|0;
  $1460 = (($1457) + 4)|0;
  $1461 = $1460;
  $1462 = HEAP32[$1461>>2]|0;
  $1463 = $13;
  $1464 = $1463;
  HEAP8[$1464>>0]=$1459&255;HEAP8[$1464+1>>0]=($1459>>8)&255;HEAP8[$1464+2>>0]=($1459>>16)&255;HEAP8[$1464+3>>0]=$1459>>24;
  $1465 = (($1463) + 4)|0;
  $1466 = $1465;
  HEAP8[$1466>>0]=$1462&255;HEAP8[$1466+1>>0]=($1462>>8)&255;HEAP8[$1466+2>>0]=($1462>>16)&255;HEAP8[$1466+3>>0]=$1462>>24;
  $1467 = $s;
  $1468 = $1467;
  $1469 = HEAP32[$1468>>2]|0;
  $1470 = (($1467) + 4)|0;
  $1471 = $1470;
  $1472 = HEAP32[$1471>>2]|0;
  $1473 = $1;
  $1474 = $1473;
  HEAP32[$1474>>2] = $1469;
  $1475 = (($1473) + 4)|0;
  $1476 = $1475;
  HEAP32[$1476>>2] = $1472;
  HEAP32[$12>>2] = $1;
  STACKTOP = sp;return ($warning$0$off056|0);
 }
 $52 = (($this) + 548|0);
 $53 = (($this) + 554|0);
 $54 = (($0) + 6|0);
 $55 = (($52) + 7|0);
 $56 = (($0) + 6|0);
 $57 = (($0) + 4|0);
 $58 = (($0) + 6|0);
 $59 = (($0) + 6|0);
 $60 = (($0) + 1|0);
 $61 = (($0) + 4|0);
 $62 = (($0) + 6|0);
 $63 = (($0) + -24|0);
 $64 = (($0) + 6|0);
 $65 = (($0) + -24|0);
 $66 = (($0) + 4|0);
 $67 = (($0) + 6|0);
 $68 = (($0) + 4|0);
 $69 = (($0) + 6|0);
 $70 = (($0) + -184|0);
 $71 = (($0) + 4|0);
 $72 = (($0) + 6|0);
 $73 = (($0) + 4|0);
 $74 = (($0) + 4|0);
 $75 = (($0) + 4|0);
 $76 = (($0) + 6|0);
 $77 = (($0) + -160|0);
 $78 = (($0) + 4|0);
 $79 = (($0) + 6|0);
 $80 = (($0) + -176|0);
 $81 = (($0) + 4|0);
 $82 = (($0) + 6|0);
 $83 = (($0) + -168|0);
 $84 = (($0) + -112|0);
 $85 = (($0) + 4|0);
 $86 = (($0) + 4|0);
 $87 = (($0) + 4|0);
 $88 = (($0) + -8|0);
 $89 = (($0) + 4|0);
 $90 = (($0) + 6|0);
 $91 = (($0) + 4|0);
 $92 = (($0) + 6|0);
 $93 = (($0) + 6|0);
 $94 = (($0) + 4|0);
 $95 = (($0) + 6|0);
 $96 = (($0) + 6|0);
 $97 = (($0) + 6|0);
 $98 = (($0) + 6|0);
 $99 = (($0) + 6|0);
 $100 = (($0) + 6|0);
 $101 = (($0) + 6|0);
 $102 = (($0) + 6|0);
 $103 = (($0) + 4|0);
 $104 = (($0) + 4|0);
 $105 = (($0) + 2|0);
 $106 = (($this) + 548|0);
 $107 = (($this) + 550|0);
 $108 = (($0) + 2|0);
 $109 = (($this) + 552|0);
 $110 = (($0) + 4|0);
 $111 = (($this) + 556|0);
 $112 = (($this) + 557|0);
 $113 = (($this) + 556|0);
 $114 = (($this) + 557|0);
 $115 = (($0) + 4|0);
 $116 = (($0) + 4|0);
 $117 = (($0) + -16|0);
 $118 = (($0) + 4|0);
 $119 = (($0) + -32|0);
 $120 = (($0) + 4|0);
 $121 = (($0) + -48|0);
 $122 = (($0) + 4|0);
 $123 = (($0) + -8|0);
 $124 = (($0) + 4|0);
 $125 = (($0) + -24|0);
 $126 = (($0) + 4|0);
 $127 = (($0) + -40|0);
 $128 = (($0) + 4|0);
 $129 = (($0) + -56|0);
 $130 = (($0) + 4|0);
 $131 = (($0) + 4|0);
 $132 = (($0) + 4|0);
 $133 = (($0) + -8|0);
 $134 = (($0) + 7|0);
 $135 = (($0) + -8|0);
 $136 = (($0) + -8|0);
 $137 = (($0) + 4|0);
 $138 = (($0) + 6|0);
 $139 = (($0) + 4|0);
 $140 = (($0) + 6|0);
 $141 = (($0) + 6|0);
 $142 = (($0) + 4|0);
 $143 = (($0) + 6|0);
 $144 = (($0) + 4|0);
 $145 = (($0) + 2|0);
 $146 = (($0) + 6|0);
 $147 = (($0) + 4|0);
 $148 = (($0) + 1|0);
 $149 = (($0) + 4|0);
 $150 = (($0) + 1|0);
 $151 = (($0) + 6|0);
 $152 = (($this) + 559|0);
 $153 = (($0) + 6|0);
 $154 = (($this) + 558|0);
 $155 = (($this) + 559|0);
 $156 = (($0) + 6|0);
 $157 = (($0) + 6|0);
 $158 = (($this) + 557|0);
 $159 = (($this) + 558|0);
 $160 = (($0) + 6|0);
 $161 = (($this) + 557|0);
 $162 = (($this) + 556|0);
 $163 = (($this) + 560|0);
 $164 = (($this) + 560|0);
 $165 = (($this) + 560|0);
 $166 = (($0) + -112|0);
 $167 = (($0) + -8|0);
 $168 = (($0) + -8|0);
 $169 = (($0) + -8|0);
 $170 = (($0) + -96|0);
 $171 = (($0) + -104|0);
 $$in = $30;$1362 = $44;$173 = $49;$189 = $45;$flags$061 = $42;$ix$082 = $36;$iy$067 = $39;$sp$097 = $33;$warning$0$off0115 = 0;
 L4: while(1) {
  $185 = (($$in) + 1)|0;
  $186 = (($27) + ($185)|0);
  $187 = HEAP8[$186>>0]|0;
  $188 = $187&255;
  L6: do {
   switch ($189|0) {
   case 127: case 109: case 100: case 91: case 82: case 73: case 64: case 0:  {
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 8:  {
    $190 = HEAP8[$53>>0]|0;
    $191 = HEAP8[$54>>0]|0;
    HEAP8[$53>>0] = $191;
    HEAP8[$54>>0] = $190;
    $192 = HEAP8[$55>>0]|0;
    $193 = $192&255;
    $194 = $flags$061&255;
    HEAP8[$55>>0] = $194;
    $flags$0$be = $193;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 211:  {
    $195 = (($$in) + 2)|0;
    $196 = HEAP32[$s>>2]|0;
    $197 = (($196) + ($173))|0;
    $198 = HEAP8[$56>>0]|0;
    $199 = $198&255;
    $200 = $199 << 8;
    $201 = $200 | $188;
    __Z10ay_cpu_outP6Ay_Cpuiji($this,$197,$201,$199);
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $195;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 46:  {
    $202 = (($$in) + 2)|0;
    HEAP8[$57>>0] = $187;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $202;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 62:  {
    $203 = (($$in) + 2)|0;
    HEAP8[$58>>0] = $187;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $203;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 32:  {
    $208 = (($$in) + 2)|0;
    $209 = $flags$061 & 64;
    $210 = ($209|0)==(0);
    if ($210) {
     $211 = $187 << 24 >> 24;
     $212 = (($211) + ($208))|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $212;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     $pc$0 = $208;
     label = 3;
    }
    break;
   }
   case 58:  {
    $204 = (__Z8get_le16PKv($186)|0);
    $205 = (($$in) + 3)|0;
    $206 = (($27) + ($204)|0);
    $207 = HEAP8[$206>>0]|0;
    HEAP8[$59>>0] = $207;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $205;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 40:  {
    $213 = (($$in) + 2)|0;
    $214 = $flags$061 & 64;
    $215 = ($214|0)==(0);
    if ($215) {
     $pc$0 = $213;
     label = 3;
    } else {
     $216 = $187 << 24 >> 24;
     $217 = (($216) + ($213))|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $217;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 48:  {
    $218 = (($$in) + 2)|0;
    $219 = $flags$061 & 1;
    $220 = ($219|0)==(0);
    if ($220) {
     $221 = $187 << 24 >> 24;
     $222 = (($221) + ($218))|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $222;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     $pc$0 = $218;
     label = 3;
    }
    break;
   }
   case 56:  {
    $223 = (($$in) + 2)|0;
    $224 = $flags$061 & 1;
    $225 = ($224|0)==(0);
    if ($225) {
     $pc$0 = $223;
     label = 3;
    } else {
     $226 = $187 << 24 >> 24;
     $227 = (($226) + ($223))|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $227;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 24:  {
    $228 = $187 << 24 >> 24;
    $229 = (($$in) + 2)|0;
    $230 = (($229) + ($228))|0;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $230;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 16:  {
    $231 = HEAP8[$60>>0]|0;
    $232 = $231&255;
    $233 = (($232) + -1)|0;
    $234 = $233&255;
    HEAP8[$60>>0] = $234;
    $235 = (($$in) + 2)|0;
    $236 = ($233|0)==(0);
    if ($236) {
     $pc$0 = $235;
     label = 3;
    } else {
     $237 = $187 << 24 >> 24;
     $238 = (($237) + ($235))|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $238;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 194:  {
    $239 = $flags$061 & 64;
    $240 = ($239|0)==(0);
    if ($240) {
     $241 = (__Z8get_le16PKv($186)|0);
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $241;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     $s_time$0 = $173;
     label = 6;
    }
    break;
   }
   case 202:  {
    $242 = $flags$061 & 64;
    $243 = ($242|0)==(0);
    if ($243) {
     $s_time$0 = $173;
     label = 6;
    } else {
     $244 = (__Z8get_le16PKv($186)|0);
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $244;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 210:  {
    $245 = $flags$061 & 1;
    $246 = ($245|0)==(0);
    if ($246) {
     $247 = (__Z8get_le16PKv($186)|0);
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $247;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     $s_time$0 = $173;
     label = 6;
    }
    break;
   }
   case 218:  {
    $248 = $flags$061 & 1;
    $249 = ($248|0)==(0);
    if ($249) {
     $s_time$0 = $173;
     label = 6;
    } else {
     $250 = (__Z8get_le16PKv($186)|0);
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $250;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 226:  {
    $251 = $flags$061 & 4;
    $252 = ($251|0)==(0);
    if ($252) {
     $253 = (__Z8get_le16PKv($186)|0);
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $253;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     $s_time$0 = $173;
     label = 6;
    }
    break;
   }
   case 234:  {
    $254 = $flags$061 & 4;
    $255 = ($254|0)==(0);
    if ($255) {
     $s_time$0 = $173;
     label = 6;
    } else {
     $256 = (__Z8get_le16PKv($186)|0);
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $256;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 242:  {
    $257 = $flags$061 & 128;
    $258 = ($257|0)==(0);
    if ($258) {
     $259 = (__Z8get_le16PKv($186)|0);
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $259;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     $s_time$0 = $173;
     label = 6;
    }
    break;
   }
   case 250:  {
    $260 = $flags$061 & 128;
    $261 = ($260|0)==(0);
    if ($261) {
     $s_time$0 = $173;
     label = 6;
    } else {
     $262 = (__Z8get_le16PKv($186)|0);
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $262;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 195:  {
    $263 = (__Z8get_le16PKv($186)|0);
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $263;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 233:  {
    $264 = HEAP16[$61>>1]|0;
    $265 = $264&65535;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $265;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 192:  {
    $266 = $flags$061 & 64;
    $267 = ($266|0)==(0);
    if ($267) {
     $s_time$2 = $173;
     label = 58;
    } else {
     $268 = (($173) + -6)|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $268;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 200:  {
    $269 = $flags$061 & 64;
    $270 = ($269|0)==(0);
    if ($270) {
     $271 = (($173) + -6)|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $271;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     $s_time$2 = $173;
     label = 58;
    }
    break;
   }
   case 208:  {
    $272 = $flags$061 & 1;
    $273 = ($272|0)==(0);
    if ($273) {
     $s_time$2 = $173;
     label = 58;
    } else {
     $274 = (($173) + -6)|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $274;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 216:  {
    $275 = $flags$061 & 1;
    $276 = ($275|0)==(0);
    if ($276) {
     $277 = (($173) + -6)|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $277;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     $s_time$2 = $173;
     label = 58;
    }
    break;
   }
   case 224:  {
    $278 = $flags$061 & 4;
    $279 = ($278|0)==(0);
    if ($279) {
     $s_time$2 = $173;
     label = 58;
    } else {
     $280 = (($173) + -6)|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $280;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 232:  {
    $281 = $flags$061 & 4;
    $282 = ($281|0)==(0);
    if ($282) {
     $283 = (($173) + -6)|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $283;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     $s_time$2 = $173;
     label = 58;
    }
    break;
   }
   case 240:  {
    $284 = $flags$061 & 128;
    $285 = ($284|0)==(0);
    if ($285) {
     $s_time$2 = $173;
     label = 58;
    } else {
     $286 = (($173) + -6)|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $286;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    }
    break;
   }
   case 248:  {
    $287 = $flags$061 & 128;
    $288 = ($287|0)==(0);
    if ($288) {
     $289 = (($173) + -6)|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $289;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     $s_time$2 = $173;
     label = 58;
    }
    break;
   }
   case 201:  {
    $s_time$2 = $173;
    label = 58;
    break;
   }
   case 196:  {
    $294 = $flags$061 & 64;
    $295 = ($294|0)==(0);
    if ($295) {
     label = 67;
    } else {
     label = 5;
    }
    break;
   }
   case 204:  {
    $296 = $flags$061 & 64;
    $297 = ($296|0)==(0);
    if ($297) {
     label = 5;
    } else {
     label = 67;
    }
    break;
   }
   case 212:  {
    $298 = $flags$061 & 1;
    $299 = ($298|0)==(0);
    if ($299) {
     label = 67;
    } else {
     label = 5;
    }
    break;
   }
   case 220:  {
    $300 = $flags$061 & 1;
    $301 = ($300|0)==(0);
    if ($301) {
     label = 5;
    } else {
     label = 67;
    }
    break;
   }
   case 228:  {
    $302 = $flags$061 & 4;
    $303 = ($302|0)==(0);
    if ($303) {
     label = 67;
    } else {
     label = 5;
    }
    break;
   }
   case 236:  {
    $304 = $flags$061 & 4;
    $305 = ($304|0)==(0);
    if ($305) {
     label = 5;
    } else {
     label = 67;
    }
    break;
   }
   case 244:  {
    $306 = $flags$061 & 128;
    $307 = ($306|0)==(0);
    if ($307) {
     label = 67;
    } else {
     label = 5;
    }
    break;
   }
   case 252:  {
    $308 = $flags$061 & 128;
    $309 = ($308|0)==(0);
    if ($309) {
     label = 5;
    } else {
     label = 67;
    }
    break;
   }
   case 205:  {
    label = 67;
    break;
   }
   case 255:  {
    $315 = ($$in>>>0)>(65535);
    if ($315) {
     $316 = $$in & 65535;
     $317 = (($173) + -11)|0;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $316;$s_time$1$be = $317;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    } else {
     label = 70;
    }
    break;
   }
   case 247: case 239: case 231: case 223: case 215: case 207: case 199:  {
    label = 70;
    break;
   }
   case 245:  {
    $319 = HEAP8[$62>>0]|0;
    $320 = $319&255;
    $321 = $320 << 8;
    $322 = (($321) + ($flags$061))|0;
    $data$0 = $322;$pc$2 = $185;$s_time$3 = $173;
    label = 73;
    break;
   }
   case 229: case 213: case 197:  {
    $323 = $189 >>> 3;
    $324 = (($63) + ($323)|0);
    $325 = HEAP16[$324>>1]|0;
    $326 = $325&65535;
    $data$0 = $326;$pc$2 = $185;$s_time$3 = $173;
    label = 73;
    break;
   }
   case 241:  {
    $330 = (($27) + ($sp$097)|0);
    $331 = HEAP8[$330>>0]|0;
    $332 = $331&255;
    $333 = (($sp$097) + 1)|0;
    $334 = (($27) + ($333)|0);
    $335 = HEAP8[$334>>0]|0;
    HEAP8[$64>>0] = $335;
    $336 = (($sp$097) + 2)|0;
    $337 = $336 & 65535;
    $flags$0$be = $332;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $337;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 225: case 209: case 193:  {
    $338 = (($27) + ($sp$097)|0);
    $339 = (__Z8get_le16PKv($338)|0);
    $340 = $339&65535;
    $341 = $189 >>> 3;
    $342 = (($65) + ($341)|0);
    HEAP16[$342>>1] = $340;
    $343 = (($sp$097) + 2)|0;
    $344 = $343 & 65535;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $344;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 134: case 150:  {
    $345 = $flags$061 & -2;
    $flags$1 = $345;
    label = 77;
    break;
   }
   case 142: case 158:  {
    $flags$1 = $flags$061;
    label = 77;
    break;
   }
   case 198: case 214:  {
    $351 = $flags$061 & -2;
    $flags$2 = $351;
    label = 79;
    break;
   }
   case 206: case 222:  {
    $flags$2 = $flags$061;
    label = 79;
    break;
   }
   case 135: case 133: case 132: case 131: case 130: case 129: case 128: case 151: case 149: case 148: case 147: case 146: case 145: case 144:  {
    $353 = $flags$061 & -2;
    $flags$3 = $353;
    label = 81;
    break;
   }
   case 143: case 141: case 140: case 139: case 138: case 137: case 136: case 159: case 157: case 156: case 155: case 154: case 153: case 152:  {
    $flags$3 = $flags$061;
    label = 81;
    break;
   }
   case 190:  {
    $383 = HEAP16[$68>>1]|0;
    $384 = $383&65535;
    $385 = (($27) + ($384)|0);
    $386 = HEAP8[$385>>0]|0;
    $387 = $386&255;
    $data$2 = $387;$pc$4 = $185;$s_time$5 = $173;
    label = 86;
    break;
   }
   case 254:  {
    $388 = (($$in) + 2)|0;
    $data$2 = $188;$pc$4 = $388;$s_time$5 = $173;
    label = 86;
    break;
   }
   case 191: case 189: case 188: case 187: case 186: case 185: case 184:  {
    $389 = $189 ^ 1;
    $390 = (($70) + ($389)|0);
    $391 = HEAP8[$390>>0]|0;
    $392 = $391&255;
    $data$2 = $392;$pc$4 = $185;$s_time$5 = $173;
    label = 86;
    break;
   }
   case 41: case 25: case 9:  {
    $411 = $189 >>> 3;
    $$sum12 = (($411) + -1)|0;
    $412 = (($0) + ($$sum12)|0);
    $413 = HEAP16[$412>>1]|0;
    $414 = $413&65535;
    $data$3 = $414;
    label = 88;
    break;
   }
   case 57:  {
    $data$3 = $sp$097;
    label = 88;
    break;
   }
   case 39:  {
    $430 = HEAP8[$72>>0]|0;
    $431 = $430&255;
    $432 = ($430&255)>(153);
    $433 = $432&1;
    $$flags$0 = $433 | $flags$061;
    $434 = $$flags$0 & 1;
    $435 = (0 - ($434))|0;
    $436 = $435 & 96;
    $437 = $flags$061 & 16;
    $438 = ($437|0)!=(0);
    $439 = $431 & 14;
    $440 = ($439>>>0)>(9);
    $or$cond16 = $438 | $440;
    $441 = $436 | 6;
    $adjust$0 = $or$cond16 ? $441 : $436;
    $442 = $flags$061 & 2;
    $443 = ($442|0)==(0);
    $444 = (0 - ($adjust$0))|0;
    $adjust$0$ = $443 ? $adjust$0 : $444;
    $445 = (($adjust$0$) + ($431))|0;
    $446 = $$flags$0 & 3;
    $447 = $445 ^ $431;
    $448 = $447 & 16;
    $449 = $445&255;
    $450 = $445 & 255;
    $451 = (($this) + ($450)|0);
    $452 = HEAP8[$451>>0]|0;
    $453 = $452&255;
    $454 = $446 | $453;
    $455 = $454 | $448;
    HEAP8[$72>>0] = $449;
    $flags$0$be = $455;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 52:  {
    $456 = HEAP16[$73>>1]|0;
    $457 = $456&65535;
    $458 = (($27) + ($457)|0);
    $459 = HEAP8[$458>>0]|0;
    $460 = $459&255;
    $461 = (($460) + 1)|0;
    $462 = $461&255;
    HEAP8[$458>>0] = $462;
    $data$4 = $461;$ix$1 = $ix$082;$iy$1 = $iy$067;$pc$5 = $185;$s_time$6 = $173;
    label = 92;
    break;
   }
   case 60: case 44: case 36: case 28: case 20: case 12: case 4:  {
    $463 = $189 >>> 3;
    $464 = $463 ^ 1;
    $465 = (($0) + ($464)|0);
    $466 = HEAP8[$465>>0]|0;
    $467 = (($466) + 1)<<24>>24;
    HEAP8[$465>>0] = $467;
    $468 = $467&255;
    $data$4 = $468;$ix$1 = $ix$082;$iy$1 = $iy$067;$pc$5 = $185;$s_time$6 = $173;
    label = 92;
    break;
   }
   case 53:  {
    $482 = HEAP16[$74>>1]|0;
    $483 = $482&65535;
    $484 = (($27) + ($483)|0);
    $485 = HEAP8[$484>>0]|0;
    $486 = $485&255;
    $487 = (($486) + -1)|0;
    $488 = $487&255;
    HEAP8[$484>>0] = $488;
    $data$5 = $487;$ix$2 = $ix$082;$iy$2 = $iy$067;$pc$6 = $185;$s_time$7 = $173;
    label = 95;
    break;
   }
   case 61: case 45: case 37: case 29: case 21: case 13: case 5:  {
    $489 = $189 >>> 3;
    $490 = $489 ^ 1;
    $491 = (($0) + ($490)|0);
    $492 = HEAP8[$491>>0]|0;
    $493 = (($492) + -1)<<24>>24;
    HEAP8[$491>>0] = $493;
    $494 = $493&255;
    $data$5 = $494;$ix$2 = $ix$082;$iy$2 = $iy$067;$pc$6 = $185;$s_time$7 = $173;
    label = 95;
    break;
   }
   case 35: case 19: case 3:  {
    $507 = $189 >>> 3;
    $508 = (($0) + ($507)|0);
    $509 = HEAP16[$508>>1]|0;
    $510 = (($509) + 1)<<16>>16;
    HEAP16[$508>>1] = $510;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 51:  {
    $511 = (($sp$097) + 1)|0;
    $512 = $511 & 65535;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $512;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 43: case 27: case 11:  {
    $513 = $189 >>> 3;
    $$sum11 = (($513) + -1)|0;
    $514 = (($0) + ($$sum11)|0);
    $515 = HEAP16[$514>>1]|0;
    $516 = (($515) + -1)<<16>>16;
    HEAP16[$514>>1] = $516;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 59:  {
    $517 = (($sp$097) + 65535)|0;
    $518 = $517 & 65535;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $518;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 166:  {
    $519 = HEAP16[$75>>1]|0;
    $520 = $519&65535;
    $521 = (($27) + ($520)|0);
    $522 = HEAP8[$521>>0]|0;
    $523 = $522&255;
    $data$6 = $523;$pc$7 = $185;$s_time$8 = $173;
    label = 103;
    break;
   }
   case 230:  {
    $524 = (($$in) + 2)|0;
    $data$6 = $188;$pc$7 = $524;$s_time$8 = $173;
    label = 103;
    break;
   }
   case 167: case 165: case 164: case 163: case 162: case 161: case 160:  {
    $525 = $189 ^ 1;
    $526 = (($77) + ($525)|0);
    $527 = HEAP8[$526>>0]|0;
    $528 = $527&255;
    $data$6 = $528;$pc$7 = $185;$s_time$8 = $173;
    label = 103;
    break;
   }
   case 182:  {
    $537 = HEAP16[$78>>1]|0;
    $538 = $537&65535;
    $539 = (($27) + ($538)|0);
    $540 = HEAP8[$539>>0]|0;
    $541 = $540&255;
    $data$7 = $541;$pc$8 = $185;$s_time$9 = $173;
    label = 107;
    break;
   }
   case 246:  {
    $542 = (($$in) + 2)|0;
    $data$7 = $188;$pc$8 = $542;$s_time$9 = $173;
    label = 107;
    break;
   }
   case 183: case 181: case 180: case 179: case 178: case 177: case 176:  {
    $543 = $189 ^ 1;
    $544 = (($80) + ($543)|0);
    $545 = HEAP8[$544>>0]|0;
    $546 = $545&255;
    $data$7 = $546;$pc$8 = $185;$s_time$9 = $173;
    label = 107;
    break;
   }
   case 174:  {
    $555 = HEAP16[$81>>1]|0;
    $556 = $555&65535;
    $557 = (($27) + ($556)|0);
    $558 = HEAP8[$557>>0]|0;
    $559 = $558&255;
    $data$8 = $559;$pc$9 = $185;$s_time$10 = $173;
    label = 111;
    break;
   }
   case 238:  {
    $560 = (($$in) + 2)|0;
    $data$8 = $188;$pc$9 = $560;$s_time$10 = $173;
    label = 111;
    break;
   }
   case 175: case 173: case 172: case 171: case 170: case 169: case 168:  {
    $561 = $189 ^ 1;
    $562 = (($83) + ($561)|0);
    $563 = HEAP8[$562>>0]|0;
    $564 = $563&255;
    $data$8 = $564;$pc$9 = $185;$s_time$10 = $173;
    label = 111;
    break;
   }
   case 119: case 117: case 116: case 115: case 114: case 113: case 112:  {
    $573 = $189 ^ 1;
    $574 = (($84) + ($573)|0);
    $575 = HEAP8[$574>>0]|0;
    $576 = HEAP16[$85>>1]|0;
    $577 = $576&65535;
    $578 = (($27) + ($577)|0);
    HEAP8[$578>>0] = $575;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 125: case 124: case 123: case 122: case 121: case 120: case 111: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 72: case 71: case 69: case 68: case 67: case 66: case 65:  {
    $579 = $189 & 7;
    $580 = $579 ^ 1;
    $581 = (($0) + ($580)|0);
    $582 = HEAP8[$581>>0]|0;
    $583 = $189 >>> 3;
    $584 = $583 & 7;
    $585 = $584 ^ 1;
    $586 = (($0) + ($585)|0);
    HEAP8[$586>>0] = $582;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 38: case 30: case 22: case 14: case 6:  {
    $587 = $189 >>> 3;
    $588 = $587 ^ 1;
    $589 = (($0) + ($588)|0);
    HEAP8[$589>>0] = $187;
    $590 = (($$in) + 2)|0;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $590;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 54:  {
    $591 = (($$in) + 2)|0;
    $592 = HEAP16[$86>>1]|0;
    $593 = $592&65535;
    $594 = (($27) + ($593)|0);
    HEAP8[$594>>0] = $187;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $591;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 126: case 110: case 102: case 94: case 86: case 78: case 70:  {
    $595 = HEAP16[$87>>1]|0;
    $596 = $595&65535;
    $597 = (($27) + ($596)|0);
    $598 = HEAP8[$597>>0]|0;
    $599 = $189 >>> 3;
    $600 = $599 ^ 1;
    $601 = (($88) + ($600)|0);
    HEAP8[$601>>0] = $598;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 33: case 17: case 1:  {
    $602 = (__Z8get_le16PKv($186)|0);
    $603 = $602&65535;
    $604 = $189 >>> 3;
    $605 = (($0) + ($604)|0);
    HEAP16[$605>>1] = $603;
    $606 = (($$in) + 3)|0;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $606;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 49:  {
    $607 = (__Z8get_le16PKv($186)|0);
    $608 = (($$in) + 3)|0;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $608;$s_time$1$be = $173;$sp$0$be = $607;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 42:  {
    $609 = (__Z8get_le16PKv($186)|0);
    $610 = (($$in) + 3)|0;
    $611 = (($27) + ($609)|0);
    $612 = (__Z8get_le16PKv($611)|0);
    $613 = $612&65535;
    HEAP16[$89>>1] = $613;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $610;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 50:  {
    $614 = (__Z8get_le16PKv($186)|0);
    $615 = (($$in) + 3)|0;
    $616 = HEAP8[$90>>0]|0;
    $617 = (($27) + ($614)|0);
    HEAP8[$617>>0] = $616;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $615;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 34:  {
    $618 = (__Z8get_le16PKv($186)|0);
    $619 = (($$in) + 3)|0;
    $620 = (($27) + ($618)|0);
    $621 = HEAP16[$91>>1]|0;
    $622 = $621&65535;
    __Z8set_le16Pvj($620,$622);
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $619;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 18: case 2:  {
    $623 = HEAP8[$92>>0]|0;
    $624 = $189 >>> 3;
    $625 = (($0) + ($624)|0);
    $626 = HEAP16[$625>>1]|0;
    $627 = $626&65535;
    $628 = (($27) + ($627)|0);
    HEAP8[$628>>0] = $623;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 26: case 10:  {
    $629 = $189 >>> 3;
    $$sum10 = (($629) + -1)|0;
    $630 = (($0) + ($$sum10)|0);
    $631 = HEAP16[$630>>1]|0;
    $632 = $631&65535;
    $633 = (($27) + ($632)|0);
    $634 = HEAP8[$633>>0]|0;
    HEAP8[$93>>0] = $634;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 249:  {
    $635 = HEAP16[$94>>1]|0;
    $636 = $635&65535;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $636;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 7:  {
    $637 = HEAP8[$95>>0]|0;
    $638 = $637&255;
    $639 = $638 << 1;
    $640 = $638 >>> 7;
    $641 = $639 | $640;
    $642 = $flags$061 & 196;
    $643 = $641 & 41;
    $644 = $643 | $642;
    $645 = $641&255;
    HEAP8[$95>>0] = $645;
    $flags$0$be = $644;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 15:  {
    $646 = HEAP8[$96>>0]|0;
    $647 = $646&255;
    $648 = $flags$061 & 196;
    $649 = $647 & 1;
    $650 = $649 | $648;
    $651 = $647 << 7;
    $652 = $647 >>> 1;
    $653 = $651 | $652;
    $654 = $652 & 40;
    $655 = $650 | $654;
    $656 = $653&255;
    HEAP8[$96>>0] = $656;
    $flags$0$be = $655;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 23:  {
    $657 = HEAP8[$97>>0]|0;
    $658 = $657&255;
    $659 = $658 << 1;
    $660 = $flags$061 & 1;
    $661 = $659 | $660;
    $662 = $flags$061 & 196;
    $663 = $659 & 40;
    $664 = $658 >>> 7;
    $665 = $664 | $662;
    $666 = $665 | $663;
    $667 = $661&255;
    HEAP8[$97>>0] = $667;
    $flags$0$be = $666;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 31:  {
    $668 = $flags$061 << 7;
    $669 = HEAP8[$98>>0]|0;
    $670 = $669&255;
    $671 = $670 >>> 1;
    $672 = $671 | $668;
    $673 = $flags$061 & 196;
    $674 = $671 & 40;
    $675 = $670 & 1;
    $676 = $675 | $673;
    $677 = $676 | $674;
    $678 = $672&255;
    HEAP8[$98>>0] = $678;
    $flags$0$be = $677;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 47:  {
    $679 = HEAP8[$99>>0]|0;
    $680 = $679&255;
    $681 = $680 ^ -1;
    $682 = $flags$061 & 197;
    $683 = $681 & 40;
    $684 = $682 | $683;
    $685 = $684 | 18;
    $686 = $681&255;
    HEAP8[$99>>0] = $686;
    $flags$0$be = $685;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 63:  {
    $687 = $flags$061 & 197;
    $688 = $flags$061 << 4;
    $689 = $688 & 16;
    $690 = $689 | $687;
    $691 = HEAP8[$100>>0]|0;
    $692 = $691&255;
    $693 = $692 & 40;
    $694 = $690 | $693;
    $695 = $694 ^ 1;
    $flags$0$be = $695;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 55:  {
    $696 = $flags$061 & 196;
    $697 = HEAP8[$101>>0]|0;
    $698 = $697&255;
    $699 = $698 & 40;
    $700 = $696 | $699;
    $701 = $700 | 1;
    $flags$0$be = $701;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 219:  {
    $702 = (($$in) + 2)|0;
    $703 = HEAP8[$102>>0]|0;
    $704 = $703&255;
    $705 = $704 << 8;
    $706 = $705 | $188;
    $707 = (__Z9ay_cpu_inP6Ay_Cpuj($this,$706)|0);
    $708 = $707&255;
    HEAP8[$102>>0] = $708;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $702;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 227:  {
    $709 = (($27) + ($sp$097)|0);
    $710 = (__Z8get_le16PKv($709)|0);
    $711 = HEAP16[$103>>1]|0;
    $712 = $711&65535;
    __Z8set_le16Pvj($709,$712);
    $713 = $710&65535;
    HEAP16[$103>>1] = $713;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 235:  {
    $714 = HEAP16[$104>>1]|0;
    $715 = HEAP16[$105>>1]|0;
    HEAP16[$104>>1] = $715;
    HEAP16[$105>>1] = $714;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 243:  {
    HEAP8[$111>>0] = 0;
    HEAP8[$112>>0] = 0;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 217:  {
    $716 = HEAP16[$106>>1]|0;
    $717 = HEAP16[$0>>1]|0;
    HEAP16[$106>>1] = $717;
    HEAP16[$0>>1] = $716;
    $718 = HEAP16[$107>>1]|0;
    $719 = HEAP16[$108>>1]|0;
    HEAP16[$107>>1] = $719;
    HEAP16[$108>>1] = $718;
    $720 = HEAP16[$109>>1]|0;
    $721 = HEAP16[$110>>1]|0;
    HEAP16[$109>>1] = $721;
    HEAP16[$110>>1] = $720;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 251:  {
    HEAP8[$113>>0] = 1;
    HEAP8[$114>>0] = 1;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 203:  {
    $722 = (($$in) + 2)|0;
    do {
     switch ($188|0) {
     case 6:  {
      $723 = (($173) + 7)|0;
      $724 = HEAP16[$115>>1]|0;
      $725 = $724&65535;
      $data$9 = $725;$pc$10 = $722;$s_time$11 = $723;
      label = 140;
      break L6;
      break;
     }
     case 7: case 5: case 4: case 3: case 2: case 1: case 0:  {
      $738 = $188 ^ 1;
      $739 = (($0) + ($738)|0);
      $740 = HEAP8[$739>>0]|0;
      $741 = $740&255;
      $742 = $741 << 1;
      $743 = $742 & 254;
      $744 = $741 >>> 7;
      $745 = $743 | $744;
      $746 = (($this) + ($745)|0);
      $747 = HEAP8[$746>>0]|0;
      $748 = $747&255;
      $749 = $748 | $744;
      $750 = $745&255;
      HEAP8[$739>>0] = $750;
      $flags$0$be = $749;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 22:  {
      $751 = (($173) + 7)|0;
      $752 = HEAP16[$116>>1]|0;
      $753 = $752&65535;
      $data$10 = $753;$pc$11 = $722;$s_time$12 = $751;
      label = 143;
      break L6;
      break;
     }
     case 23: case 21: case 20: case 19: case 18: case 17: case 16:  {
      $764 = $188 ^ 1;
      $765 = (($117) + ($764)|0);
      $766 = HEAP8[$765>>0]|0;
      $767 = $766&255;
      $768 = $767 << 1;
      $769 = $flags$061 & 1;
      $770 = $768 | $769;
      $771 = (($this) + ($770)|0);
      $772 = HEAP8[$771>>0]|0;
      $773 = $772&255;
      $774 = $770&255;
      HEAP8[$765>>0] = $774;
      $flags$0$be = $773;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 38:  {
      $775 = (($173) + 7)|0;
      $776 = HEAP16[$118>>1]|0;
      $777 = $776&65535;
      $data$11 = $777;$pc$12 = $722;$s_time$13 = $775;
      label = 146;
      break L6;
      break;
     }
     case 39: case 37: case 36: case 35: case 34: case 33: case 32:  {
      $786 = $188 ^ 1;
      $787 = (($119) + ($786)|0);
      $788 = HEAP8[$787>>0]|0;
      $789 = $788&255;
      $790 = $789 << 1;
      $791 = (($this) + ($790)|0);
      $792 = HEAP8[$791>>0]|0;
      $793 = $792&255;
      $794 = $790&255;
      HEAP8[$787>>0] = $794;
      $flags$0$be = $793;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 54:  {
      $795 = (($173) + 7)|0;
      $796 = HEAP16[$120>>1]|0;
      $797 = $796&65535;
      $data$12 = $797;$pc$13 = $722;$s_time$14 = $795;
      label = 149;
      break L6;
      break;
     }
     case 55: case 53: case 52: case 51: case 50: case 49: case 48:  {
      $807 = $188 ^ 1;
      $808 = (($121) + ($807)|0);
      $809 = HEAP8[$808>>0]|0;
      $810 = $809&255;
      $811 = $810 << 1;
      $812 = $811 | 1;
      $813 = (($this) + ($812)|0);
      $814 = HEAP8[$813>>0]|0;
      $815 = $814&255;
      $816 = $812&255;
      HEAP8[$808>>0] = $816;
      $flags$0$be = $815;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 14:  {
      $817 = (($173) + 7)|0;
      $818 = HEAP16[$122>>1]|0;
      $819 = $818&65535;
      $data$13 = $819;$pc$14 = $722;$s_time$15 = $817;
      label = 152;
      break L6;
      break;
     }
     case 15: case 13: case 12: case 11: case 10: case 9: case 8:  {
      $833 = $188 ^ 1;
      $834 = (($123) + ($833)|0);
      $835 = HEAP8[$834>>0]|0;
      $836 = $835&255;
      $837 = $836 & 1;
      $838 = $836 << 7;
      $839 = $838 & 128;
      $840 = $836 >>> 1;
      $841 = $839 | $840;
      $842 = (($this) + ($841)|0);
      $843 = HEAP8[$842>>0]|0;
      $844 = $843&255;
      $845 = $837 | $844;
      $846 = $841&255;
      HEAP8[$834>>0] = $846;
      $flags$0$be = $845;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 30:  {
      $847 = (($173) + 7)|0;
      $848 = HEAP16[$124>>1]|0;
      $849 = $848&65535;
      $data$14 = $849;$pc$15 = $722;$s_time$16 = $847;
      label = 155;
      break L6;
      break;
     }
     case 31: case 29: case 28: case 27: case 26: case 25: case 24:  {
      $863 = $188 ^ 1;
      $864 = (($125) + ($863)|0);
      $865 = HEAP8[$864>>0]|0;
      $866 = $865&255;
      $867 = $866 & 1;
      $868 = $flags$061 << 7;
      $869 = $868 & 128;
      $870 = $866 >>> 1;
      $871 = $870 | $869;
      $872 = (($this) + ($871)|0);
      $873 = HEAP8[$872>>0]|0;
      $874 = $873&255;
      $875 = $874 | $867;
      $876 = $871&255;
      HEAP8[$864>>0] = $876;
      $flags$0$be = $875;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 46:  {
      $877 = HEAP16[$126>>1]|0;
      $878 = $877&65535;
      $879 = (($173) + 7)|0;
      $data$15 = $878;$pc$16 = $722;$s_time$17 = $879;
      label = 158;
      break L6;
      break;
     }
     case 47: case 45: case 44: case 43: case 42: case 41: case 40:  {
      $892 = $188 ^ 1;
      $893 = (($127) + ($892)|0);
      $894 = HEAP8[$893>>0]|0;
      $895 = $894&255;
      $896 = $895 & 1;
      $897 = $895 & 128;
      $898 = $895 >>> 1;
      $899 = $897 | $898;
      $900 = (($this) + ($899)|0);
      $901 = HEAP8[$900>>0]|0;
      $902 = $901&255;
      $903 = $896 | $902;
      $904 = $899&255;
      HEAP8[$893>>0] = $904;
      $flags$0$be = $903;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 62:  {
      $905 = (($173) + 7)|0;
      $906 = HEAP16[$128>>1]|0;
      $907 = $906&65535;
      $data$16 = $907;$pc$17 = $722;$s_time$18 = $905;
      label = 161;
      break L6;
      break;
     }
     case 63: case 61: case 60: case 59: case 58: case 57: case 56:  {
      $918 = $188 ^ 1;
      $919 = (($129) + ($918)|0);
      $920 = HEAP8[$919>>0]|0;
      $921 = $920&255;
      $922 = $921 & 1;
      $923 = $921 >>> 1;
      $924 = (($this) + ($923)|0);
      $925 = HEAP8[$924>>0]|0;
      $926 = $925&255;
      $927 = $922 | $926;
      $928 = $923&255;
      HEAP8[$919>>0] = $928;
      $flags$0$be = $927;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 126: case 118: case 110: case 102: case 94: case 86: case 78: case 70:  {
      $929 = (($173) + 4)|0;
      $930 = HEAP16[$130>>1]|0;
      $931 = $930&65535;
      $932 = (($27) + ($931)|0);
      $933 = HEAP8[$932>>0]|0;
      $934 = $933&255;
      $935 = $flags$061 & 1;
      $flags$6 = $935;$s_time$19 = $929;$temp45$0 = $934;
      break;
     }
     case 127: case 125: case 124: case 123: case 122: case 121: case 120: case 119: case 117: case 116: case 115: case 114: case 113: case 112: case 111: case 109: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 100: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 91: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 82: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 73: case 72: case 71: case 69: case 68: case 67: case 66: case 65: case 64:  {
      $936 = $188 & 7;
      $937 = $936 ^ 1;
      $938 = (($0) + ($937)|0);
      $939 = HEAP8[$938>>0]|0;
      $940 = $939&255;
      $941 = $flags$061 & 1;
      $942 = $940 & 40;
      $943 = $942 | $941;
      $flags$6 = $943;$s_time$19 = $173;$temp45$0 = $940;
      break;
     }
     case 254: case 246: case 238: case 230: case 222: case 214: case 206: case 198: case 190: case 182: case 174: case 166: case 158: case 150: case 142: case 134:  {
      $955 = (($173) + 7)|0;
      $956 = HEAP16[$131>>1]|0;
      $957 = $956&65535;
      $958 = (($27) + ($957)|0);
      $959 = HEAP8[$958>>0]|0;
      $960 = $959&255;
      $961 = $188 >>> 3;
      $962 = $961 & 7;
      $963 = 1 << $962;
      $964 = $960 | $963;
      $965 = $188 & 64;
      $966 = ($965|0)==(0);
      $967 = $966 ? $963 : 0;
      $$19 = $964 ^ $967;
      $968 = $$19&255;
      HEAP8[$958>>0] = $968;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $955;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 255: case 253: case 252: case 251: case 250: case 249: case 248: case 247: case 245: case 244: case 243: case 242: case 241: case 240: case 239: case 237: case 236: case 235: case 234: case 233: case 232: case 231: case 229: case 228: case 227: case 226: case 225: case 224: case 223: case 221: case 220: case 219: case 218: case 217: case 216: case 215: case 213: case 212: case 211: case 210: case 209: case 208: case 207: case 205: case 204: case 203: case 202: case 201: case 200: case 199: case 197: case 196: case 195: case 194: case 193: case 192:  {
      $969 = $188 >>> 3;
      $970 = $969 & 7;
      $971 = 1 << $970;
      $972 = $188 & 7;
      $973 = $972 ^ 1;
      $974 = (($0) + ($973)|0);
      $975 = HEAP8[$974>>0]|0;
      $976 = $975&255;
      $977 = $976 | $971;
      $978 = $977&255;
      HEAP8[$974>>0] = $978;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 191: case 189: case 188: case 187: case 186: case 185: case 184: case 183: case 181: case 180: case 179: case 178: case 177: case 176: case 175: case 173: case 172: case 171: case 170: case 169: case 168: case 167: case 165: case 164: case 163: case 162: case 161: case 160: case 159: case 157: case 156: case 155: case 154: case 153: case 152: case 151: case 149: case 148: case 147: case 146: case 145: case 144: case 143: case 141: case 140: case 139: case 138: case 137: case 136: case 135: case 133: case 132: case 131: case 130: case 129: case 128:  {
      $979 = $188 >>> 3;
      $980 = $979 & 7;
      $981 = 1 << $980;
      $982 = $981 ^ 255;
      $983 = $188 & 7;
      $984 = $983 ^ 1;
      $985 = (($0) + ($984)|0);
      $986 = HEAP8[$985>>0]|0;
      $987 = $986&255;
      $988 = $987 & $982;
      $989 = $988&255;
      HEAP8[$985>>0] = $989;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     default: {
      label = 169;
      break L4;
     }
     }
    } while(0);
    $944 = $188 >>> 3;
    $945 = $944 & 7;
    $946 = 1 << $945;
    $947 = $temp45$0 & $946;
    $948 = $947 & 128;
    $949 = (($947) + 32767)|0;
    $950 = $949 >>> 8;
    $951 = $950 & 68;
    $952 = $flags$6 | $948;
    $953 = $952 | $951;
    $954 = $953 | 16;
    $flags$0$be = $954;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $722;$s_time$1$be = $s_time$19;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 237:  {
    $990 = (($$in) + 2)|0;
    $991 = (40520 + ($188)|0);
    $992 = HEAP8[$991>>0]|0;
    $993 = $992&255;
    $994 = $993 >>> 4;
    $995 = (($994) + ($173))|0;
    do {
     switch ($188|0) {
     case 106: case 90: case 74: case 98: case 82: case 66:  {
      $996 = $188 >>> 3;
      $997 = $996 & 6;
      $998 = (($0) + ($997)|0);
      $999 = HEAP16[$998>>1]|0;
      $1000 = $999&65535;
      $temp47$0 = $1000;
      label = 172;
      break;
     }
     case 122: case 114:  {
      $temp47$0 = $sp$097;
      label = 172;
      break;
     }
     case 113:  {
      HEAP8[$134>>0] = 0;
      label = 175;
      break;
     }
     case 120: case 112: case 104: case 96: case 88: case 80: case 72: case 64:  {
      $1029 = HEAP16[$0>>1]|0;
      $1030 = $1029&65535;
      $1031 = (__Z9ay_cpu_inP6Ay_Cpuj($this,$1030)|0);
      $1032 = $1031&255;
      $1033 = $188 >>> 3;
      $1034 = $1033 ^ 1;
      $1035 = (($133) + ($1034)|0);
      HEAP8[$1035>>0] = $1032;
      $1036 = $flags$061 & 1;
      $1037 = (($this) + ($1031)|0);
      $1038 = HEAP8[$1037>>0]|0;
      $1039 = $1038&255;
      $1040 = $1039 | $1036;
      $flags$0$be = $1040;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 121: case 105: case 97: case 89: case 81: case 73: case 65:  {
      label = 175;
      break;
     }
     case 83: case 67:  {
      $1050 = $188 >>> 3;
      $1051 = (($136) + ($1050)|0);
      $1052 = HEAP16[$1051>>1]|0;
      $1053 = $1052&65535;
      $temp50$0 = $1053;
      label = 177;
      break;
     }
     case 115:  {
      $temp50$0 = $sp$097;
      label = 177;
      break;
     }
     case 91: case 75:  {
      $1058 = (($27) + ($990)|0);
      $1059 = (__Z8get_le16PKv($1058)|0);
      $1060 = (($$in) + 4)|0;
      $1061 = (($27) + ($1059)|0);
      $1062 = (__Z8get_le16PKv($1061)|0);
      $1063 = $1062&65535;
      $1064 = $188 >>> 3;
      $$sum9 = (($1064) + -9)|0;
      $1065 = (($0) + ($$sum9)|0);
      HEAP16[$1065>>1] = $1063;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1060;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 123:  {
      $1066 = (($27) + ($990)|0);
      $1067 = (__Z8get_le16PKv($1066)|0);
      $1068 = (($$in) + 4)|0;
      $1069 = (($27) + ($1067)|0);
      $1070 = (__Z8get_le16PKv($1069)|0);
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1068;$s_time$1$be = $995;$sp$0$be = $1070;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 103:  {
      $1071 = HEAP16[$137>>1]|0;
      $1072 = $1071&65535;
      $1073 = (($27) + ($1072)|0);
      $1074 = HEAP8[$1073>>0]|0;
      $1075 = $1074&255;
      $1076 = HEAP8[$138>>0]|0;
      $1077 = $1076&255;
      $1078 = $1077 << 4;
      $1079 = $1075 >>> 4;
      $1080 = $1078 | $1079;
      $1081 = $1080&255;
      HEAP8[$1073>>0] = $1081;
      $1082 = HEAP8[$138>>0]|0;
      $1083 = $1082&255;
      $1084 = $1083 & 240;
      $1085 = $1075 & 15;
      $1086 = $1084 | $1085;
      $1087 = $flags$061 & 1;
      $1088 = (($this) + ($1086)|0);
      $1089 = HEAP8[$1088>>0]|0;
      $1090 = $1089&255;
      $1091 = $1090 | $1087;
      $1092 = $1086&255;
      HEAP8[$138>>0] = $1092;
      $flags$0$be = $1091;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 111:  {
      $1093 = HEAP16[$139>>1]|0;
      $1094 = $1093&65535;
      $1095 = (($27) + ($1094)|0);
      $1096 = HEAP8[$1095>>0]|0;
      $1097 = $1096&255;
      $1098 = $1097 << 4;
      $1099 = HEAP8[$140>>0]|0;
      $1100 = $1099&255;
      $1101 = $1100 & 15;
      $1102 = $1101 | $1098;
      $1103 = $1102&255;
      HEAP8[$1095>>0] = $1103;
      $1104 = HEAP8[$140>>0]|0;
      $1105 = $1104&255;
      $1106 = $1105 & 240;
      $1107 = $1097 >>> 4;
      $1108 = $1106 | $1107;
      $1109 = $flags$061 & 1;
      $1110 = (($this) + ($1108)|0);
      $1111 = HEAP8[$1110>>0]|0;
      $1112 = $1111&255;
      $1113 = $1112 | $1109;
      $1114 = $1108&255;
      HEAP8[$140>>0] = $1114;
      $flags$0$be = $1113;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 124: case 116: case 108: case 100: case 92: case 84: case 76: case 68:  {
      $1115 = $flags$061 & -2;
      $1116 = HEAP8[$141>>0]|0;
      $1117 = $1116&255;
      HEAP8[$141>>0] = 0;
      $data$1 = $1117;$flags$4 = $1115;$opcode$0 = 16;$pc$3 = $990;$s_time$4 = $995;
      label = 82;
      break L6;
      break;
     }
     case 177: case 161:  {
      $inc$0 = 1;
      label = 184;
      break;
     }
     case 185: case 169:  {
      $inc$0 = -1;
      label = 184;
      break;
     }
     case 176: case 160:  {
      $inc59$0 = 1;
      label = 187;
      break;
     }
     case 184: case 168:  {
      $inc59$0 = -1;
      label = 187;
      break;
     }
     case 179: case 163:  {
      $inc62$0 = 1;
      label = 190;
      break;
     }
     case 178: case 162:  {
      $inc65$0 = 1;
      label = 192;
      break;
     }
     case 187: case 171:  {
      $inc62$0 = -1;
      label = 190;
      break;
     }
     case 71:  {
      $1225 = HEAP8[$151>>0]|0;
      HEAP8[$152>>0] = $1225;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 79:  {
      $1226 = HEAP8[$153>>0]|0;
      HEAP8[$154>>0] = $1226;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = 1;
      break L6;
      break;
     }
     case 186: case 170:  {
      $inc65$0 = -1;
      label = 192;
      break;
     }
     case 87:  {
      $1227 = HEAP8[$155>>0]|0;
      HEAP8[$156>>0] = $1227;
      $warning$1$off0 = $warning$0$off0115;
      label = 197;
      break;
     }
     case 95:  {
      $1228 = HEAP8[$159>>0]|0;
      HEAP8[$160>>0] = $1228;
      $warning$1$off0 = 1;
      label = 197;
      break;
     }
     case 125: case 117: case 109: case 101: case 93: case 85: case 77: case 69:  {
      $1242 = HEAP8[$161>>0]|0;
      HEAP8[$162>>0] = $1242;
      $s_time$2 = $995;
      label = 58;
      break L6;
      break;
     }
     case 110: case 102: case 78: case 70:  {
      HEAP8[$163>>0] = 0;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 118: case 86:  {
      HEAP8[$164>>0] = 1;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     case 126: case 94:  {
      HEAP8[$165>>0] = 2;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
      break;
     }
     default: {
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = 1;
      break L6;
     }
     }
    } while(0);
    if ((label|0) == 172) {
     label = 0;
     $1001 = $flags$061 & 1;
     $1002 = (($temp47$0) + ($1001))|0;
     $1003 = $188 >>> 2;
     $1004 = $1003 & 2;
     $1005 = ($1004|0)==(0);
     $1006 = (0 - ($1002))|0;
     $$20 = $1005 ? $1006 : $1002;
     $1007 = HEAP16[$132>>1]|0;
     $1008 = $1007&65535;
     $1009 = (($$20) + ($1008))|0;
     $1010 = $1008 ^ $temp47$0;
     $1011 = $1010 ^ $1009;
     $1012 = $1009 >>> 16;
     $1013 = $1012 & 1;
     $1014 = $1011 >>> 8;
     $1015 = $1014 & 16;
     $1016 = $1009 >>> 8;
     $1017 = $1016 & 168;
     $1018 = (($1011) + 32768)|0;
     $1019 = $1018 >>> 14;
     $1020 = $1019 & 4;
     $1021 = $1013 | $1004;
     $1022 = $1021 | $1017;
     $1023 = $1022 | $1015;
     $1024 = $1023 | $1020;
     $1025 = $1024 ^ 2;
     $1026 = $1009&65535;
     HEAP16[$132>>1] = $1026;
     $1027 = ($1026<<16>>16)==(0);
     $1028 = $1025 | 64;
     $$29 = $1027 ? $1028 : $1025;
     $flags$0$be = $$29;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
     break L6;
    }
    else if ((label|0) == 175) {
     label = 0;
     $1041 = HEAP32[$s>>2]|0;
     $1042 = (($1041) + ($995))|0;
     $1043 = HEAP16[$0>>1]|0;
     $1044 = $1043&65535;
     $1045 = $188 >>> 3;
     $1046 = $1045 ^ 1;
     $1047 = (($135) + ($1046)|0);
     $1048 = HEAP8[$1047>>0]|0;
     $1049 = $1048&255;
     __Z10ay_cpu_outP6Ay_Cpuiji($this,$1042,$1044,$1049);
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
     break L6;
    }
    else if ((label|0) == 177) {
     label = 0;
     $1054 = (($27) + ($990)|0);
     $1055 = (__Z8get_le16PKv($1054)|0);
     $1056 = (($$in) + 4)|0;
     $1057 = (($27) + ($1055)|0);
     __Z8set_le16Pvj($1057,$temp50$0);
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1056;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
     break L6;
    }
    else if ((label|0) == 184) {
     label = 0;
     $1118 = HEAP16[$142>>1]|0;
     $1119 = $1118&65535;
     $1120 = (($1119) + ($inc$0))|0;
     $1121 = $1120&65535;
     HEAP16[$142>>1] = $1121;
     $1122 = (($27) + ($1119)|0);
     $1123 = HEAP8[$1122>>0]|0;
     $1124 = $1123&255;
     $1125 = HEAP8[$143>>0]|0;
     $1126 = $1125&255;
     $1127 = (($1126) - ($1124))|0;
     $1128 = $flags$061 & 1;
     $1129 = $1125 ^ $1123;
     $1130 = $1129&255;
     $1131 = $1130 & 16;
     $$masked8 = $1127 & 144;
     $1132 = $1131 ^ $$masked8;
     $1133 = $1132 | $1128;
     $1134 = $1127&255;
     $1135 = ($1134<<24>>24)==(0);
     $$21$v = $1135 ? 66 : 2;
     $$21 = $1133 | $$21$v;
     $1136 = $1132 >>> 4;
     $1137 = $1136 & 1;
     $1138 = (($1127) - ($1137))|0;
     $1139 = $1138 & 8;
     $1140 = $$21 | $1139;
     $1141 = $1138 << 4;
     $1142 = $1141 & 32;
     $1143 = $1140 | $1142;
     $1144 = HEAP16[$0>>1]|0;
     $1145 = (($1144) + -1)<<16>>16;
     HEAP16[$0>>1] = $1145;
     $1146 = ($1145<<16>>16)==(0);
     if ($1146) {
      $flags$0$be = $1143;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
     }
     $1147 = $1143 | 4;
     $1148 = $$21$v & 64;
     $1149 = ($1148|0)!=(0);
     $1150 = ($187&255)<(176);
     $or$cond = $1149 | $1150;
     $1151 = (($995) + 5)|0;
     $$pc$1 = $or$cond ? $990 : $$in;
     $$22 = $or$cond ? $995 : $1151;
     $flags$0$be = $1147;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $$pc$1;$s_time$1$be = $$22;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
     break L6;
    }
    else if ((label|0) == 187) {
     label = 0;
     $1152 = HEAP16[$144>>1]|0;
     $1153 = $1152&65535;
     $1154 = (($1153) + ($inc59$0))|0;
     $1155 = $1154&65535;
     HEAP16[$144>>1] = $1155;
     $1156 = (($27) + ($1153)|0);
     $1157 = HEAP8[$1156>>0]|0;
     $1158 = $1157&255;
     $1159 = HEAP16[$145>>1]|0;
     $1160 = $1159&65535;
     $1161 = (($1160) + ($inc59$0))|0;
     $1162 = $1161&65535;
     HEAP16[$145>>1] = $1162;
     $1163 = (($27) + ($1160)|0);
     HEAP8[$1163>>0] = $1157;
     $1164 = HEAP8[$146>>0]|0;
     $1165 = $1164&255;
     $1166 = (($1165) + ($1158))|0;
     $1167 = $flags$061 & 193;
     $1168 = $1166 & 8;
     $1169 = $1168 | $1167;
     $1170 = $1166 << 4;
     $1171 = $1170 & 32;
     $1172 = $1169 | $1171;
     $1173 = HEAP16[$0>>1]|0;
     $1174 = (($1173) + -1)<<16>>16;
     HEAP16[$0>>1] = $1174;
     $1175 = ($1174<<16>>16)==(0);
     if ($1175) {
      $flags$0$be = $1172;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L6;
     }
     $1176 = $1172 | 4;
     $1177 = ($187&255)<(176);
     $1178 = (($995) + 5)|0;
     $$pc$123 = $1177 ? $990 : $$in;
     $$24 = $1177 ? $995 : $1178;
     $flags$0$be = $1176;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $$pc$123;$s_time$1$be = $$24;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
     break L6;
    }
    else if ((label|0) == 190) {
     label = 0;
     $1179 = HEAP16[$147>>1]|0;
     $1180 = $1179&65535;
     $1181 = (($1180) + ($inc62$0))|0;
     $1182 = $1181&65535;
     HEAP16[$147>>1] = $1182;
     $1183 = (($27) + ($1180)|0);
     $1184 = HEAP8[$1183>>0]|0;
     $1185 = $1184&255;
     $1186 = HEAP8[$148>>0]|0;
     $1187 = (($1186) + -1)<<24>>24;
     HEAP8[$148>>0] = $1187;
     $1188 = $1187&255;
     $1189 = $1185 >>> 6;
     $1190 = $1189 & 2;
     $1191 = (($this) + ($1188)|0);
     $1192 = HEAP8[$1191>>0]|0;
     $1193 = $1192&255;
     $1194 = $1193 & 251;
     $1195 = $1194 | $1190;
     $1196 = ($1187<<24>>24)!=(0);
     $1197 = ($187&255)>(175);
     $or$cond3 = $1196 & $1197;
     $1198 = (($995) + 5)|0;
     $pc$1$ = $or$cond3 ? $$in : $990;
     $$25 = $or$cond3 ? $1198 : $995;
     $1199 = HEAP32[$s>>2]|0;
     $1200 = (($$25) + ($1199))|0;
     $1201 = HEAP16[$0>>1]|0;
     $1202 = $1201&65535;
     __Z10ay_cpu_outP6Ay_Cpuiji($this,$1200,$1202,$1185);
     $flags$0$be = $1195;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$1$;$s_time$1$be = $$25;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
     break L6;
    }
    else if ((label|0) == 192) {
     label = 0;
     $1203 = HEAP16[$149>>1]|0;
     $1204 = $1203&65535;
     $1205 = (($1204) + ($inc65$0))|0;
     $1206 = $1205&65535;
     HEAP16[$149>>1] = $1206;
     $1207 = HEAP16[$0>>1]|0;
     $1208 = $1207&65535;
     $1209 = (__Z9ay_cpu_inP6Ay_Cpuj($this,$1208)|0);
     $1210 = HEAP8[$150>>0]|0;
     $1211 = (($1210) + -1)<<24>>24;
     HEAP8[$150>>0] = $1211;
     $1212 = $1211&255;
     $1213 = $1209 >>> 6;
     $1214 = $1213 & 2;
     $1215 = (($this) + ($1212)|0);
     $1216 = HEAP8[$1215>>0]|0;
     $1217 = $1216&255;
     $1218 = $1217 & 251;
     $1219 = $1218 | $1214;
     $1220 = ($1211<<24>>24)!=(0);
     $1221 = ($187&255)>(175);
     $or$cond5 = $1220 & $1221;
     $1222 = (($995) + 5)|0;
     $pc$1$26 = $or$cond5 ? $$in : $990;
     $$27 = $or$cond5 ? $1222 : $995;
     $1223 = $1209&255;
     $1224 = (($27) + ($1204)|0);
     HEAP8[$1224>>0] = $1223;
     $flags$0$be = $1219;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$1$26;$s_time$1$be = $$27;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
     break L6;
    }
    else if ((label|0) == 197) {
     label = 0;
     $1229 = $flags$061 & 1;
     $1230 = HEAP8[$157>>0]|0;
     $1231 = $1230&255;
     $1232 = (($this) + ($1231)|0);
     $1233 = HEAP8[$1232>>0]|0;
     $1234 = $1233&255;
     $1235 = $1234 & 251;
     $1236 = $1235 | $1229;
     $1237 = HEAP8[$158>>0]|0;
     $1238 = $1237&255;
     $1239 = $1238 << 2;
     $1240 = $1239 & 4;
     $1241 = $1236 | $1240;
     $flags$0$be = $1241;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $990;$s_time$1$be = $995;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$1$off0;
     break L6;
    }
    break;
   }
   case 253:  {
    $ixy$0 = $iy$067;
    label = 203;
    break;
   }
   case 221:  {
    $ixy$0 = $ix$082;
    label = 203;
    break;
   }
   case 118:  {
    $$in$lcssa162 = $$in;$$lcssa159 = $173;$flags$061$lcssa177 = $flags$061;$ix$082$lcssa171 = $ix$082;$iy$067$lcssa174 = $iy$067;$sp$097$lcssa168 = $sp$097;$warning$0$off0115$lcssa165 = $warning$0$off0115;
    label = 262;
    break L4;
    break;
   }
   default: {
    label = 261;
    break L4;
   }
   }
  } while(0);
  L181:   switch (label|0) {
   case 3: {
    label = 0;
    $172 = (($173) + -5)|0;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$0;$s_time$1$be = $172;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 5: {
    label = 0;
    $183 = (($173) + -7)|0;
    $s_time$0 = $183;
    label = 6;
    break;
   }
   case 58: {
    label = 0;
    $290 = (($27) + ($sp$097)|0);
    $291 = (__Z8get_le16PKv($290)|0);
    $292 = (($sp$097) + 2)|0;
    $293 = $292 & 65535;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $291;$s_time$1$be = $s_time$2;$sp$0$be = $293;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 67: {
    label = 0;
    $310 = (($$in) + 3)|0;
    $311 = (__Z8get_le16PKv($186)|0);
    $312 = (($sp$097) + 65534)|0;
    $313 = $312 & 65535;
    $314 = (($27) + ($313)|0);
    __Z8set_le16Pvj($314,$310);
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $311;$s_time$1$be = $173;$sp$0$be = $313;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 70: {
    label = 0;
    $318 = $189 & 56;
    $data$0 = $185;$pc$2 = $318;$s_time$3 = $173;
    label = 73;
    break;
   }
   case 77: {
    label = 0;
    $346 = HEAP16[$66>>1]|0;
    $347 = $346&65535;
    $348 = (($27) + ($347)|0);
    $349 = HEAP8[$348>>0]|0;
    $350 = $349&255;
    $data$1 = $350;$flags$4 = $flags$1;$opcode$0 = $189;$pc$3 = $185;$s_time$4 = $173;
    label = 82;
    break;
   }
   case 79: {
    label = 0;
    $352 = (($$in) + 2)|0;
    $data$1 = $188;$flags$4 = $flags$2;$opcode$0 = $189;$pc$3 = $352;$s_time$4 = $173;
    label = 82;
    break;
   }
   case 81: {
    label = 0;
    $354 = $189 & 7;
    $355 = $354 ^ 1;
    $356 = (($0) + ($355)|0);
    $357 = HEAP8[$356>>0]|0;
    $358 = $357&255;
    $data$1 = $358;$flags$4 = $flags$3;$opcode$0 = $189;$pc$3 = $185;$s_time$4 = $173;
    label = 82;
    break;
   }
   case 88: {
    label = 0;
    $415 = HEAP16[$71>>1]|0;
    $416 = $415&65535;
    $417 = (($416) + ($data$3))|0;
    $418 = $416 ^ $data$3;
    $419 = $417&65535;
    HEAP16[$71>>1] = $419;
    $420 = $flags$061 & 196;
    $421 = $417 >>> 16;
    $422 = $421 | $420;
    $423 = $417 >>> 8;
    $424 = $423 & 40;
    $425 = $422 | $424;
    $426 = $418 ^ $417;
    $427 = $426 >>> 8;
    $428 = $427 & 16;
    $429 = $425 | $428;
    $flags$0$be = $429;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $173;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 203: {
    label = 0;
    $1243 = (($$in) + 2)|0;
    $1244 = (($27) + ($1243)|0);
    $1245 = HEAP8[$1244>>0]|0;
    $1246 = $1245&255;
    $1247 = (40520 + ($188)|0);
    $1248 = HEAP8[$1247>>0]|0;
    $1249 = $1248&255;
    $1250 = $1249 & 15;
    $1251 = (($1250) + ($173))|0;
    do {
     switch ($188|0) {
     case 109: case 100:  {
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1243;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L181;
      break;
     }
     case 229:  {
      $data$0 = $ixy$0;$pc$2 = $1243;$s_time$3 = $1251;
      label = 73;
      break L181;
      break;
     }
     case 134: case 150:  {
      $1252 = $flags$061 & -2;
      $flags$8 = $1252;
      label = 205;
      break;
     }
     case 142: case 158:  {
      $flags$8 = $flags$061;
      label = 205;
      break;
     }
     case 132: case 148:  {
      $1260 = $flags$061 & -2;
      $flags$9 = $1260;
      label = 207;
      break;
     }
     case 140: case 156:  {
      $flags$9 = $flags$061;
      label = 207;
      break;
     }
     case 133: case 149:  {
      $1262 = $flags$061 & -2;
      $flags$10 = $1262;
      label = 209;
      break;
     }
     case 141: case 157:  {
      $flags$10 = $flags$061;
      label = 209;
      break;
     }
     case 41:  {
      $temp70$0 = $ixy$0;
      label = 212;
      break;
     }
     case 25: case 9:  {
      $1264 = $188 >>> 3;
      $$sum = (($1264) + -1)|0;
      $1265 = (($0) + ($$sum)|0);
      $1266 = HEAP16[$1265>>1]|0;
      $1267 = $1266&65535;
      $temp70$0 = $1267;
      label = 212;
      break;
     }
     case 57:  {
      $temp70$0 = $sp$097;
      label = 212;
      break;
     }
     case 166:  {
      $1281 = (($$in) + 3)|0;
      $1282 = $1245 << 24 >> 24;
      $1283 = (($1282) + ($ixy$0))|0;
      $1284 = $1283 & 65535;
      $1285 = (($27) + ($1284)|0);
      $1286 = HEAP8[$1285>>0]|0;
      $1287 = $1286&255;
      $data$6 = $1287;$pc$7 = $1281;$s_time$8 = $1251;
      label = 103;
      break L181;
      break;
     }
     case 164:  {
      $1288 = $ixy$0 >>> 8;
      $data$6 = $1288;$pc$7 = $1243;$s_time$8 = $1251;
      label = 103;
      break L181;
      break;
     }
     case 165:  {
      $1289 = $ixy$0 & 255;
      $data$6 = $1289;$pc$7 = $1243;$s_time$8 = $1251;
      label = 103;
      break L181;
      break;
     }
     case 182:  {
      $1290 = (($$in) + 3)|0;
      $1291 = $1245 << 24 >> 24;
      $1292 = (($1291) + ($ixy$0))|0;
      $1293 = $1292 & 65535;
      $1294 = (($27) + ($1293)|0);
      $1295 = HEAP8[$1294>>0]|0;
      $1296 = $1295&255;
      $data$7 = $1296;$pc$8 = $1290;$s_time$9 = $1251;
      label = 107;
      break L181;
      break;
     }
     case 180:  {
      $1297 = $ixy$0 >>> 8;
      $data$7 = $1297;$pc$8 = $1243;$s_time$9 = $1251;
      label = 107;
      break L181;
      break;
     }
     case 181:  {
      $1298 = $ixy$0 & 255;
      $data$7 = $1298;$pc$8 = $1243;$s_time$9 = $1251;
      label = 107;
      break L181;
      break;
     }
     case 174:  {
      $1299 = (($$in) + 3)|0;
      $1300 = $1245 << 24 >> 24;
      $1301 = (($1300) + ($ixy$0))|0;
      $1302 = $1301 & 65535;
      $1303 = (($27) + ($1302)|0);
      $1304 = HEAP8[$1303>>0]|0;
      $1305 = $1304&255;
      $data$8 = $1305;$pc$9 = $1299;$s_time$10 = $1251;
      label = 111;
      break L181;
      break;
     }
     case 172:  {
      $1306 = $ixy$0 >>> 8;
      $data$8 = $1306;$pc$9 = $1243;$s_time$10 = $1251;
      label = 111;
      break L181;
      break;
     }
     case 173:  {
      $1307 = $ixy$0 & 255;
      $data$8 = $1307;$pc$9 = $1243;$s_time$10 = $1251;
      label = 111;
      break L181;
      break;
     }
     case 190:  {
      $1308 = (($$in) + 3)|0;
      $1309 = $1245 << 24 >> 24;
      $1310 = (($1309) + ($ixy$0))|0;
      $1311 = $1310 & 65535;
      $1312 = (($27) + ($1311)|0);
      $1313 = HEAP8[$1312>>0]|0;
      $1314 = $1313&255;
      $data$2 = $1314;$pc$4 = $1308;$s_time$5 = $1251;
      label = 86;
      break L181;
      break;
     }
     case 188:  {
      $1315 = $ixy$0 >>> 8;
      $data$2 = $1315;$pc$4 = $1243;$s_time$5 = $1251;
      label = 86;
      break L181;
      break;
     }
     case 189:  {
      $1316 = $ixy$0 & 255;
      $data$2 = $1316;$pc$4 = $1243;$s_time$5 = $1251;
      label = 86;
      break L181;
      break;
     }
     case 119: case 117: case 116: case 115: case 114: case 113: case 112:  {
      $1317 = $188 ^ 1;
      $1318 = (($166) + ($1317)|0);
      $$sink$in = $1318;$pc$20 = $1243;
      label = 227;
      break;
     }
     case 54:  {
      $1319 = (($$in) + 3)|0;
      $1320 = (($27) + ($1319)|0);
      $$sink$in = $1320;$pc$20 = $1319;
      label = 227;
      break;
     }
     case 124: case 92: case 84: case 76: case 68:  {
      $1326 = $ixy$0 >>> 8;
      $1327 = $1326&255;
      $1328 = $188 >>> 3;
      $1329 = $1328 ^ 1;
      $1330 = (($167) + ($1329)|0);
      HEAP8[$1330>>0] = $1327;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1243;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L181;
      break;
     }
     case 125: case 93: case 85: case 77: case 69:  {
      $1331 = $ixy$0&255;
      $1332 = $188 >>> 3;
      $1333 = $1332 ^ 1;
      $1334 = (($168) + ($1333)|0);
      HEAP8[$1334>>0] = $1331;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1243;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L181;
      break;
     }
     case 126: case 110: case 102: case 94: case 86: case 78: case 70:  {
      $1335 = (($$in) + 3)|0;
      $1336 = $1245 << 24 >> 24;
      $1337 = (($1336) + ($ixy$0))|0;
      $1338 = $1337 & 65535;
      $1339 = (($27) + ($1338)|0);
      $1340 = HEAP8[$1339>>0]|0;
      $1341 = $188 >>> 3;
      $1342 = $1341 ^ 1;
      $1343 = (($169) + ($1342)|0);
      HEAP8[$1343>>0] = $1340;
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1335;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L181;
      break;
     }
     case 38:  {
      $1344 = (($$in) + 3)|0;
      $data269$0 = $1246;$pc$21 = $1344;
      label = 234;
      break;
     }
     case 101:  {
      $1345 = $ixy$0 & 255;
      $data269$0 = $1345;$pc$21 = $1243;
      label = 234;
      break;
     }
     case 103: case 99: case 98: case 97: case 96:  {
      $1346 = $188 ^ 1;
      $1347 = (($170) + ($1346)|0);
      $1348 = HEAP8[$1347>>0]|0;
      $1349 = $1348&255;
      $data269$0 = $1349;$pc$21 = $1243;
      label = 234;
      break;
     }
     case 46:  {
      $1353 = (($$in) + 3)|0;
      $data269$1 = $1246;$pc$22 = $1353;
      label = 238;
      break;
     }
     case 108:  {
      $1354 = $ixy$0 >>> 8;
      $data269$1 = $1354;$pc$22 = $1243;
      label = 238;
      break;
     }
     case 111: case 107: case 106: case 105: case 104:  {
      $1355 = $188 ^ 1;
      $1356 = (($171) + ($1355)|0);
      $1357 = HEAP8[$1356>>0]|0;
      $1358 = $1357&255;
      $data269$1 = $1358;$pc$22 = $1243;
      label = 238;
      break;
     }
     case 249:  {
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1243;$s_time$1$be = $1251;$sp$0$be = $ixy$0;$warning$0$off0$be = $warning$0$off0115;
      break L181;
      break;
     }
     case 34:  {
      $1363 = (__Z8get_le16PKv($1244)|0);
      $1364 = (($$in) + 4)|0;
      $1365 = (($27) + ($1363)|0);
      __Z8set_le16Pvj($1365,$ixy$0);
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1364;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L181;
      break;
     }
     case 33:  {
      $1366 = (__Z8get_le16PKv($1244)|0);
      $1367 = (($$in) + 4)|0;
      $flags$11 = $flags$061;$ixy$1 = $1366;$pc$23 = $1367;$sp$1 = $sp$097;
      break;
     }
     case 42:  {
      $1368 = (__Z8get_le16PKv($1244)|0);
      $1369 = (($27) + ($1368)|0);
      $1370 = (__Z8get_le16PKv($1369)|0);
      $1371 = (($$in) + 4)|0;
      $flags$11 = $flags$061;$ixy$1 = $1370;$pc$23 = $1371;$sp$1 = $sp$097;
      break;
     }
     case 203:  {
      $1372 = $1245 << 24 >> 24;
      $1373 = (($1372) + ($ixy$0))|0;
      $1374 = $1373 & 65535;
      $1375 = (($$in) + 3)|0;
      $1376 = (($27) + ($1375)|0);
      $1377 = HEAP8[$1376>>0]|0;
      $1378 = $1377&255;
      $1379 = (($$in) + 4)|0;
      switch ($1378|0) {
      case 6:  {
       $data$9 = $1374;$pc$10 = $1379;$s_time$11 = $1251;
       label = 140;
       break L181;
       break;
      }
      case 22:  {
       $data$10 = $1374;$pc$11 = $1379;$s_time$12 = $1251;
       label = 143;
       break L181;
       break;
      }
      case 38:  {
       $data$11 = $1374;$pc$12 = $1379;$s_time$13 = $1251;
       label = 146;
       break L181;
       break;
      }
      case 54:  {
       $data$12 = $1374;$pc$13 = $1379;$s_time$14 = $1251;
       label = 149;
       break L181;
       break;
      }
      case 14:  {
       $data$13 = $1374;$pc$14 = $1379;$s_time$15 = $1251;
       label = 152;
       break L181;
       break;
      }
      case 30:  {
       $data$14 = $1374;$pc$15 = $1379;$s_time$16 = $1251;
       label = 155;
       break L181;
       break;
      }
      case 46:  {
       $data$15 = $1374;$pc$16 = $1379;$s_time$17 = $1251;
       label = 158;
       break L181;
       break;
      }
      case 62:  {
       $data$16 = $1374;$pc$17 = $1379;$s_time$18 = $1251;
       label = 161;
       break L181;
       break;
      }
      case 126: case 118: case 110: case 102: case 94: case 86: case 78: case 70:  {
       $1380 = (($27) + ($1374)|0);
       $1381 = HEAP8[$1380>>0]|0;
       $1382 = $1381&255;
       $1383 = $1378 >>> 3;
       $1384 = $1383 & 7;
       $1385 = 1 << $1384;
       $1386 = $1382 & $1385;
       $1387 = $flags$061 & 1;
       $1388 = $1386 & 128;
       $1389 = (($1386) + 32767)|0;
       $1390 = $1389 >>> 8;
       $1391 = $1390 & 68;
       $1392 = $1387 | $1388;
       $1393 = $1392 | $1391;
       $1394 = $1393 | 16;
       $flags$0$be = $1394;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1379;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
       break L181;
       break;
      }
      case 254: case 246: case 238: case 230: case 222: case 214: case 206: case 198: case 190: case 182: case 174: case 166: case 158: case 150: case 142: case 134:  {
       $1395 = (($27) + ($1374)|0);
       $1396 = HEAP8[$1395>>0]|0;
       $1397 = $1396&255;
       $1398 = $1378 >>> 3;
       $1399 = $1398 & 7;
       $1400 = 1 << $1399;
       $1401 = $1397 | $1400;
       $1402 = $1378 & 64;
       $1403 = ($1402|0)==(0);
       $1404 = $1403 ? $1400 : 0;
       $$28 = $1401 ^ $1404;
       $1405 = $$28&255;
       HEAP8[$1395>>0] = $1405;
       $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1379;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
       break L181;
       break;
      }
      default: {
       $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1379;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = 1;
       break L181;
      }
      }
      break;
     }
     case 35:  {
      $1406 = (($ixy$0) + 1)|0;
      $1407 = $1406 & 65535;
      $flags$11 = $flags$061;$ixy$1 = $1407;$pc$23 = $1243;$sp$1 = $sp$097;
      break;
     }
     case 43:  {
      $1408 = (($ixy$0) + 65535)|0;
      $1409 = $1408 & 65535;
      $flags$11 = $flags$061;$ixy$1 = $1409;$pc$23 = $1243;$sp$1 = $sp$097;
      break;
     }
     case 52:  {
      $1410 = $1245 << 24 >> 24;
      $1411 = (($1410) + ($ixy$0))|0;
      $1412 = $1411 & 65535;
      $1413 = (($$in) + 3)|0;
      $1414 = (($27) + ($1412)|0);
      $1415 = HEAP8[$1414>>0]|0;
      $1416 = $1415&255;
      $1417 = (($1416) + 1)|0;
      $1418 = $1417&255;
      HEAP8[$1414>>0] = $1418;
      $data$4 = $1417;$ix$1 = $ix$082;$iy$1 = $iy$067;$pc$5 = $1413;$s_time$6 = $1251;
      label = 92;
      break L181;
      break;
     }
     case 53:  {
      $1419 = $1245 << 24 >> 24;
      $1420 = (($1419) + ($ixy$0))|0;
      $1421 = $1420 & 65535;
      $1422 = (($$in) + 3)|0;
      $1423 = (($27) + ($1421)|0);
      $1424 = HEAP8[$1423>>0]|0;
      $1425 = $1424&255;
      $1426 = (($1425) + -1)|0;
      $1427 = $1426&255;
      HEAP8[$1423>>0] = $1427;
      $data$5 = $1426;$ix$2 = $ix$082;$iy$2 = $iy$067;$pc$6 = $1422;$s_time$7 = $1251;
      label = 95;
      break L181;
      break;
     }
     case 36:  {
      $1428 = (($ixy$0) + 256)|0;
      $1429 = $1428 & 65535;
      $1430 = $1429 >>> 8;
      $data$18 = $1430;$ixy$2 = $1429;
      label = 253;
      break;
     }
     case 44:  {
      $1431 = (($ixy$0) + 1)|0;
      $1432 = $1431 & 255;
      $1433 = $ixy$0 & 65280;
      $1434 = $1432 | $1433;
      $data$18 = $1432;$ixy$2 = $1434;
      label = 253;
      break;
     }
     case 37:  {
      $1436 = (($ixy$0) + 65280)|0;
      $1437 = $1436 & 65535;
      $1438 = $1437 >>> 8;
      $data$19 = $1438;$ixy$3 = $1437;
      label = 256;
      break;
     }
     case 45:  {
      $1439 = (($ixy$0) + 255)|0;
      $1440 = $1439 & 255;
      $1441 = $ixy$0 & 65280;
      $1442 = $1440 | $1441;
      $data$19 = $1440;$ixy$3 = $1442;
      label = 256;
      break;
     }
     case 225:  {
      $1444 = (($27) + ($sp$097)|0);
      $1445 = (__Z8get_le16PKv($1444)|0);
      $1446 = (($sp$097) + 2)|0;
      $1447 = $1446 & 65535;
      $flags$11 = $flags$061;$ixy$1 = $1445;$pc$23 = $1243;$sp$1 = $1447;
      break;
     }
     case 233:  {
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $ixy$0;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
      break L181;
      break;
     }
     case 227:  {
      $1448 = (($27) + ($sp$097)|0);
      $1449 = (__Z8get_le16PKv($1448)|0);
      __Z8set_le16Pvj($1448,$ixy$0);
      $flags$11 = $flags$061;$ixy$1 = $1449;$pc$23 = $1243;$sp$1 = $sp$097;
      break;
     }
     default: {
      $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $185;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = 1;
      break L181;
     }
     }
    } while(0);
    if ((label|0) == 205) {
     label = 0;
     $1253 = (($$in) + 3)|0;
     $1254 = $1245 << 24 >> 24;
     $1255 = (($1254) + ($ixy$0))|0;
     $1256 = $1255 & 65535;
     $1257 = (($27) + ($1256)|0);
     $1258 = HEAP8[$1257>>0]|0;
     $1259 = $1258&255;
     $data$1 = $1259;$flags$4 = $flags$8;$opcode$0 = $188;$pc$3 = $1253;$s_time$4 = $1251;
     label = 82;
     break;
    }
    else if ((label|0) == 207) {
     label = 0;
     $1261 = $ixy$0 >>> 8;
     $data$1 = $1261;$flags$4 = $flags$9;$opcode$0 = $188;$pc$3 = $1243;$s_time$4 = $1251;
     label = 82;
     break;
    }
    else if ((label|0) == 209) {
     label = 0;
     $1263 = $ixy$0 & 255;
     $data$1 = $1263;$flags$4 = $flags$10;$opcode$0 = $188;$pc$3 = $1243;$s_time$4 = $1251;
     label = 82;
     break;
    }
    else if ((label|0) == 212) {
     label = 0;
     $1268 = (($temp70$0) + ($ixy$0))|0;
     $1269 = $temp70$0 ^ $ixy$0;
     $1270 = $1268 & 65535;
     $1271 = $flags$061 & 196;
     $1272 = $1268 >>> 16;
     $1273 = $1272 | $1271;
     $1274 = $1268 >>> 8;
     $1275 = $1274 & 40;
     $1276 = $1273 | $1275;
     $1277 = $1269 ^ $1268;
     $1278 = $1277 >>> 8;
     $1279 = $1278 & 16;
     $1280 = $1276 | $1279;
     $flags$11 = $1280;$ixy$1 = $1270;$pc$23 = $1243;$sp$1 = $sp$097;
    }
    else if ((label|0) == 227) {
     label = 0;
     $$sink = HEAP8[$$sink$in>>0]|0;
     $1321 = (($pc$20) + 1)|0;
     $1322 = $1245 << 24 >> 24;
     $1323 = (($1322) + ($ixy$0))|0;
     $1324 = $1323 & 65535;
     $1325 = (($27) + ($1324)|0);
     HEAP8[$1325>>0] = $$sink;
     $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $1321;$s_time$1$be = $1251;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
     break;
    }
    else if ((label|0) == 234) {
     label = 0;
     $1350 = $ixy$0 & 255;
     $1351 = $data269$0 << 8;
     $1352 = $1351 | $1350;
     $flags$11 = $flags$061;$ixy$1 = $1352;$pc$23 = $pc$21;$sp$1 = $sp$097;
    }
    else if ((label|0) == 238) {
     label = 0;
     $1359 = $ixy$0 & 65280;
     $1360 = $data269$1 | $1359;
     $flags$11 = $flags$061;$ixy$1 = $1360;$pc$23 = $pc$22;$sp$1 = $sp$097;
    }
    else if ((label|0) == 253) {
     label = 0;
     $1435 = ($1362<<24>>24)==(-35);
     $iy$0$ixy$2 = $1435 ? $iy$067 : $ixy$2;
     $ixy$2$ix$0 = $1435 ? $ixy$2 : $ix$082;
     $data$4 = $data$18;$ix$1 = $ixy$2$ix$0;$iy$1 = $iy$0$ixy$2;$pc$5 = $1243;$s_time$6 = $1251;
     label = 92;
     break;
    }
    else if ((label|0) == 256) {
     label = 0;
     $1443 = ($1362<<24>>24)==(-35);
     $iy$0$ixy$3 = $1443 ? $iy$067 : $ixy$3;
     $ixy$3$ix$0 = $1443 ? $ixy$3 : $ix$082;
     $data$5 = $data$19;$ix$2 = $ixy$3$ix$0;$iy$2 = $iy$0$ixy$3;$pc$6 = $1243;$s_time$7 = $1251;
     label = 95;
     break;
    }
    $1361 = ($1362<<24>>24)==(-35);
    $iy$0$ixy$1 = $1361 ? $iy$067 : $ixy$1;
    $ixy$1$ix$0 = $1361 ? $ixy$1 : $ix$082;
    $flags$0$be = $flags$11;$ix$0$be = $ixy$1$ix$0;$iy$0$be = $iy$0$ixy$1;$pc$1$be = $pc$23;$s_time$1$be = $1251;$sp$0$be = $sp$1;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
  }
  switch (label|0) {
   case 6: {
    label = 0;
    $184 = (($$in) + 3)|0;
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $184;$s_time$1$be = $s_time$0;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 73: {
    label = 0;
    $327 = (($sp$097) + 65534)|0;
    $328 = $327 & 65535;
    $329 = (($27) + ($328)|0);
    __Z8set_le16Pvj($329,$data$0);
    $flags$0$be = $flags$061;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$2;$s_time$1$be = $s_time$3;$sp$0$be = $328;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 82: {
    label = 0;
    $359 = $flags$4 & 1;
    $360 = (($359) + ($data$1))|0;
    $361 = HEAP8[$67>>0]|0;
    $362 = $361&255;
    $363 = $362 ^ $data$1;
    $364 = $opcode$0 >>> 3;
    $365 = $364 & 2;
    $366 = ($365|0)==(0);
    $367 = (0 - ($360))|0;
    $$ = $366 ? $360 : $367;
    $368 = (($362) + ($$))|0;
    $369 = $363 ^ $368;
    $370 = $369 & 16;
    $371 = (($369) + 128)|0;
    $372 = $371 >>> 6;
    $373 = $372 & 4;
    $374 = $368 & 511;
    $375 = (($this) + ($374)|0);
    $376 = HEAP8[$375>>0]|0;
    $377 = $376&255;
    $378 = $377 & 251;
    $379 = $378 | $365;
    $380 = $379 | $370;
    $381 = $380 | $373;
    $382 = $368&255;
    HEAP8[$67>>0] = $382;
    $flags$0$be = $381;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$3;$s_time$1$be = $s_time$4;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 86: {
    label = 0;
    $393 = HEAP8[$69>>0]|0;
    $394 = $393&255;
    $395 = (($394) - ($data$2))|0;
    $396 = $data$2 & 40;
    $397 = $395 >>> 8;
    $398 = $397 & 1;
    $399 = $394 ^ $data$2;
    $400 = $395 ^ $394;
    $401 = $400 & $399;
    $402 = $401 >>> 5;
    $403 = $402 & 4;
    $404 = $399 & 16;
    $$masked = $395 & 144;
    $405 = $404 ^ $$masked;
    $406 = $395&255;
    $407 = ($406<<24>>24)==(0);
    $$14$v = $407 ? 66 : 2;
    $408 = $398 | $396;
    $409 = $408 | $405;
    $410 = $409 | $$14$v;
    $$14 = $410 | $403;
    $flags$0$be = $$14;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$4;$s_time$1$be = $s_time$5;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 92: {
    label = 0;
    $469 = $flags$061 & 1;
    $470 = $data$4 & 15;
    $471 = (($470) + 31)|0;
    $472 = $471 & 16;
    $473 = $472 | $469;
    $474 = $data$4 & 255;
    $475 = (($this) + ($474)|0);
    $476 = HEAP8[$475>>0]|0;
    $477 = $476&255;
    $478 = $477 & 251;
    $479 = $473 | $478;
    $480 = ($data$4|0)==(128);
    $481 = $479 | 4;
    $$17 = $480 ? $481 : $479;
    $flags$0$be = $$17;$ix$0$be = $ix$1;$iy$0$be = $iy$1;$pc$1$be = $pc$5;$s_time$1$be = $s_time$6;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 95: {
    label = 0;
    $495 = $flags$061 & 1;
    $496 = $data$5 & 15;
    $497 = (($496) + 1)|0;
    $498 = $497 & 16;
    $499 = $data$5 & 255;
    $500 = (($this) + ($499)|0);
    $501 = HEAP8[$500>>0]|0;
    $502 = $501&255;
    $503 = $502 & 249;
    $504 = ($data$5|0)==(127);
    $$18$v = $504 ? 6 : 2;
    $505 = $$18$v | $495;
    $506 = $505 | $498;
    $$18 = $506 | $503;
    $flags$0$be = $$18;$ix$0$be = $ix$2;$iy$0$be = $iy$2;$pc$1$be = $pc$6;$s_time$1$be = $s_time$7;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 103: {
    label = 0;
    $529 = HEAP8[$76>>0]|0;
    $530 = $529&255;
    $531 = $530 & $data$6;
    $532 = $531&255;
    HEAP8[$76>>0] = $532;
    $533 = (($this) + ($531)|0);
    $534 = HEAP8[$533>>0]|0;
    $535 = $534&255;
    $536 = $535 | 16;
    $flags$0$be = $536;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$7;$s_time$1$be = $s_time$8;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 107: {
    label = 0;
    $547 = HEAP8[$79>>0]|0;
    $548 = $547&255;
    $549 = $548 | $data$7;
    $550 = $549&255;
    HEAP8[$79>>0] = $550;
    $551 = $549 & 255;
    $552 = (($this) + ($551)|0);
    $553 = HEAP8[$552>>0]|0;
    $554 = $553&255;
    $flags$0$be = $554;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$8;$s_time$1$be = $s_time$9;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 111: {
    label = 0;
    $565 = HEAP8[$82>>0]|0;
    $566 = $565&255;
    $567 = $566 ^ $data$8;
    $568 = $567&255;
    HEAP8[$82>>0] = $568;
    $569 = $567 & 255;
    $570 = (($this) + ($569)|0);
    $571 = HEAP8[$570>>0]|0;
    $572 = $571&255;
    $flags$0$be = $572;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$9;$s_time$1$be = $s_time$10;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 140: {
    label = 0;
    $726 = (($27) + ($data$9)|0);
    $727 = HEAP8[$726>>0]|0;
    $728 = $727&255;
    $729 = $728 << 1;
    $730 = $729 & 254;
    $731 = $728 >>> 7;
    $732 = $730 | $731;
    $733 = (($this) + ($732)|0);
    $734 = HEAP8[$733>>0]|0;
    $735 = $734&255;
    $736 = $735 | $731;
    $737 = $732&255;
    HEAP8[$726>>0] = $737;
    $flags$0$be = $736;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$10;$s_time$1$be = $s_time$11;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 143: {
    label = 0;
    $754 = (($27) + ($data$10)|0);
    $755 = HEAP8[$754>>0]|0;
    $756 = $755&255;
    $757 = $756 << 1;
    $758 = $flags$061 & 1;
    $759 = $757 | $758;
    $760 = (($this) + ($759)|0);
    $761 = HEAP8[$760>>0]|0;
    $762 = $761&255;
    $763 = $759&255;
    HEAP8[$754>>0] = $763;
    $flags$0$be = $762;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$11;$s_time$1$be = $s_time$12;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 146: {
    label = 0;
    $778 = (($27) + ($data$11)|0);
    $779 = HEAP8[$778>>0]|0;
    $780 = $779&255;
    $781 = $780 << 1;
    $782 = (($this) + ($781)|0);
    $783 = HEAP8[$782>>0]|0;
    $784 = $783&255;
    $785 = $781&255;
    HEAP8[$778>>0] = $785;
    $flags$0$be = $784;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$12;$s_time$1$be = $s_time$13;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 149: {
    label = 0;
    $798 = (($27) + ($data$12)|0);
    $799 = HEAP8[$798>>0]|0;
    $800 = $799&255;
    $801 = $800 << 1;
    $802 = $801 | 1;
    $803 = (($this) + ($802)|0);
    $804 = HEAP8[$803>>0]|0;
    $805 = $804&255;
    $806 = $802&255;
    HEAP8[$798>>0] = $806;
    $flags$0$be = $805;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$13;$s_time$1$be = $s_time$14;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 152: {
    label = 0;
    $820 = (($27) + ($data$13)|0);
    $821 = HEAP8[$820>>0]|0;
    $822 = $821&255;
    $823 = $822 & 1;
    $824 = $822 << 7;
    $825 = $824 & 128;
    $826 = $822 >>> 1;
    $827 = $825 | $826;
    $828 = (($this) + ($827)|0);
    $829 = HEAP8[$828>>0]|0;
    $830 = $829&255;
    $831 = $823 | $830;
    $832 = $827&255;
    HEAP8[$820>>0] = $832;
    $flags$0$be = $831;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$14;$s_time$1$be = $s_time$15;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 155: {
    label = 0;
    $850 = (($27) + ($data$14)|0);
    $851 = HEAP8[$850>>0]|0;
    $852 = $851&255;
    $853 = $852 & 1;
    $854 = $flags$061 << 7;
    $855 = $854 & 128;
    $856 = $852 >>> 1;
    $857 = $856 | $855;
    $858 = (($this) + ($857)|0);
    $859 = HEAP8[$858>>0]|0;
    $860 = $859&255;
    $861 = $860 | $853;
    $862 = $857&255;
    HEAP8[$850>>0] = $862;
    $flags$0$be = $861;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$15;$s_time$1$be = $s_time$16;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 158: {
    label = 0;
    $880 = (($27) + ($data$15)|0);
    $881 = HEAP8[$880>>0]|0;
    $882 = $881&255;
    $883 = $882 & 1;
    $884 = $882 & 128;
    $885 = $882 >>> 1;
    $886 = $884 | $885;
    $887 = (($this) + ($886)|0);
    $888 = HEAP8[$887>>0]|0;
    $889 = $888&255;
    $890 = $883 | $889;
    $891 = $886&255;
    HEAP8[$880>>0] = $891;
    $flags$0$be = $890;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$16;$s_time$1$be = $s_time$17;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
   case 161: {
    label = 0;
    $908 = (($27) + ($data$16)|0);
    $909 = HEAP8[$908>>0]|0;
    $910 = $909&255;
    $911 = $910 & 1;
    $912 = $910 >>> 1;
    $913 = (($this) + ($912)|0);
    $914 = HEAP8[$913>>0]|0;
    $915 = $914&255;
    $916 = $911 | $915;
    $917 = $912&255;
    HEAP8[$908>>0] = $917;
    $flags$0$be = $916;$ix$0$be = $ix$082;$iy$0$be = $iy$067;$pc$1$be = $pc$17;$s_time$1$be = $s_time$18;$sp$0$be = $sp$097;$warning$0$off0$be = $warning$0$off0115;
    break;
   }
  }
  $174 = (($27) + ($pc$1$be)|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175&255;
  $177 = (40256 + ($176)|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = $178&255;
  $180 = (($179) + ($s_time$1$be))|0;
  $181 = ($180|0)<(0);
  $182 = ($180|0)<($179|0);
  $or$cond13 = $181 | $182;
  if ($or$cond13) {
   $$in = $pc$1$be;$1362 = $175;$173 = $180;$189 = $176;$flags$061 = $flags$0$be;$ix$082 = $ix$0$be;$iy$067 = $iy$0$be;$sp$097 = $sp$0$be;$warning$0$off0115 = $warning$0$off0$be;
  } else {
   $flags$033 = $flags$0$be;$ix$041 = $ix$0$be;$iy$037 = $iy$0$be;$pc$149 = $pc$1$be;$s_time$22 = $s_time$1$be;$sp$045 = $sp$0$be;$warning$0$off056 = $warning$0$off0$be;
   label = 263;
   break;
  }
 }
 if ((label|0) == 169) {
  ___assert_fail((50368|0),(34896|0),1024,(40512|0));
  // unreachable;
 }
 else if ((label|0) == 261) {
  ___assert_fail((50368|0),(34896|0),1647,(40512|0));
  // unreachable;
 }
 else if ((label|0) == 262) {
  $1450 = $$lcssa159 & 3;
  $flags$033 = $flags$061$lcssa177;$ix$041 = $ix$082$lcssa171;$iy$037 = $iy$067$lcssa174;$pc$149 = $$in$lcssa162;$s_time$22 = $1450;$sp$045 = $sp$097$lcssa168;$warning$0$off056 = $warning$0$off0115$lcssa165;
  HEAP32[$24>>2] = $s_time$22;
  $1451 = $flags$033&255;
  $1452 = (($0) + 7|0);
  HEAP8[$1452>>0] = $1451;
  $1453 = $ix$041&65535;
  HEAP16[$34>>1] = $1453;
  $1454 = $iy$037&65535;
  HEAP16[$37>>1] = $1454;
  $1455 = $sp$045&65535;
  HEAP16[$31>>1] = $1455;
  $1456 = $pc$149&65535;
  HEAP16[$28>>1] = $1456;
  $1457 = $0;
  $1458 = $1457;
  $1459 = HEAP32[$1458>>2]|0;
  $1460 = (($1457) + 4)|0;
  $1461 = $1460;
  $1462 = HEAP32[$1461>>2]|0;
  $1463 = $13;
  $1464 = $1463;
  HEAP8[$1464>>0]=$1459&255;HEAP8[$1464+1>>0]=($1459>>8)&255;HEAP8[$1464+2>>0]=($1459>>16)&255;HEAP8[$1464+3>>0]=$1459>>24;
  $1465 = (($1463) + 4)|0;
  $1466 = $1465;
  HEAP8[$1466>>0]=$1462&255;HEAP8[$1466+1>>0]=($1462>>8)&255;HEAP8[$1466+2>>0]=($1462>>16)&255;HEAP8[$1466+3>>0]=$1462>>24;
  $1467 = $s;
  $1468 = $1467;
  $1469 = HEAP32[$1468>>2]|0;
  $1470 = (($1467) + 4)|0;
  $1471 = $1470;
  $1472 = HEAP32[$1471>>2]|0;
  $1473 = $1;
  $1474 = $1473;
  HEAP32[$1474>>2] = $1469;
  $1475 = (($1473) + 4)|0;
  $1476 = $1475;
  HEAP32[$1476>>2] = $1472;
  HEAP32[$12>>2] = $1;
  STACKTOP = sp;return ($warning$0$off056|0);
 }
 else if ((label|0) == 263) {
  HEAP32[$24>>2] = $s_time$22;
  $1451 = $flags$033&255;
  $1452 = (($0) + 7|0);
  HEAP8[$1452>>0] = $1451;
  $1453 = $ix$041&65535;
  HEAP16[$34>>1] = $1453;
  $1454 = $iy$037&65535;
  HEAP16[$37>>1] = $1454;
  $1455 = $sp$045&65535;
  HEAP16[$31>>1] = $1455;
  $1456 = $pc$149&65535;
  HEAP16[$28>>1] = $1456;
  $1457 = $0;
  $1458 = $1457;
  $1459 = HEAP32[$1458>>2]|0;
  $1460 = (($1457) + 4)|0;
  $1461 = $1460;
  $1462 = HEAP32[$1461>>2]|0;
  $1463 = $13;
  $1464 = $1463;
  HEAP8[$1464>>0]=$1459&255;HEAP8[$1464+1>>0]=($1459>>8)&255;HEAP8[$1464+2>>0]=($1459>>16)&255;HEAP8[$1464+3>>0]=$1459>>24;
  $1465 = (($1463) + 4)|0;
  $1466 = $1465;
  HEAP8[$1466>>0]=$1462&255;HEAP8[$1466+1>>0]=($1462>>8)&255;HEAP8[$1466+2>>0]=($1462>>16)&255;HEAP8[$1466+3>>0]=$1462>>24;
  $1467 = $s;
  $1468 = $1467;
  $1469 = HEAP32[$1468>>2]|0;
  $1470 = (($1467) + 4)|0;
  $1471 = $1470;
  $1472 = HEAP32[$1471>>2]|0;
  $1473 = $1;
  $1474 = $1473;
  HEAP32[$1474>>2] = $1469;
  $1475 = (($1473) + 4)|0;
  $1476 = $1475;
  HEAP32[$1476>>2] = $1472;
  HEAP32[$12>>2] = $1;
  STACKTOP = sp;return ($warning$0$off056|0);
 }
 return (0)|0;
}
function __ZN6Ay_Cpu12set_end_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 520|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) - ($t))|0;
 HEAP32[$1>>2] = $t;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6))|0;
 HEAP32[$5>>2] = $7;
 return;
}
function __Z8get_le16PKv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = HEAP8[$p>>0]|0;
 $5 = $4&255;
 $6 = $3 | $5;
 return ($6|0);
}
function __Z8set_le16Pvj($p,$n) {
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >>> 8;
 $1 = $0&255;
 $2 = (($p) + 1|0);
 HEAP8[$2>>0] = $1;
 $3 = $n&255;
 HEAP8[$p>>0] = $3;
 return;
}
function __ZN6Ay_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 272|0);
 __ZN6Ay_CpuC2Ev($0);
 __ZN11Classic_EmuC2Ev($this);
 HEAP32[$this>>2] = ((34944 + 8|0));
 $1 = (($this) + 66936|0);
 __ZN6Ay_ApuC2Ev($1);
 $2 = (($this) + 860|0);
 HEAP32[$2>>2] = 0;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,35088);
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,35032);
 __ZN11Classic_Emu15set_voice_typesEPKi($this,35056);
 __ZN9Music_Emu21set_silence_lookaheadEi($this,6);
 return;
}
function __ZN6Ay_EmuD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Classic_EmuD2Ev($this);
 return;
}
function __ZN6Ay_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Ay_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZNK6Ay_Emu11track_info_EP12track_info_ti($this,$out,$track) {
 $this = $this|0;
 $out = $out|0;
 $track = $track|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 836|0);
 __ZL14copy_ay_fieldsRKN6Ay_Emu6file_tEP12track_info_ti($0,$out,$track);
 return (0|0);
}
function __ZN6Ay_Emu9load_mem_EPKhl($this,$in,$size) {
 $this = $this|0;
 $in = $in|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 836|0);
 $1 = (__ZL12parse_headerPKhlPN6Ay_Emu6file_tE($in,$size,$0)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($6) + 1)|0;
 __ZN8Gme_File15set_track_countEi($this,$7);
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 8|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10&255)>(2);
 if ($11) {
  __ZN8Gme_File11set_warningEPKc($this,44232);
 }
 __ZN9Music_Emu15set_voice_countEi($this,4);
 $12 = (($this) + 66936|0);
 $13 = (+__ZNK9Music_Emu4gainEv($this));
 __ZN6Ay_Apu6volumeEd($12,$13);
 $14 = (__ZN11Classic_Emu12setup_bufferEl($this,3546900)|0);
 $$0 = $14;
 return ($$0|0);
}
function __ZN6Ay_Emu9update_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 66936|0);
 __ZN6Ay_Apu9treble_eqERK9blip_eq_t($0,$eq);
 return;
}
function __ZN6Ay_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$0,$1) {
 $this = $this|0;
 $i = $i|0;
 $center = $center|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($i|0)>(2);
 if ($2) {
  $3 = (($this) + 860|0);
  HEAP32[$3>>2] = $center;
  return;
 } else {
  $4 = (($this) + 66936|0);
  __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($4,$i,$center);
  return;
 }
}
function __ZN6Ay_Emu10set_tempo_Ed($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK11Classic_Emu10clock_rateEv($this)|0);
 $1 = (($0|0) / 50)&-1;
 $2 = (+($1|0));
 $3 = $2 / $t;
 $4 = (~~(($3)));
 $5 = (($this) + 852|0);
 HEAP32[$5>>2] = $4;
 return;
}
function __ZN6Ay_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$ = 0, $$0 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr$0 = 0, $blocks$0 = 0, $len$0 = 0, $len$1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (__ZN11Classic_Emu12start_track_Ei($this,$track)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (($this) + 1138|0);
 _memset(($2|0),-55,256)|0;
 $3 = (($this) + 1394|0);
 _memset(($3|0),-1,16128)|0;
 $4 = (($this) + 17522|0);
 _memset(($4|0),0,49152)|0;
 $5 = (($this) + 882|0);
 _memset(($5|0),-1,256)|0;
 $6 = (($this) + 66674|0);
 _memset(($6|0),-1,256)|0;
 $7 = (($this) + 836|0);
 $8 = (($this) + 844|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $track << 2;
 $$sum2 = $10 | 2;
 $11 = (($9) + ($$sum2)|0);
 $12 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($7,$11,14)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 35112;
  return ($$0|0);
 }
 $14 = (($12) + 10|0);
 $15 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($7,$14,6)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = 35112;
  return ($$0|0);
 }
 $17 = (($12) + 12|0);
 $18 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($7,$17,8)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$0 = 35112;
  return ($$0|0);
 }
 $20 = (($this) + 272|0);
 __ZN6Ay_Cpu5resetEPv($20,$2);
 $21 = (__Z8get_be16PKv($15)|0);
 $22 = $21&65535;
 $23 = (($this) + 806|0);
 HEAP16[$23>>1] = $22;
 $24 = (($12) + 8|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = (($this) + 812|0);
 $27 = (($this) + 817|0);
 HEAP8[$27>>0] = $25;
 $28 = (($this) + 815|0);
 HEAP8[$28>>0] = $25;
 $29 = (($this) + 813|0);
 HEAP8[$29>>0] = $25;
 $30 = (($this) + 818|0);
 HEAP8[$30>>0] = $25;
 $31 = (($12) + 9|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = (($this) + 816|0);
 HEAP8[$33>>0] = $32;
 $34 = (($this) + 814|0);
 HEAP8[$34>>0] = $32;
 HEAP8[$26>>0] = $32;
 $35 = (($this) + 819|0);
 HEAP8[$35>>0] = $32;
 $36 = (($this) + 820|0);
 $37 = $26;
 $38 = $37;
 $39 = HEAPU16[$38>>1]|(HEAPU16[$38+2>>1]<<16);
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAPU16[$41>>1]|(HEAPU16[$41+2>>1]<<16);
 $43 = $36;
 $44 = $43;
 HEAP16[$44>>1]=$39&65535;HEAP16[$44+2>>1]=$39>>>16;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP16[$46>>1]=$42&65535;HEAP16[$46+2>>1]=$42>>>16;
 $47 = HEAP16[$33>>1]|0;
 $48 = (($this) + 810|0);
 HEAP16[$48>>1] = $47;
 $49 = (($this) + 808|0);
 HEAP16[$49>>1] = $47;
 $50 = (__Z8get_be16PKv($18)|0);
 $51 = ($50|0)==(0);
 if ($51) {
  $$0 = 35112;
  return ($$0|0);
 }
 $52 = (($15) + 2|0);
 $53 = (__Z8get_be16PKv($52)|0);
 $54 = ($53|0)==(0);
 $$ = $54 ? $50 : $53;
 $55 = (($this) + 840|0);
 $addr$0 = $50;$blocks$0 = $18;
 while(1) {
  $56 = (($blocks$0) + 2|0);
  $57 = (__Z8get_be16PKv($56)|0);
  $58 = (($blocks$0) + 4|0);
  $59 = (($57) + ($addr$0))|0;
  $60 = ($59>>>0)>(65536);
  if ($60) {
   __ZN8Gme_File11set_warningEPKc($this,35136);
   $61 = (65536 - ($addr$0))|0;
   $len$0 = $61;
  } else {
   $len$0 = $57;
  }
  $62 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($7,$58,0)|0);
  $63 = (($blocks$0) + 6|0);
  $64 = HEAP32[$55>>2]|0;
  $65 = $64;
  $66 = $62;
  $67 = (($65) - ($66))|0;
  $68 = ($len$0>>>0)>($67>>>0);
  if ($68) {
   __ZN8Gme_File11set_warningEPKc($this,39864);
   $69 = HEAP32[$55>>2]|0;
   $70 = $69;
   $71 = (($70) - ($66))|0;
   $len$1 = $71;
  } else {
   $len$1 = $len$0;
  }
  $72 = ((($this) + ($addr$0)|0) + 1138|0);
  _memcpy(($72|0),($62|0),($len$1|0))|0;
  $73 = HEAP32[$55>>2]|0;
  $74 = $73;
  $75 = $63;
  $76 = (($74) - ($75))|0;
  $77 = ($76|0)<(8);
  if ($77) {
   label = 12;
   break;
  }
  $78 = (__Z8get_be16PKv($63)|0);
  $79 = ($78|0)==(0);
  if ($79) {
   break;
  } else {
   $addr$0 = $78;$blocks$0 = $63;
  }
 }
 if ((label|0) == 12) {
  __ZN8Gme_File11set_warningEPKc($this,39864);
 }
 dest=$2+0|0; src=35160+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $80 = (($15) + 4|0);
 $81 = (__Z8get_be16PKv($80)|0);
 $82 = ($81|0)==(0);
 if (!($82)) {
  dest=$2+0|0; src=35176+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $83 = $81&255;
  $84 = (($this) + 1147|0);
  HEAP8[$84>>0] = $83;
  $85 = $81 >>> 8;
  $86 = $85&255;
  $87 = (($this) + 1148|0);
  HEAP8[$87>>0] = $86;
 }
 $88 = $$&255;
 $89 = (($this) + 1140|0);
 HEAP8[$89>>0] = $88;
 $90 = $$ >>> 8;
 $91 = $90&255;
 $92 = (($this) + 1141|0);
 HEAP8[$92>>0] = $91;
 $93 = (($this) + 1194|0);
 HEAP8[$93>>0] = -5;
 dest=$6+0|0; src=$2+0|0; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $94 = (($this) + 864|0);
 HEAP32[$94>>2] = 165;
 $95 = (($this) + 868|0);
 HEAP32[$95>>2] = 0;
 $96 = (($this) + 66936|0);
 __ZN6Ay_Apu5resetEv($96);
 $97 = (($this) + 852|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($this) + 856|0);
 HEAP32[$99>>2] = $98;
 __ZN11Classic_Emu17change_clock_rateEl($this,3546900);
 $100 = (+__ZNK9Music_Emu5tempoEv($this));
 __ZN9Music_Emu9set_tempoEd($this,$100);
 $101 = (($this) + 880|0);
 HEAP8[$101>>0] = 0;
 $102 = (($this) + 881|0);
 HEAP8[$102>>0] = 0;
 $103 = (($this) + 876|0);
 HEAP32[$103>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function __ZN6Ay_Emu12cpu_out_miscEiji($this,$time,$addr,$data) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 881|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = $addr & 65279;
   if ((($3|0) == 65277)) {
    $4 = (($this) + 880|0);
    HEAP8[$4>>0] = 1;
    $5 = $data & 15;
    $6 = (($this) + 872|0);
    HEAP32[$6>>2] = $5;
    return;
   } else if ((($3|0) == 48893)) {
    $7 = (($this) + 880|0);
    HEAP8[$7>>0] = 1;
    $8 = (($this) + 66936|0);
    $9 = (($this) + 872|0);
    $10 = HEAP32[$9>>2]|0;
    __ZN6Ay_Apu5writeEiii($8,$time,$10,$data);
    return;
   } else {
    break;
   }
  }
 } while(0);
 $11 = (($this) + 880|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  return;
 }
 $14 = $addr >>> 8;
 do {
  if ((($14|0) == 246)) {
   $15 = $data & 192;
   if ((($15|0) == 192)) {
    $16 = (($this) + 876|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & 15;
    $19 = (($this) + 872|0);
    HEAP32[$19>>2] = $18;
    break;
   } else if ((($15|0) == 128)) {
    $20 = (($this) + 66936|0);
    $21 = (($this) + 872|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($this) + 876|0);
    $24 = HEAP32[$23>>2]|0;
    __ZN6Ay_Apu5writeEiii($20,$time,$22,$24);
    break;
   } else {
    return;
   }
  } else if ((($14|0) == 244)) {
   $25 = (($this) + 876|0);
   HEAP32[$25>>2] = $data;
  } else {
   return;
  }
 } while(0);
 $26 = HEAP8[$0>>0]|0;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  return;
 }
 HEAP8[$0>>0] = 1;
 __ZN11Classic_Emu17change_clock_rateEl($this,2000000);
 $28 = (+__ZNK9Music_Emu5tempoEv($this));
 __ZN9Music_Emu9set_tempoEd($this,$28);
 return;
}
function __Z10ay_cpu_outP6Ay_Cpuiji($cpu,$time,$addr,$data) {
 $cpu = $cpu|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($cpu) + -272|0);
 $1 = $addr & 255;
 $2 = ($1|0)==(254);
 if ($2) {
  $3 = (($cpu) + 609|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $6 = (($cpu) + 592|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $data & 16;
   $9 = (($cpu) + 596|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($8|0);
   if ($11) {
    return;
   }
   HEAP32[$9>>2] = $8;
   $12 = (0 - ($7))|0;
   HEAP32[$6>>2] = $12;
   $13 = (($cpu) + 608|0);
   HEAP8[$13>>0] = 1;
   $14 = (($cpu) + 588|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    return;
   }
   $17 = (($cpu) + 67144|0);
   __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($17,$time,$7,$15);
   return;
  }
 }
 __ZN6Ay_Emu12cpu_out_miscEiji($0,$time,$addr,$data);
 return;
}
function __Z9ay_cpu_inP6Ay_Cpuj($0,$addr) {
 $0 = $0|0;
 $addr = $addr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 255;
}
function __ZN6Ay_Emu10run_clocksERii($this,$duration,$0) {
 $this = $this|0;
 $duration = $duration|0;
 $0 = $0|0;
 var $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 272|0);
 __ZN6Ay_Cpu8set_timeEi($1,0);
 $2 = (($this) + 880|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($this) + 881|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 | $3;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $8 = HEAP32[$duration>>2]|0;
  $9 = (($8|0) / 2)&-1;
  HEAP32[$duration>>2] = $9;
 }
 $10 = (__ZNK6Ay_Cpu4timeEv($1)|0);
 $11 = HEAP32[$duration>>2]|0;
 $12 = ($10|0)<($11|0);
 if (!($12)) {
  $$lcssa = $10;
  HEAP32[$duration>>2] = $$lcssa;
  $70 = (($this) + 856|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) - ($$lcssa))|0;
  HEAP32[$70>>2] = $72;
  $73 = HEAP32[$duration>>2]|0;
  $74 = (0 - ($73))|0;
  __ZN6Ay_Cpu11adjust_timeEi($1,$74);
  $75 = (($this) + 66936|0);
  $76 = HEAP32[$duration>>2]|0;
  __ZN6Ay_Apu9end_frameEi($75,$76);
  return (0|0);
 }
 $13 = (($this) + 856|0);
 $14 = (($this) + 852|0);
 $15 = (($this) + 828|0);
 $16 = (($this) + 804|0);
 $17 = (($this) + 829|0);
 $18 = (($this) + 806|0);
 $19 = (($this) + 832|0);
 $20 = (($this) + 831|0);
 $22 = $11;
 while(1) {
  $21 = HEAP32[$13>>2]|0;
  $23 = (__Z3minIiET_S0_S0_($22,$21)|0);
  (__ZN6Ay_Cpu3runEi($1,$23)|0);
  $24 = (__ZNK6Ay_Cpu4timeEv($1)|0);
  $25 = HEAP32[$13>>2]|0;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   $27 = HEAP32[$14>>2]|0;
   $28 = (($27) + ($25))|0;
   HEAP32[$13>>2] = $28;
   $29 = HEAP8[$15>>0]|0;
   $30 = ($29<<24>>24)==(0);
   if (!($30)) {
    $31 = HEAP16[$16>>1]|0;
    $32 = $31&65535;
    $33 = ((($this) + ($32)|0) + 1138|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)==(118);
    if ($35) {
     $36 = (($31) + 1)<<16>>16;
     HEAP16[$16>>1] = $36;
    }
    HEAP8[$17>>0] = 0;
    HEAP8[$15>>0] = 0;
    $37 = HEAP16[$16>>1]|0;
    $38 = ($37&65535) >>> 8;
    $39 = $38&255;
    $40 = HEAP16[$18>>1]|0;
    $41 = (($40) + -1)<<16>>16;
    HEAP16[$18>>1] = $41;
    $42 = $41&65535;
    $43 = ((($this) + ($42)|0) + 1138|0);
    HEAP8[$43>>0] = $39;
    $44 = HEAP16[$16>>1]|0;
    $45 = $44&255;
    $46 = HEAP16[$18>>1]|0;
    $47 = (($46) + -1)<<16>>16;
    HEAP16[$18>>1] = $47;
    $48 = $47&65535;
    $49 = ((($this) + ($48)|0) + 1138|0);
    HEAP8[$49>>0] = $45;
    HEAP16[$16>>1] = 56;
    __ZN6Ay_Cpu11adjust_timeEi($1,12);
    $50 = HEAP8[$19>>0]|0;
    $51 = ($50<<24>>24)==(2);
    if ($51) {
     __ZN6Ay_Cpu11adjust_timeEi($1,6);
     $52 = HEAP8[$20>>0]|0;
     $53 = $52&255;
     $54 = $53 << 8;
     $55 = $54 | 255;
     $56 = (($55) + 1)|0;
     $57 = $56 & 65535;
     $58 = ((($this) + ($57)|0) + 1138|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = $60 << 8;
     $62 = ((($this) + ($55)|0) + 1138|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $65 = $61 | $64;
     $66 = $65&65535;
     HEAP16[$16>>1] = $66;
    }
   }
  }
  $67 = (__ZNK6Ay_Cpu4timeEv($1)|0);
  $68 = HEAP32[$duration>>2]|0;
  $69 = ($67|0)<($68|0);
  if ($69) {
   $22 = $68;
  } else {
   $$lcssa = $67;
   break;
  }
 }
 HEAP32[$duration>>2] = $$lcssa;
 $70 = (($this) + 856|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) - ($$lcssa))|0;
 HEAP32[$70>>2] = $72;
 $73 = HEAP32[$duration>>2]|0;
 $74 = (0 - ($73))|0;
 __ZN6Ay_Cpu11adjust_timeEi($1,$74);
 $75 = (($this) + 66936|0);
 $76 = HEAP32[$duration>>2]|0;
 __ZN6Ay_Apu9end_frameEi($75,$76);
 return (0|0);
}
function __ZN8Gme_File8set_typeEPK11gme_type_t_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $t;
 return;
}
function __ZN9Music_Emu15set_voice_namesEPKPKc($this,$names) {
 $this = $this|0;
 $names = $names|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 164|0);
 HEAP32[$0>>2] = $names;
 return;
}
function __ZN11Classic_Emu15set_voice_typesEPKi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 268|0);
 HEAP32[$0>>2] = $t;
 return;
}
function __ZN9Music_Emu21set_silence_lookaheadEi($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 220|0);
 HEAP32[$0>>2] = $n;
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN8Gme_FiledlEPv($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($p);
 return;
}
function __ZL14copy_ay_fieldsRKN6Ay_Emu6file_tEP12track_info_ti($file,$out,$track) {
 $file = $file|0;
 $out = $out|0;
 $track = $track|0;
 var $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($out) + 528|0);
 $1 = (($file) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $track << 2;
 $4 = (($2) + ($3)|0);
 $5 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$4,1)|0);
 __ZN8Gme_File11copy_field_EPcPKc($0,$5);
 $6 = HEAP32[$1>>2]|0;
 $$sum1 = $3 | 2;
 $7 = (($6) + ($$sum1)|0);
 $8 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$7,6)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = (($8) + 4|0);
  $11 = (__Z8get_be16PKv($10)|0);
  $12 = ($11*20)|0;
  $13 = (($out) + 4|0);
  HEAP32[$13>>2] = $12;
 }
 $14 = (($out) + 784|0);
 $15 = HEAP32[$file>>2]|0;
 $16 = (($15) + 12|0);
 $17 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$16,1)|0);
 __ZN8Gme_File11copy_field_EPcPKc($14,$17);
 $18 = (($out) + 1296|0);
 $19 = HEAP32[$file>>2]|0;
 $20 = (($19) + 14|0);
 $21 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$20,1)|0);
 __ZN8Gme_File11copy_field_EPcPKc($18,$21);
 return;
}
function __ZL12parse_headerPKhlPN6Ay_Emu6file_tE($in,$size,$out) {
 $in = $in|0;
 $size = $size|0;
 $out = $out|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$out>>2] = $in;
 $0 = (($in) + ($size)|0);
 $1 = (($out) + 4|0);
 HEAP32[$1>>2] = $0;
 $2 = ($size|0)<(20);
 if ($2) {
  $$0 = 38248;
  return ($$0|0);
 }
 $3 = (_memcmp($in,35488,8)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 38248;
  return ($$0|0);
 }
 $5 = (($in) + 18|0);
 $6 = (($in) + 16|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 2;
 $10 = (($9) + 4)|0;
 $11 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($out,$5,$10)|0);
 $12 = (($out) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ($11|0)==(0|0);
 $$ = $13 ? 35504 : 0;
 $$0 = $$;
 return ($$0|0);
}
function __ZN8Gme_File15set_track_countEi($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = $n;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = $n;
 return;
}
function __ZN8Gme_File11set_warningEPKc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = $s;
 return;
}
function __ZN9Music_Emu15set_voice_countEi($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 168|0);
 HEAP32[$0>>2] = $n;
 return;
}
function __ZNK9Music_Emu4gainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 184|0);
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function __ZN6Ay_Apu9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 480|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($0,$eq);
 return;
}
function __ZNK11Classic_Emu10clock_rateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 260|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$ptr,$min_size) {
 $file = $file|0;
 $ptr = $ptr|0;
 $min_size = $min_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$file>>2]|0;
 $1 = $ptr;
 $2 = $0;
 $3 = (($1) - ($2))|0;
 $4 = (($file) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $7 = (($6) - ($2))|0;
 $8 = (($7) + -2)|0;
 $9 = ($3>>>0)>($8>>>0);
 if ($9) {
  ___assert_fail((35368|0),(35424|0),52,(35472|0));
  // unreachable;
 }
 $10 = (__Z8get_be16PKv($ptr)|0);
 $sext = $10 << 16;
 $11 = $sext >> 16;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = (($11) + ($3))|0;
 $14 = (($7) - ($min_size))|0;
 $15 = ($13>>>0)>($14>>>0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = (($ptr) + ($11)|0);
 $$0 = $16;
 return ($$0|0);
}
function __Z8get_be16PKv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = $1 << 8;
 $3 = (($p) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2 | $5;
 return ($6|0);
}
function __ZNK9Music_Emu5tempoEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 176|0);
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function __ZN6Ay_Apu5writeEiii($this,$time,$addr,$data) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Ay_Apu9run_untilEi($this,$time);
 __ZN6Ay_Apu11write_data_Eii($this,$addr,$data);
 return;
}
function __ZN6Ay_Cpu8set_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 520|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($t) - ($2))|0;
 $4 = (($1) + 4|0);
 HEAP32[$4>>2] = $3;
 return;
}
function __ZNK6Ay_Cpu4timeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 520|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + ($3))|0;
 return ($5|0);
}
function __Z3minIiET_S0_S0_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $x$y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x|0)<($y|0);
 $x$y = $0 ? $x : $y;
 return ($x$y|0);
}
function __ZN6Ay_Cpu11adjust_timeEi($this,$delta) {
 $this = $this|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 520|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($delta))|0;
 HEAP32[$2>>2] = $4;
 return;
}
function __ZN6Ay_Apu9end_frameEi($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($time|0);
 if ($2) {
  __ZN6Ay_Apu9run_untilEi($this,$time);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)<($time|0);
 if ($4) {
  ___assert_fail((44376|0),(35328|0),103,(46440|0));
  // unreachable;
 } else {
  $5 = (($3) - ($time))|0;
  HEAP32[$0>>2] = $5;
  return;
 }
}
function __ZN8Gme_File15clear_playlist_Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN11Classic_Emu10set_bufferEP12Multi_Buffer($this,$new_buf) {
 $this = $this|0;
 $new_buf = $new_buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $3 = ($new_buf|0)!=(0|0);
 $or$cond = $2 & $3;
 if ($or$cond) {
  HEAP32[$0>>2] = $new_buf;
  return;
 } else {
  ___assert_fail((35248|0),(35264|0),45,(35312|0));
  // unreachable;
 }
}
function __ZL10new_ay_emuv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(68232)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN6Ay_EmuC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZL11new_ay_filev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(264)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN7Ay_FileC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZN7Ay_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN7Ay_File9load_mem_EPKhl($this,$begin,$size) {
 $this = $this|0;
 $begin = $begin|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 $1 = (__ZL12parse_headerPKhlPN6Ay_Emu6file_tE($begin,$size,$0)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($6) + 1)|0;
 __ZN8Gme_File15set_track_countEi($this,$7);
 $$0 = 0;
 return ($$0|0);
}
function __ZNK7Ay_File11track_info_EP12track_info_ti($this,$out,$track) {
 $this = $this|0;
 $out = $out|0;
 $track = $track|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 __ZL14copy_ay_fieldsRKN6Ay_Emu6file_tEP12track_info_ti($0,$out,$track);
 return (0|0);
}
function __ZN9Music_Emu10set_bufferEP12Multi_Buffer($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$eq);
 return;
}
function __ZN8Gme_FilenwEj($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($s)|0);
 return ($0|0);
}
function __ZN7Ay_FileC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Gme_Info_C2Ev($this);
 HEAP32[$this>>2] = ((35528 + 8|0));
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,35088);
 return;
}
function __ZN9Gme_Info_C2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuC2Ev($this);
 HEAP32[$this>>2] = ((42144 + 8|0));
 return;
}
function __ZN11Blip_BufferC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 2147483647;
 $0 = (($this) + 4|0);
 $1 = (($this) + 32|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;HEAP32[$0+24>>2]=0|0;
 HEAP32[$1>>2] = 16;
 $2 = (($this) + 36|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN11Blip_BufferD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 return;
}
function __ZN11Blip_Buffer5clearEi($this,$entire_buffer) {
 $this = $this|0;
 $entire_buffer = $entire_buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 $6 = ($entire_buffer|0)==(0);
 if ($6) {
  $9 = (__ZNK11Blip_Buffer13samples_availEv($this)|0);
  $12 = $9;
 } else {
  $7 = (($this) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $12 = $8;
 }
 $10 = HEAP32[$3>>2]|0;
 $11 = $12 << 2;
 $13 = (($11) + 72)|0;
 _memset(($10|0),0,($13|0))|0;
 return;
}
function __ZN11Blip_Buffer15set_sample_rateEli($this,$new_rate,$msec) {
 $this = $this|0;
 $new_rate = $new_rate|0;
 $msec = $msec|0;
 var $$0 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_size$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  ___assert_fail((35688|0),(35640|0),83,(41888|0));
  // unreachable;
 }
 $3 = ($msec|0)!=(0);
 do {
  if ($3) {
   $4 = (($msec) + 1)|0;
   $5 = Math_imul($4, $new_rate)|0;
   $6 = (($5) + 999)|0;
   $7 = ($6|0)<(65453000);
   if ($7) {
    $8 = (($6|0) / 1000)&-1;
    $new_size$0 = $8;
    break;
   } else {
    ___assert_fail((35688|0),(35640|0),95,(41888|0));
    // unreachable;
   }
  } else {
   $new_size$0 = 65453;
  }
 } while(0);
 $9 = HEAP32[$0>>2]|0;
 $10 = ($9|0)==($new_size$0|0);
 do {
  if (!($10)) {
   $11 = (($this) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $new_size$0 << 2;
   $14 = (($13) + 72)|0;
   $15 = (_realloc($12,$14)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    $$0 = 50160;
    return ($$0|0);
   } else {
    HEAP32[$11>>2] = $15;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $new_size$0;
 $17 = ($new_size$0|0)==(1);
 if ($17) {
  ___assert_fail((35696|0),(35640|0),107,(41888|0));
  // unreachable;
 }
 $18 = (($this) + 24|0);
 HEAP32[$18>>2] = $new_rate;
 $19 = ($new_size$0*1000)|0;
 $20 = (($19|0) / ($new_rate|0))&-1;
 $21 = (($20) + -1)|0;
 $22 = (($this) + 36|0);
 HEAP32[$22>>2] = $21;
 $$not = $3 ^ 1;
 $23 = ($21|0)==($msec|0);
 $or$cond = $23 | $$not;
 if (!($or$cond)) {
  ___assert_fail((35728|0),(35640|0),113,(41888|0));
  // unreachable;
 }
 $24 = (($this) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  __ZN11Blip_Buffer10clock_rateEl($this,$25);
 }
 $27 = (($this) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 __ZN11Blip_Buffer9bass_freqEi($this,$28);
 __ZN11Blip_Buffer5clearEi($this,1);
 $$0 = 0;
 return ($$0|0);
}
function __ZN11Blip_Buffer9bass_freqEi($this,$freq) {
 $this = $this|0;
 $freq = $freq|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$0 = 0, $shift$0 = 0, $shift$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 HEAP32[$0>>2] = $freq;
 $1 = ($freq|0)>(0);
 L1: do {
  if ($1) {
   $2 = $freq << 16;
   $3 = (($this) + 24|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($2|0) / ($4|0))&-1;
   $f$0 = $5;$shift$0 = 13;
   while(1) {
    $6 = $f$0 >> 1;
    $7 = ($6|0)==(0);
    if ($7) {
     $shift$1 = $shift$0;
     break L1;
    }
    $8 = (($shift$0) + -1)|0;
    $9 = ($8|0)==(0);
    if ($9) {
     $shift$1 = 0;
     break;
    } else {
     $f$0 = $6;$shift$0 = $8;
    }
   }
  } else {
   $shift$1 = 31;
  }
 } while(0);
 $10 = (($this) + 20|0);
 HEAP32[$10>>2] = $shift$1;
 return;
}
function __ZNK11Blip_Buffer17clock_rate_factorEl($this,$rate) {
 $this = $this|0;
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (+($1|0));
 $3 = (+($rate|0));
 $4 = $2 / $3;
 $5 = $4 * 65536.0;
 $6 = $5 + 0.5;
 $7 = (+Math_floor((+$6)));
 $8 = (~~(($7)));
 $9 = ($8|0)>(0);
 $10 = ($1|0)==(0);
 $or$cond = $9 | $10;
 if ($or$cond) {
  return ($8|0);
 } else {
  ___assert_fail((35744|0),(35640|0),127,(35776|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN11Blip_Buffer9end_frameEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = Math_imul($0, $t)|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 HEAP32[$2>>2] = $4;
 $5 = (__ZNK11Blip_Buffer13samples_availEv($this)|0);
 $6 = (($this) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)>($7|0);
 if ($8) {
  ___assert_fail((35800|0),(35640|0),147,(46440|0));
  // unreachable;
 } else {
  return;
 }
}
function __ZN11Blip_Buffer14remove_silenceEl($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK11Blip_Buffer13samples_availEv($this)|0);
 $1 = ($0|0)<($count|0);
 if ($1) {
  ___assert_fail((35840|0),(35640|0),152,(35872|0));
  // unreachable;
 } else {
  $2 = $count << 16;
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) - ($2))|0;
  HEAP32[$3>>2] = $5;
  return;
 }
}
function __ZNK11Blip_Buffer12count_clocksEl($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$count = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  ___assert_fail((35688|0),(35640|0),167,(35888|0));
  // unreachable;
 } else {
  $2 = (($this) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)<($count|0);
  $$count = $4 ? $3 : $count;
  $5 = $$count << 16;
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($0) + -1)|0;
  $9 = (($8) - ($7))|0;
  $10 = (($9) + ($5))|0;
  $11 = (($10>>>0) / ($0>>>0))&-1;
  return ($11|0);
 }
 return (0)|0;
}
function __ZN11Blip_Buffer14remove_samplesEl($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)==(0);
 if ($0) {
  return;
 }
 __ZN11Blip_Buffer14remove_silenceEl($this,$count);
 $1 = (__ZNK11Blip_Buffer13samples_availEv($this)|0);
 $2 = (($1) + 18)|0;
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($count<<2)|0);
 $6 = $2 << 2;
 _memmove(($4|0),($5|0),($6|0))|0;
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + ($2<<2)|0);
 $9 = $count << 2;
 _memset(($8|0),0,($9|0))|0;
 return;
}
function __ZN11Blip_Synth_C2EPsi($this,$p,$w) {
 $this = $this|0;
 $p = $p|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $p;
 $1 = (($this) + 28|0);
 HEAP32[$1>>2] = $w;
 $2 = (($this) + 16|0);
 HEAPF64[$2>>3] = 0.0;
 $3 = (($this) + 32|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$this>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = (($this) + 8|0);
 HEAP32[$5>>2] = 0;
 return;
}
function __ZNK9blip_eq_t8generateEPfi($this,$out,$count) {
 $this = $this|0;
 $out = $out|0;
 $count = $count|0;
 var $$in = 0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $oversample$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($count|0));
 $1 = 144.0 / $0;
 $2 = $1 + 0.84999999999999998;
 $3 = (($this) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+($4|0));
 $6 = $5 * 0.5;
 $7 = (($this) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $oversample$0 = $2;
 } else {
  $10 = (+($8|0));
  $11 = $6 / $10;
  $oversample$0 = $11;
 }
 $12 = (($this) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = $oversample$0 * $14;
 $16 = $15 / $6;
 $17 = $oversample$0 * 64.0;
 $18 = +HEAPF64[$this>>3];
 __ZL8gen_sincPfiddd($out,$count,$17,$18,$16);
 $19 = (($count) + -1)|0;
 $20 = (+($19|0));
 $21 = 3.1415926535897931 / $20;
 $22 = ($count|0)==(0);
 if ($22) {
  return;
 } else {
  $$in = $count;
 }
 while(1) {
  $23 = (($$in) + -1)|0;
  $24 = (+($23|0));
  $25 = $21 * $24;
  $26 = (+Math_cos((+$25)));
  $27 = $26;
  $28 = $27 * 0.46000000834465027;
  $29 = 0.54000002145767212 - $28;
  $30 = (($out) + ($23<<2)|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $31 * $29;
  HEAPF32[$30>>2] = $32;
  $33 = ($23|0)==(0);
  if ($33) {
   break;
  } else {
   $$in = $23;
  }
 }
 return;
}
function __ZN11Blip_Synth_14adjust_impulseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0$lcssa = 0, $error$02 = 0, $error$1 = 0, $i$03 = 0, $p$04 = 0, $p$04$phi = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK11Blip_Synth_13impulses_sizeEv($this)|0);
 $1 = (($this) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)>(1);
 $4 = (($0) + -64)|0;
 $5 = (($this) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($this) + 24|0);
 $11 = 63;$p$04 = 64;
 while(1) {
  $8 = (63 - ($p$04))|0;
  if ($3) {
   $9 = HEAP32[$7>>2]|0;
   $error$02 = $2;$i$03 = 1;
   while(1) {
    $10 = (($i$03) + ($11))|0;
    $12 = (($9) + ($10<<1)|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = $13 << 16 >> 16;
    $15 = (($error$02) - ($14))|0;
    $16 = (($i$03) + ($8))|0;
    $17 = (($9) + ($16<<1)|0);
    $18 = HEAP16[$17>>1]|0;
    $19 = $18 << 16 >> 16;
    $20 = (($15) - ($19))|0;
    $21 = (($i$03) + 64)|0;
    $22 = ($21|0)<($0|0);
    if ($22) {
     $error$02 = $20;$i$03 = $21;
    } else {
     $error$0$lcssa = $20;
     break;
    }
   }
  } else {
   $error$0$lcssa = $2;
  }
  $23 = ($11|0)==($8|0);
  if ($23) {
   $24 = (($error$0$lcssa|0) / 2)&-1;
   $error$1 = $24;
  } else {
   $error$1 = $error$0$lcssa;
  }
  $25 = (($4) + ($11))|0;
  $26 = (($6) + ($25<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = (($28) + ($error$1))|0;
  $30 = $29&65535;
  HEAP16[$26>>1] = $30;
  $31 = (($11) + -1)|0;
  $32 = ($11|0)>(31);
  if ($32) {
   $p$04$phi = $11;$11 = $31;$p$04 = $p$04$phi;
  } else {
   break;
  }
 }
 return;
}
function __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0, $fimpulse = 0, $i$26 = 0, $i$34 = 0, $next$03 = 0.0, $sum$02 = 0.0, $total$0$lcssa = 0.0, $total$05 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fimpulse = sp;
 $0 = (($this) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 5;
 $3 = (($2) + -32)|0;
 $4 = (($fimpulse) + 256|0);
 __ZNK9blip_eq_t8generateEPfi($eq,$4,$3);
 $5 = (($2) + 32)|0;
 $6 = $2 | 31;
 $8 = 63;
 while(1) {
  $7 = (($6) - ($8))|0;
  $9 = (($fimpulse) + ($7<<2)|0);
  $10 = +HEAPF32[$9>>2];
  $11 = (($5) + ($8))|0;
  $12 = (($fimpulse) + ($11<<2)|0);
  HEAPF32[$12>>2] = $10;
  $13 = (($8) + -1)|0;
  $14 = ($8|0)==(0);
  if ($14) {
   break;
  } else {
   $8 = $13;
  }
 }
 _memset(($fimpulse|0),0,256)|0;
 $15 = ($3|0)>(0);
 if ($15) {
  $16 = $1 << 5;
  $17 = (($16) + -32)|0;
  $i$26 = 0;$total$05 = 0.0;
  while(1) {
   $18 = (($i$26) + 64)|0;
   $19 = (($fimpulse) + ($18<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $20;
   $22 = $total$05 + $21;
   $23 = (($i$26) + 1)|0;
   $exitcond10 = ($23|0)==($17|0);
   if ($exitcond10) {
    $total$0$lcssa = $22;
    break;
   } else {
    $i$26 = $23;$total$05 = $22;
   }
  }
 } else {
  $total$0$lcssa = 0.0;
 }
 $24 = 16384.0 / $total$0$lcssa;
 $25 = (($this) + 32|0);
 HEAP32[$25>>2] = 32768;
 $26 = (__ZNK11Blip_Synth_13impulses_sizeEv($this)|0);
 $27 = ($26|0)>(0);
 if ($27) {
  $28 = (($this) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $i$34 = 0;$next$03 = 0.0;$sum$02 = 0.0;
  while(1) {
   $30 = $next$03 - $sum$02;
   $31 = $24 * $30;
   $32 = $31 + 0.5;
   $33 = (+Math_floor((+$32)));
   $34 = (~~(($33)));
   $35 = (($29) + ($i$34<<1)|0);
   HEAP16[$35>>1] = $34;
   $36 = (($fimpulse) + ($i$34<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $38 = $37;
   $39 = $sum$02 + $38;
   $40 = (($i$34) + 64)|0;
   $41 = (($fimpulse) + ($40<<2)|0);
   $42 = +HEAPF32[$41>>2];
   $43 = $42;
   $44 = $next$03 + $43;
   $45 = (($i$34) + 1)|0;
   $exitcond = ($45|0)==($26|0);
   if ($exitcond) {
    break;
   } else {
    $i$34 = $45;$next$03 = $44;$sum$02 = $39;
   }
  }
 }
 __ZN11Blip_Synth_14adjust_impulseEv($this);
 $46 = (($this) + 16|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $47 != 0.0;
 if (!($48)) {
  STACKTOP = sp;return;
 }
 HEAPF64[$46>>3] = 0.0;
 __ZN11Blip_Synth_11volume_unitEd($this,$47);
 STACKTOP = sp;return;
}
function __ZN11Blip_Synth_11volume_unitEd($this,$new_unit) {
 $this = $this|0;
 $new_unit = +$new_unit;
 var $$in = 0, $$lcssa = 0, $$lcssa7 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, $factor$02 = 0.0, $factor$1 = 0.0, $or$cond = 0, $shift$01 = 0, $shift$01$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (($this) + 16|0);
 $2 = +HEAPF64[$1>>3];
 $3 = $2 != $new_unit;
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($this) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  __ZN9blip_eq_tC2Ed($0,-8.0);
  __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$0);
 }
 HEAPF64[$1>>3] = $new_unit;
 $7 = $new_unit * 1073741824.0;
 $8 = HEAP32[$4>>2]|0;
 $9 = (+($8|0));
 $10 = $7 / $9;
 $11 = $10 > 0.0;
 $12 = $10 < 2.0;
 $or$cond = $11 & $12;
 if ($or$cond) {
  $factor$02 = $10;$shift$01 = 0;
  while(1) {
   $13 = (($shift$01) + 1)|0;
   $14 = $factor$02 * 2.0;
   $15 = $14 < 2.0;
   if ($15) {
    $factor$02 = $14;$shift$01 = $13;
   } else {
    $$lcssa = $13;$$lcssa7 = $14;$shift$01$lcssa = $shift$01;
    break;
   }
  }
  $16 = ($$lcssa|0)==(0);
  if ($16) {
   $factor$1 = $$lcssa7;
  } else {
   $17 = HEAP32[$4>>2]|0;
   $18 = $17 >> $$lcssa;
   HEAP32[$4>>2] = $18;
   $19 = ($18|0)>(0);
   if (!($19)) {
    ___assert_fail((35904|0),(35640|0),367,(35920|0));
    // unreachable;
   }
   $20 = 1 << $shift$01$lcssa;
   $21 = (($20) + 32768)|0;
   $22 = 32768 >>> $$lcssa;
   $23 = (__ZNK11Blip_Synth_13impulses_sizeEv($this)|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    $25 = (($this) + 24|0);
    $26 = HEAP32[$25>>2]|0;
    $$in = $23;
    while(1) {
     $27 = (($$in) + -1)|0;
     $28 = (($26) + ($27<<1)|0);
     $29 = HEAP16[$28>>1]|0;
     $30 = $29 << 16 >> 16;
     $31 = (($21) + ($30))|0;
     $32 = $31 >> $$lcssa;
     $33 = (($32) - ($22))|0;
     $34 = $33&65535;
     HEAP16[$28>>1] = $34;
     $35 = ($27|0)==(0);
     if ($35) {
      break;
     } else {
      $$in = $27;
     }
    }
   }
   __ZN11Blip_Synth_14adjust_impulseEv($this);
   $factor$1 = $$lcssa7;
  }
 } else {
  $factor$1 = $10;
 }
 $36 = $factor$1 + 0.5;
 $37 = (+Math_floor((+$36)));
 $38 = (~~(($37)));
 $39 = (($this) + 8|0);
 HEAP32[$39>>2] = $38;
 STACKTOP = sp;return;
}
function __ZNK11Blip_Buffer13samples_availEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 16;
 return ($2|0);
}
function __ZN11Blip_Buffer10clock_rateEl($this,$cps) {
 $this = $this|0;
 $cps = $cps|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 HEAP32[$0>>2] = $cps;
 $1 = (__ZNK11Blip_Buffer17clock_rate_factorEl($this,$cps)|0);
 HEAP32[$this>>2] = $1;
 return;
}
function __ZNK11Blip_Buffer14resampled_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = Math_imul($0, $t)|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3))|0;
 return ($4|0);
}
function __ZL8gen_sincPfiddd($out,$count,$oversample,$treble,$cutoff) {
 $out = $out|0;
 $count = $count|0;
 $oversample = +$oversample;
 $treble = +$treble;
 $cutoff = +$cutoff;
 var $$0 = 0.0, $$0$op = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = !($cutoff >= 0.99899999999999999);
 $$01 = $0 ? $cutoff : 0.99899999999999999;
 $1 = $treble < -300.0;
 $$0 = $1 ? -300.0 : $treble;
 $2 = $$0 > 5.0;
 $$0$op = $$0 * 1.2207031250000001E-5;
 $3 = $2 ? 6.103515625E-5 : $$0$op;
 $4 = 1.0 - $$01;
 $5 = $3 / $4;
 $6 = (+Math_pow(10.0,(+$5)));
 $7 = $$01 * 4096.0;
 $8 = 4096.0 - $7;
 $9 = (+Math_pow((+$6),(+$8)));
 $10 = 3.8349519697141029E-4 / $oversample;
 $11 = ($count|0)>(0);
 if (!($11)) {
  return;
 }
 $12 = $7 + -1.0;
 $i$02 = 0;
 while(1) {
  $13 = (($i$02) - ($count))|0;
  $14 = $13 << 1;
  $15 = $14 | 1;
  $16 = (+($15|0));
  $17 = $10 * $16;
  $18 = $17 * 4095.0;
  $19 = (+Math_cos((+$18)));
  $20 = $6 * $19;
  $21 = $17 * 4096.0;
  $22 = (+Math_cos((+$21)));
  $23 = $20 - $22;
  $24 = $7 * $17;
  $25 = (+Math_cos((+$24)));
  $26 = $12 * $17;
  $27 = (+Math_cos((+$26)));
  $28 = (+Math_cos((+$17)));
  $29 = $9 * $23;
  $30 = $6 * $27;
  $31 = $29 - $30;
  $32 = $25 + $31;
  $33 = $6 - $28;
  $34 = $33 - $28;
  $35 = $6 * $34;
  $36 = $35 + 1.0;
  $37 = 2.0 - $28;
  $38 = $37 - $28;
  $39 = 1.0 - $28;
  $40 = $39 - $25;
  $41 = $27 + $40;
  $42 = $41 * $36;
  $43 = $32 * $38;
  $44 = $43 + $42;
  $45 = $38 * $36;
  $46 = $44 / $45;
  $47 = $46;
  $48 = (($out) + ($i$02<<2)|0);
  HEAPF32[$48>>2] = $47;
  $49 = (($i$02) + 1)|0;
  $exitcond = ($49|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $49;
  }
 }
 return;
}
function __ZNK11Blip_Synth_13impulses_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 5;
 $3 = $2 | 1;
 return ($3|0);
}
function __ZN9blip_eq_tC2Ed($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$this>>3] = $t;
 $0 = (($this) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 12|0);
 HEAP32[$1>>2] = 44100;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN11Classic_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuC2Ev($this);
 HEAP32[$this>>2] = ((35936 + 8|0));
 $0 = (($this) + 252|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 256|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 268|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN11Classic_EmuD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((35936 + 8|0));
 $0 = (($this) + 256|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZN9Music_EmuD2Ev($this);
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 127]($1);
 __ZN9Music_EmuD2Ev($this);
 return;
}
function __ZN11Classic_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Classic_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN11Classic_Emu14set_equalizer_ERK15gme_equalizer_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = +HEAPF64[$eq>>3];
 __ZN9blip_eq_tC2Ed($0,$4);
 FUNCTION_TABLE_vii[$3 & 31]($this,$0);
 $5 = (($this) + 252|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$6>>2]|0;
 $9 = (($8) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZNK9Music_Emu9equalizerEv($this)|0);
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_vii[$10 & 31]($6,$13);
 STACKTOP = sp;return;
}
function __ZN11Classic_Emu16set_sample_rate_El($this,$rate) {
 $this = $this|0;
 $rate = $rate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (($this) + 256|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  do {
   if ($5) {
    $6 = (__ZN12Multi_BuffernwEj(172)|0);
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     __ZN13Stereo_BufferC2Ev($6);
     HEAP32[$3>>2] = $6;
     break;
    }
    HEAP32[$3>>2] = 0;
    $$0 = 50160;
    return ($$0|0);
   }
  } while(0);
  $8 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $8;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iiii[$12 & 63]($9,$rate,50)|0);
 $$0 = $13;
 return ($$0|0);
}
function __ZN11Classic_Emu12mute_voices_Ei($this,$mask) {
 $this = $this|0;
 $mask = $mask|0;
 var $$in = 0, $$old = 0, $$old2 = 0, $$old4 = 0, $$old5 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch = 0, $or$cond = 0, $or$cond3 = 0, $or$cond6 = 0, $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ch = sp;
 $0 = (__ZNK9Music_Emu11voice_countEv($this)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 252|0);
 $3 = (($this) + 268|0);
 $4 = (($ch) + 4|0);
 $5 = (($ch) + 8|0);
 $6 = (($ch) + 4|0);
 $7 = (($ch) + 8|0);
 $8 = (($ch) + 4|0);
 $9 = (($ch) + 8|0);
 $$in = $0;
 while(1) {
  $10 = (($$in) + -1)|0;
  $11 = 1 << $10;
  $12 = $11 & $mask;
  $13 = ($12|0)==(0);
  if ($13) {
   $17 = HEAP32[$2>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$3>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $25 = 0;
   } else {
    $23 = (($21) + ($10<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24;
   }
   FUNCTION_TABLE_viiii[$20 & 15]($ch,$17,$10,$25);
   $26 = HEAP32[$ch>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $$old = HEAP32[$4>>2]|0;
    $$old2 = ($$old|0)==(0|0);
    $$old4 = HEAP32[$5>>2]|0;
    $$old5 = ($$old4|0)==(0|0);
    $or$cond8 = $$old2 & $$old5;
    if (!($or$cond8)) {
     label = 11;
     break;
    }
   } else {
    $28 = HEAP32[$8>>2]|0;
    $29 = ($28|0)==(0|0);
    $30 = HEAP32[$9>>2]|0;
    $31 = ($30|0)==(0|0);
    $or$cond = $29 | $31;
    if ($or$cond) {
     $$pr = HEAP32[$ch>>2]|0;
     $32 = ($$pr|0)==(0|0);
     $33 = HEAP32[$4>>2]|0;
     $34 = ($33|0)==(0|0);
     $or$cond3 = $32 & $34;
     $35 = HEAP32[$5>>2]|0;
     $36 = ($35|0)==(0|0);
     $or$cond6 = $or$cond3 & $36;
     if (!($or$cond6)) {
      label = 11;
      break;
     }
    }
   }
   $37 = HEAP32[$this>>2]|0;
   $38 = (($37) + 68|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$ch>>2]|0;
   $41 = HEAP32[$6>>2]|0;
   $42 = HEAP32[$7>>2]|0;
   FUNCTION_TABLE_viiiii[$39 & 15]($this,$10,$40,$41,$42);
  } else {
   $14 = HEAP32[$this>>2]|0;
   $15 = (($14) + 68|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viiiii[$16 & 15]($this,$10,0,0,0);
  }
  $43 = ($10|0)==(0);
  if ($43) {
   label = 14;
   break;
  } else {
   $$in = $10;
  }
 }
 if ((label|0) == 11) {
  ___assert_fail((36024|0),(36104|0),70,(36152|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
}
function __ZN11Classic_Emu17change_clock_rateEl($this,$rate) {
 $this = $this|0;
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 260|0);
 HEAP32[$0>>2] = $rate;
 $1 = (($this) + 252|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vii[$5 & 31]($2,$rate);
 return;
}
function __ZN11Classic_Emu12setup_bufferEl($this,$rate) {
 $this = $this|0;
 $rate = $rate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Classic_Emu17change_clock_rateEl($this,$rate);
 $0 = (($this) + 252|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZNK9Music_Emu11voice_countEv($this)|0);
 $6 = (FUNCTION_TABLE_iii[$4 & 63]($1,$5)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = (__ZNK9Music_Emu9equalizerEv($this)|0);
 __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($this,$8);
 $9 = HEAP32[$0>>2]|0;
 $10 = (__ZN12Multi_Buffer22channels_changed_countEv($9)|0);
 $11 = (($this) + 264|0);
 HEAP32[$11>>2] = $10;
 $$0 = 0;
 return ($$0|0);
}
function __ZN11Classic_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$4 & 127]($1);
 return (0|0);
}
function __ZN11Classic_Emu5play_ElPs($this,$count,$out) {
 $this = $this|0;
 $count = $count|0;
 $out = $out|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clocks_emulated = 0, $remain$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $clocks_emulated = sp;
 $0 = ($count|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($this) + 252|0);
 $2 = (($this) + 264|0);
 $3 = (($this) + 260|0);
 $remain$01 = $count;
 while(1) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($count) - ($remain$01))|0;
  $9 = (($out) + ($8<<1)|0);
  $10 = (FUNCTION_TABLE_iiii[$7 & 63]($4,$9,$remain$01)|0);
  $11 = (($remain$01) - ($10))|0;
  $12 = ($remain$01|0)==($10|0);
  if (!($12)) {
   $13 = HEAP32[$2>>2]|0;
   $14 = HEAP32[$1>>2]|0;
   $15 = (__ZN12Multi_Buffer22channels_changed_countEv($14)|0);
   $16 = ($13|0)==($15|0);
   if (!($16)) {
    HEAP32[$2>>2] = $15;
    __ZN9Music_Emu13remute_voicesEv($this);
   }
   $17 = HEAP32[$1>>2]|0;
   $18 = (__ZNK12Multi_Buffer6lengthEv($17)|0);
   $19 = HEAP32[$3>>2]|0;
   $20 = Math_imul($19, $18)|0;
   $21 = (($20|0) / 1000)&-1;
   HEAP32[$clocks_emulated>>2] = $21;
   $22 = HEAP32[$this>>2]|0;
   $23 = (($22) + 76|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 63]($this,$clocks_emulated,$18)|0);
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $$0 = $25;
    label = 11;
    break;
   }
   $27 = HEAP32[$clocks_emulated>>2]|0;
   $28 = ($27|0)==(0);
   if ($28) {
    label = 8;
    break;
   }
   $29 = HEAP32[$1>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vii[$32 & 31]($29,$27);
  }
  $33 = ($remain$01|0)==($10|0);
  if ($33) {
   $$0 = 0;
   label = 11;
   break;
  } else {
   $remain$01 = $11;
  }
 }
 if ((label|0) == 8) {
  ___assert_fail((36168|0),(36104|0),114,(36184|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($this,$in,$header_size,$header_out,$fill,$pad_size) {
 $this = $this|0;
 $in = $in|0;
 $header_size = $header_size|0;
 $header_out = $header_out|0;
 $fill = $fill|0;
 $pad_size = $pad_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pad_size) - ($header_size))|0;
 $1 = (($this) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 __ZN13blargg_vectorIhE5clearEv($this);
 $4 = HEAP32[$in>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 15]($in)|0);
 $8 = (($this) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ($7|0)>($header_size|0);
 if (!($9)) {
  $$0 = 38248;
  return ($$0|0);
 }
 $10 = (($0) + ($pad_size))|0;
 $11 = (($10) + ($7))|0;
 $12 = (__ZN13blargg_vectorIhE6resizeEj($this,$11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = HEAP32[$in>>2]|0;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZNK13blargg_vectorIhE5beginEv($this)|0);
  $18 = (($17) + ($0)|0);
  $19 = HEAP32[$8>>2]|0;
  $20 = (FUNCTION_TABLE_iiii[$16 & 63]($in,$18,$19)|0);
  $21 = ($20|0)==(0|0);
  if ($21) {
   $22 = HEAP32[$8>>2]|0;
   $23 = (($22) - ($header_size))|0;
   HEAP32[$8>>2] = $23;
   $24 = (__ZNK13blargg_vectorIhEixEj($this,$0)|0);
   _memcpy(($header_out|0),($24|0),($header_size|0))|0;
   $25 = (__ZNK13blargg_vectorIhE5beginEv($this)|0);
   $26 = $fill&255;
   _memset(($25|0),($26|0),($pad_size|0))|0;
   $27 = (__ZNK13blargg_vectorIhE3endEv($this)|0);
   $28 = (0 - ($pad_size))|0;
   $29 = (($27) + ($28)|0);
   _memset(($29|0),($26|0),($pad_size|0))|0;
   $$0 = 0;
   return ($$0|0);
  } else {
   $err$01 = $20;
  }
 } else {
  $err$01 = $12;
 }
 __ZN13blargg_vectorIhE5clearEv($this);
 $$0 = $err$01;
 return ($$0|0);
}
function __ZN9Rom_Data_9set_addr_Eli($this,$addr,$unit) {
 $this = $this|0;
 $addr = $addr|0;
 $unit = $unit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $rounded$0 = 0, $shift$0 = 0, $shift$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($addr) + -8)|0;
 $1 = (($0) - ($unit))|0;
 $2 = (($this) + 12|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($addr) + -1)|0;
 $6 = (($5) + ($unit))|0;
 $7 = (($6) + ($4))|0;
 $8 = (($7|0) % ($unit|0))&-1;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)<(1);
 if ($10) {
  $rounded$0 = 0;
 } else {
  $11 = (($9) + -1)|0;
  $shift$0 = 0;
  while(1) {
   $12 = $11 >>> $shift$0;
   $13 = ($12|0)==(0);
   $14 = (($shift$0) + 1)|0;
   if ($13) {
    $shift$0$lcssa = $shift$0;
    break;
   } else {
    $shift$0 = $14;
   }
  }
  $15 = 1 << $shift$0$lcssa;
  $16 = (($15) + -1)|0;
  $17 = (($this) + 16|0);
  HEAP32[$17>>2] = $16;
  $rounded$0 = $9;
 }
 $18 = (($this) + 20|0);
 HEAP32[$18>>2] = $rounded$0;
 $19 = HEAP32[$2>>2]|0;
 $20 = (($rounded$0) + 8)|0;
 $21 = (($20) - ($19))|0;
 (__ZN13blargg_vectorIhE6resizeEj($this,$21)|0);
 return;
}
function __ZNK9Music_Emu9equalizerEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 144|0);
 return ($0|0);
}
function __ZN12Multi_BuffernwEj($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($s)|0);
 return ($0|0);
}
function __ZN12Multi_BufferdlEPv($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($p);
 return;
}
function __ZNK9Music_Emu11voice_countEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 168|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN12Multi_Buffer22channels_changed_countEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN9Music_Emu13remute_voicesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 172|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN9Music_Emu11mute_voicesEi($this,$1);
 return;
}
function __ZNK12Multi_Buffer6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN13blargg_vectorIhE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 HEAP32[$this>>2] = 0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = 0;
 _free($0);
 return;
}
function __ZN13blargg_vectorIhE6resizeEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (_realloc($0,$n)|0);
 $2 = ($1|0)==(0|0);
 $3 = ($n|0)!=(0);
 $or$cond = $2 & $3;
 if ($or$cond) {
  $$0 = 50160;
  return ($$0|0);
 }
 HEAP32[$this>>2] = $1;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = $n;
 $$0 = 0;
 return ($$0|0);
}
function __ZNK13blargg_vectorIhE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZNK13blargg_vectorIhEixEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 if ($2) {
  ___assert_fail((44880|0),(44896|0),51,(44944|0));
  // unreachable;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + ($n)|0);
  return ($4|0);
 }
 return (0)|0;
}
function __ZNK13blargg_vectorIhE3endEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + ($2)|0);
 return ($3|0);
}
function __ZN11Data_Reader4readEPvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiii[$2 & 63]($this,$p,$s)|0);
 $4 = ($3|0)==($s|0);
 if ($4) {
  return (0|0);
 } else {
  $5 = ($3|0)>(-1);
  $6 = ($3|0)<($s|0);
  $or$cond = $5 & $6;
  $$ = $or$cond ? 36224 : 36248;
  return ($$|0);
 }
 return (0)|0;
}
function __ZN11Data_Reader4skipEl($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$0 = 0, $$01 = 0, $$01$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $$01 = $count;
 while(1) {
  $0 = ($$01|0)==(0);
  if ($0) {
   $$0 = 0;
   label = 4;
   break;
  }
  $1 = ($$01|0)<(512);
  $$01$ = $1 ? $$01 : 512;
  $2 = (($$01) - ($$01$))|0;
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 63]($this,$buf,$$01$)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$01 = $2;
  } else {
   $$0 = $6;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNK11File_Reader6remainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 15]($this)|0);
 $4 = HEAP32[$this>>2]|0;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 15]($this)|0);
 $8 = (($3) - ($7))|0;
 return ($8|0);
}
function __ZN11File_Reader4skipEl($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(-1);
 if (!($0)) {
  ___assert_fail((36264|0),(36272|0),57,(41992|0));
  // unreachable;
 }
 $1 = ($n|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[$this>>2]|0;
 $3 = (($2) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 15]($this)|0);
 $9 = (($8) + ($n))|0;
 $10 = (FUNCTION_TABLE_iii[$4 & 63]($this,$9)|0);
 $$0 = $10;
 return ($$0|0);
}
function __ZN13Subset_ReaderC2EP11Data_Readerl($this,$dr,$size) {
 $this = $this|0;
 $dr = $dr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $size$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Data_ReaderC2Ev($this);
 HEAP32[$this>>2] = ((36320 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $dr;
 $1 = HEAP32[$dr>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 15]($dr)|0);
 $5 = (($this) + 8|0);
 $6 = ($4|0)>($size|0);
 $size$ = $6 ? $size : $4;
 HEAP32[$5>>2] = $size$;
 return;
}
function __ZNK13Subset_Reader6remainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN13Subset_Reader10read_availEPvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $$s = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($s|0);
 $$s = $2 ? $1 : $s;
 $3 = (($1) - ($$s))|0;
 HEAP32[$0>>2] = $3;
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$8 & 63]($5,$p,$$s)|0);
 return ($9|0);
}
function __ZN16Remaining_ReaderC2EPKvlP11Data_Reader($this,$h,$size,$r) {
 $this = $this|0;
 $h = $h|0;
 $size = $size|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Data_ReaderC2Ev($this);
 HEAP32[$this>>2] = ((36352 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $h;
 $1 = (($h) + ($size)|0);
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 12|0);
 HEAP32[$3>>2] = $r;
 return;
}
function __ZNK16Remaining_Reader6remainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = (($this) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 15]($8)|0);
 $13 = (($6) + ($12))|0;
 return ($13|0);
}
function __ZN16Remaining_Reader10read_firstEPvl($this,$out,$count) {
 $this = $this|0;
 $out = $out|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$ = 0, $first$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($1|0)==($3|0);
 if ($7) {
  $first$1 = $6;
  return ($first$1|0);
 }
 $8 = ($6|0)>($count|0);
 $count$ = $8 ? $count : $6;
 $9 = (($3) + ($count$)|0);
 HEAP32[$2>>2] = $9;
 _memcpy(($out|0),($3|0),($count$|0))|0;
 $first$1 = $count$;
 return ($first$1|0);
}
function __ZN16Remaining_Reader10read_availEPvl($this,$out,$count) {
 $this = $this|0;
 $out = $out|0;
 $count = $count|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $second$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN16Remaining_Reader10read_firstEPvl($this,$out,$count)|0);
 $1 = (($count) - ($0))|0;
 $2 = ($0|0)==($count|0);
 if ($2) {
  $second$0 = $1;
 } else {
  $3 = (($this) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($out) + ($0)|0);
  $9 = (FUNCTION_TABLE_iiii[$7 & 63]($4,$8,$1)|0);
  $10 = ($9|0)<(1);
  if ($10) {
   $$0 = $9;
   return ($$0|0);
  } else {
   $second$0 = $9;
  }
 }
 $11 = (($second$0) + ($0))|0;
 $$0 = $11;
 return ($$0|0);
}
function __ZN16Remaining_Reader4readEPvl($this,$out,$count) {
 $this = $this|0;
 $out = $out|0;
 $count = $count|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN16Remaining_Reader10read_firstEPvl($this,$out,$count)|0);
 $1 = ($0|0)==($count|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (($count) - ($0))|0;
 $3 = (($this) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($out) + ($0)|0);
 $9 = (FUNCTION_TABLE_iiii[$7 & 63]($4,$8,$2)|0);
 $$0 = $9;
 return ($$0|0);
}
function __ZN15Mem_File_ReaderC2EPKvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11File_ReaderC2Ev($this);
 HEAP32[$this>>2] = ((36384 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $p;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = $s;
 $2 = (($this) + 12|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZNK15Mem_File_Reader4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN15Mem_File_Reader10read_availEPvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $$s = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 15]($this)|0);
 $4 = ($3|0)<($s|0);
 $$s = $4 ? $3 : $s;
 $5 = (($this) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($this) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + ($8)|0);
 _memcpy(($p|0),($9|0),($$s|0))|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = (($10) + ($$s))|0;
 HEAP32[$7>>2] = $11;
 return ($$s|0);
}
function __ZNK15Mem_File_Reader4tellEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN15Mem_File_Reader4seekEl($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($n|0);
 if ($2) {
  $$0 = 36224;
  return ($$0|0);
 }
 $3 = (($this) + 12|0);
 HEAP32[$3>>2] = $n;
 $$0 = 0;
 return ($$0|0);
}
function __ZN15Std_File_ReaderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11File_ReaderC2Ev($this);
 HEAP32[$this>>2] = ((36432 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN15Std_File_ReaderD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((36432 + 8|0));
 __ZN15Std_File_Reader5closeEv($this);
 return;
}
function __ZN15Std_File_Reader5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 (_fclose(($1|0))|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN15Std_File_ReaderD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN15Std_File_ReaderD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZN15Std_File_Reader4openEPKc($this,$path) {
 $this = $this|0;
 $path = $path|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen(($path|0),(36480|0))|0);
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 $2 = ($0|0)==(0|0);
 $$ = $2 ? 36488 : 0;
 return ($$|0);
}
function __ZNK15Std_File_Reader4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 15]($this)|0);
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 (_fseek(($5|0),0,2)|0);
 $6 = HEAP32[$this>>2]|0;
 $7 = (($6) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 15]($this)|0);
 $10 = HEAP32[$4>>2]|0;
 (_fseek(($10|0),($3|0),0)|0);
 return ($9|0);
}
function __ZN15Std_File_Reader10read_availEPvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fread(($p|0),1,($s|0),($1|0))|0);
 return ($2|0);
}
function __ZN15Std_File_Reader4readEPvl($this,$p,$s) {
 $this = $this|0;
 $p = $p|0;
 $s = $s|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fread(($p|0),1,($s|0),($1|0))|0);
 $3 = ($2|0)==($s|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_feof(($4|0))|0);
 $6 = ($5|0)==(0);
 $$ = $6 ? 36512 : 36224;
 $$0 = $$;
 return ($$0|0);
}
function __ZNK15Std_File_Reader4tellEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ftell(($1|0))|0);
 return ($2|0);
}
function __ZN15Std_File_Reader4seekEl($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fseek(($1|0),($n|0),0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$this>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 15]($this)|0);
 $8 = ($7|0)<($n|0);
 $$ = $8 ? 36224 : 36536;
 $$0 = $$;
 return ($$0|0);
}
function __ZN11Data_ReaderC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((36560 + 8|0));
 return;
}
function __ZN11File_ReaderC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Data_ReaderC2Ev($this);
 HEAP32[$this>>2] = ((36688 + 8|0));
 return;
}
function __ZN11Data_ReaderD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13Subset_ReaderD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN16Remaining_ReaderD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN15Mem_File_ReaderD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN11Data_ReaderD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN11File_ReaderD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN14Dual_ResamplerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((36848 + 8|0));
 $0 = (($this) + 4|0);
 __ZN13blargg_vectorIsEC2Ev($0);
 $1 = (($this) + 32|0);
 __ZN13Fir_ResamplerILi12EEC2Ev($1);
 return;
}
function __ZN14Dual_ResamplerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((36848 + 8|0));
 $0 = (($this) + 32|0);
 __ZN14Fir_Resampler_D2Ev($0);
 $1 = (($this) + 4|0);
 __ZN13blargg_vectorIsED2Ev($1);
 return;
}
function __ZN14Dual_ResamplerD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14Dual_ResamplerD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZN14Dual_Resampler5resetEi($this,$pairs) {
 $this = $this|0;
 $pairs = $pairs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = $pairs >> 2;
 $2 = (($1) + ($pairs))|0;
 $3 = $2 << 1;
 $4 = (__ZN13blargg_vectorIsE6resizeEj($0,$3)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 __ZN14Dual_Resampler6resizeEi($this,$pairs);
 $6 = (($this) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 2;
 $9 = (($8) + ($7))|0;
 $10 = (($this) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($this) + 32|0);
 $12 = (__ZN14Fir_Resampler_11buffer_sizeEi($11,$9)|0);
 $$0 = $12;
 return ($$0|0);
}
function __ZN14Dual_Resampler6resizeEi($this,$pairs) {
 $this = $this|0;
 $pairs = $pairs|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pairs << 1;
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($0|0);
 if ($3) {
  return;
 }
 $4 = (($this) + 4|0);
 $5 = (__ZNK13blargg_vectorIsE4sizeEv($4)|0);
 $6 = ($0>>>0)>($5>>>0);
 if ($6) {
  return;
 }
 HEAP32[$1>>2] = $0;
 $7 = (+($pairs|0));
 $8 = (($this) + 32|0);
 $9 = (+__ZNK14Fir_Resampler_5ratioEv($8));
 $10 = $7 * $9;
 $11 = (~~(($10)));
 $12 = $11 << 1;
 $13 = (($12) + 2)|0;
 $14 = (($this) + 16|0);
 HEAP32[$14>>2] = $13;
 __ZN14Dual_Resampler5clearEv($this);
 return;
}
function __ZN14Dual_Resampler11play_frame_ER11Blip_BufferPs($this,$blip_buf,$out) {
 $this = $this|0;
 $blip_buf = $blip_buf|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 1;
 $3 = (__ZNK11Blip_Buffer12count_clocksEl($blip_buf,$2)|0);
 $4 = (($this) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 32|0);
 $7 = (__ZNK14Fir_Resampler_7writtenEv($6)|0);
 $8 = (($5) - ($7))|0;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN14Fir_Resampler_6bufferEv($6)|0);
 $13 = (FUNCTION_TABLE_iiiii[$11 & 7]($this,$3,$8,$12)|0);
 $14 = (($this) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13|0)<($15|0);
 if (!($16)) {
  ___assert_fail((36872|0),(36904|0),59,(36960|0));
  // unreachable;
 }
 __ZN11Blip_Buffer9end_frameEi($blip_buf,$3);
 $17 = (__ZNK11Blip_Buffer13samples_availEv($blip_buf)|0);
 $18 = ($17|0)==($2|0);
 if (!($18)) {
  ___assert_fail((36976|0),(36904|0),62,(36960|0));
  // unreachable;
 }
 __ZN14Fir_Resampler_5writeEl($6,$13);
 $19 = (($this) + 4|0);
 $20 = (__ZNK13blargg_vectorIsE5beginEv($19)|0);
 $21 = HEAP32[$0>>2]|0;
 $22 = (__ZN13Fir_ResamplerILi12EE4readEPsi($6,$20,$21)|0);
 $23 = HEAP32[$0>>2]|0;
 $24 = ($22|0)==($23|0);
 if ($24) {
  __ZN14Dual_Resampler11mix_samplesER11Blip_BufferPs($this,$blip_buf,$out);
  __ZN11Blip_Buffer14remove_samplesEl($blip_buf,$2);
  return;
 } else {
  ___assert_fail((37016|0),(36904|0),67,(36960|0));
  // unreachable;
 }
}
function __ZN14Dual_Resampler11mix_samplesER11Blip_BufferPs($this,$blip_buf,$out) {
 $this = $this|0;
 $blip_buf = $blip_buf|0;
 $out = $out|0;
 var $$03 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $in$02 = 0, $l$0 = 0, $r$0 = 0, $sext = 0, $sext1 = 0, $sn = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sn = sp;
 $0 = (__ZN11Blip_Reader5beginER11Blip_Buffer($sn,$blip_buf)|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >> 1;
 $4 = ($3|0)==(0);
 if ($4) {
  __ZN11Blip_Reader3endER11Blip_Buffer($sn,$blip_buf);
  STACKTOP = sp;return;
 }
 $5 = (($this) + 4|0);
 $6 = (__ZNK13blargg_vectorIsE5beginEv($5)|0);
 $$03 = $out;$$in = $3;$in$02 = $6;
 while(1) {
  $7 = (($$in) + -1)|0;
  $8 = (__ZNK11Blip_Reader4readEv($sn)|0);
  $9 = HEAP16[$in$02>>1]|0;
  $10 = $9 << 16 >> 16;
  $11 = $10 << 1;
  $12 = (($11) + ($8))|0;
  $sext = $12 << 16;
  $13 = $sext >> 16;
  $14 = ($13|0)==($12|0);
  if ($14) {
   $l$0 = $12;
  } else {
   $15 = $12 >> 24;
   $16 = (32767 - ($15))|0;
   $l$0 = $16;
  }
  __ZN11Blip_Reader4nextEi($sn,$0);
  $17 = (($in$02) + 2|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = $19 << 1;
  $21 = (($20) + ($8))|0;
  $sext1 = $21 << 16;
  $22 = $sext1 >> 16;
  $23 = ($22|0)==($21|0);
  if ($23) {
   $r$0 = $21;
  } else {
   $24 = $21 >> 24;
   $25 = (32767 - ($24))|0;
   $r$0 = $25;
  }
  $26 = (($in$02) + 4|0);
  $27 = $l$0&65535;
  HEAP16[$$03>>1] = $27;
  $28 = $r$0&65535;
  $29 = (($$03) + 2|0);
  HEAP16[$29>>1] = $28;
  $30 = (($$03) + 4|0);
  $31 = ($7|0)==(0);
  if ($31) {
   break;
  } else {
   $$03 = $30;$$in = $7;$in$02 = $26;
  }
 }
 __ZN11Blip_Reader3endER11Blip_Buffer($sn,$blip_buf);
 STACKTOP = sp;return;
}
function __ZN14Dual_Resampler9dual_playElPsR11Blip_Buffer($this,$count,$out,$blip_buf) {
 $this = $this|0;
 $count = $count|0;
 $out = $out|0;
 $blip_buf = $blip_buf|0;
 var $$0$lcssa = 0, $$0$ph = 0, $$01$lcssa = 0, $$01$ph = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($1|0)==($3|0);
 if ($5) {
  $$0$ph = $count;$$01$ph = $out;
 } else {
  $6 = ($4|0)>($count|0);
  $count$ = $6 ? $count : $4;
  $7 = (($count) - ($count$))|0;
  $8 = (($this) + 4|0);
  $9 = (__ZNK13blargg_vectorIsEixEj($8,$3)|0);
  $10 = $count$ << 1;
  _memcpy(($out|0),($9|0),($10|0))|0;
  $11 = (($out) + ($count$<<1)|0);
  $12 = HEAP32[$2>>2]|0;
  $13 = (($12) + ($count$))|0;
  HEAP32[$2>>2] = $13;
  $$0$ph = $7;$$01$ph = $11;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = ($$0$ph|0)<($14|0);
 if ($15) {
  $$0$lcssa = $$0$ph;$$01$lcssa = $$01$ph;
 } else {
  $$012 = $$01$ph;$$03 = $$0$ph;
  while(1) {
   __ZN14Dual_Resampler11play_frame_ER11Blip_BufferPs($this,$blip_buf,$$012);
   $16 = HEAP32[$0>>2]|0;
   $17 = (($$012) + ($16<<1)|0);
   $18 = (($$03) - ($16))|0;
   $19 = ($18|0)<($16|0);
   if ($19) {
    $$0$lcssa = $18;$$01$lcssa = $17;
    break;
   } else {
    $$012 = $17;$$03 = $18;
   }
  }
 }
 $20 = ($$0$lcssa|0)==(0);
 if ($20) {
  return;
 }
 $21 = (($this) + 4|0);
 $22 = (__ZNK13blargg_vectorIsE5beginEv($21)|0);
 __ZN14Dual_Resampler11play_frame_ER11Blip_BufferPs($this,$blip_buf,$22);
 HEAP32[$2>>2] = $$0$lcssa;
 $23 = (__ZNK13blargg_vectorIsE5beginEv($21)|0);
 $24 = $$0$lcssa << 1;
 _memcpy(($$01$lcssa|0),($23|0),($24|0))|0;
 return;
}
function __ZN13blargg_vectorIsEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN13Fir_ResamplerILi12EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 52|0);
 __ZN14Fir_Resampler_C2EiPs($this,12,$0);
 return;
}
function __ZN13blargg_vectorIsED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 _free($0);
 return;
}
function __ZN13blargg_vectorIsE6resizeEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = $n << 1;
 $2 = (_realloc($0,$1)|0);
 $3 = ($2|0)==(0|0);
 $4 = ($n|0)!=(0);
 $or$cond = $3 & $4;
 if ($or$cond) {
  $$0 = 50160;
  return ($$0|0);
 }
 HEAP32[$this>>2] = $2;
 $5 = (($this) + 4|0);
 HEAP32[$5>>2] = $n;
 $$0 = 0;
 return ($$0|0);
}
function __ZNK13blargg_vectorIsE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK14Fir_Resampler_5ratioEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function __ZN14Dual_Resampler5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 20|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 32|0);
 __ZN14Fir_Resampler_5clearEv($3);
 return;
}
function __ZNK14Fir_Resampler_7writtenEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK13blargg_vectorIsEixEj($this,$3)|0);
 $5 = $1;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 1;
 return ($8|0);
}
function __ZN14Fir_Resampler_6bufferEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN14Fir_Resampler_5writeEl($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($count<<1)|0);
 HEAP32[$0>>2] = $2;
 $3 = (__ZNK13blargg_vectorIsE3endEv($this)|0);
 $4 = ($2>>>0)>($3>>>0);
 if ($4) {
  ___assert_fail((37080|0),(37104|0),96,(47200|0));
  // unreachable;
 } else {
  return;
 }
}
function __ZNK13blargg_vectorIsE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN13Fir_ResamplerILi12EE4readEPsi($this,$out_begin,$count) {
 $this = $this|0;
 $out_begin = $out_begin|0;
 $count = $count|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $imp$0 = 0, $imp$2 = 0, $in$0 = 0, $in$1 = 0, $out$0 = 0, $out$1 = 0, $remain$0 = 0, $remain$1 = 0, $remain$2 = 0, $scevgep = 0, $skip$0 = 0, $skip$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK13blargg_vectorIsE5beginEv($this)|0);
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 28|0);
 $4 = (($this) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) - ($5))|0;
 $9 = (($this) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = $0;
 $13 = (($11) - ($12))|0;
 $14 = ($13|0)>(46);
 if (!($14)) {
  $in$1 = $0;$out$1 = $out_begin;$remain$2 = $8;
  $190 = HEAP32[$6>>2]|0;
  $191 = (($190) - ($remain$2))|0;
  HEAP32[$4>>2] = $191;
  $192 = HEAP32[$1>>2]|0;
  $193 = $192;
  $194 = $in$1;
  $195 = (($193) - ($194))|0;
  $196 = $195 >> 1;
  $197 = (__ZNK13blargg_vectorIsEixEj($this,$196)|0);
  HEAP32[$1>>2] = $197;
  $198 = (__ZNK13blargg_vectorIsE5beginEv($this)|0);
  _memmove(($198|0),($in$1|0),($195|0))|0;
  $199 = $out$1;
  $200 = $out_begin;
  $201 = (($199) - ($200))|0;
  $202 = $201 >> 1;
  return ($202|0);
 }
 $15 = $count >> 1;
 $16 = ((($this) + (($5*24)|0)|0) + 52|0);
 $17 = HEAP32[$3>>2]|0;
 $18 = $17 >>> $5;
 $19 = (($2) + -48|0);
 $20 = (($this) + 52|0);
 $$0 = $15;$imp$0 = $16;$in$0 = $0;$out$0 = $out_begin;$remain$0 = $8;$skip$0 = $18;
 while(1) {
  $21 = (($$0) + -1)|0;
  $22 = ($$0|0)<(1);
  if ($22) {
   $in$1 = $in$0;$out$1 = $out$0;$remain$2 = $remain$0;
   label = 7;
   break;
  }
  $23 = HEAP16[$imp$0>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = HEAP16[$in$0>>1]|0;
  $26 = $25 << 16 >> 16;
  $27 = Math_imul($26, $24)|0;
  $28 = (($in$0) + 2|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = Math_imul($30, $24)|0;
  $32 = (($imp$0) + 2|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = (($imp$0) + 4|0);
  $36 = (($in$0) + 4|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = Math_imul($38, $34)|0;
  $40 = (($27) + ($39))|0;
  $41 = (($in$0) + 6|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = Math_imul($43, $34)|0;
  $45 = (($31) + ($44))|0;
  $46 = (($in$0) + 8|0);
  $47 = HEAP16[$35>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = HEAP16[$46>>1]|0;
  $50 = $49 << 16 >> 16;
  $51 = Math_imul($50, $48)|0;
  $52 = (($51) + ($40))|0;
  $53 = (($in$0) + 10|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54 << 16 >> 16;
  $56 = Math_imul($55, $48)|0;
  $57 = (($56) + ($45))|0;
  $58 = (($imp$0) + 6|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = (($imp$0) + 8|0);
  $62 = (($in$0) + 12|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = Math_imul($64, $60)|0;
  $66 = (($52) + ($65))|0;
  $67 = (($in$0) + 14|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = Math_imul($69, $60)|0;
  $71 = (($57) + ($70))|0;
  $72 = (($in$0) + 16|0);
  $73 = HEAP16[$61>>1]|0;
  $74 = $73 << 16 >> 16;
  $75 = HEAP16[$72>>1]|0;
  $76 = $75 << 16 >> 16;
  $77 = Math_imul($76, $74)|0;
  $78 = (($77) + ($66))|0;
  $79 = (($in$0) + 18|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80 << 16 >> 16;
  $82 = Math_imul($81, $74)|0;
  $83 = (($82) + ($71))|0;
  $84 = (($imp$0) + 10|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = $85 << 16 >> 16;
  $87 = (($imp$0) + 12|0);
  $88 = (($in$0) + 20|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = $89 << 16 >> 16;
  $91 = Math_imul($90, $86)|0;
  $92 = (($78) + ($91))|0;
  $93 = (($in$0) + 22|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94 << 16 >> 16;
  $96 = Math_imul($95, $86)|0;
  $97 = (($83) + ($96))|0;
  $98 = (($in$0) + 24|0);
  $99 = HEAP16[$87>>1]|0;
  $100 = $99 << 16 >> 16;
  $101 = HEAP16[$98>>1]|0;
  $102 = $101 << 16 >> 16;
  $103 = Math_imul($102, $100)|0;
  $104 = (($103) + ($92))|0;
  $105 = (($in$0) + 26|0);
  $106 = HEAP16[$105>>1]|0;
  $107 = $106 << 16 >> 16;
  $108 = Math_imul($107, $100)|0;
  $109 = (($108) + ($97))|0;
  $110 = (($imp$0) + 14|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111 << 16 >> 16;
  $113 = (($imp$0) + 16|0);
  $114 = (($in$0) + 28|0);
  $115 = HEAP16[$114>>1]|0;
  $116 = $115 << 16 >> 16;
  $117 = Math_imul($116, $112)|0;
  $118 = (($104) + ($117))|0;
  $119 = (($in$0) + 30|0);
  $120 = HEAP16[$119>>1]|0;
  $121 = $120 << 16 >> 16;
  $122 = Math_imul($121, $112)|0;
  $123 = (($109) + ($122))|0;
  $124 = (($in$0) + 32|0);
  $125 = HEAP16[$113>>1]|0;
  $126 = $125 << 16 >> 16;
  $127 = HEAP16[$124>>1]|0;
  $128 = $127 << 16 >> 16;
  $129 = Math_imul($128, $126)|0;
  $130 = (($129) + ($118))|0;
  $131 = (($in$0) + 34|0);
  $132 = HEAP16[$131>>1]|0;
  $133 = $132 << 16 >> 16;
  $134 = Math_imul($133, $126)|0;
  $135 = (($134) + ($123))|0;
  $136 = (($imp$0) + 18|0);
  $137 = HEAP16[$136>>1]|0;
  $138 = $137 << 16 >> 16;
  $139 = (($imp$0) + 20|0);
  $140 = (($in$0) + 36|0);
  $141 = HEAP16[$140>>1]|0;
  $142 = $141 << 16 >> 16;
  $143 = Math_imul($142, $138)|0;
  $144 = (($130) + ($143))|0;
  $145 = (($in$0) + 38|0);
  $146 = HEAP16[$145>>1]|0;
  $147 = $146 << 16 >> 16;
  $148 = Math_imul($147, $138)|0;
  $149 = (($135) + ($148))|0;
  $150 = (($in$0) + 40|0);
  $151 = HEAP16[$139>>1]|0;
  $152 = $151 << 16 >> 16;
  $153 = HEAP16[$150>>1]|0;
  $154 = $153 << 16 >> 16;
  $155 = Math_imul($154, $152)|0;
  $156 = (($155) + ($144))|0;
  $157 = (($in$0) + 42|0);
  $158 = HEAP16[$157>>1]|0;
  $159 = $158 << 16 >> 16;
  $160 = Math_imul($159, $152)|0;
  $161 = (($160) + ($149))|0;
  $162 = (($imp$0) + 22|0);
  $163 = HEAP16[$162>>1]|0;
  $164 = $163 << 16 >> 16;
  $165 = (($in$0) + 44|0);
  $166 = HEAP16[$165>>1]|0;
  $167 = $166 << 16 >> 16;
  $168 = Math_imul($167, $164)|0;
  $169 = (($156) + ($168))|0;
  $170 = (($in$0) + 46|0);
  $171 = HEAP16[$170>>1]|0;
  $172 = $171 << 16 >> 16;
  $173 = Math_imul($172, $164)|0;
  $174 = (($161) + ($173))|0;
  $scevgep = (($imp$0) + 24|0);
  $175 = (($remain$0) + -1)|0;
  $176 = $169 >>> 15;
  $177 = $174 >>> 15;
  $178 = $skip$0 << 1;
  $179 = $178 & 2;
  $180 = $skip$0 >>> 1;
  $$sum = (($179) + ($10))|0;
  $181 = (($in$0) + ($$sum<<1)|0);
  $182 = ($175|0)==(0);
  if ($182) {
   $183 = HEAP32[$3>>2]|0;
   $184 = HEAP32[$6>>2]|0;
   $imp$2 = $20;$remain$1 = $184;$skip$1 = $183;
  } else {
   $imp$2 = $scevgep;$remain$1 = $175;$skip$1 = $180;
  }
  $185 = $176&65535;
  HEAP16[$out$0>>1] = $185;
  $186 = $177&65535;
  $187 = (($out$0) + 2|0);
  HEAP16[$187>>1] = $186;
  $188 = (($out$0) + 4|0);
  $189 = ($181>>>0)>($19>>>0);
  if ($189) {
   $in$1 = $181;$out$1 = $188;$remain$2 = $remain$1;
   label = 7;
   break;
  } else {
   $$0 = $21;$imp$0 = $imp$2;$in$0 = $181;$out$0 = $188;$remain$0 = $remain$1;$skip$0 = $skip$1;
  }
 }
 if ((label|0) == 7) {
  $190 = HEAP32[$6>>2]|0;
  $191 = (($190) - ($remain$2))|0;
  HEAP32[$4>>2] = $191;
  $192 = HEAP32[$1>>2]|0;
  $193 = $192;
  $194 = $in$1;
  $195 = (($193) - ($194))|0;
  $196 = $195 >> 1;
  $197 = (__ZNK13blargg_vectorIsEixEj($this,$196)|0);
  HEAP32[$1>>2] = $197;
  $198 = (__ZNK13blargg_vectorIsE5beginEv($this)|0);
  _memmove(($198|0),($in$1|0),($195|0))|0;
  $199 = $out$1;
  $200 = $out_begin;
  $201 = (($199) - ($200))|0;
  $202 = $201 >> 1;
  return ($202|0);
 }
 return (0)|0;
}
function __ZN11Blip_Reader5beginER11Blip_Buffer($this,$blip_buf) {
 $this = $this|0;
 $blip_buf = $blip_buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($blip_buf) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$this>>2] = $1;
 $2 = (($blip_buf) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = (($blip_buf) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function __ZNK11Blip_Reader4readEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 14;
 return ($2|0);
}
function __ZN11Blip_Reader4nextEi($this,$bass_shift) {
 $this = $this|0;
 $bass_shift = $bass_shift|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 4|0);
 HEAP32[$this>>2] = $1;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >> $bass_shift;
 $6 = (($4) + ($2))|0;
 $7 = (($6) - ($5))|0;
 HEAP32[$3>>2] = $7;
 return;
}
function __ZN11Blip_Reader3endER11Blip_Buffer($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($b) + 16|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNK13blargg_vectorIsEixEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 if ($2) {
  ___assert_fail((44880|0),(44896|0),51,(44944|0));
  // unreachable;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + ($n<<1)|0);
  return ($4|0);
 }
 return (0)|0;
}
function __ZNK13blargg_vectorIsE3endEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + ($2<<1)|0);
 return ($3|0);
}
function __ZN14Effects_Buffer8config_tC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$this>>3] = -0.15000000596046448;
 $0 = (($this) + 8|0);
 HEAPF64[$0>>3] = 0.15000000596046448;
 $1 = (($this) + 32|0);
 HEAPF64[$1>>3] = 88.0;
 $2 = (($this) + 48|0);
 HEAPF64[$2>>3] = 0.11999999731779099;
 $3 = (($this) + 16|0);
 HEAPF64[$3>>3] = 61.0;
 $4 = (($this) + 24|0);
 HEAPF64[$4>>3] = 0.10000000149011612;
 $5 = (($this) + 40|0);
 HEAPF64[$5>>3] = 18.0;
 $6 = (($this) + 56|0);
 HEAP8[$6>>0] = 0;
 return;
}
function __ZN14Effects_Buffer9set_depthEd($this,$d) {
 $this = $this|0;
 $d = +$d;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, $c = 0, $f$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $d;
 __ZN14Effects_Buffer8config_tC2Ev($c);
 $1 = $0 * -0.60000002384185791;
 $2 = $1;
 HEAPF64[$c>>3] = $2;
 $3 = $0 * 0.60000002384185791;
 $4 = $3;
 $5 = (($c) + 8|0);
 HEAPF64[$5>>3] = $4;
 $6 = (($c) + 32|0);
 HEAPF64[$6>>3] = 88.0;
 $7 = (($c) + 16|0);
 HEAPF64[$7>>3] = 61.0;
 $8 = $0 > 0.5;
 $f$0 = $8 ? 0.5 : $0;
 $9 = $f$0 * 0.5;
 $10 = $9;
 $11 = (($c) + 48|0);
 HEAPF64[$11>>3] = $10;
 $12 = $f$0 * 0.30000001192092896;
 $13 = $12;
 $14 = (($c) + 24|0);
 HEAPF64[$14>>3] = $13;
 $15 = (($c) + 40|0);
 HEAPF64[$15>>3] = 18.0;
 $16 = $d > 0.0;
 $17 = (($c) + 56|0);
 $18 = $16&1;
 HEAP8[$17>>0] = $18;
 $19 = HEAP32[$this>>2]|0;
 $20 = (($19) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_vii[$21 & 31]($this,$c);
 STACKTOP = sp;return;
}
function __ZN14Effects_BufferC2Eb($this,$center_only) {
 $this = $this|0;
 $center_only = $center_only|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12Multi_BufferC2Ei($this,2);
 HEAP32[$this>>2] = ((37152 + 8|0));
 $0 = (($this) + 20|0);
 $1 = (($this) + 328|0);
 $2 = $0;
 while(1) {
  __ZN11Blip_BufferC2Ev($2);
  $3 = (($2) + 44|0);
  $4 = ($3|0)==($1|0);
  if ($4) {
   break;
  } else {
   $2 = $3;
  }
 }
 $5 = (($this) + 368|0);
 __ZN14Effects_Buffer8config_tC2Ev($5);
 $6 = (($this) + 448|0);
 __ZN13blargg_vectorIsEC2Ev($6);
 $7 = (($this) + 456|0);
 __ZN13blargg_vectorIsEC2Ev($7);
 $8 = $center_only ? 3 : 7;
 $9 = (($this) + 440|0);
 HEAP32[$9>>2] = $8;
 $10 = (($this) + 468|0);
 HEAP32[$10>>2] = 0;
 $11 = (($this) + 464|0);
 HEAP32[$11>>2] = 0;
 $12 = (($this) + 432|0);
 HEAP32[$12>>2] = 0;
 $13 = (($this) + 436|0);
 HEAP32[$13>>2] = 0;
 $14 = (($this) + 444|0);
 HEAP8[$14>>0] = 0;
 __ZN14Effects_Buffer9set_depthEd($this,0.0);
 return;
}
function __ZN14Effects_BufferD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((37152 + 8|0));
 $0 = (($this) + 456|0);
 __ZN13blargg_vectorIsED2Ev($0);
 $1 = (($this) + 448|0);
 __ZN13blargg_vectorIsED2Ev($1);
 $2 = (($this) + 20|0);
 $3 = (($this) + 328|0);
 $5 = $3;
 while(1) {
  $4 = (($5) + -44|0);
  __ZN11Blip_BufferD2Ev($4);
  $6 = ($4|0)==($2|0);
  if ($6) {
   break;
  } else {
   $5 = $4;
  }
 }
 return;
}
function __ZN14Effects_BufferD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14Effects_BufferD2Ev($this);
 __ZN12Multi_BufferdlEPv($this);
 return;
}
function __ZN14Effects_Buffer15set_sample_rateEli($this,$rate,$msec) {
 $this = $this|0;
 $rate = $rate|0;
 $msec = $msec|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 456|0);
 $1 = (__ZNK13blargg_vectorIsE4sizeEv($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (__ZN13blargg_vectorIsE6resizeEj($0,4096)|0);
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $$0 = $3;
   return ($$0|0);
  }
 }
 $5 = (($this) + 448|0);
 $6 = (__ZNK13blargg_vectorIsE4sizeEv($5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (__ZN13blargg_vectorIsE6resizeEj($5,16384)|0);
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $$0 = $8;
   return ($$0|0);
  }
 }
 $10 = (($this) + 440|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)>(0);
 L9: do {
  if ($12) {
   $i$01 = 0;
   while(1) {
    $16 = ((($this) + (($i$01*44)|0)|0) + 20|0);
    $17 = (__ZN11Blip_Buffer15set_sample_rateEli($16,$rate,$msec)|0);
    $18 = ($17|0)==(0|0);
    $15 = (($i$01) + 1)|0;
    if (!($18)) {
     $$0 = $17;
     break;
    }
    $13 = HEAP32[$10>>2]|0;
    $14 = ($15|0)<($13|0);
    if ($14) {
     $i$01 = $15;
    } else {
     break L9;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $19 = HEAP32[$this>>2]|0;
 $20 = (($19) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($this) + 368|0);
 FUNCTION_TABLE_vii[$21 & 31]($this,$22);
 $23 = HEAP32[$this>>2]|0;
 $24 = (($23) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 FUNCTION_TABLE_vi[$25 & 127]($this);
 $26 = (($this) + 20|0);
 $27 = (__ZNK11Blip_Buffer11sample_rateEv($26)|0);
 $28 = (__ZNK11Blip_Buffer6lengthEv($26)|0);
 (__ZN12Multi_Buffer15set_sample_rateEli($this,$27,$28)|0);
 $$0 = 0;
 return ($$0|0);
}
function __ZN14Effects_Buffer10clock_rateEl($this,$rate) {
 $this = $this|0;
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 440|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $i$01 = 0;
 } else {
  return;
 }
 while(1) {
  $3 = ((($this) + (($i$01*44)|0)|0) + 20|0);
  __ZN11Blip_Buffer10clock_rateEl($3,$rate);
  $4 = (($i$01) + 1)|0;
  $5 = HEAP32[$0>>2]|0;
  $6 = ($4|0)<($5|0);
  if ($6) {
   $i$01 = $4;
  } else {
   break;
  }
 }
 return;
}
function __ZN14Effects_Buffer9bass_freqEi($this,$freq) {
 $this = $this|0;
 $freq = $freq|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 440|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $i$01 = 0;
 } else {
  return;
 }
 while(1) {
  $3 = ((($this) + (($i$01*44)|0)|0) + 20|0);
  __ZN11Blip_Buffer9bass_freqEi($3,$freq);
  $4 = (($i$01) + 1)|0;
  $5 = HEAP32[$0>>2]|0;
  $6 = ($4|0)<($5|0);
  if ($6) {
   $i$01 = $4;
  } else {
   break;
  }
 }
 return;
}
function __ZN14Effects_Buffer5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 432|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 436|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 456|0);
 $3 = (__ZNK13blargg_vectorIsE4sizeEv($2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (__ZNK13blargg_vectorIsEixEj($2,0)|0);
  _memset(($5|0),0,8192)|0;
 }
 $6 = (($this) + 448|0);
 $7 = (__ZNK13blargg_vectorIsE4sizeEv($6)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (__ZNK13blargg_vectorIsEixEj($6,0)|0);
  _memset(($9|0),0,32768)|0;
 }
 $10 = (($this) + 440|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)>(0);
 if ($12) {
  $i$01 = 0;
 } else {
  return;
 }
 while(1) {
  $13 = ((($this) + (($i$01*44)|0)|0) + 20|0);
  __ZN11Blip_Buffer5clearEi($13,1);
  $14 = (($i$01) + 1)|0;
  $15 = HEAP32[$10>>2]|0;
  $16 = ($14|0)<($15|0);
  if ($16) {
   $i$01 = $14;
  } else {
   break;
  }
 }
 return;
}
function __ZN14Effects_Buffer6configERKNS_8config_tE($this,$cfg) {
 $this = $this|0;
 $cfg = $cfg|0;
 var $$neg2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 __ZN12Multi_Buffer16channels_changedEv($this);
 $0 = (($this) + 368|0);
 $1 = (($this) + 424|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (($cfg) + 56|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   $7 = (($this) + 456|0);
   $8 = (__ZNK13blargg_vectorIsE4sizeEv($7)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = (__ZNK13blargg_vectorIsEixEj($7,0)|0);
    _memset(($10|0),0,8192)|0;
    $11 = (($this) + 448|0);
    $12 = (__ZNK13blargg_vectorIsEixEj($11,0)|0);
    _memset(($12|0),0,32768)|0;
   }
  }
 }
 dest=$0+0|0; src=$cfg+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));HEAP8[$0+56>>0]=HEAP8[$cfg+56>>0]|0;
 $13 = HEAP8[$1>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $96 = (($this) + 20|0);
  $97 = (($this) + 64|0);
  $98 = (($this) + 108|0);
  $99 = (($this) + 328|0);
  HEAP32[$99>>2] = $96;
  $100 = (($this) + 332|0);
  HEAP32[$100>>2] = $97;
  $101 = (($this) + 336|0);
  HEAP32[$101>>2] = $98;
  $102 = (($this) + 340|0);
  HEAP32[$102>>2] = $96;
  $103 = (($this) + 344|0);
  HEAP32[$103>>2] = $97;
  $104 = (($this) + 348|0);
  HEAP32[$104>>2] = $98;
  $105 = (($this) + 352|0);
  HEAP32[$105>>2] = $96;
  $106 = (($this) + 356|0);
  HEAP32[$106>>2] = $97;
  $107 = (($this) + 360|0);
  HEAP32[$107>>2] = $98;
 } else {
  $15 = +HEAPF64[$0>>3];
  $16 = $15 * 32768.0;
  $17 = $16 + 0.5;
  $18 = (~~(($17)));
  $19 = (32768 - ($18))|0;
  $20 = (($this) + 472|0);
  HEAP32[$20>>2] = $19;
  $21 = (65536 - ($19))|0;
  $22 = (($this) + 476|0);
  HEAP32[$22>>2] = $21;
  $23 = (($this) + 376|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $24 * 32768.0;
  $26 = $25 + 0.5;
  $27 = (~~(($26)));
  $28 = (32768 - ($27))|0;
  $29 = (($this) + 480|0);
  HEAP32[$29>>2] = $28;
  $30 = (65536 - ($28))|0;
  $31 = (($this) + 484|0);
  HEAP32[$31>>2] = $30;
  $32 = (($this) + 416|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $33 * 32768.0;
  $35 = $34 + 0.5;
  $36 = (~~(($35)));
  $37 = (($this) + 508|0);
  HEAP32[$37>>2] = $36;
  $38 = (($this) + 392|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $39 * 32768.0;
  $41 = $40 + 0.5;
  $42 = (~~(($41)));
  $43 = (($this) + 496|0);
  HEAP32[$43>>2] = $42;
  $44 = (($this) + 408|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $45 * 5.0000000000000001E-4;
  $47 = (__ZNK12Multi_Buffer11sample_rateEv($this)|0);
  $48 = (+($47|0));
  $49 = $46 * $48;
  $50 = (~~(($49)));
  $51 = (($this) + 400|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $52 * 0.001;
  $54 = $48 * $53;
  $55 = (~~(($54)));
  $56 = (($55) - ($50))|0;
  $57 = $56 << 1;
  $58 = (16384 - ($57))|0;
  $59 = (__Z9pin_rangeiii($58,16382,0)|0);
  $60 = (($this) + 500|0);
  HEAP32[$60>>2] = $59;
  $61 = (($55) + ($50))|0;
  $62 = $61 << 1;
  $63 = (16385 - ($62))|0;
  $64 = (__Z9pin_rangeiii($63,16383,1)|0);
  $65 = (($this) + 504|0);
  HEAP32[$65>>2] = $64;
  $66 = (($this) + 384|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $67 * 0.001;
  $69 = (__ZNK12Multi_Buffer11sample_rateEv($this)|0);
  $70 = (+($69|0));
  $71 = $68 * $70;
  $72 = (~~(($71)));
  $73 = (($50) + 4095)|0;
  $74 = (($73) - ($72))|0;
  $75 = (__Z9pin_rangeiii($74,4095,0)|0);
  $76 = (($this) + 488|0);
  HEAP32[$76>>2] = $75;
  $$neg2 = (4095 - ($50))|0;
  $77 = (($$neg2) - ($72))|0;
  $78 = (__Z9pin_rangeiii($77,4095,0)|0);
  $79 = (($this) + 492|0);
  HEAP32[$79>>2] = $78;
  $80 = (($this) + 20|0);
  $81 = (($this) + 328|0);
  HEAP32[$81>>2] = $80;
  $82 = (($this) + 152|0);
  $83 = (($this) + 332|0);
  HEAP32[$83>>2] = $82;
  $84 = (($this) + 196|0);
  $85 = (($this) + 336|0);
  HEAP32[$85>>2] = $84;
  $86 = (($this) + 64|0);
  $87 = (($this) + 340|0);
  HEAP32[$87>>2] = $86;
  $88 = (($this) + 344|0);
  HEAP32[$88>>2] = $82;
  $89 = (($this) + 348|0);
  HEAP32[$89>>2] = $84;
  $90 = (($this) + 108|0);
  $91 = (($this) + 352|0);
  HEAP32[$91>>2] = $90;
  $92 = (($this) + 240|0);
  $93 = (($this) + 356|0);
  HEAP32[$93>>2] = $92;
  $94 = (($this) + 284|0);
  $95 = (($this) + 360|0);
  HEAP32[$95>>2] = $94;
 }
 $108 = (($this) + 440|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)<(7);
 if (!($110)) {
  return;
 }
 $111 = (($this) + 328|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (($this) + 332|0);
 HEAP32[$113>>2] = $112;
 $114 = HEAP32[$111>>2]|0;
 $115 = (($this) + 336|0);
 HEAP32[$115>>2] = $114;
 $116 = (($this) + 340|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($this) + 344|0);
 HEAP32[$118>>2] = $117;
 $119 = HEAP32[$116>>2]|0;
 $120 = (($this) + 348|0);
 HEAP32[$120>>2] = $119;
 $121 = (($this) + 352|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($this) + 356|0);
 HEAP32[$123>>2] = $122;
 $124 = HEAP32[$121>>2]|0;
 $125 = (($this) + 360|0);
 HEAP32[$125>>2] = $124;
 return;
}
function __ZN14Effects_Buffer7channelEii($agg$result,$this,$i,$type) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $i = $i|0;
 $type = $type|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $out$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0);
 if ($0) {
  $1 = (($i|0) % 5)&-1;
  $2 = ($1|0)>(2);
  $$ = $2 ? 2 : $1;
  $out$0 = $$;
 } else {
  $3 = $type & 512;
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = $type & 255;
   $6 = (($5>>>0) % 3)&-1;
   $7 = ($6|0)==(0);
   $8 = $type & 1;
   $$1 = $7 ? 2 : $8;
   $out$0 = $$1;
  } else {
   $out$0 = 2;
  }
 }
 $9 = ((($this) + (($out$0*12)|0)|0) + 328|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$9+8>>2]|0;
 return;
}
function __ZN14Effects_Buffer9end_frameEi($this,$clock_count) {
 $this = $this|0;
 $clock_count = $clock_count|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bufs_used$0$lcssa = 0, $bufs_used$02 = 0, $i$01 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 440|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $bufs_used$02 = 0;$i$01 = 0;
  while(1) {
   $3 = ((($this) + (($i$01*44)|0)|0) + 20|0);
   $4 = (__ZN11Blip_Buffer14clear_modifiedEv($3)|0);
   $5 = $4 << $i$01;
   $6 = $5 | $bufs_used$02;
   __ZN11Blip_Buffer9end_frameEi($3,$clock_count);
   $7 = (($i$01) + 1)|0;
   $8 = HEAP32[$0>>2]|0;
   $9 = ($7|0)<($8|0);
   if ($9) {
    $bufs_used$02 = $6;$i$01 = $7;
   } else {
    $$lcssa = $8;$bufs_used$0$lcssa = $6;
    break;
   }
  }
 } else {
  $$lcssa = $1;$bufs_used$0$lcssa = 0;
 }
 $10 = (($this) + 424|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)!=(0);
 $13 = $12 ? 120 : 6;
 $14 = $13 & $bufs_used$0$lcssa;
 $15 = ($14|0)!=(0);
 $16 = ($$lcssa|0)==(7);
 $or$cond = $15 & $16;
 if ($or$cond) {
  $17 = (($this) + 20|0);
  $18 = (__ZNK11Blip_Buffer13samples_availEv($17)|0);
  $19 = (($18) + 8)|0;
  $20 = (($this) + 432|0);
  HEAP32[$20>>2] = $19;
 }
 $21 = (($this) + 444|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  $24 = HEAP8[$10>>0]|0;
  $25 = ($24<<24>>24)==(0);
  if ($25) {
   $30 = HEAP8[$10>>0]|0;
   HEAP8[$21>>0] = $30;
   return;
  }
 }
 $26 = (($this) + 20|0);
 $27 = (__ZNK11Blip_Buffer13samples_availEv($26)|0);
 $28 = (($27) + 8)|0;
 $29 = (($this) + 436|0);
 HEAP32[$29>>2] = $28;
 $30 = HEAP8[$10>>0]|0;
 HEAP8[$21>>0] = $30;
 return;
}
function __ZNK14Effects_Buffer13samples_availEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = (__ZNK11Blip_Buffer13samples_availEv($0)|0);
 $2 = $1 << 1;
 return ($2|0);
}
function __ZN14Effects_Buffer12read_samplesEPsl($this,$out,$total_samples) {
 $this = $this|0;
 $out = $out|0;
 $total_samples = $total_samples|0;
 var $$ = 0, $$04 = 0, $$2 = 0, $$remain$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $active_bufs$0 = 0, $count$1 = 0, $i$03 = 0, $remain$15 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $total_samples & 1;
 $1 = ($0|0)==(0);
 if (!($1)) {
  ___assert_fail((37208|0),(37232|0),251,(41576|0));
  // unreachable;
 }
 $2 = (($this) + 20|0);
 $3 = (__ZNK11Blip_Buffer13samples_availEv($2)|0);
 $4 = $total_samples >> 1;
 $5 = ($3|0)>($4|0);
 $$ = $5 ? $4 : $3;
 $6 = ($$|0)==(0);
 if ($6) {
  $37 = $$ << 1;
  return ($37|0);
 }
 $7 = (($this) + 440|0);
 $8 = (($this) + 436|0);
 $9 = (($this) + 432|0);
 $10 = (($this) + 432|0);
 $11 = (($this) + 432|0);
 $$04 = $out;$remain$15 = $$;
 while(1) {
  $13 = HEAP32[$7>>2]|0;
  $14 = HEAP32[$8>>2]|0;
  $15 = ($14|0)==(0);
  do {
   if ($15) {
    $19 = HEAP32[$9>>2]|0;
    $20 = ($19|0)==(0);
    if ($20) {
     __ZN14Effects_Buffer8mix_monoEPsi($this,$$04,$remain$15);
     $active_bufs$0 = 1;$count$1 = $remain$15;
     break;
    } else {
     __ZN14Effects_Buffer10mix_stereoEPsi($this,$$04,$remain$15);
     $active_bufs$0 = 3;$count$1 = $remain$15;
     break;
    }
   } else {
    $16 = ($remain$15|0)>($14|0);
    $$remain$1 = $16 ? $14 : $remain$15;
    $17 = HEAP32[$11>>2]|0;
    $18 = ($17|0)==(0);
    if ($18) {
     __ZN14Effects_Buffer17mix_mono_enhancedEPsi($this,$$04,$$remain$1);
     $active_bufs$0 = 3;$count$1 = $$remain$1;
     break;
    } else {
     __ZN14Effects_Buffer12mix_enhancedEPsi($this,$$04,$$remain$1);
     $active_bufs$0 = $13;$count$1 = $$remain$1;
     break;
    }
   }
  } while(0);
  $21 = $count$1 << 1;
  $22 = (($$04) + ($21<<1)|0);
  $23 = (($remain$15) - ($count$1))|0;
  $24 = HEAP32[$10>>2]|0;
  $25 = (($24) - ($count$1))|0;
  $26 = ($25|0)<(0);
  $$2 = $26 ? 0 : $25;
  HEAP32[$10>>2] = $$2;
  $27 = HEAP32[$8>>2]|0;
  $28 = (($27) - ($count$1))|0;
  $29 = ($28|0)<(0);
  $storemerge = $29 ? 0 : $28;
  HEAP32[$8>>2] = $storemerge;
  $30 = HEAP32[$7>>2]|0;
  $31 = ($30|0)>(0);
  if ($31) {
   $i$03 = 0;
   while(1) {
    $32 = ($i$03|0)<($active_bufs$0|0);
    $33 = ((($this) + (($i$03*44)|0)|0) + 20|0);
    if ($32) {
     __ZN11Blip_Buffer14remove_samplesEl($33,$count$1);
    } else {
     __ZN11Blip_Buffer14remove_silenceEl($33,$count$1);
    }
    $34 = (($i$03) + 1)|0;
    $35 = HEAP32[$7>>2]|0;
    $36 = ($34|0)<($35|0);
    if ($36) {
     $i$03 = $34;
    } else {
     break;
    }
   }
  }
  $12 = ($remain$15|0)==($count$1|0);
  if ($12) {
   break;
  } else {
   $$04 = $22;$remain$15 = $23;
  }
 }
 $37 = $$ << 1;
 return ($37|0);
}
function __ZN14Effects_Buffer12mix_enhancedEPsi($this,$out_,$count) {
 $this = $this|0;
 $out_ = $out_|0;
 $count = $count|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $center_reader_accum$0$lcssa = 0, $center_reader_accum$016 = 0, $center_reader_buf$017 = 0, $echo_pos$0$lcssa = 0, $echo_pos$011 = 0, $l1_reader_accum$0$lcssa = 0;
 var $l1_reader_accum$014 = 0, $l1_reader_buf$015 = 0, $l2_reader_accum$0$lcssa = 0, $l2_reader_accum$02 = 0, $l2_reader_buf$09 = 0, $left$0 = 0, $out$018 = 0, $r1_reader_accum$0$lcssa = 0, $r1_reader_accum$010 = 0, $r1_reader_buf$013 = 0, $r2_reader_accum$0$lcssa = 0, $r2_reader_accum$04 = 0, $r2_reader_buf$03 = 0, $reverb_pos$0$lcssa = 0, $reverb_pos$012 = 0, $sext = 0, $sext1 = 0, $sq1_reader_accum$0$lcssa = 0, $sq1_reader_accum$06 = 0, $sq1_reader_buf$05 = 0;
 var $sq2_reader_accum$0$lcssa = 0, $sq2_reader_accum$08 = 0, $sq2_reader_buf$07 = 0, $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 128|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 168|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 212|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($this) + 256|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($this) + 300|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($this) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($this) + 80|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($this) + 448|0);
 $17 = (__ZNK13blargg_vectorIsE5beginEv($16)|0);
 $18 = (($this) + 456|0);
 $19 = (__ZNK13blargg_vectorIsE5beginEv($18)|0);
 $20 = (($this) + 468|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($this) + 464|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($count|0)==(0);
 if ($24) {
  $center_reader_accum$0$lcssa = $3;$echo_pos$0$lcssa = $21;$l1_reader_accum$0$lcssa = $5;$l2_reader_accum$0$lcssa = $9;$r1_reader_accum$0$lcssa = $7;$r2_reader_accum$0$lcssa = $11;$reverb_pos$0$lcssa = $23;$sq1_reader_accum$0$lcssa = $13;$sq2_reader_accum$0$lcssa = $15;
  HEAP32[$22>>2] = $reverb_pos$0$lcssa;
  HEAP32[$20>>2] = $echo_pos$0$lcssa;
  HEAP32[$4>>2] = $l1_reader_accum$0$lcssa;
  HEAP32[$6>>2] = $r1_reader_accum$0$lcssa;
  HEAP32[$8>>2] = $l2_reader_accum$0$lcssa;
  HEAP32[$10>>2] = $r2_reader_accum$0$lcssa;
  HEAP32[$12>>2] = $sq1_reader_accum$0$lcssa;
  HEAP32[$14>>2] = $sq2_reader_accum$0$lcssa;
  HEAP32[$2>>2] = $center_reader_accum$0$lcssa;
  return;
 }
 $25 = (($this) + 72|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($this) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($this) + 292|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($this) + 248|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($this) + 204|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($this) + 160|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($this) + 116|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($this) + 472|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($this) + 480|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($this) + 500|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($this) + 476|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($this) + 484|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($this) + 504|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($this) + 508|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($this) + 496|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($this) + 488|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($this) + 492|0);
 $58 = HEAP32[$57>>2]|0;
 $$in = $count;$center_reader_accum$016 = $3;$center_reader_buf$017 = $38;$echo_pos$011 = $21;$l1_reader_accum$014 = $5;$l1_reader_buf$015 = $36;$l2_reader_accum$02 = $9;$l2_reader_buf$09 = $32;$out$018 = $out_;$r1_reader_accum$010 = $7;$r1_reader_buf$013 = $34;$r2_reader_accum$04 = $11;$r2_reader_buf$03 = $30;$reverb_pos$012 = $23;$sq1_reader_accum$06 = $13;$sq1_reader_buf$05 = $28;$sq2_reader_accum$08 = $15;$sq2_reader_buf$07 = $26;
 while(1) {
  $59 = (($$in) + -1)|0;
  $60 = $sq1_reader_accum$06 >> 14;
  $61 = $sq2_reader_accum$08 >> 14;
  $62 = (($sq1_reader_buf$05) + 4|0);
  $63 = HEAP32[$sq1_reader_buf$05>>2]|0;
  $64 = $sq1_reader_accum$06 >> $1;
  $65 = (($63) - ($64))|0;
  $66 = (($65) + ($sq1_reader_accum$06))|0;
  $67 = (($sq2_reader_buf$07) + 4|0);
  $68 = HEAP32[$sq2_reader_buf$07>>2]|0;
  $69 = $sq2_reader_accum$08 >> $1;
  $70 = (($68) - ($69))|0;
  $71 = (($70) + ($sq2_reader_accum$08))|0;
  $72 = Math_imul($40, $60)|0;
  $73 = $72 >> 15;
  $74 = Math_imul($42, $61)|0;
  $75 = $74 >> 15;
  $76 = $l1_reader_accum$014 >> 14;
  $77 = (($44) + ($reverb_pos$012))|0;
  $78 = $77 & 16383;
  $79 = (($17) + ($78<<1)|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80 << 16 >> 16;
  $82 = (($73) + ($76))|0;
  $83 = (($82) + ($75))|0;
  $84 = (($83) + ($81))|0;
  $85 = Math_imul($46, $60)|0;
  $86 = $85 >> 15;
  $87 = Math_imul($48, $61)|0;
  $88 = $87 >> 15;
  $89 = $r1_reader_accum$010 >> 14;
  $90 = (($50) + ($reverb_pos$012))|0;
  $91 = $90 & 16383;
  $92 = (($17) + ($91<<1)|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = $93 << 16 >> 16;
  $95 = (($86) + ($89))|0;
  $96 = (($95) + ($88))|0;
  $97 = (($96) + ($94))|0;
  $98 = (($l1_reader_buf$015) + 4|0);
  $99 = HEAP32[$l1_reader_buf$015>>2]|0;
  $100 = $l1_reader_accum$014 >> $1;
  $101 = (($99) - ($100))|0;
  $102 = (($101) + ($l1_reader_accum$014))|0;
  $103 = (($r1_reader_buf$013) + 4|0);
  $104 = HEAP32[$r1_reader_buf$013>>2]|0;
  $105 = $r1_reader_accum$010 >> $1;
  $106 = (($104) - ($105))|0;
  $107 = (($106) + ($r1_reader_accum$010))|0;
  $108 = Math_imul($52, $84)|0;
  $109 = $108 >>> 15;
  $110 = $109&65535;
  $111 = (($17) + ($reverb_pos$012<<1)|0);
  HEAP16[$111>>1] = $110;
  $112 = Math_imul($52, $97)|0;
  $113 = $112 >>> 15;
  $114 = $113&65535;
  $115 = (($reverb_pos$012) + 1)|0;
  $116 = (($17) + ($115<<1)|0);
  HEAP16[$116>>1] = $114;
  $117 = (($reverb_pos$012) + 2)|0;
  $118 = $117 & 16383;
  $119 = $center_reader_accum$016 >> 14;
  $120 = (($center_reader_buf$017) + 4|0);
  $121 = HEAP32[$center_reader_buf$017>>2]|0;
  $122 = $center_reader_accum$016 >> $1;
  $123 = (($121) - ($122))|0;
  $124 = (($123) + ($center_reader_accum$016))|0;
  $125 = $l2_reader_accum$02 >> 14;
  $126 = (($56) + ($echo_pos$011))|0;
  $127 = $126 & 4095;
  $128 = (($19) + ($127<<1)|0);
  $129 = HEAP16[$128>>1]|0;
  $130 = $129 << 16 >> 16;
  $131 = Math_imul($130, $54)|0;
  $132 = $131 >> 15;
  $133 = (($119) + ($125))|0;
  $134 = (($133) + ($84))|0;
  $135 = (($134) + ($132))|0;
  $136 = $r2_reader_accum$04 >> 14;
  $137 = (($58) + ($echo_pos$011))|0;
  $138 = $137 & 4095;
  $139 = (($19) + ($138<<1)|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $140 << 16 >> 16;
  $142 = Math_imul($141, $54)|0;
  $143 = $142 >> 15;
  $144 = (($119) + ($136))|0;
  $145 = (($144) + ($97))|0;
  $146 = (($145) + ($143))|0;
  $147 = (($l2_reader_buf$09) + 4|0);
  $148 = HEAP32[$l2_reader_buf$09>>2]|0;
  $149 = $l2_reader_accum$02 >> $1;
  $150 = (($148) - ($149))|0;
  $151 = (($150) + ($l2_reader_accum$02))|0;
  $152 = (($r2_reader_buf$03) + 4|0);
  $153 = HEAP32[$r2_reader_buf$03>>2]|0;
  $154 = $r2_reader_accum$04 >> $1;
  $155 = (($153) - ($154))|0;
  $156 = (($155) + ($r2_reader_accum$04))|0;
  $157 = $119&65535;
  $158 = (($19) + ($echo_pos$011<<1)|0);
  HEAP16[$158>>1] = $157;
  $159 = (($echo_pos$011) + 1)|0;
  $160 = $159 & 4095;
  $sext = $135 << 16;
  $161 = $sext >> 16;
  $162 = ($161|0)==($135|0);
  if ($162) {
   $left$0 = $135;
  } else {
   $163 = $135 >> 24;
   $164 = (32767 - ($163))|0;
   $left$0 = $164;
  }
  $165 = $left$0&65535;
  HEAP16[$out$018>>1] = $165;
  $166 = (($out$018) + 2|0);
  $167 = (($out$018) + 4|0);
  $sext1 = $146 << 16;
  $168 = $sext1 >> 16;
  $169 = ($168|0)==($146|0);
  if ($169) {
   $storemerge$in = $146;
  } else {
   $170 = $146 >> 24;
   $171 = (32767 - ($170))|0;
   $storemerge$in = $171;
  }
  $storemerge = $storemerge$in&65535;
  HEAP16[$166>>1] = $storemerge;
  $172 = ($59|0)==(0);
  if ($172) {
   $center_reader_accum$0$lcssa = $124;$echo_pos$0$lcssa = $160;$l1_reader_accum$0$lcssa = $102;$l2_reader_accum$0$lcssa = $151;$r1_reader_accum$0$lcssa = $107;$r2_reader_accum$0$lcssa = $156;$reverb_pos$0$lcssa = $118;$sq1_reader_accum$0$lcssa = $66;$sq2_reader_accum$0$lcssa = $71;
   break;
  } else {
   $$in = $59;$center_reader_accum$016 = $124;$center_reader_buf$017 = $120;$echo_pos$011 = $160;$l1_reader_accum$014 = $102;$l1_reader_buf$015 = $98;$l2_reader_accum$02 = $151;$l2_reader_buf$09 = $147;$out$018 = $167;$r1_reader_accum$010 = $107;$r1_reader_buf$013 = $103;$r2_reader_accum$04 = $156;$r2_reader_buf$03 = $152;$reverb_pos$012 = $118;$sq1_reader_accum$06 = $66;$sq1_reader_buf$05 = $62;$sq2_reader_accum$08 = $71;$sq2_reader_buf$07 = $67;
  }
 }
 HEAP32[$22>>2] = $reverb_pos$0$lcssa;
 HEAP32[$20>>2] = $echo_pos$0$lcssa;
 HEAP32[$4>>2] = $l1_reader_accum$0$lcssa;
 HEAP32[$6>>2] = $r1_reader_accum$0$lcssa;
 HEAP32[$8>>2] = $l2_reader_accum$0$lcssa;
 HEAP32[$10>>2] = $r2_reader_accum$0$lcssa;
 HEAP32[$12>>2] = $sq1_reader_accum$0$lcssa;
 HEAP32[$14>>2] = $sq2_reader_accum$0$lcssa;
 HEAP32[$2>>2] = $center_reader_accum$0$lcssa;
 return;
}
function __ZN14Effects_Buffer17mix_mono_enhancedEPsi($this,$out_,$count) {
 $this = $this|0;
 $out_ = $out_|0;
 $count = $count|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $center_reader_accum$0$lcssa = 0, $center_reader_accum$08 = 0, $center_reader_buf$09 = 0, $echo_pos$0$lcssa = 0, $echo_pos$03 = 0, $left$0 = 0, $out$010 = 0, $reverb_pos$0$lcssa = 0, $reverb_pos$04 = 0, $sext = 0;
 var $sext1 = 0, $sq1_reader_accum$0$lcssa = 0, $sq1_reader_accum$06 = 0, $sq1_reader_buf$07 = 0, $sq2_reader_accum$0$lcssa = 0, $sq2_reader_accum$02 = 0, $sq2_reader_buf$05 = 0, $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 128|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 80|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($this) + 448|0);
 $9 = (__ZNK13blargg_vectorIsE5beginEv($8)|0);
 $10 = (($this) + 456|0);
 $11 = (__ZNK13blargg_vectorIsE5beginEv($10)|0);
 $12 = (($this) + 468|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($this) + 464|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($count|0)==(0);
 if ($16) {
  $center_reader_accum$0$lcssa = $3;$echo_pos$0$lcssa = $13;$reverb_pos$0$lcssa = $15;$sq1_reader_accum$0$lcssa = $5;$sq2_reader_accum$0$lcssa = $7;
  HEAP32[$14>>2] = $reverb_pos$0$lcssa;
  HEAP32[$12>>2] = $echo_pos$0$lcssa;
  HEAP32[$4>>2] = $sq1_reader_accum$0$lcssa;
  HEAP32[$6>>2] = $sq2_reader_accum$0$lcssa;
  HEAP32[$2>>2] = $center_reader_accum$0$lcssa;
  return;
 }
 $17 = (($this) + 72|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($this) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($this) + 116|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($this) + 472|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($this) + 480|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($this) + 500|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($this) + 476|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($this) + 484|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($this) + 504|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($this) + 508|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($this) + 496|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($this) + 488|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($this) + 492|0);
 $42 = HEAP32[$41>>2]|0;
 $$in = $count;$center_reader_accum$08 = $3;$center_reader_buf$09 = $22;$echo_pos$03 = $13;$out$010 = $out_;$reverb_pos$04 = $15;$sq1_reader_accum$06 = $5;$sq1_reader_buf$07 = $20;$sq2_reader_accum$02 = $7;$sq2_reader_buf$05 = $18;
 while(1) {
  $43 = (($$in) + -1)|0;
  $44 = $sq1_reader_accum$06 >> 14;
  $45 = $sq2_reader_accum$02 >> 14;
  $46 = (($sq1_reader_buf$07) + 4|0);
  $47 = HEAP32[$sq1_reader_buf$07>>2]|0;
  $48 = $sq1_reader_accum$06 >> $1;
  $49 = (($47) - ($48))|0;
  $50 = (($49) + ($sq1_reader_accum$06))|0;
  $51 = (($sq2_reader_buf$05) + 4|0);
  $52 = HEAP32[$sq2_reader_buf$05>>2]|0;
  $53 = $sq2_reader_accum$02 >> $1;
  $54 = (($52) - ($53))|0;
  $55 = (($54) + ($sq2_reader_accum$02))|0;
  $56 = Math_imul($24, $44)|0;
  $57 = $56 >> 15;
  $58 = Math_imul($26, $45)|0;
  $59 = $58 >> 15;
  $60 = (($59) + ($57))|0;
  $61 = (($28) + ($reverb_pos$04))|0;
  $62 = $61 & 16383;
  $63 = (($9) + ($62<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = (($60) + ($65))|0;
  $67 = Math_imul($30, $44)|0;
  $68 = $67 >> 15;
  $69 = Math_imul($32, $45)|0;
  $70 = $69 >> 15;
  $71 = (($70) + ($68))|0;
  $72 = (($34) + ($reverb_pos$04))|0;
  $73 = $72 & 16383;
  $74 = (($9) + ($73<<1)|0);
  $75 = HEAP16[$74>>1]|0;
  $76 = $75 << 16 >> 16;
  $77 = (($71) + ($76))|0;
  $78 = Math_imul($36, $66)|0;
  $79 = $78 >>> 15;
  $80 = $79&65535;
  $81 = (($9) + ($reverb_pos$04<<1)|0);
  HEAP16[$81>>1] = $80;
  $82 = Math_imul($77, $36)|0;
  $83 = $82 >>> 15;
  $84 = $83&65535;
  $85 = (($reverb_pos$04) + 1)|0;
  $86 = (($9) + ($85<<1)|0);
  HEAP16[$86>>1] = $84;
  $87 = (($reverb_pos$04) + 2)|0;
  $88 = $87 & 16383;
  $89 = $center_reader_accum$08 >> 14;
  $90 = (($center_reader_buf$09) + 4|0);
  $91 = HEAP32[$center_reader_buf$09>>2]|0;
  $92 = $center_reader_accum$08 >> $1;
  $93 = (($91) - ($92))|0;
  $94 = (($93) + ($center_reader_accum$08))|0;
  $95 = (($66) + ($89))|0;
  $96 = (($40) + ($echo_pos$03))|0;
  $97 = $96 & 4095;
  $98 = (($11) + ($97<<1)|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99 << 16 >> 16;
  $101 = Math_imul($100, $38)|0;
  $102 = $101 >> 15;
  $103 = (($95) + ($102))|0;
  $104 = (($77) + ($89))|0;
  $105 = (($42) + ($echo_pos$03))|0;
  $106 = $105 & 4095;
  $107 = (($11) + ($106<<1)|0);
  $108 = HEAP16[$107>>1]|0;
  $109 = $108 << 16 >> 16;
  $110 = Math_imul($109, $38)|0;
  $111 = $110 >> 15;
  $112 = (($104) + ($111))|0;
  $113 = $89&65535;
  $114 = (($11) + ($echo_pos$03<<1)|0);
  HEAP16[$114>>1] = $113;
  $115 = (($echo_pos$03) + 1)|0;
  $116 = $115 & 4095;
  $sext = $103 << 16;
  $117 = $sext >> 16;
  $118 = ($117|0)==($103|0);
  if ($118) {
   $left$0 = $103;
  } else {
   $119 = $103 >> 24;
   $120 = (32767 - ($119))|0;
   $left$0 = $120;
  }
  $121 = $left$0&65535;
  HEAP16[$out$010>>1] = $121;
  $122 = (($out$010) + 2|0);
  $123 = (($out$010) + 4|0);
  $sext1 = $112 << 16;
  $124 = $sext1 >> 16;
  $125 = ($124|0)==($112|0);
  if ($125) {
   $storemerge$in = $112;
  } else {
   $126 = $112 >> 24;
   $127 = (32767 - ($126))|0;
   $storemerge$in = $127;
  }
  $storemerge = $storemerge$in&65535;
  HEAP16[$122>>1] = $storemerge;
  $128 = ($43|0)==(0);
  if ($128) {
   $center_reader_accum$0$lcssa = $94;$echo_pos$0$lcssa = $116;$reverb_pos$0$lcssa = $88;$sq1_reader_accum$0$lcssa = $50;$sq2_reader_accum$0$lcssa = $55;
   break;
  } else {
   $$in = $43;$center_reader_accum$08 = $94;$center_reader_buf$09 = $90;$echo_pos$03 = $116;$out$010 = $123;$reverb_pos$04 = $88;$sq1_reader_accum$06 = $50;$sq1_reader_buf$07 = $46;$sq2_reader_accum$02 = $55;$sq2_reader_buf$05 = $51;
  }
 }
 HEAP32[$14>>2] = $reverb_pos$0$lcssa;
 HEAP32[$12>>2] = $echo_pos$0$lcssa;
 HEAP32[$4>>2] = $sq1_reader_accum$0$lcssa;
 HEAP32[$6>>2] = $sq2_reader_accum$0$lcssa;
 HEAP32[$2>>2] = $center_reader_accum$0$lcssa;
 return;
}
function __ZN14Effects_Buffer10mix_stereoEPsi($this,$out_,$count) {
 $this = $this|0;
 $out_ = $out_|0;
 $count = $count|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c_reader_accum$0$lcssa = 0, $c_reader_accum$03 = 0, $c_reader_buf$02 = 0, $l_reader_accum$0$lcssa = 0, $l_reader_accum$05 = 0, $l_reader_buf$04 = 0, $left$0 = 0, $out$08 = 0, $r_reader_accum$0$lcssa = 0, $r_reader_accum$07 = 0, $r_reader_buf$06 = 0;
 var $sext = 0, $sext1 = 0, $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 124|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($count|0)==(0);
 if ($8) {
  $c_reader_accum$0$lcssa = $3;$l_reader_accum$0$lcssa = $5;$r_reader_accum$0$lcssa = $7;
  HEAP32[$6>>2] = $r_reader_accum$0$lcssa;
  HEAP32[$4>>2] = $l_reader_accum$0$lcssa;
  HEAP32[$2>>2] = $c_reader_accum$0$lcssa;
  return;
 }
 $9 = (($this) + 116|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($this) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($this) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $$in = $count;$c_reader_accum$03 = $3;$c_reader_buf$02 = $14;$l_reader_accum$05 = $5;$l_reader_buf$04 = $12;$out$08 = $out_;$r_reader_accum$07 = $7;$r_reader_buf$06 = $10;
 while(1) {
  $15 = (($$in) + -1)|0;
  $16 = $c_reader_accum$03 >> 14;
  $17 = (($c_reader_buf$02) + 4|0);
  $18 = HEAP32[$c_reader_buf$02>>2]|0;
  $19 = $c_reader_accum$03 >> $1;
  $20 = (($18) - ($19))|0;
  $21 = (($20) + ($c_reader_accum$03))|0;
  $22 = $l_reader_accum$05 >> 14;
  $23 = (($22) + ($16))|0;
  $24 = $r_reader_accum$07 >> 14;
  $25 = (($24) + ($16))|0;
  $26 = (($l_reader_buf$04) + 4|0);
  $27 = HEAP32[$l_reader_buf$04>>2]|0;
  $28 = $l_reader_accum$05 >> $1;
  $29 = (($27) - ($28))|0;
  $30 = (($29) + ($l_reader_accum$05))|0;
  $31 = (($r_reader_buf$06) + 4|0);
  $32 = HEAP32[$r_reader_buf$06>>2]|0;
  $33 = $r_reader_accum$07 >> $1;
  $34 = (($32) - ($33))|0;
  $35 = (($34) + ($r_reader_accum$07))|0;
  $sext = $23 << 16;
  $36 = $sext >> 16;
  $37 = ($36|0)==($23|0);
  if ($37) {
   $left$0 = $23;
  } else {
   $38 = $23 >> 24;
   $39 = (32767 - ($38))|0;
   $left$0 = $39;
  }
  $40 = $left$0&65535;
  HEAP16[$out$08>>1] = $40;
  $41 = (($out$08) + 2|0);
  $42 = (($out$08) + 4|0);
  $sext1 = $25 << 16;
  $43 = $sext1 >> 16;
  $44 = ($43|0)==($25|0);
  if ($44) {
   $storemerge$in = $25;
  } else {
   $45 = $25 >> 24;
   $46 = (32767 - ($45))|0;
   $storemerge$in = $46;
  }
  $storemerge = $storemerge$in&65535;
  HEAP16[$41>>1] = $storemerge;
  $47 = ($15|0)==(0);
  if ($47) {
   $c_reader_accum$0$lcssa = $21;$l_reader_accum$0$lcssa = $30;$r_reader_accum$0$lcssa = $35;
   break;
  } else {
   $$in = $15;$c_reader_accum$03 = $21;$c_reader_buf$02 = $17;$l_reader_accum$05 = $30;$l_reader_buf$04 = $26;$out$08 = $42;$r_reader_accum$07 = $35;$r_reader_buf$06 = $31;
  }
 }
 HEAP32[$6>>2] = $r_reader_accum$0$lcssa;
 HEAP32[$4>>2] = $l_reader_accum$0$lcssa;
 HEAP32[$2>>2] = $c_reader_accum$0$lcssa;
 return;
}
function __ZN14Effects_Buffer8mix_monoEPsi($this,$out_,$count) {
 $this = $this|0;
 $out_ = $out_|0;
 $count = $count|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c_reader_accum$0$lcssa = 0, $c_reader_accum$05 = 0, $c_reader_accum$1 = 0, $c_reader_buf$0$lcssa = 0, $c_reader_buf$04 = 0;
 var $cs0$0 = 0, $cs1$0 = 0, $n$06 = 0, $out$0$lcssa = 0, $out$03 = 0, $scevgep = 0, $scevgep11 = 0, $sext = 0, $sext1 = 0, $sext2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $count >> 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $c_reader_accum$0$lcssa = $5;$c_reader_buf$0$lcssa = $3;$out$0$lcssa = $out_;
 } else {
  $8 = $6 << 2;
  $9 = $6 << 1;
  $c_reader_accum$05 = $5;$c_reader_buf$04 = $3;$n$06 = $6;$out$03 = $out_;
  while(1) {
   $10 = $c_reader_accum$05 >> 14;
   $11 = (($c_reader_buf$04) + 4|0);
   $12 = HEAP32[$c_reader_buf$04>>2]|0;
   $13 = $c_reader_accum$05 >> $1;
   $14 = (($12) - ($13))|0;
   $15 = (($14) + ($c_reader_accum$05))|0;
   $16 = $15 >> 14;
   $17 = (($c_reader_buf$04) + 8|0);
   $18 = HEAP32[$11>>2]|0;
   $19 = $15 >> $1;
   $20 = (($15) + ($18))|0;
   $21 = (($20) - ($19))|0;
   $sext1 = $10 << 16;
   $22 = $sext1 >> 16;
   $23 = ($22|0)==($10|0);
   if ($23) {
    $cs0$0 = $10;
   } else {
    $24 = $c_reader_accum$05 >> 31;
    $25 = (32767 - ($24))|0;
    $cs0$0 = $25;
   }
   $26 = $cs0$0 & 65535;
   $27 = $cs0$0 << 16;
   $28 = $26 | $27;
   HEAP32[$out$03>>2] = $28;
   $sext2 = $16 << 16;
   $29 = $sext2 >> 16;
   $30 = ($29|0)==($16|0);
   if ($30) {
    $cs1$0 = $16;
   } else {
    $31 = $15 >> 31;
    $32 = (32767 - ($31))|0;
    $cs1$0 = $32;
   }
   $33 = $cs1$0 & 65535;
   $34 = $cs1$0 << 16;
   $35 = $33 | $34;
   $36 = (($out$03) + 4|0);
   HEAP32[$36>>2] = $35;
   $37 = (($out$03) + 8|0);
   $38 = (($n$06) + -1)|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $$lcssa = $21;
    break;
   } else {
    $c_reader_accum$05 = $21;$c_reader_buf$04 = $17;$n$06 = $38;$out$03 = $37;
   }
  }
  $scevgep = (($out_) + ($8<<1)|0);
  $scevgep11 = (($3) + ($9<<2)|0);
  $c_reader_accum$0$lcssa = $$lcssa;$c_reader_buf$0$lcssa = $scevgep11;$out$0$lcssa = $scevgep;
 }
 $40 = $count & 1;
 $41 = ($40|0)==(0);
 if ($41) {
  $c_reader_accum$1 = $c_reader_accum$0$lcssa;
  HEAP32[$4>>2] = $c_reader_accum$1;
  return;
 }
 $42 = $c_reader_accum$0$lcssa >> 14;
 $43 = HEAP32[$c_reader_buf$0$lcssa>>2]|0;
 $44 = $c_reader_accum$0$lcssa >> $1;
 $45 = (($43) - ($44))|0;
 $46 = (($45) + ($c_reader_accum$0$lcssa))|0;
 $47 = $42&65535;
 HEAP16[$out$0$lcssa>>1] = $47;
 $48 = (($out$0$lcssa) + 2|0);
 HEAP16[$48>>1] = $47;
 $sext = $42 << 16;
 $49 = $sext >> 16;
 $50 = ($49|0)==($42|0);
 if ($50) {
  $c_reader_accum$1 = $46;
  HEAP32[$4>>2] = $c_reader_accum$1;
  return;
 }
 $51 = $c_reader_accum$0$lcssa >> 31;
 $52 = (32767 - ($51))|0;
 $53 = $52&65535;
 HEAP16[$out$0$lcssa>>1] = $53;
 HEAP16[$48>>1] = $53;
 $c_reader_accum$1 = $46;
 HEAP32[$4>>2] = $c_reader_accum$1;
 return;
}
function __ZNK11Blip_Buffer11sample_rateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK11Blip_Buffer6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN12Multi_Buffer15set_sample_rateEli($this,$rate,$msec) {
 $this = $this|0;
 $rate = $rate|0;
 $msec = $msec|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 HEAP32[$0>>2] = $rate;
 $1 = (($this) + 12|0);
 HEAP32[$1>>2] = $msec;
 return (0|0);
}
function __ZN12Multi_Buffer16channels_changedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZNK12Multi_Buffer11sample_rateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __Z9pin_rangeiii($n,$max,$min) {
 $n = $n|0;
 $max = $max|0;
 $min = $min|0;
 var $$0 = 0, $0 = 0, $1 = 0, $max$n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<($min|0);
 if ($0) {
  $$0 = $min;
  return ($$0|0);
 }
 $1 = ($n|0)>($max|0);
 $max$n = $1 ? $max : $n;
 $$0 = $max$n;
 return ($$0|0);
}
function __ZN11Blip_Buffer14clear_modifiedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 0;
 return ($1|0);
}
function __ZN14Fir_Resampler_C2EiPs($this,$width,$impulses_) {
 $this = $this|0;
 $width = $width|0;
 $impulses_ = $impulses_|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13blargg_vectorIsEC2Ev($this);
 $0 = (($this) + 20|0);
 HEAP32[$0>>2] = $width;
 $1 = (($this) + 24|0);
 $2 = $width << 1;
 $3 = (($2) + -2)|0;
 HEAP32[$1>>2] = $3;
 $4 = (($this) + 48|0);
 HEAP32[$4>>2] = $impulses_;
 $5 = (($this) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 12|0);
 HEAP32[$6>>2] = 1;
 $7 = (($this) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = (($this) + 28|0);
 HEAP32[$8>>2] = 0;
 $9 = (($this) + 32|0);
 HEAP32[$9>>2] = 2;
 $10 = (($this) + 40|0);
 HEAPF64[$10>>3] = 1.0;
 return;
}
function __ZN14Fir_Resampler_D2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13blargg_vectorIsED2Ev($this);
 return;
}
function __ZN14Fir_Resampler_5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (__ZNK13blargg_vectorIsE4sizeEv($this)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = (($this) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZNK13blargg_vectorIsEixEj($this,$4)|0);
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = (__ZNK13blargg_vectorIsE5beginEv($this)|0);
 $8 = HEAP32[$3>>2]|0;
 $9 = $8 << 1;
 _memset(($7|0),0,($9|0))|0;
 return;
}
function __ZN14Fir_Resampler_11buffer_sizeEi($this,$new_size) {
 $this = $this|0;
 $new_size = $new_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($new_size))|0;
 $3 = (__ZN13blargg_vectorIsE6resizeEj($this,$2)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $$0 = $3;
  return ($$0|0);
 }
 __ZN14Fir_Resampler_5clearEv($this);
 $$0 = 0;
 return ($$0|0);
}
function __ZN14Fir_Resampler_10time_ratioEddd($this,$new_factor,$rolloff,$gain) {
 $this = $this|0;
 $new_factor = +$new_factor;
 $rolloff = +$rolloff;
 $gain = +$gain;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $exitcond = 0, $fstep$06 = 0.0, $fstep$1 = 0.0, $fstep$1$lcssa = 0.0, $i$02 = 0, $least_error$05 = 0.0, $least_error$1 = 0.0, $pos$04 = 0.0;
 var $pos1$01 = 0.0, $pos1$1 = 0.0, $r$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 HEAPF64[$0>>3] = $new_factor;
 $1 = (($this) + 12|0);
 HEAP32[$1>>2] = -1;
 $2 = +HEAPF64[$0>>3];
 $fstep$06 = 0.0;$least_error$05 = 2.0;$pos$04 = 0.0;$r$03 = 1;
 while(1) {
  $3 = $pos$04 + $2;
  $4 = $3 + 0.5;
  $5 = (+Math_floor((+$4)));
  $6 = $3 - $5;
  $7 = (+Math_abs((+$6)));
  $8 = $7 < $least_error$05;
  if ($8) {
   HEAP32[$1>>2] = $r$03;
   $9 = (+($r$03|0));
   $10 = $5 / $9;
   $fstep$1 = $10;$least_error$1 = $7;
  } else {
   $fstep$1 = $fstep$06;$least_error$1 = $least_error$05;
  }
  $11 = (($r$03) + 1)|0;
  $exitcond = ($11|0)==(33);
  if ($exitcond) {
   $fstep$1$lcssa = $fstep$1;
   break;
  } else {
   $fstep$06 = $fstep$1;$least_error$05 = $least_error$1;$pos$04 = $3;$r$03 = $11;
  }
 }
 $12 = (($this) + 28|0);
 HEAP32[$12>>2] = 0;
 $13 = (+Math_floor((+$fstep$1$lcssa)));
 $14 = (~~(($13)));
 $15 = $14 << 1;
 $16 = (($this) + 32|0);
 HEAP32[$16>>2] = $15;
 HEAPF64[$0>>3] = $fstep$1$lcssa;
 $17 = (+_fmod($fstep$1$lcssa,1.0));
 $18 = $fstep$1$lcssa < 1.0;
 if ($18) {
  $26 = 1.0;
 } else {
  $19 = 1.0 / $fstep$1$lcssa;
  $26 = $19;
 }
 $20 = (($this) + 36|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$1>>2]|0;
 $22 = ($21|0)>(0);
 if (!($22)) {
  __ZN14Fir_Resampler_5clearEv($this);
  $51 = +HEAPF64[$0>>3];
  return (+$51);
 }
 $23 = (($this) + 20|0);
 $24 = $gain * 32767.0;
 $25 = $24 * $26;
 $27 = (($this) + 48|0);
 $i$02 = 0;$pos1$01 = 0.0;
 while(1) {
  $28 = HEAP32[$23>>2]|0;
  $29 = (+($28|0));
  $30 = $26 * $29;
  $31 = $30 + 1.0;
  $32 = (~~(($31)));
  $33 = $32 & -2;
  $34 = HEAP32[$27>>2]|0;
  $35 = Math_imul($28, $i$02)|0;
  $36 = (($34) + ($35<<1)|0);
  __ZL8gen_sincdidddiPs($rolloff,$33,$pos1$01,$26,$25,$28,$36);
  $37 = $17 + $pos1$01;
  $38 = HEAP32[$16>>2]|0;
  $39 = HEAP32[$20>>2]|0;
  $40 = (($39) + ($38))|0;
  HEAP32[$20>>2] = $40;
  $41 = !($37 >= 0.99999990000000005);
  if ($41) {
   $pos1$1 = $37;
  } else {
   $42 = $37 + -1.0;
   $43 = 1 << $i$02;
   $44 = HEAP32[$12>>2]|0;
   $45 = $44 | $43;
   HEAP32[$12>>2] = $45;
   $46 = HEAP32[$20>>2]|0;
   $47 = (($46) + 1)|0;
   HEAP32[$20>>2] = $47;
   $pos1$1 = $42;
  }
  $48 = (($i$02) + 1)|0;
  $49 = HEAP32[$1>>2]|0;
  $50 = ($48|0)<($49|0);
  if ($50) {
   $i$02 = $48;$pos1$01 = $pos1$1;
  } else {
   break;
  }
 }
 __ZN14Fir_Resampler_5clearEv($this);
 $51 = +HEAPF64[$0>>3];
 return (+$51);
}
function __ZN14Fir_Resampler_10skip_inputEl($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$count = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNK13blargg_vectorIsE5beginEv($this)|0);
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($this) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 1;
 $10 = (($6) - ($9))|0;
 $11 = ($10|0)<($count|0);
 $$count = $11 ? $10 : $count;
 $12 = (($6) - ($$count))|0;
 $13 = (__ZNK13blargg_vectorIsEixEj($this,$12)|0);
 HEAP32[$0>>2] = $13;
 $14 = (__ZNK13blargg_vectorIsE5beginEv($this)|0);
 $15 = (__ZNK13blargg_vectorIsEixEj($this,$$count)|0);
 $16 = $12 << 1;
 _memmove(($14|0),($15|0),($16|0))|0;
 return ($$count|0);
}
function __ZL8gen_sincdidddiPs($rolloff,$width,$offset,$spacing,$scale,$count,$out) {
 $rolloff = +$rolloff;
 $width = $width|0;
 $offset = +$offset;
 $spacing = +$spacing;
 $scale = +$scale;
 $count = $count|0;
 $out = $out|0;
 var $$013 = 0, $$in = 0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0.0, $angle$02 = 0.0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $spacing * 0.012271846303085129;
 $1 = (+($width|0));
 $2 = 512.0 / $1;
 $3 = (+Math_pow((+$rolloff),256.0));
 $4 = $scale * 0.001953125;
 $5 = ($count|0)==(0);
 if ($5) {
  return;
 }
 $6 = (($count|0) / 2)&-1;
 $7 = (($6) + -1)|0;
 $8 = (+($7|0));
 $9 = $8 + $offset;
 $10 = $0 * $9;
 $11 = -$10;
 $12 = $3 * $rolloff;
 $13 = $rolloff * $rolloff;
 $$013 = $out;$$in = $count;$angle$02 = $11;
 while(1) {
  $14 = (($$in) + -1)|0;
  $15 = (($$013) + 2|0);
  $16 = $2 * $angle$02;
  $17 = (+Math_abs((+$16)));
  $18 = $17 < 3.1415926535897931;
  if ($18) {
   $19 = (+Math_cos((+$angle$02)));
   $20 = $19 * $rolloff;
   $21 = 1.0 - $20;
   $22 = $angle$02 * 256.0;
   $23 = (+Math_cos((+$22)));
   $24 = $3 * $23;
   $25 = $21 - $24;
   $26 = $angle$02 * 255.0;
   $27 = (+Math_cos((+$26)));
   $28 = $12 * $27;
   $29 = $25 + $28;
   $30 = $21 - $20;
   $31 = $13 + $30;
   $32 = $4 * $29;
   $33 = $32 / $31;
   $34 = $33 - $4;
   $35 = (+Math_cos((+$16)));
   $36 = $35 * $34;
   $37 = $34 + $36;
   $38 = (~~(($37)));
   $storemerge = $38;
  } else {
   $storemerge = 0;
  }
  HEAP16[$$013>>1] = $storemerge;
  $39 = $0 + $angle$02;
  $40 = ($14|0)==(0);
  if ($40) {
   break;
  } else {
   $$013 = $15;$$in = $14;$angle$02 = $39;
  }
 }
 return;
}
function __ZN6Gb_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 376|0);
 __ZN10Blip_SynthILi12ELi1EEC2Ev($0);
 $1 = (($this) + 1192|0);
 __ZN10Blip_SynthILi8ELi1EEC2Ev($1);
 $2 = (($this) + 96|0);
 HEAP32[$2>>2] = $0;
 $3 = (($this) + 164|0);
 HEAP32[$3>>2] = $0;
 $4 = (($this) + 228|0);
 HEAP32[$4>>2] = $1;
 $5 = (($this) + 320|0);
 HEAP32[$5>>2] = $1;
 $6 = (($this) + 44|0);
 HEAP32[$this>>2] = $6;
 $7 = (($this) + 112|0);
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = (($this) + 180|0);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (($this) + 268|0);
 $12 = (($this) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$this>>2]|0;
 $14 = (($this) + 328|0);
 $15 = (($13) + 24|0);
 HEAP32[$15>>2] = $14;
 $16 = (($this) + 4|0);
 ;HEAP32[$13+0>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP32[$13+12>>2]=0|0;HEAP32[$13+16>>2]=0|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($this) + 333|0);
 $19 = (($17) + 24|0);
 HEAP32[$19>>2] = $18;
 $20 = (($this) + 8|0);
 ;HEAP32[$17+0>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;HEAP32[$17+16>>2]=0|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($this) + 338|0);
 $23 = (($21) + 24|0);
 HEAP32[$23>>2] = $22;
 $24 = (($this) + 12|0);
 ;HEAP32[$21+0>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;HEAP32[$21+16>>2]=0|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($this) + 343|0);
 $27 = (($25) + 24|0);
 HEAP32[$27>>2] = $26;
 ;HEAP32[$25+0>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;HEAP32[$25+12>>2]=0|0;HEAP32[$25+16>>2]=0|0;
 __ZN6Gb_Apu9set_tempoEd($this,1.0);
 __ZN6Gb_Apu6volumeEd($this,1.0);
 __ZN6Gb_Apu5resetEv($this);
 return;
}
function __ZN6Gb_Apu9set_tempoEd($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = $t != 1.0;
 if ($1) {
  $2 = 16384.0 / $t;
  $3 = (~~(($2)));
  $storemerge = $3;
 } else {
  $storemerge = 16384;
 }
 HEAP32[$0>>2] = $storemerge;
 return;
}
function __ZN6Gb_Apu5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 20|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 44|0);
 __ZN9Gb_Square5resetEv($3);
 $4 = (($this) + 112|0);
 __ZN9Gb_Square5resetEv($4);
 $5 = (($this) + 180|0);
 __ZN6Gb_Osc5resetEv($5);
 $6 = (($this) + 268|0);
 __ZN6Gb_Env5resetEv($6);
 $7 = (($this) + 324|0);
 HEAP32[$7>>2] = 1;
 $8 = (($this) + 232|0);
 HEAP32[$8>>2] = 0;
 $9 = (($this) + 348|0);
 HEAP8[$9>>0] = 119;
 __ZN6Gb_Apu13update_volumeEv($this);
 $10 = (($this) + 350|0);
 HEAP8[$10>>0] = 1;
 __ZN6Gb_Apu14write_registerEiji($this,0,65318,0);
 $11 = (($this) + 236|0);
 dest=$11+0|0; src=37376+0|0; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN6Gb_Apu9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 376|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($0,$eq);
 $1 = (($this) + 1192|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN6Gb_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,$index,$center,$left,$right) {
 $this = $this|0;
 $index = $index|0;
 $center = $center|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($index>>>0)<(4);
 if (!($0)) {
  ___assert_fail((46216|0),(37328|0),59,(46296|0));
  // unreachable;
 }
 $1 = ($center|0)!=(0|0);
 $2 = ($left|0)!=(0|0);
 $or$cond = $1 & $2;
 $3 = ($right|0)!=(0|0);
 $or$cond3 = $or$cond & $3;
 $or$cond5 = $1 | $2;
 $or$cond7 = $or$cond5 | $3;
 $or$cond8 = $or$cond3 ^ $or$cond7;
 if ($or$cond8) {
  ___assert_fail((46312|0),(37328|0),60,(46296|0));
  // unreachable;
 } else {
  $4 = (($this) + ($index<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 4|0);
  HEAP32[$6>>2] = $right;
  $7 = (($5) + 8|0);
  HEAP32[$7>>2] = $left;
  $8 = (($5) + 12|0);
  HEAP32[$8>>2] = $center;
  $9 = (($5) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($5) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($5) + 16|0);
  HEAP32[$13>>2] = $12;
  return;
 }
}
function __ZN6Gb_Apu13update_volumeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 348|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 7;
 $4 = $2 >>> 4;
 $5 = $4 & 7;
 $6 = (__Z3maxIiET_S0_S0_($3,$5)|0);
 $7 = (($6) + 1)|0;
 $8 = (+($7|0));
 $9 = (($this) + 32|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $10 * $8;
 $12 = (($this) + 376|0);
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($12,$11);
 $13 = (($this) + 1192|0);
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($13,$11);
 return;
}
function __ZN6Gb_Apu14write_registerEiji($this,$time,$addr,$data) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr$off = 0, $exitcond = 0;
 var $i4$08 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond3$1 = 0, $or$cond3$2 = 0, $or$cond3$3 = 0, $or$cond4 = 0, $or$cond4$not = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data>>>0)<(256);
 if (!($0)) {
  ___assert_fail((37424|0),(37328|0),202,(42360|0));
  // unreachable;
 }
 $1 = (($addr) + -65296)|0;
 $2 = ($1>>>0)>(47);
 if ($2) {
  return;
 }
 __ZN6Gb_Apu9run_untilEi($this,$time);
 $3 = ((($this) + ($1)|0) + 328|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $data&255;
 HEAP8[$3>>0] = $5;
 $6 = ($addr>>>0)<(65316);
 if ($6) {
  $7 = (($1|0) / 5)&-1;
  __ZN6Gb_Apu9write_oscEiii($this,$7,$1,$data);
  return;
 }
 $8 = $4&255;
 $9 = ($addr|0)!=(65316);
 $10 = ($8|0)==($data|0);
 $or$cond = $9 | $10;
 if (!($or$cond)) {
  $11 = (($this) + 1192|0);
  $12 = HEAP32[$this>>2]|0;
  $13 = (($12) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$13>>2] = 0;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $16 = (($12) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0);
   if (!($18)) {
    $19 = (($12) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $22 = (0 - ($14))|0;
     __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($11,$time,$22,$20);
    }
   }
  }
  $23 = (($this) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$25>>2] = 0;
  $27 = ($26|0)==(0);
  if (!($27)) {
   $145 = (($24) + 44|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = ($146|0)==(0);
   if (!($147)) {
    $148 = (($24) + 16|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = (0 - ($26))|0;
     __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($11,$time,$151,$149);
    }
   }
  }
  $152 = (($this) + 8|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + 32|0);
  $155 = HEAP32[$154>>2]|0;
  HEAP32[$154>>2] = 0;
  $156 = ($155|0)==(0);
  if (!($156)) {
   $157 = (($153) + 44|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)==(0);
   if (!($159)) {
    $160 = (($153) + 16|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ($161|0)==(0|0);
    if (!($162)) {
     $163 = (0 - ($155))|0;
     __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($11,$time,$163,$161);
    }
   }
  }
  $164 = (($this) + 12|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($165) + 32|0);
  $167 = HEAP32[$166>>2]|0;
  HEAP32[$166>>2] = 0;
  $168 = ($167|0)==(0);
  if (!($168)) {
   $169 = (($165) + 44|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ($170|0)==(0);
   if (!($171)) {
    $172 = (($165) + 16|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ($173|0)==(0|0);
    if (!($174)) {
     $175 = (0 - ($167))|0;
     __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($11,$time,$175,$173);
    }
   }
  }
  $31 = (($this) + 192|0);
  $29 = HEAP32[$31>>2]|0;
  $176 = ($29|0)==(0|0);
  if (!($176)) {
   $28 = (($this) + 1192|0);
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($28,$time,30,$29);
  }
  __ZN6Gb_Apu13update_volumeEv($this);
  $30 = HEAP32[$31>>2]|0;
  $32 = ($30|0)==(0|0);
  if ($32) {
   return;
  }
  $33 = (($this) + 1192|0);
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($33,$time,-30,$30);
  return;
 }
 $34 = ($addr|0)!=(65318);
 $addr$off = (($addr) + -65317)|0;
 $35 = ($addr$off>>>0)<(2);
 if (!($35)) {
  $86 = ($addr>>>0)>(65327);
  if (!($86)) {
   return;
  }
  $87 = $addr << 1;
  $88 = $87 & 30;
  $89 = $data >>> 4;
  $90 = $89&255;
  $91 = ((($this) + ($88)|0) + 236|0);
  HEAP8[$91>>0] = $90;
  $92 = $data & 15;
  $93 = $92&255;
  $94 = $88 | 1;
  $95 = ((($this) + ($94)|0) + 236|0);
  HEAP8[$95>>0] = $93;
  return;
 }
 $36 = (($this) + 350|0);
 $37 = HEAP8[$36>>0]|0;
 $$lobit = ($37<<24>>24) >> 7;
 $38 = $$lobit << 24 >> 24;
 $39 = (($this) + 349|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 & $38;
 $43 = (($this) + 1192|0);
 $44 = HEAP32[$this>>2]|0;
 $45 = (($44) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 & $38;
 HEAP32[$45>>2] = $47;
 $48 = (($44) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $42 >>> 3;
 $51 = $50 & 2;
 $52 = $42 & 1;
 $53 = $51 | $52;
 $54 = (($44) + 20|0);
 HEAP32[$54>>2] = $53;
 $55 = (($44) + ($53<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$48>>2] = $56;
 $57 = ($56|0)==($49|0);
 if (!($57)) {
  $58 = (($44) + 32|0);
  $59 = HEAP32[$58>>2]|0;
  HEAP32[$58>>2] = 0;
  $60 = ($59|0)!=(0);
  $61 = ($49|0)!=(0|0);
  $or$cond3 = $60 & $61;
  if ($or$cond3) {
   $62 = (0 - ($59))|0;
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($43,$time,$62,$49);
  }
 }
 $63 = (($this) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 44|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 & $38;
 HEAP32[$65>>2] = $67;
 $68 = $42 >>> 1;
 $69 = (($64) + 16|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $42 >>> 4;
 $72 = $71 & 2;
 $73 = $68 & 1;
 $74 = $72 | $73;
 $75 = (($64) + 20|0);
 HEAP32[$75>>2] = $74;
 $76 = (($64) + ($74<<2)|0);
 $77 = HEAP32[$76>>2]|0;
 HEAP32[$69>>2] = $77;
 $78 = ($77|0)==($70|0);
 if (!($78)) {
  $96 = (($64) + 32|0);
  $97 = HEAP32[$96>>2]|0;
  HEAP32[$96>>2] = 0;
  $98 = ($97|0)!=(0);
  $99 = ($70|0)!=(0|0);
  $or$cond3$1 = $98 & $99;
  if ($or$cond3$1) {
   $100 = (0 - ($97))|0;
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($43,$time,$100,$70);
  }
 }
 $101 = (($this) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + 44|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $104 & $38;
 HEAP32[$103>>2] = $105;
 $106 = $42 >>> 2;
 $107 = (($102) + 16|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $42 >>> 5;
 $110 = $109 & 2;
 $111 = $106 & 1;
 $112 = $110 | $111;
 $113 = (($102) + 20|0);
 HEAP32[$113>>2] = $112;
 $114 = (($102) + ($112<<2)|0);
 $115 = HEAP32[$114>>2]|0;
 HEAP32[$107>>2] = $115;
 $116 = ($115|0)==($108|0);
 if (!($116)) {
  $117 = (($102) + 32|0);
  $118 = HEAP32[$117>>2]|0;
  HEAP32[$117>>2] = 0;
  $119 = ($118|0)!=(0);
  $120 = ($108|0)!=(0|0);
  $or$cond3$2 = $119 & $120;
  if ($or$cond3$2) {
   $121 = (0 - ($118))|0;
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($43,$time,$121,$108);
  }
 }
 $122 = (($this) + 12|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($123) + 44|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $125 & $38;
 HEAP32[$124>>2] = $126;
 $127 = $42 >>> 3;
 $128 = (($123) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $42 >>> 6;
 $131 = $130 & 2;
 $132 = $127 & 1;
 $133 = $131 | $132;
 $134 = (($123) + 20|0);
 HEAP32[$134>>2] = $133;
 $135 = (($123) + ($133<<2)|0);
 $136 = HEAP32[$135>>2]|0;
 HEAP32[$128>>2] = $136;
 $137 = ($136|0)==($129|0);
 if (!($137)) {
  $138 = (($123) + 32|0);
  $139 = HEAP32[$138>>2]|0;
  HEAP32[$138>>2] = 0;
  $140 = ($139|0)!=(0);
  $141 = ($129|0)!=(0|0);
  $or$cond3$3 = $140 & $141;
  if ($or$cond3$3) {
   $142 = (0 - ($139))|0;
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($43,$time,$142,$129);
  }
 }
 $or$cond4 = $34 | $10;
 $or$cond4$not = $or$cond4 ^ 1;
 $143 = $data & 128;
 $144 = ($143|0)==(0);
 $or$cond6 = $144 & $or$cond4$not;
 if ($or$cond6) {
  $i4$08 = 0;
 } else {
  return;
 }
 while(1) {
  $79 = ($i4$08|0)==(22);
  if ($79) {
   $80 = (($i4$08) + 1)|0;
   $i4$08 = $80;
   continue;
  } else {
   $81 = (($i4$08) + 65296)|0;
   $82 = (37448 + ($i4$08)|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   __ZN6Gb_Apu14write_registerEiji($this,$time,$81,$84);
   $85 = (($i4$08) + 1)|0;
   $exitcond = ($85|0)==(32);
   if ($exitcond) {
    break;
   } else {
    $i4$08 = $85;
    continue;
   }
  }
 }
 return;
}
function __ZN6Gb_Apu9run_untilEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end_time$ = 0, $exitcond = 0, $i$01 = 0, $playing$0 = 0, $playing$0$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($end_time|0);
 if ($2) {
  ___assert_fail((46376|0),(37328|0),131,(46400|0));
  // unreachable;
 }
 $3 = ($1|0)==($end_time|0);
 if ($3) {
  return;
 }
 $4 = (($this) + 16|0);
 $5 = (($this) + 44|0);
 $6 = (($this) + 112|0);
 $7 = (($this) + 180|0);
 $8 = (($this) + 268|0);
 $9 = (($this) + 24|0);
 $10 = (($this) + 44|0);
 $11 = (($this) + 112|0);
 $12 = (($this) + 180|0);
 $13 = (($this) + 268|0);
 $14 = (($this) + 40|0);
 while(1) {
  $15 = HEAP32[$4>>2]|0;
  $16 = ($15|0)>($end_time|0);
  $end_time$ = $16 ? $end_time : $15;
  $i$01 = 0;
  L9: while(1) {
   $17 = (($this) + ($i$01<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   do {
    if (!($21)) {
     __ZN11Blip_Buffer12set_modifiedEv($20);
     $22 = (($18) + 44|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0);
     do {
      if ($24) {
       $playing$0 = 0;
      } else {
       $25 = (($18) + 36|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(0);
       if ($27) {
        $playing$0 = 0;
       } else {
        $28 = (($18) + 24|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = (($29) + 4|0);
        $31 = HEAP8[$30>>0]|0;
        $32 = $31 & 64;
        $33 = ($32<<24>>24)==(0);
        if (!($33)) {
         $34 = (($18) + 40|0);
         $35 = HEAP32[$34>>2]|0;
         $36 = ($35|0)==(0);
         if ($36) {
          $playing$0 = 0;
          break;
         }
        }
        $playing$0 = -1;
       }
      }
     } while(0);
     if ((($i$01|0) == 0)) {
      $37 = HEAP32[$0>>2]|0;
      __ZN9Gb_Square3runEiii($5,$37,$end_time$,$playing$0);
     } else if ((($i$01|0) == 1)) {
      $38 = HEAP32[$0>>2]|0;
      __ZN9Gb_Square3runEiii($6,$38,$end_time$,$playing$0);
     } else if ((($i$01|0) == 2)) {
      $39 = HEAP32[$0>>2]|0;
      __ZN7Gb_Wave3runEiii($7,$39,$end_time$,$playing$0);
     } else if ((($i$01|0) == 3)) {
      $playing$0$lcssa = $playing$0;
      label = 16;
      break L9;
     } else {
      break;
     }
     $41 = (($i$01) + 1)|0;
     $i$01 = $41;
     continue L9;
    }
   } while(0);
   $42 = (($i$01) + 1)|0;
   $exitcond = ($42|0)==(4);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $42;
   }
  }
  if ((label|0) == 16) {
   label = 0;
   $40 = HEAP32[$0>>2]|0;
   __ZN8Gb_Noise3runEiii($8,$40,$end_time$,$playing$0$lcssa);
  }
  HEAP32[$0>>2] = $end_time$;
  $43 = ($end_time$|0)==($end_time|0);
  if ($43) {
   break;
  }
  $44 = HEAP32[$9>>2]|0;
  $45 = HEAP32[$4>>2]|0;
  $46 = (($45) + ($44))|0;
  HEAP32[$4>>2] = $46;
  __ZN6Gb_Osc12clock_lengthEv($10);
  __ZN6Gb_Osc12clock_lengthEv($11);
  __ZN6Gb_Osc12clock_lengthEv($12);
  __ZN6Gb_Osc12clock_lengthEv($13);
  $47 = HEAP32[$14>>2]|0;
  $48 = (($47) + 1)|0;
  $49 = $48 & 3;
  HEAP32[$14>>2] = $49;
  $50 = ($49|0)==(0);
  if ($50) {
   __ZN6Gb_Env14clock_envelopeEv($10);
   __ZN6Gb_Env14clock_envelopeEv($11);
   __ZN6Gb_Env14clock_envelopeEv($13);
  }
  $51 = HEAP32[$14>>2]|0;
  $52 = $51 & 1;
  $53 = ($52|0)==(0);
  if ($53) {
   continue;
  }
  __ZN9Gb_Square11clock_sweepEv($10);
 }
 return;
}
function __ZN6Gb_Apu9end_frameEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($end_time|0);
 if ($2) {
  __ZN6Gb_Apu9run_untilEi($this,$end_time);
 }
 $3 = (($this) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($end_time|0);
 if ($5) {
  ___assert_fail((37392|0),(37328|0),193,(46440|0));
  // unreachable;
 }
 $6 = (($4) - ($end_time))|0;
 HEAP32[$3>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)<($end_time|0);
 if ($8) {
  ___assert_fail((46416|0),(37328|0),196,(46440|0));
  // unreachable;
 } else {
  $9 = (($7) - ($end_time))|0;
  HEAP32[$0>>2] = $9;
  return;
 }
}
function __ZN6Gb_Apu13read_registerEij($this,$time,$addr) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $data$1 = 0, $data$1$1 = 0, $data$1$2 = 0, $data$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Gb_Apu9run_untilEi($this,$time);
 $0 = (($addr) + -65296)|0;
 $1 = ($0>>>0)<(48);
 if (!($1)) {
  ___assert_fail((37480|0),(37328|0),291,(37520|0));
  // unreachable;
 }
 $2 = ((($this) + ($0)|0) + 328|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($addr|0)==(65318);
 if (!($5)) {
  $data$2 = $4;
  return ($data$2|0);
 }
 $6 = $4 & 128;
 $7 = $6 | 112;
 $8 = HEAP32[$this>>2]|0;
 $9 = (($8) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $data$1 = $7;
  } else {
   $12 = (($8) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = (($8) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 4|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 & 64;
    $20 = ($19<<24>>24)==(0);
    if (!($20)) {
     $data$1 = $7;
     break;
    }
   }
   $21 = $6 | 113;
   $data$1 = $21;
  }
 } while(0);
 $22 = (($this) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 do {
  if ($26) {
   $data$1$1 = $data$1;
  } else {
   $27 = (($23) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   if ($29) {
    $30 = (($23) + 24|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 4|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33 & 64;
    $35 = ($34<<24>>24)==(0);
    if (!($35)) {
     $data$1$1 = $data$1;
     break;
    }
   }
   $36 = $data$1 | 2;
   $data$1$1 = $36;
  }
 } while(0);
 $37 = (($this) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 44|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 do {
  if ($41) {
   $data$1$2 = $data$1$1;
  } else {
   $42 = (($38) + 40|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = (($38) + 24|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + 4|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 & 64;
    $50 = ($49<<24>>24)==(0);
    if (!($50)) {
     $data$1$2 = $data$1$1;
     break;
    }
   }
   $51 = $data$1$1 | 4;
   $data$1$2 = $51;
  }
 } while(0);
 $52 = (($this) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 44|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0);
 if ($56) {
  $data$2 = $data$1$2;
  return ($data$2|0);
 }
 $57 = (($53) + 40|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0);
 if ($59) {
  $60 = (($53) + 24|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 4|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63 & 64;
  $65 = ($64<<24>>24)==(0);
  if (!($65)) {
   $data$2 = $data$1$2;
   return ($data$2|0);
  }
 }
 $66 = $data$1$2 | 8;
 $data$2 = $66;
 return ($data$2|0);
}
function __ZN10Blip_SynthILi8ELi1EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 __ZN11Blip_Synth_C2EPsi($this,$0,8);
 return;
}
function __ZN6Gb_Apu6volumeEd($this,$vol) {
 $this = $this|0;
 $vol = +$vol;
 var $0 = 0.0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $vol * 6.2500000000000001E-4;
 $1 = (($this) + 32|0);
 HEAPF64[$1>>3] = $0;
 __ZN6Gb_Apu13update_volumeEv($this);
 return;
}
function __ZN6Gb_Env5resetEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 HEAP32[$0>>2] = 0;
 __ZN6Gb_Osc5resetEv($this);
 return;
}
function __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$eq);
 return;
}
function __Z3maxIiET_S0_S0_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $y$x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x|0)<($y|0);
 $y$x = $0 ? $y : $x;
 return ($y$x|0);
}
function __ZN10Blip_SynthILi8ELi1EE6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Blip_Synth_11volume_unitEd($this,$v);
 return;
}
function __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($this,$t,$delta,$buf) {
 $this = $this|0;
 $t = $t|0;
 $delta = $delta|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$buf>>2]|0;
 $1 = Math_imul($0, $t)|0;
 $2 = (($buf) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3))|0;
 __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$4,$delta,$buf);
 return;
}
function __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$time,$delta,$blip_buf) {
 $this = $this|0;
 $time = $time|0;
 $delta = $delta|0;
 $blip_buf = $blip_buf|0;
 var $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum1213 = 0, $$sum14 = 0, $$sum1516 = 0, $$sum17 = 0, $$sum18 = 0, $$sum2 = 0, $$sum3 = 0, $$sum45 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $time >>> 16;
 $1 = (($blip_buf) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)<($2|0);
 if ($3) {
  $4 = (($this) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = Math_imul($5, $delta)|0;
  $7 = (($blip_buf) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $time >>> 10;
  $10 = $9 & 63;
  $$sum = (64 - ($10))|0;
  $11 = ((($this) + ($$sum<<1)|0) + 40|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = Math_imul($13, $6)|0;
  $$sum1 = (($0) + 4)|0;
  $15 = (($8) + ($$sum1<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + ($16))|0;
  $$sum2 = (($$sum) + 64)|0;
  $18 = ((($this) + ($$sum2<<1)|0) + 40|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = Math_imul($20, $6)|0;
  $$sum3 = (($0) + 5)|0;
  $22 = (($8) + ($$sum3<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23))|0;
  $$sum45 = $$sum | 128;
  $25 = ((($this) + ($$sum45<<1)|0) + 40|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  HEAP32[$15>>2] = $17;
  HEAP32[$22>>2] = $24;
  $28 = Math_imul($27, $6)|0;
  $$sum6 = (($0) + 6)|0;
  $29 = (($8) + ($$sum6<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + ($30))|0;
  $$sum7 = (($$sum) + 192)|0;
  $32 = ((($this) + ($$sum7<<1)|0) + 40|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = Math_imul($34, $6)|0;
  $$sum8 = (($0) + 7)|0;
  $36 = (($8) + ($$sum8<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + ($37))|0;
  $39 = ((($this) + ($10<<1)|0) + 40|0);
  $$sum910 = $10 | 192;
  $40 = ((($this) + ($$sum910<<1)|0) + 40|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41 << 16 >> 16;
  HEAP32[$29>>2] = $31;
  HEAP32[$36>>2] = $38;
  $43 = Math_imul($42, $6)|0;
  $$sum11 = (($0) + 8)|0;
  $44 = (($8) + ($$sum11<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($43) + ($45))|0;
  $$sum1213 = $10 | 128;
  $47 = ((($this) + ($$sum1213<<1)|0) + 40|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 << 16 >> 16;
  $50 = Math_imul($49, $6)|0;
  $$sum14 = (($0) + 9)|0;
  $51 = (($8) + ($$sum14<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + ($52))|0;
  $$sum1516 = $10 | 64;
  $54 = ((($this) + ($$sum1516<<1)|0) + 40|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  HEAP32[$44>>2] = $46;
  HEAP32[$51>>2] = $53;
  $57 = Math_imul($56, $6)|0;
  $$sum17 = (($0) + 10)|0;
  $58 = (($8) + ($$sum17<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + ($59))|0;
  $61 = HEAP16[$39>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = Math_imul($62, $6)|0;
  $$sum18 = (($0) + 11)|0;
  $64 = (($8) + ($$sum18<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + ($65))|0;
  HEAP32[$58>>2] = $60;
  HEAP32[$64>>2] = $66;
  return;
 } else {
  ___assert_fail((43008|0),(43080|0),343,(43128|0));
  // unreachable;
 }
}
function __ZN7Gbs_Emu8cpu_readEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($addr) + -65296)|0;
 $1 = ($0>>>0)<(48);
 if ($1) {
  $2 = (($this) + 25072|0);
  $3 = (__ZNK7Gbs_Emu5clockEv($this)|0);
  $4 = (__ZN6Gb_Apu13read_registerEij($2,$3,$addr)|0);
  return ($4|0);
 } else {
  $5 = (($this) + 272|0);
  $6 = (__ZN6Gb_Cpu8get_codeEj($5,$addr)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  return ($8|0);
 }
 return (0)|0;
}
function __ZN7Gbs_Emu9cpu_writeEji($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($addr) + -40960)|0;
 $1 = ($0>>>0)<(24576);
 if (!($1)) {
  $13 = $addr ^ 8192;
  $14 = ($13>>>0)<(8192);
  if (!($14)) {
   return;
  }
  __ZN7Gbs_Emu8set_bankEi($this,$data);
  return;
 }
 $2 = $data&255;
 $3 = ((($this) + ($0)|0) + 484|0);
 HEAP8[$3>>0] = $2;
 $4 = $addr ^ 57344;
 $5 = ($4>>>0)<(8064);
 if (!($5)) {
  return;
 }
 $6 = (($addr) + -65296)|0;
 $7 = ($6>>>0)<(48);
 if ($7) {
  $8 = (($this) + 25072|0);
  $9 = (__ZNK7Gbs_Emu5clockEv($this)|0);
  __ZN6Gb_Apu14write_registerEiji($8,$9,$addr,$data);
  return;
 }
 $10 = $addr ^ 65286;
 $11 = ($10>>>0)<(2);
 if ($11) {
  __ZN7Gbs_Emu12update_timerEv($this);
  return;
 }
 $12 = ($addr|0)==(65280);
 if ($12) {
  HEAP8[$3>>0] = 0;
  return;
 } else {
  HEAP8[$3>>0] = -1;
  return;
 }
}
function __ZN6Gb_Cpu5resetEPv($this,$unmapped) {
 $this = $this|0;
 $unmapped = $unmapped|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = (($this) + 20|0);
 HEAP32[$1>>2] = $0;
 $2 = (($this) + 60|0);
 HEAP32[$2>>2] = 0;
 __ZN6Gb_Cpu13set_code_pageEiPh($this,0,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,1,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,2,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,3,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,4,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,5,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,6,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,7,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,8,$unmapped);
 ;HEAP32[$this+0>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;HEAP32[$this+12>>2]=0|0;
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN6Gb_Cpu8map_codeEjjPv($this,$start,$size,$data) {
 $this = $this|0;
 $start = $start|0;
 $size = $size|0;
 $data = $data|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $start & 8191;
 $1 = ($0|0)==(0);
 if (!($1)) {
  ___assert_fail((42496|0),(37536|0),74,(42568|0));
  // unreachable;
 }
 $2 = $size & 8191;
 $3 = ($2|0)==(0);
 if (!($3)) {
  ___assert_fail((42584|0),(37536|0),75,(42568|0));
  // unreachable;
 }
 $4 = $start >>> 13;
 $5 = $size >>> 13;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 } else {
  $$in = $5;
 }
 while(1) {
  $7 = (($$in) + -1)|0;
  $8 = (($7) + ($4))|0;
  $9 = $7 << 13;
  $10 = (($data) + ($9)|0);
  __ZN6Gb_Cpu13set_code_pageEiPh($this,$8,$10);
  $11 = ($7|0)==(0);
  if ($11) {
   break;
  } else {
   $$in = $7;
  }
 }
 return;
}
function __ZN6Gb_Cpu3runEi($this,$cycle_count) {
 $this = $this|0;
 $cycle_count = $cycle_count|0;
 var $$ = 0, $$$v = 0, $$1 = 0, $$2 = 0, $$2$v = 0, $$3 = 0, $$flags$1 = 0, $$in37 = 0, $$in37$lcssa50 = 0, $$sum = 0, $$sum24 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$17 = 0, $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$3 = 0;
 var $data$4 = 0, $data$5 = 0, $data$6 = 0, $data$7 = 0, $data$8 = 0, $data$9 = 0, $flags$0$be = 0, $flags$012 = 0, $flags$025 = 0, $flags$025$lcssa56 = 0, $flags$1 = 0, $flags$3 = 0, $flags$4 = 0, $flags$5 = 0, $op$0 = 0, $op$1 = 0, $op$2 = 0, $op$3 = 0, $op$4 = 0, $op$5 = 0;
 var $pc$0$be = 0, $pc$020 = 0, $pc$1 = 0, $pc$10 = 0, $pc$11 = 0, $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$18 = 0, $pc$19 = 0, $pc$2 = 0, $pc$20 = 0, $pc$21 = 0, $pc$22 = 0, $pc$23 = 0, $pc$24 = 0, $pc$25 = 0;
 var $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $prev$0 = 0, $prev$1 = 0, $s = 0, $sp$0$be = 0, $sp$016 = 0, $sp$026 = 0, $sp$026$lcssa53 = 0, $sp$1 = 0, $temp$0 = 0, $temp2$0 = 0, $temp6$0 = 0, $temp7$0 = 0, $temp8$0 = 0;
 var $temp8$1 = 0, $temp8$2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 8|0;
 $0 = sp;
 $1 = (($cycle_count) + 4)|0;
 $2 = $1 >>> 2;
 $3 = (($this) + 24|0);
 $4 = (($this) + 60|0);
 HEAP32[$4>>2] = $2;
 $5 = (($this) + 20|0);
 HEAP32[$5>>2] = $s;
 dest=$s+0|0; src=$3+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = $this;
 $7 = $6;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8)|(HEAPU8[$10+2>>0]<<16)|(HEAPU8[$10+3>>0]<<24);
 $12 = $0;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = (($this) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($this) + 12|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = (($this) + 7|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $17 >>> 13;
 $25 = (($s) + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $17 & 8191;
 $28 = (($26) + ($27)|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = (($s) + 36|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + -1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ($32|0)==(0);
 if ($33) {
  $flags$012 = $23;$pc$020 = $17;$sp$016 = $20;
  $721 = $0;
  $722 = $721;
  $723 = HEAP32[$722>>2]|0;
  $724 = (($721) + 4)|0;
  $725 = $724;
  $726 = HEAP32[$725>>2]|0;
  $727 = $this;
  $728 = $727;
  HEAP8[$728>>0]=$723&255;HEAP8[$728+1>>0]=($723>>8)&255;HEAP8[$728+2>>0]=($723>>16)&255;HEAP8[$728+3>>0]=$723>>24;
  $729 = (($727) + 4)|0;
  $730 = $729;
  HEAP8[$730>>0]=$726&255;HEAP8[$730+1>>0]=($726>>8)&255;HEAP8[$730+2>>0]=($726>>16)&255;HEAP8[$730+3>>0]=$726>>24;
  HEAP32[$16>>2] = $pc$020;
  $731 = $sp$016&65535;
  HEAP16[$18>>1] = $731;
  $732 = $flags$012&255;
  HEAP8[$21>>0] = $732;
  HEAP32[$5>>2] = $3;
  dest=$3+0|0; src=$s+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $733 = HEAP32[$30>>2]|0;
  $734 = ($733|0)>(0);
  STACKTOP = sp;return ($734|0);
 }
 $34 = $29&255;
 $$sum24 = (($27) + 1)|0;
 $35 = (($26) + ($$sum24)|0);
 $36 = (($0) + 4|0);
 $37 = (($0) + 6|0);
 $38 = (($this) + 88|0);
 $39 = (($0) + 4|0);
 $40 = (($0) + 2|0);
 $41 = (($0) + 4|0);
 $42 = (($0) + 4|0);
 $43 = (($this) + -272|0);
 $44 = (($0) + 6|0);
 $45 = (($0) + 4|0);
 $46 = (($this) + 88|0);
 $47 = (($this) + -272|0);
 $48 = (($this) + -272|0);
 $49 = (($this) + -272|0);
 $50 = (($this) + -272|0);
 $51 = (($0) + 4|0);
 $52 = (($this) + 88|0);
 $53 = (($0) + 4|0);
 $54 = (($this) + -272|0);
 $55 = (($this) + -272|0);
 $56 = (($0) + 4|0);
 $57 = (($this) + -272|0);
 $58 = (($0) + 4|0);
 $59 = (($this) + -272|0);
 $60 = (($0) + 4|0);
 $61 = (($this) + -272|0);
 $62 = (($0) + 4|0);
 $63 = (($this) + -272|0);
 $64 = (($0) + 6|0);
 $65 = (($0) + 6|0);
 $66 = (($this) + -272|0);
 $67 = (($this) + -272|0);
 $68 = (($0) + 4|0);
 $69 = (($0) + 6|0);
 $70 = (($this) + -272|0);
 $71 = (($0) + 4|0);
 $72 = (($0) + 2|0);
 $73 = (($0) + 4|0);
 $74 = (($0) + 1|0);
 $75 = (($0) + 3|0);
 $76 = (($0) + 2|0);
 $77 = (($0) + 5|0);
 $78 = (($0) + 4|0);
 $79 = (($0) + 4|0);
 $80 = (($this) + -272|0);
 $81 = (($0) + 6|0);
 $82 = (($0) + 4|0);
 $83 = (($this) + -272|0);
 $84 = (($this) + -272|0);
 $85 = (($0) + 4|0);
 $86 = (($this) + -272|0);
 $87 = (($this) + -272|0);
 $88 = (($0) + 4|0);
 $89 = (($0) + 4|0);
 $90 = (($0) + 4|0);
 $91 = (($this) + -272|0);
 $92 = (($0) + 6|0);
 $93 = (($0) + 4|0);
 $94 = (($this) + -272|0);
 $95 = (($0) + 4|0);
 $96 = (($this) + -272|0);
 $97 = (($0) + 6|0);
 $98 = (($0) + 4|0);
 $99 = (($this) + -272|0);
 $100 = (($0) + 6|0);
 $101 = (($0) + 6|0);
 $102 = (($0) + 4|0);
 $103 = (($this) + -272|0);
 $104 = (($0) + 6|0);
 $105 = (($0) + 6|0);
 $106 = (($0) + 4|0);
 $107 = (($this) + -272|0);
 $108 = (($0) + 6|0);
 $109 = (($0) + 4|0);
 $110 = (($this) + -272|0);
 $111 = (($0) + 6|0);
 $112 = (($0) + 7|0);
 $113 = (($this) + -272|0);
 $114 = (($this) + -272|0);
 $115 = (($0) + 2|0);
 $116 = (($0) + 4|0);
 $117 = (($0) + 6|0);
 $118 = (($this) + 16|0);
 $119 = (($0) + 4|0);
 $120 = (($0) + 6|0);
 $$in37 = $17;$123 = $35;$125 = $34;$645 = $29;$flags$025 = $23;$sp$026 = $20;
 L4: while(1) {
  $121 = (($$in37) + 1)|0;
  $122 = HEAP8[$123>>0]|0;
  $124 = $122&255;
  L6: do {
   switch ($125|0) {
   case 142:  {
    $541 = HEAP16[$93>>1]|0;
    $542 = $541&65535;
    $543 = (__ZN7Gbs_Emu8cpu_readEj($94,$542)|0);
    $data$11 = $543;$pc$15 = $121;
    label = 106;
    break;
   }
   case 143: case 141: case 140: case 139: case 138: case 137: case 136:  {
    $544 = $125 & 7;
    $545 = $544 ^ 1;
    $546 = (($0) + ($545)|0);
    $547 = HEAP8[$546>>0]|0;
    $548 = $547&255;
    $data$11 = $548;$pc$15 = $121;
    label = 106;
    break;
   }
   case 206:  {
    $549 = (($$in37) + 2)|0;
    $data$11 = $124;$pc$15 = $549;
    label = 106;
    break;
   }
   case 150:  {
    $554 = HEAP16[$95>>1]|0;
    $555 = $554&65535;
    $556 = (__ZN7Gbs_Emu8cpu_readEj($96,$555)|0);
    $data$12 = $556;$pc$16 = $121;
    label = 110;
    break;
   }
   case 151: case 149: case 148: case 147: case 146: case 145: case 144:  {
    $557 = $125 & 7;
    $558 = $557 ^ 1;
    $559 = (($0) + ($558)|0);
    $560 = HEAP8[$559>>0]|0;
    $561 = $560&255;
    $data$12 = $561;$pc$16 = $121;
    label = 110;
    break;
   }
   case 214:  {
    $562 = (($$in37) + 2)|0;
    $data$12 = $124;$pc$16 = $562;
    label = 110;
    break;
   }
   case 158:  {
    $567 = HEAP16[$98>>1]|0;
    $568 = $567&65535;
    $569 = (__ZN7Gbs_Emu8cpu_readEj($99,$568)|0);
    $data$13 = $569;$pc$17 = $121;
    label = 114;
    break;
   }
   case 159: case 157: case 156: case 155: case 154: case 153: case 152:  {
    $570 = $125 & 7;
    $571 = $570 ^ 1;
    $572 = (($0) + ($571)|0);
    $573 = HEAP8[$572>>0]|0;
    $574 = $573&255;
    $data$13 = $574;$pc$17 = $121;
    label = 114;
    break;
   }
   case 222:  {
    $575 = (($$in37) + 2)|0;
    $data$13 = $124;$pc$17 = $575;
    label = 114;
    break;
   }
   case 165: case 164: case 163: case 162: case 161: case 160:  {
    $580 = $125 & 7;
    $581 = $580 ^ 1;
    $582 = (($0) + ($581)|0);
    $583 = HEAP8[$582>>0]|0;
    $584 = $583&255;
    $data$15 = $584;$pc$19 = $121;
    label = 118;
    break;
   }
   case 166:  {
    $585 = HEAP16[$102>>1]|0;
    $586 = $585&65535;
    $587 = (__ZN7Gbs_Emu8cpu_readEj($103,$586)|0);
    $data$14 = $587;$pc$18 = $$in37;
    label = 117;
    break;
   }
   case 230:  {
    $data$14 = $124;$pc$18 = $121;
    label = 117;
    break;
   }
   case 167:  {
    $pc$20 = $121;
    label = 119;
    break;
   }
   case 181: case 180: case 179: case 178: case 177: case 176:  {
    $599 = $125 & 7;
    $600 = $599 ^ 1;
    $601 = (($0) + ($600)|0);
    $602 = HEAP8[$601>>0]|0;
    $603 = $602&255;
    $data$17 = $603;$pc$22 = $121;
    label = 123;
    break;
   }
   case 182:  {
    $604 = HEAP16[$106>>1]|0;
    $605 = $604&65535;
    $606 = (__ZN7Gbs_Emu8cpu_readEj($107,$605)|0);
    $data$16 = $606;$pc$21 = $$in37;
    label = 122;
    break;
   }
   case 246:  {
    $data$16 = $124;$pc$21 = $121;
    label = 122;
    break;
   }
   case 183:  {
    $pc$23 = $121;
    label = 124;
    break;
   }
   case 173: case 172: case 171: case 170: case 169: case 168:  {
    $617 = $125 & 7;
    $618 = $617 ^ 1;
    $619 = (($0) + ($618)|0);
    $620 = HEAP8[$619>>0]|0;
    $621 = $620&255;
    $data$19 = $621;$pc$25 = $121;
    label = 128;
    break;
   }
   case 174:  {
    $622 = HEAP16[$109>>1]|0;
    $623 = $622&65535;
    $624 = (__ZN7Gbs_Emu8cpu_readEj($110,$623)|0);
    $data$18 = $624;$pc$24 = $$in37;
    label = 127;
    break;
   }
   case 238:  {
    $data$18 = $124;$pc$24 = $121;
    label = 127;
    break;
   }
   case 175:  {
    HEAP8[$111>>0] = 0;
    $flags$0$be = 128;$pc$0$be = $121;$sp$0$be = $sp$026;
    break;
   }
   case 225: case 209: case 193: case 241:  {
    $633 = (__ZN7Gbs_Emu8cpu_readEj($113,$sp$026)|0);
    $634 = (($sp$026) + 1)|0;
    $635 = (__ZN7Gbs_Emu8cpu_readEj($114,$634)|0);
    $636 = $635 << 8;
    $637 = (($636) + ($633))|0;
    $638 = $637&65535;
    $639 = $125 >>> 4;
    $640 = $639 & 3;
    $641 = (($0) + ($640<<1)|0);
    HEAP16[$641>>1] = $638;
    $642 = (($sp$026) + 2)|0;
    $643 = $642 & 65535;
    $644 = ($645<<24>>24)==(-15);
    if ($644) {
     $646 = HEAP8[$112>>0]|0;
     $647 = $646&255;
     $648 = $647 & 240;
     $flags$0$be = $648;$pc$0$be = $121;$sp$0$be = $643;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $643;
    }
    break;
   }
   case 197:  {
    $649 = HEAP16[$0>>1]|0;
    $650 = $649&65535;
    $data$2 = $650;$pc$6 = $121;
    label = 29;
    break;
   }
   case 213:  {
    $651 = HEAP16[$115>>1]|0;
    $652 = $651&65535;
    $data$2 = $652;$pc$6 = $121;
    label = 29;
    break;
   }
   case 229:  {
    $653 = HEAP16[$116>>1]|0;
    $654 = $653&65535;
    $data$2 = $654;$pc$6 = $121;
    label = 29;
    break;
   }
   case 245:  {
    $655 = $flags$025 << 8;
    $656 = HEAP8[$117>>0]|0;
    $657 = $656&255;
    $658 = $657 | $655;
    $data$2 = $658;$pc$6 = $121;
    label = 29;
    break;
   }
   case 255:  {
    $659 = ($121|0)==(61454);
    if ($659) {
     $flags$012 = $flags$025;$pc$020 = $$in37;$sp$016 = $sp$026;
     label = 161;
     break L4;
    } else {
     label = 137;
    }
    break;
   }
   case 247: case 239: case 231: case 223: case 215: case 207: case 199:  {
    label = 137;
    break;
   }
   case 204:  {
    $663 = (($$in37) + 3)|0;
    $664 = $flags$025 & 128;
    $665 = ($664|0)==(0);
    if ($665) {
     $flags$0$be = $flags$025;$pc$0$be = $663;$sp$0$be = $sp$026;
    } else {
     $pc$4 = $663;
     label = 27;
    }
    break;
   }
   case 212:  {
    $666 = (($$in37) + 3)|0;
    $667 = $flags$025 & 16;
    $668 = ($667|0)==(0);
    if ($668) {
     $pc$4 = $666;
     label = 27;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $666;$sp$0$be = $sp$026;
    }
    break;
   }
   case 220:  {
    $669 = (($$in37) + 3)|0;
    $670 = $flags$025 & 16;
    $671 = ($670|0)==(0);
    if ($671) {
     $flags$0$be = $flags$025;$pc$0$be = $669;$sp$0$be = $sp$026;
    } else {
     $pc$4 = $669;
     label = 27;
    }
    break;
   }
   case 192:  {
    $672 = $flags$025 & 128;
    $673 = ($672|0)==(0);
    if ($673) {
     label = 31;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $sp$026;
    }
    break;
   }
   case 208:  {
    $674 = $flags$025 & 16;
    $675 = ($674|0)==(0);
    if ($675) {
     label = 31;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $sp$026;
    }
    break;
   }
   case 216:  {
    $676 = $flags$025 & 16;
    $677 = ($676|0)==(0);
    if ($677) {
     $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $sp$026;
    } else {
     label = 31;
    }
    break;
   }
   case 24:  {
    $678 = (($$in37) + 2)|0;
    $679 = $122 << 24 >> 24;
    $680 = (($678) + ($679))|0;
    $681 = $680 & 65535;
    $flags$0$be = $flags$025;$pc$0$be = $681;$sp$0$be = $sp$026;
    break;
   }
   case 48:  {
    $682 = (($$in37) + 2)|0;
    $683 = $flags$025 & 16;
    $684 = ($683|0)==(0);
    if ($684) {
     $685 = $122 << 24 >> 24;
     $686 = (($685) + ($682))|0;
     $687 = $686 & 65535;
     $flags$0$be = $flags$025;$pc$0$be = $687;$sp$0$be = $sp$026;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $682;$sp$0$be = $sp$026;
    }
    break;
   }
   case 56:  {
    $688 = (($$in37) + 2)|0;
    $689 = $flags$025 & 16;
    $690 = ($689|0)==(0);
    if ($690) {
     $flags$0$be = $flags$025;$pc$0$be = $688;$sp$0$be = $sp$026;
    } else {
     $691 = $122 << 24 >> 24;
     $692 = (($691) + ($688))|0;
     $693 = $692 & 65535;
     $flags$0$be = $flags$025;$pc$0$be = $693;$sp$0$be = $sp$026;
    }
    break;
   }
   case 233:  {
    $694 = HEAP16[$119>>1]|0;
    $695 = $694&65535;
    $flags$0$be = $flags$025;$pc$0$be = $695;$sp$0$be = $sp$026;
    break;
   }
   case 195:  {
    $696 = (__Z8get_le16PKv($123)|0);
    $flags$0$be = $flags$025;$pc$0$be = $696;$sp$0$be = $sp$026;
    break;
   }
   case 194:  {
    $697 = (($$in37) + 3)|0;
    $698 = $flags$025 & 128;
    $699 = ($698|0)==(0);
    if ($699) {
     label = 153;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $697;$sp$0$be = $sp$026;
    }
    break;
   }
   case 202:  {
    $700 = (($$in37) + 3)|0;
    $701 = $flags$025 & 128;
    $702 = ($701|0)==(0);
    if ($702) {
     $flags$0$be = $flags$025;$pc$0$be = $700;$sp$0$be = $sp$026;
    } else {
     label = 153;
    }
    break;
   }
   case 210:  {
    $704 = (($$in37) + 3)|0;
    $705 = $flags$025 & 16;
    $706 = ($705|0)==(0);
    if ($706) {
     label = 153;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $704;$sp$0$be = $sp$026;
    }
    break;
   }
   case 218:  {
    $707 = (($$in37) + 3)|0;
    $708 = $flags$025 & 16;
    $709 = ($708|0)==(0);
    if ($709) {
     $flags$0$be = $flags$025;$pc$0$be = $707;$sp$0$be = $sp$026;
    } else {
     label = 153;
    }
    break;
   }
   case 47:  {
    $710 = HEAP8[$120>>0]|0;
    $711 = $710&255;
    $712 = $711 ^ 255;
    $713 = $712&255;
    HEAP8[$120>>0] = $713;
    $714 = $flags$025 | 96;
    $flags$0$be = $714;$pc$0$be = $121;$sp$0$be = $sp$026;
    break;
   }
   case 63:  {
    $715 = $flags$025 & -97;
    $716 = $715 ^ 16;
    $flags$0$be = $716;$pc$0$be = $121;$sp$0$be = $sp$026;
    break;
   }
   case 55:  {
    $717 = $flags$025 & -113;
    $718 = $717 | 16;
    $flags$0$be = $718;$pc$0$be = $121;$sp$0$be = $sp$026;
    break;
   }
   case 118: case 237: case 191: case 39: case 16: case 252: case 253: case 244: case 236: case 235: case 228: case 227: case 219: case 211: case 221:  {
    $$in37$lcssa50 = $$in37;$flags$025$lcssa56 = $flags$025;$sp$026$lcssa53 = $sp$026;
    label = 159;
    break L4;
    break;
   }
   case 251: case 243: case 127: case 109: case 100: case 91: case 82: case 73: case 64: case 0:  {
    $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $sp$026;
    break;
   }
   case 196:  {
    $228 = (($$in37) + 3)|0;
    $229 = $flags$025 & 128;
    $230 = ($229|0)==(0);
    if ($230) {
     $pc$4 = $228;
     label = 27;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $228;$sp$0$be = $sp$026;
    }
    break;
   }
   case 32:  {
    $126 = (($$in37) + 2)|0;
    $127 = $flags$025 & 128;
    $128 = ($127|0)==(0);
    if ($128) {
     $129 = $122 << 24 >> 24;
     $130 = (($129) + ($126))|0;
     $131 = $130 & 65535;
     $flags$0$be = $flags$025;$pc$0$be = $131;$sp$0$be = $sp$026;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $126;$sp$0$be = $sp$026;
    }
    break;
   }
   case 33:  {
    $143 = (__Z8get_le16PKv($123)|0);
    $144 = $143&65535;
    HEAP16[$36>>1] = $144;
    $145 = (($$in37) + 3)|0;
    $flags$0$be = $flags$025;$pc$0$be = $145;$sp$0$be = $sp$026;
    break;
   }
   case 40:  {
    $146 = (($$in37) + 2)|0;
    $147 = $flags$025 & 128;
    $148 = ($147|0)==(0);
    if ($148) {
     $flags$0$be = $flags$025;$pc$0$be = $146;$sp$0$be = $sp$026;
    } else {
     $149 = $122 << 24 >> 24;
     $150 = (($149) + ($146))|0;
     $151 = $150 & 65535;
     $flags$0$be = $flags$025;$pc$0$be = $151;$sp$0$be = $sp$026;
    }
    break;
   }
   case 240:  {
    $152 = $124 | 65280;
    $153 = (($$in37) + 2)|0;
    $pc$1 = $153;$temp$0 = $152;
    label = 17;
    break;
   }
   case 242:  {
    $154 = HEAP8[$0>>0]|0;
    $155 = $154&255;
    $156 = $155 | 65280;
    $pc$1 = $121;$temp$0 = $156;
    label = 17;
    break;
   }
   case 10:  {
    $157 = HEAP16[$0>>1]|0;
    $158 = $157&65535;
    $pc$1 = $121;$temp$0 = $158;
    label = 17;
    break;
   }
   case 189: case 188: case 187: case 186: case 185: case 184:  {
    $189 = $125 & 7;
    $190 = $189 ^ 1;
    $191 = (($0) + ($190)|0);
    $192 = HEAP8[$191>>0]|0;
    $193 = $192&255;
    $data$0 = $193;$pc$2 = $121;
    label = 22;
    break;
   }
   case 254:  {
    $194 = (($$in37) + 2)|0;
    $data$0 = $124;$pc$2 = $194;
    label = 22;
    break;
   }
   case 126: case 110: case 102: case 94: case 86: case 78: case 70:  {
    $207 = HEAP16[$45>>1]|0;
    $208 = $207&65535;
    $209 = $208 & 8191;
    $210 = $208 >>> 13;
    $211 = (($s) + ($210<<2)|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = (($212) + ($209)|0);
    $214 = HEAP8[$213>>0]|0;
    $215 = $125 >>> 3;
    $216 = $215 & 7;
    $217 = $216 ^ 1;
    $218 = (($0) + ($217)|0);
    HEAP8[$218>>0] = $214;
    $219 = (($208) + -65296)|0;
    $220 = ($219>>>0)<(49);
    if ($220) {
     $221 = (($this) + 24800|0);
     $222 = HEAP32[$46>>2]|0;
     $223 = HEAP32[$30>>2]|0;
     $224 = $223 << 2;
     $225 = (($222) - ($224))|0;
     $226 = (__ZN6Gb_Apu13read_registerEij($221,$225,$208)|0);
     $227 = $226&255;
     HEAP8[$218>>0] = $227;
     $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $sp$026;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $sp$026;
    }
    break;
   }
   case 42:  {
    $165 = HEAP16[$41>>1]|0;
    $166 = $165&65535;
    $167 = (($166) + 1)|0;
    $168 = $167&65535;
    HEAP16[$41>>1] = $168;
    $pc$1 = $121;$temp$0 = $166;
    label = 17;
    break;
   }
   case 250:  {
    $169 = (__Z8get_le16PKv($123)|0);
    $170 = (($$in37) + 3)|0;
    $pc$1 = $170;$temp$0 = $169;
    label = 17;
    break;
   }
   case 190:  {
    $186 = HEAP16[$42>>1]|0;
    $187 = $186&65535;
    $188 = (__ZN7Gbs_Emu8cpu_readEj($43,$187)|0);
    $data$0 = $188;$pc$2 = $121;
    label = 22;
    break;
   }
   case 58:  {
    $159 = HEAP16[$39>>1]|0;
    $160 = $159&65535;
    $161 = (($160) + 65535)|0;
    $162 = $161&65535;
    HEAP16[$39>>1] = $162;
    $pc$1 = $121;$temp$0 = $160;
    label = 17;
    break;
   }
   case 26:  {
    $163 = HEAP16[$40>>1]|0;
    $164 = $163&65535;
    $pc$1 = $121;$temp$0 = $164;
    label = 17;
    break;
   }
   case 205:  {
    $pc$5 = $121;
    label = 28;
    break;
   }
   case 200:  {
    $240 = $flags$025 & 128;
    $241 = ($240|0)==(0);
    if ($241) {
     $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $sp$026;
    } else {
     label = 31;
    }
    break;
   }
   case 217: case 201:  {
    label = 31;
    break;
   }
   case 203:  {
    $249 = (($$in37) + 2)|0;
    do {
     switch ($124|0) {
     case 126: case 118: case 110: case 102: case 94: case 86: case 78: case 70:  {
      $250 = HEAP16[$51>>1]|0;
      $251 = $250&65535;
      $252 = $251 & 8191;
      $253 = $251 >>> 13;
      $254 = (($s) + ($253<<2)|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = (($255) + ($252)|0);
      $257 = HEAP8[$256>>0]|0;
      $258 = $257&255;
      $259 = (($251) + -65296)|0;
      $260 = ($259>>>0)<(49);
      if ($260) {
       $261 = (($this) + 24800|0);
       $262 = HEAP32[$52>>2]|0;
       $263 = HEAP32[$30>>2]|0;
       $264 = $263 << 2;
       $265 = (($262) - ($264))|0;
       $266 = (__ZN6Gb_Apu13read_registerEij($261,$265,$251)|0);
       $temp2$0 = $266;
       label = 36;
      } else {
       $temp2$0 = $258;
       label = 36;
      }
      break;
     }
     case 127: case 125: case 124: case 123: case 122: case 121: case 120: case 119: case 117: case 116: case 115: case 114: case 113: case 112: case 111: case 109: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 100: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 91: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 82: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 73: case 72: case 71: case 69: case 68: case 67: case 66: case 65: case 64:  {
      $267 = $124 & 7;
      $268 = $267 ^ 1;
      $269 = (($0) + ($268)|0);
      $270 = HEAP8[$269>>0]|0;
      $271 = $270&255;
      $temp2$0 = $271;
      label = 36;
      break;
     }
     case 254: case 246: case 238: case 230: case 222: case 214: case 206: case 198: case 190: case 182: case 174: case 166: case 158: case 150: case 142: case 134:  {
      $280 = HEAP16[$53>>1]|0;
      $281 = $280&65535;
      $282 = (__ZN7Gbs_Emu8cpu_readEj($55,$281)|0);
      $283 = $124 >>> 3;
      $284 = $283 & 7;
      $285 = 1 << $284;
      $286 = $285 ^ -1;
      $287 = $282 & $286;
      $288 = $124 & 64;
      $289 = ($288|0)==(0);
      $$1 = $289 ? 0 : $285;
      $290 = HEAP16[$53>>1]|0;
      $291 = $290&65535;
      $292 = $287 | $$1;
      __ZN7Gbs_Emu9cpu_writeEji($54,$291,$292);
      $flags$0$be = $flags$025;$pc$0$be = $249;$sp$0$be = $sp$026;
      break L6;
      break;
     }
     case 255: case 253: case 252: case 251: case 250: case 249: case 248: case 247: case 245: case 244: case 243: case 242: case 241: case 240: case 239: case 237: case 236: case 235: case 234: case 233: case 232: case 231: case 229: case 228: case 227: case 226: case 225: case 224: case 223: case 221: case 220: case 219: case 218: case 217: case 216: case 215: case 213: case 212: case 211: case 210: case 209: case 208: case 207: case 205: case 204: case 203: case 202: case 201: case 200: case 199: case 197: case 196: case 195: case 194: case 193: case 192:  {
      $293 = $124 >>> 3;
      $294 = $293 & 7;
      $295 = 1 << $294;
      $296 = $124 & 7;
      $297 = $296 ^ 1;
      $298 = (($0) + ($297)|0);
      $299 = HEAP8[$298>>0]|0;
      $300 = $299&255;
      $301 = $300 | $295;
      $302 = $301&255;
      HEAP8[$298>>0] = $302;
      $flags$0$be = $flags$025;$pc$0$be = $249;$sp$0$be = $sp$026;
      break L6;
      break;
     }
     case 191: case 189: case 188: case 187: case 186: case 185: case 184: case 183: case 181: case 180: case 179: case 178: case 177: case 176: case 175: case 173: case 172: case 171: case 170: case 169: case 168: case 167: case 165: case 164: case 163: case 162: case 161: case 160: case 159: case 157: case 156: case 155: case 154: case 153: case 152: case 151: case 149: case 148: case 147: case 146: case 145: case 144: case 143: case 141: case 140: case 139: case 138: case 137: case 136: case 135: case 133: case 132: case 131: case 130: case 129: case 128:  {
      $303 = $124 >>> 3;
      $304 = $303 & 7;
      $305 = 1 << $304;
      $306 = $305 ^ 255;
      $307 = $124 & 7;
      $308 = $307 ^ 1;
      $309 = (($0) + ($308)|0);
      $310 = HEAP8[$309>>0]|0;
      $311 = $310&255;
      $312 = $311 & $306;
      $313 = $312&255;
      HEAP8[$309>>0] = $313;
      $flags$0$be = $flags$025;$pc$0$be = $249;$sp$0$be = $sp$026;
      break L6;
      break;
     }
     case 54:  {
      $314 = HEAP16[$56>>1]|0;
      $315 = $314&65535;
      $316 = (__ZN7Gbs_Emu8cpu_readEj($57,$315)|0);
      $temp6$0 = $316;
      label = 42;
      break;
     }
     case 55: case 53: case 52: case 51: case 50: case 49: case 48:  {
      $317 = $124 & 7;
      $318 = $317 ^ 1;
      $319 = (($0) + ($318)|0);
      $320 = HEAP8[$319>>0]|0;
      $321 = $320&255;
      $temp6$0 = $321;
      label = 42;
      break;
     }
     case 38: case 22: case 6:  {
      $325 = HEAP16[$58>>1]|0;
      $326 = $325&65535;
      $327 = (__ZN7Gbs_Emu8cpu_readEj($59,$326)|0);
      $data$5 = $124;$op$1 = $327;$pc$7 = $249;
      label = 51;
      break L6;
      break;
     }
     case 23: case 21: case 20: case 19: case 18: case 17: case 16: case 7: case 5: case 4: case 3: case 2: case 1: case 0: case 39: case 37: case 36: case 35: case 34: case 33: case 32:  {
      $328 = $124 & 7;
      $329 = $328 ^ 1;
      $330 = (($0) + ($329)|0);
      $331 = HEAP8[$330>>0]|0;
      $332 = $331&255;
      $data$5 = $124;$op$1 = $332;$pc$7 = $249;
      label = 51;
      break L6;
      break;
     }
     case 62:  {
      $333 = (($124) + 16)|0;
      $data$3 = $333;
      label = 46;
      break;
     }
     case 46: case 14: case 30:  {
      $data$3 = $124;
      label = 46;
      break;
     }
     case 63: case 61: case 60: case 59: case 58: case 57: case 56:  {
      $337 = (($124) + 16)|0;
      $data$4 = $337;
      label = 48;
      break;
     }
     case 47: case 45: case 44: case 43: case 42: case 41: case 40: case 15: case 13: case 12: case 11: case 10: case 9: case 8: case 31: case 29: case 28: case 27: case 26: case 25: case 24:  {
      $data$4 = $124;
      label = 48;
      break;
     }
     default: {
      label = 49;
      break L4;
     }
     }
    } while(0);
    if ((label|0) == 36) {
     label = 0;
     $272 = $124 >>> 3;
     $273 = $272 & 7;
     $274 = $273 ^ 7;
     $275 = $flags$025 & -225;
     $276 = $275 | 160;
     $277 = $temp2$0 << $274;
     $278 = $277 & 128;
     $279 = $278 ^ $276;
     $flags$0$be = $279;$pc$0$be = $249;$sp$0$be = $sp$026;
     break L6;
    }
    else if ((label|0) == 42) {
     label = 0;
     $322 = $temp6$0 >> 4;
     $323 = $temp6$0 << 4;
     $324 = $322 | $323;
     $data$7 = $124;$flags$1 = 0;$op$4 = $324;$pc$9 = $249;
     label = 58;
     break L6;
    }
    else if ((label|0) == 46) {
     label = 0;
     $334 = HEAP16[$60>>1]|0;
     $335 = $334&65535;
     $336 = (__ZN7Gbs_Emu8cpu_readEj($61,$335)|0);
     $data$6 = $data$3;$op$2 = $336;$pc$8 = $249;
     label = 54;
     break L6;
    }
    else if ((label|0) == 48) {
     label = 0;
     $338 = $data$4 & 7;
     $339 = $338 ^ 1;
     $340 = (($0) + ($339)|0);
     $341 = HEAP8[$340>>0]|0;
     $342 = $341&255;
     $data$6 = $data$4;$op$2 = $342;$pc$8 = $249;
     label = 54;
     break L6;
    }
    break;
   }
   case 23: case 7:  {
    $343 = HEAP8[$64>>0]|0;
    $344 = $343&255;
    $data$5 = $125;$op$1 = $344;$pc$7 = $121;
    label = 51;
    break;
   }
   case 31: case 15:  {
    $356 = HEAP8[$65>>0]|0;
    $357 = $356&255;
    $data$6 = $125;$op$2 = $357;$pc$8 = $121;
    label = 54;
    break;
   }
   case 119: case 117: case 116: case 115: case 114: case 113: case 112:  {
    $379 = $125 & 7;
    $380 = $379 ^ 1;
    $381 = (($0) + ($380)|0);
    $382 = HEAP8[$381>>0]|0;
    $383 = $382&255;
    $flags$3 = $flags$025;$op$5 = $383;$pc$10 = $121;
    label = 61;
    break;
   }
   case 125: case 124: case 123: case 122: case 121: case 120: case 111: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 72: case 71: case 69: case 68: case 67: case 66: case 65:  {
    $387 = $125 & 7;
    $388 = $387 ^ 1;
    $389 = (($0) + ($388)|0);
    $390 = HEAP8[$389>>0]|0;
    $391 = $125 >>> 3;
    $392 = $391 & 7;
    $393 = $392 ^ 1;
    $394 = (($0) + ($393)|0);
    HEAP8[$394>>0] = $390;
    $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $sp$026;
    break;
   }
   case 8:  {
    $395 = (__Z8get_le16PKv($123)|0);
    $396 = (($$in37) + 3)|0;
    $397 = $sp$026 & 255;
    __ZN7Gbs_Emu9cpu_writeEji($66,$395,$397);
    $398 = (($395) + 1)|0;
    $399 = $sp$026 >>> 8;
    __ZN7Gbs_Emu9cpu_writeEji($67,$398,$399);
    $flags$0$be = $flags$025;$pc$0$be = $396;$sp$0$be = $sp$026;
    break;
   }
   case 249:  {
    $400 = HEAP16[$68>>1]|0;
    $401 = $400&65535;
    $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $401;
    break;
   }
   case 49:  {
    $402 = (__Z8get_le16PKv($123)|0);
    $403 = (($$in37) + 3)|0;
    $flags$0$be = $flags$025;$pc$0$be = $403;$sp$0$be = $402;
    break;
   }
   case 17: case 1:  {
    $404 = (__Z8get_le16PKv($123)|0);
    $405 = $404&65535;
    $406 = $125 >>> 4;
    $407 = (($0) + ($406<<1)|0);
    HEAP16[$407>>1] = $405;
    $408 = (($$in37) + 3)|0;
    $flags$0$be = $flags$025;$pc$0$be = $408;$sp$0$be = $sp$026;
    break;
   }
   case 224:  {
    $409 = $124 | 65280;
    $410 = (($$in37) + 2)|0;
    $pc$11 = $410;$temp7$0 = $409;
    label = 74;
    break;
   }
   case 226:  {
    $411 = HEAP8[$0>>0]|0;
    $412 = $411&255;
    $413 = $412 | 65280;
    $pc$11 = $121;$temp7$0 = $413;
    label = 74;
    break;
   }
   case 50:  {
    $414 = HEAP16[$71>>1]|0;
    $415 = $414&65535;
    $416 = (($415) + 65535)|0;
    $417 = $416&65535;
    HEAP16[$71>>1] = $417;
    $pc$11 = $121;$temp7$0 = $415;
    label = 74;
    break;
   }
   case 2:  {
    $418 = HEAP16[$0>>1]|0;
    $419 = $418&65535;
    $pc$11 = $121;$temp7$0 = $419;
    label = 74;
    break;
   }
   case 18:  {
    $420 = HEAP16[$72>>1]|0;
    $421 = $420&65535;
    $pc$11 = $121;$temp7$0 = $421;
    label = 74;
    break;
   }
   case 34:  {
    $422 = HEAP16[$73>>1]|0;
    $423 = $422&65535;
    $424 = (($423) + 1)|0;
    $425 = $424&65535;
    HEAP16[$73>>1] = $425;
    $pc$11 = $121;$temp7$0 = $423;
    label = 74;
    break;
   }
   case 234:  {
    $426 = (__Z8get_le16PKv($123)|0);
    $427 = (($$in37) + 3)|0;
    $pc$11 = $427;$temp7$0 = $426;
    label = 74;
    break;
   }
   case 6:  {
    HEAP8[$74>>0] = $122;
    $430 = (($$in37) + 2)|0;
    $flags$0$be = $flags$025;$pc$0$be = $430;$sp$0$be = $sp$026;
    break;
   }
   case 14:  {
    HEAP8[$0>>0] = $122;
    $431 = (($$in37) + 2)|0;
    $flags$0$be = $flags$025;$pc$0$be = $431;$sp$0$be = $sp$026;
    break;
   }
   case 22:  {
    HEAP8[$75>>0] = $122;
    $432 = (($$in37) + 2)|0;
    $flags$0$be = $flags$025;$pc$0$be = $432;$sp$0$be = $sp$026;
    break;
   }
   case 30:  {
    HEAP8[$76>>0] = $122;
    $433 = (($$in37) + 2)|0;
    $flags$0$be = $flags$025;$pc$0$be = $433;$sp$0$be = $sp$026;
    break;
   }
   case 38:  {
    HEAP8[$77>>0] = $122;
    $434 = (($$in37) + 2)|0;
    $flags$0$be = $flags$025;$pc$0$be = $434;$sp$0$be = $sp$026;
    break;
   }
   case 46:  {
    HEAP8[$78>>0] = $122;
    $435 = (($$in37) + 2)|0;
    $flags$0$be = $flags$025;$pc$0$be = $435;$sp$0$be = $sp$026;
    break;
   }
   case 54:  {
    $436 = HEAP16[$79>>1]|0;
    $437 = $436&65535;
    __ZN7Gbs_Emu9cpu_writeEji($80,$437,$124);
    $438 = (($$in37) + 2)|0;
    $flags$0$be = $flags$025;$pc$0$be = $438;$sp$0$be = $sp$026;
    break;
   }
   case 62:  {
    HEAP8[$81>>0] = $122;
    $439 = (($$in37) + 2)|0;
    $flags$0$be = $flags$025;$pc$0$be = $439;$sp$0$be = $sp$026;
    break;
   }
   case 35: case 19: case 3:  {
    $440 = $125 >>> 4;
    $441 = (($0) + ($440<<1)|0);
    $442 = HEAP16[$441>>1]|0;
    $443 = (($442) + 1)<<16>>16;
    HEAP16[$441>>1] = $443;
    $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $sp$026;
    break;
   }
   case 51:  {
    $444 = (($sp$026) + 1)|0;
    $445 = $444 & 65535;
    $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $445;
    break;
   }
   case 59:  {
    $450 = (($sp$026) + 65535)|0;
    $451 = $450 & 65535;
    $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $451;
    break;
   }
   case 43: case 27: case 11:  {
    $446 = $125 >>> 4;
    $447 = (($0) + ($446<<1)|0);
    $448 = HEAP16[$447>>1]|0;
    $449 = (($448) + -1)<<16>>16;
    HEAP16[$447>>1] = $449;
    $flags$0$be = $flags$025;$pc$0$be = $121;$sp$0$be = $sp$026;
    break;
   }
   case 52:  {
    $452 = HEAP16[$82>>1]|0;
    $453 = $452&65535;
    $454 = (__ZN7Gbs_Emu8cpu_readEj($83,$453)|0);
    $455 = (($454) + 1)|0;
    $456 = $455 & 255;
    __ZN7Gbs_Emu9cpu_writeEji($84,$453,$456);
    $data$8 = $455;
    label = 89;
    break;
   }
   case 60: case 44: case 36: case 28: case 20: case 12: case 4:  {
    $457 = $125 >>> 3;
    $458 = $457 & 7;
    $459 = $458 ^ 1;
    $460 = (($0) + ($459)|0);
    $461 = HEAP8[$460>>0]|0;
    $462 = $461&255;
    $463 = (($462) + 1)|0;
    $464 = $463&255;
    HEAP8[$460>>0] = $464;
    $data$8 = $463;
    label = 89;
    break;
   }
   case 53:  {
    $473 = HEAP16[$85>>1]|0;
    $474 = $473&65535;
    $475 = (__ZN7Gbs_Emu8cpu_readEj($86,$474)|0);
    $476 = (($475) + -1)|0;
    $477 = $476 & 255;
    __ZN7Gbs_Emu9cpu_writeEji($87,$474,$477);
    $data$9 = $476;
    label = 92;
    break;
   }
   case 61: case 45: case 37: case 29: case 21: case 13: case 5:  {
    $478 = $125 >>> 3;
    $479 = $478 & 7;
    $480 = $479 ^ 1;
    $481 = (($0) + ($480)|0);
    $482 = HEAP8[$481>>0]|0;
    $483 = $482&255;
    $484 = (($483) + -1)|0;
    $485 = $484&255;
    HEAP8[$481>>0] = $485;
    $data$9 = $484;
    label = 92;
    break;
   }
   case 248:  {
    $493 = $122 << 24 >> 24;
    $494 = (($$in37) + 2)|0;
    $495 = (($493) + ($sp$026))|0;
    $flags$4 = 0;$pc$12 = $494;$prev$0 = $sp$026;$temp8$1 = $495;
    label = 97;
    break;
   }
   case 232:  {
    $496 = $122 << 24 >> 24;
    $497 = (($$in37) + 2)|0;
    $498 = (($496) + ($sp$026))|0;
    $499 = $498 & 65535;
    $flags$5 = 0;$pc$13 = $497;$prev$1 = $sp$026;$sp$1 = $499;$temp8$2 = $498;
    label = 98;
    break;
   }
   case 41: case 25: case 9:  {
    $500 = $125 >>> 4;
    $501 = (($0) + ($500<<1)|0);
    $502 = HEAP16[$501>>1]|0;
    $503 = $502&65535;
    $temp8$0 = $503;
    label = 96;
    break;
   }
   case 57:  {
    $temp8$0 = $sp$026;
    label = 96;
    break;
   }
   case 134:  {
    $518 = HEAP16[$90>>1]|0;
    $519 = $518&65535;
    $520 = (__ZN7Gbs_Emu8cpu_readEj($91,$519)|0);
    $data$10 = $520;$pc$14 = $121;
    label = 102;
    break;
   }
   case 135: case 133: case 132: case 131: case 130: case 129: case 128:  {
    $521 = $125 & 7;
    $522 = $521 ^ 1;
    $523 = (($0) + ($522)|0);
    $524 = HEAP8[$523>>0]|0;
    $525 = $524&255;
    $data$10 = $525;$pc$14 = $121;
    label = 102;
    break;
   }
   case 198:  {
    $526 = (($$in37) + 2)|0;
    $data$10 = $124;$pc$14 = $526;
    label = 102;
    break;
   }
   default: {
    label = 160;
    break L4;
   }
   }
  } while(0);
  switch (label|0) {
   case 17: {
    label = 0;
    $171 = $temp$0 & 8191;
    $172 = $temp$0 >>> 13;
    $173 = (($s) + ($172<<2)|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($174) + ($171)|0);
    $176 = HEAP8[$175>>0]|0;
    HEAP8[$37>>0] = $176;
    $177 = (($temp$0) + -65296)|0;
    $178 = ($177>>>0)<(49);
    if ($178) {
     $179 = (($this) + 24800|0);
     $180 = HEAP32[$38>>2]|0;
     $181 = HEAP32[$30>>2]|0;
     $182 = $181 << 2;
     $183 = (($180) - ($182))|0;
     $184 = (__ZN6Gb_Apu13read_registerEij($179,$183,$temp$0)|0);
     $185 = $184&255;
     HEAP8[$37>>0] = $185;
     $flags$0$be = $flags$025;$pc$0$be = $pc$1;$sp$0$be = $sp$026;
    } else {
     $flags$0$be = $flags$025;$pc$0$be = $pc$1;$sp$0$be = $sp$026;
    }
    break;
   }
   case 22: {
    label = 0;
    $195 = HEAP8[$44>>0]|0;
    $196 = $195&255;
    $197 = (($196) - ($data$0))|0;
    $data$1 = $197;$op$0 = $196;$pc$3 = $pc$2;
    label = 23;
    break;
   }
   case 27: {
    label = 0;
    $231 = (($pc$4) + -2)|0;
    $pc$5 = $231;
    label = 28;
    break;
   }
   case 31: {
    label = 0;
    $242 = (__ZN7Gbs_Emu8cpu_readEj($49,$sp$026)|0);
    $243 = (($sp$026) + 1)|0;
    $244 = (__ZN7Gbs_Emu8cpu_readEj($50,$243)|0);
    $245 = $244 << 8;
    $246 = (($245) + ($242))|0;
    $247 = (($sp$026) + 2)|0;
    $248 = $247 & 65535;
    $flags$0$be = $flags$025;$pc$0$be = $246;$sp$0$be = $248;
    break;
   }
   case 51: {
    label = 0;
    $345 = $op$1 << 1;
    $346 = $data$5 & $flags$025;
    $347 = $346 >>> 4;
    $348 = $347 & 1;
    $349 = $348 | $345;
    $350 = $op$1 >>> 3;
    $351 = $350 & 16;
    $352 = ($data$5>>>0)<(16);
    if ($352) {
     $353 = $op$1 >>> 7;
     $354 = $353 & 16777215;
     $355 = $349 | $354;
     $data$7 = $data$5;$flags$1 = $351;$op$4 = $355;$pc$9 = $pc$7;
     label = 58;
    } else {
     $data$7 = $data$5;$flags$1 = $351;$op$4 = $349;$pc$9 = $pc$7;
     label = 58;
    }
    break;
   }
   case 54: {
    label = 0;
    $358 = $data$6 & $flags$025;
    $359 = $358 << 4;
    $360 = $359 | $op$2;
    $361 = $op$2 << 4;
    $362 = $361 & 16;
    $363 = ($data$6>>>0)<(16);
    if ($363) {
     $364 = $360 << 8;
     $365 = $364 | $360;
     $op$3 = $365;
    } else {
     $op$3 = $360;
    }
    $366 = $op$3 >>> 1;
    $367 = $data$6 & 32;
    $368 = ($367|0)==(0);
    if ($368) {
     $data$7 = $data$6;$flags$1 = $362;$op$4 = $366;$pc$9 = $pc$8;
     label = 58;
    } else {
     $369 = $op$3 & 128;
     $370 = $366 | $369;
     $data$7 = $data$6;$flags$1 = $362;$op$4 = $370;$pc$9 = $pc$8;
     label = 58;
    }
    break;
   }
   case 74: {
    label = 0;
    $428 = HEAP8[$69>>0]|0;
    $429 = $428&255;
    __ZN7Gbs_Emu9cpu_writeEji($70,$temp7$0,$429);
    $flags$0$be = $flags$025;$pc$0$be = $pc$11;$sp$0$be = $sp$026;
    break;
   }
   case 89: {
    label = 0;
    $465 = $flags$025 & 16;
    $466 = $data$8 & 15;
    $467 = (($466) + 63)|0;
    $468 = $467 & 32;
    $469 = $data$8 >>> 1;
    $470 = $469 & 128;
    $471 = $470 | $465;
    $472 = $471 | $468;
    $flags$0$be = $472;$pc$0$be = $121;$sp$0$be = $sp$026;
    break;
   }
   case 92: {
    label = 0;
    $486 = $flags$025 & 16;
    $487 = $data$9 & 15;
    $488 = (($487) + 49)|0;
    $489 = $488 & 32;
    $490 = $489 | $486;
    $491 = $data$9 & 255;
    $492 = ($491|0)==(0);
    $$2$v = $492 ? 192 : 64;
    $$2 = $490 | $$2$v;
    $flags$0$be = $$2;$pc$0$be = $121;$sp$0$be = $sp$026;
    break;
   }
   case 96: {
    label = 0;
    $504 = HEAP16[$89>>1]|0;
    $505 = $504&65535;
    $506 = (($505) + ($temp8$0))|0;
    $507 = $flags$025 & 128;
    $flags$4 = $507;$pc$12 = $121;$prev$0 = $505;$temp8$1 = $506;
    label = 97;
    break;
   }
   case 106: {
    label = 0;
    $550 = $flags$025 >>> 4;
    $551 = $550 & 1;
    $552 = (($data$11) + ($551))|0;
    $553 = $552 & 255;
    $data$10 = $553;$pc$14 = $pc$15;
    label = 102;
    break;
   }
   case 114: {
    label = 0;
    $576 = $flags$025 >>> 4;
    $577 = $576 & 1;
    $578 = (($data$13) + ($577))|0;
    $579 = $578 & 255;
    $data$12 = $579;$pc$16 = $pc$17;
    label = 110;
    break;
   }
   case 117: {
    label = 0;
    $588 = (($pc$18) + 1)|0;
    $data$15 = $data$14;$pc$19 = $588;
    label = 118;
    break;
   }
   case 122: {
    label = 0;
    $607 = (($pc$21) + 1)|0;
    $data$17 = $data$16;$pc$22 = $607;
    label = 123;
    break;
   }
   case 127: {
    label = 0;
    $625 = (($pc$24) + 1)|0;
    $data$19 = $data$18;$pc$25 = $625;
    label = 128;
    break;
   }
   case 137: {
    label = 0;
    $660 = $125 & 56;
    $661 = HEAP32[$118>>2]|0;
    $662 = (($661) + ($660))|0;
    $data$2 = $121;$pc$6 = $662;
    label = 29;
    break;
   }
   case 153: {
    label = 0;
    $703 = (__Z8get_le16PKv($123)|0);
    $flags$0$be = $flags$025;$pc$0$be = $703;$sp$0$be = $sp$026;
    break;
   }
  }
  if ((label|0) == 28) {
   label = 0;
   $232 = (($pc$5) + 2)|0;
   $233 = (__Z8get_le16PKv($123)|0);
   $data$2 = $232;$pc$6 = $233;
   label = 29;
  }
  else if ((label|0) == 58) {
   label = 0;
   $371 = $data$7 & 7;
   $372 = $op$4 & 255;
   $373 = ($372|0)==(0);
   $374 = $flags$1 | 128;
   $$flags$1 = $373 ? $374 : $flags$1;
   $375 = ($371|0)==(6);
   if ($375) {
    $flags$3 = $$flags$1;$op$5 = $op$4;$pc$10 = $pc$9;
    label = 61;
   } else {
    $376 = $op$4&255;
    $377 = $371 ^ 1;
    $378 = (($0) + ($377)|0);
    HEAP8[$378>>0] = $376;
    $flags$0$be = $$flags$1;$pc$0$be = $pc$9;$sp$0$be = $sp$026;
   }
  }
  else if ((label|0) == 97) {
   label = 0;
   $508 = $temp8$1&65535;
   HEAP16[$88>>1] = $508;
   $flags$5 = $flags$4;$pc$13 = $pc$12;$prev$1 = $prev$0;$sp$1 = $sp$026;$temp8$2 = $temp8$1;
   label = 98;
  }
  else if ((label|0) == 102) {
   label = 0;
   $527 = HEAP8[$92>>0]|0;
   $528 = $527&255;
   $529 = (($528) + ($data$10))|0;
   $530 = $529 & 15;
   $531 = $528 & 15;
   $532 = (($530) - ($531))|0;
   $533 = $532 & 32;
   $534 = $529 >>> 4;
   $535 = $534 & 16;
   $536 = $533 | $535;
   $537 = $529&255;
   HEAP8[$92>>0] = $537;
   $538 = $529 & 255;
   $539 = ($538|0)==(0);
   $540 = $536 | 128;
   $$3 = $539 ? $540 : $536;
   $flags$0$be = $$3;$pc$0$be = $pc$14;$sp$0$be = $sp$026;
  }
  else if ((label|0) == 110) {
   label = 0;
   $563 = HEAP8[$97>>0]|0;
   $564 = $563&255;
   $565 = (($564) - ($data$12))|0;
   $566 = $565&255;
   HEAP8[$97>>0] = $566;
   $data$1 = $565;$op$0 = $564;$pc$3 = $pc$16;
   label = 23;
  }
  else if ((label|0) == 118) {
   label = 0;
   $589 = HEAP8[$100>>0]|0;
   $590 = $589&255;
   $591 = $590 & $data$15;
   $592 = $591&255;
   HEAP8[$100>>0] = $592;
   $pc$20 = $pc$19;
   label = 119;
  }
  else if ((label|0) == 123) {
   label = 0;
   $608 = HEAP8[$104>>0]|0;
   $609 = $608&255;
   $610 = $609 | $data$17;
   $611 = $610&255;
   HEAP8[$104>>0] = $611;
   $pc$23 = $pc$22;
   label = 124;
  }
  else if ((label|0) == 128) {
   label = 0;
   $626 = HEAP8[$108>>0]|0;
   $627 = $626&255;
   $628 = $627 ^ $data$19;
   $629 = $628&255;
   HEAP8[$108>>0] = $629;
   $630 = (($628) + 511)|0;
   $631 = $630 >>> 1;
   $632 = $631 & 128;
   $flags$0$be = $632;$pc$0$be = $pc$25;$sp$0$be = $sp$026;
  }
  if ((label|0) == 23) {
   label = 0;
   $198 = $op$0 & 15;
   $199 = $data$1 & 15;
   $200 = (($198) - ($199))|0;
   $201 = $200 & 32;
   $202 = $data$1 >>> 4;
   $203 = $202 & 16;
   $204 = $data$1 & 255;
   $205 = ($204|0)==(0);
   $$$v = $205 ? 192 : 64;
   $206 = $$$v | $203;
   $$ = $206 | $201;
   $flags$0$be = $$;$pc$0$be = $pc$3;$sp$0$be = $sp$026;
  }
  else if ((label|0) == 29) {
   label = 0;
   $234 = (($sp$026) + 65535)|0;
   $235 = $234 & 65535;
   $236 = $data$2 >>> 8;
   __ZN7Gbs_Emu9cpu_writeEji($48,$235,$236);
   $237 = (($sp$026) + 65534)|0;
   $238 = $237 & 65535;
   $239 = $data$2 & 255;
   __ZN7Gbs_Emu9cpu_writeEji($47,$238,$239);
   $flags$0$be = $flags$025;$pc$0$be = $pc$6;$sp$0$be = $238;
  }
  else if ((label|0) == 61) {
   label = 0;
   $384 = HEAP16[$62>>1]|0;
   $385 = $384&65535;
   $386 = $op$5 & 255;
   __ZN7Gbs_Emu9cpu_writeEji($63,$385,$386);
   $flags$0$be = $flags$3;$pc$0$be = $pc$10;$sp$0$be = $sp$026;
  }
  else if ((label|0) == 98) {
   label = 0;
   $509 = $temp8$2 >>> 12;
   $510 = $509 & 16;
   $511 = $flags$5 | $510;
   $512 = $temp8$2 & 4095;
   $513 = $prev$1 & 4095;
   $514 = (($512) - ($513))|0;
   $515 = $514 >>> 7;
   $516 = $515 & 32;
   $517 = $511 | $516;
   $flags$0$be = $517;$pc$0$be = $pc$13;$sp$0$be = $sp$1;
  }
  else if ((label|0) == 119) {
   label = 0;
   $593 = HEAP8[$101>>0]|0;
   $594 = $593&255;
   $595 = (($594) + 511)|0;
   $596 = $595 >>> 1;
   $597 = $596 & 128;
   $598 = $597 | 32;
   $flags$0$be = $598;$pc$0$be = $pc$20;$sp$0$be = $sp$026;
  }
  else if ((label|0) == 124) {
   label = 0;
   $612 = HEAP8[$105>>0]|0;
   $613 = $612&255;
   $614 = (($613) + 511)|0;
   $615 = $614 >>> 1;
   $616 = $615 & 128;
   $flags$0$be = $616;$pc$0$be = $pc$23;$sp$0$be = $sp$026;
  }
  $132 = $pc$0$be >>> 13;
  $133 = (($s) + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $pc$0$be & 8191;
  $136 = (($134) + ($135)|0);
  $$sum = (($135) + 1)|0;
  $137 = (($134) + ($$sum)|0);
  $138 = HEAP8[$136>>0]|0;
  $139 = $138&255;
  $140 = HEAP32[$30>>2]|0;
  $141 = (($140) + -1)|0;
  HEAP32[$30>>2] = $141;
  $142 = ($141|0)==(0);
  if ($142) {
   $flags$012 = $flags$0$be;$pc$020 = $pc$0$be;$sp$016 = $sp$0$be;
   label = 161;
   break;
  } else {
   $$in37 = $pc$0$be;$123 = $137;$125 = $139;$645 = $138;$flags$025 = $flags$0$be;$sp$026 = $sp$0$be;
  }
 }
 if ((label|0) == 49) {
  ___assert_fail((50368|0),(37536|0),452,(40512|0));
  // unreachable;
 }
 else if ((label|0) == 159) {
  $719 = HEAP32[$30>>2]|0;
  $720 = (($719) + 1)|0;
  HEAP32[$30>>2] = $720;
  $flags$012 = $flags$025$lcssa56;$pc$020 = $$in37$lcssa50;$sp$016 = $sp$026$lcssa53;
  $721 = $0;
  $722 = $721;
  $723 = HEAP32[$722>>2]|0;
  $724 = (($721) + 4)|0;
  $725 = $724;
  $726 = HEAP32[$725>>2]|0;
  $727 = $this;
  $728 = $727;
  HEAP8[$728>>0]=$723&255;HEAP8[$728+1>>0]=($723>>8)&255;HEAP8[$728+2>>0]=($723>>16)&255;HEAP8[$728+3>>0]=$723>>24;
  $729 = (($727) + 4)|0;
  $730 = $729;
  HEAP8[$730>>0]=$726&255;HEAP8[$730+1>>0]=($726>>8)&255;HEAP8[$730+2>>0]=($726>>16)&255;HEAP8[$730+3>>0]=$726>>24;
  HEAP32[$16>>2] = $pc$020;
  $731 = $sp$016&65535;
  HEAP16[$18>>1] = $731;
  $732 = $flags$012&255;
  HEAP8[$21>>0] = $732;
  HEAP32[$5>>2] = $3;
  dest=$3+0|0; src=$s+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $733 = HEAP32[$30>>2]|0;
  $734 = ($733|0)>(0);
  STACKTOP = sp;return ($734|0);
 }
 else if ((label|0) == 160) {
  ___assert_fail((50368|0),(37536|0),1041,(40512|0));
  // unreachable;
 }
 else if ((label|0) == 161) {
  $721 = $0;
  $722 = $721;
  $723 = HEAP32[$722>>2]|0;
  $724 = (($721) + 4)|0;
  $725 = $724;
  $726 = HEAP32[$725>>2]|0;
  $727 = $this;
  $728 = $727;
  HEAP8[$728>>0]=$723&255;HEAP8[$728+1>>0]=($723>>8)&255;HEAP8[$728+2>>0]=($723>>16)&255;HEAP8[$728+3>>0]=$723>>24;
  $729 = (($727) + 4)|0;
  $730 = $729;
  HEAP8[$730>>0]=$726&255;HEAP8[$730+1>>0]=($726>>8)&255;HEAP8[$730+2>>0]=($726>>16)&255;HEAP8[$730+3>>0]=$726>>24;
  HEAP32[$16>>2] = $pc$020;
  $731 = $sp$016&65535;
  HEAP16[$18>>1] = $731;
  $732 = $flags$012&255;
  HEAP8[$21>>0] = $732;
  HEAP32[$5>>2] = $3;
  dest=$3+0|0; src=$s+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $733 = HEAP32[$30>>2]|0;
  $734 = ($733|0)>(0);
  STACKTOP = sp;return ($734|0);
 }
 return (0)|0;
}
function __ZNK7Gbs_Emu5clockEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 360|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 272|0);
 $3 = (__ZNK6Gb_Cpu6remainEv($2)|0);
 $4 = (($1) - ($3))|0;
 return ($4|0);
}
function __ZN6Gb_Cpu8get_codeEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr >>> 13;
 $1 = (($this) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $addr & 8191;
 $6 = (($4) + ($5)|0);
 return ($6|0);
}
function __ZN6Gb_Cpu13set_code_pageEiPh($this,$i,$p) {
 $this = $this|0;
 $i = $i|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 HEAP32[$2>>2] = $p;
 return;
}
function __Z24blargg_verify_byte_orderv() {
 var $0 = 0, $1 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp;
 HEAP32[$i>>2] = 1;
 $0 = HEAP8[$i>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  ___assert_fail((37584|0),(37616|0),62,(37664|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNK6Gb_Cpu6remainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 2;
 return ($4|0);
}
function __ZN6Gb_Osc5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 3;
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 16|0);
 HEAP32[$6>>2] = $5;
 return;
}
function __ZN6Gb_Osc12clock_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 64;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  return;
 }
 $6 = (($this) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  return;
 }
 $9 = (($7) + -1)|0;
 HEAP32[$6>>2] = $9;
 return;
}
function __ZN6Gb_Env14clock_envelopeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = (($1) + -1)|0;
 HEAP32[$0>>2] = $3;
 $4 = ($3|0)==(0);
 if (!($4)) {
  return;
 }
 $5 = (($this) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 2|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 7;
 HEAP32[$0>>2] = $10;
 $11 = (($this) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -1)|0;
 $14 = HEAP32[$5>>2]|0;
 $15 = (($14) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 >>> 2;
 $19 = $18 & 2;
 $20 = (($13) + ($19))|0;
 $21 = ($20>>>0)<(15);
 if (!($21)) {
  return;
 }
 HEAP32[$11>>2] = $20;
 return;
}
function __ZN6Gb_Env14write_registerEii($this,$reg,$data) {
 $this = $this|0;
 $reg = $reg|0;
 $data = $data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($reg|0) == 1)) {
  $0 = (($this) + 24|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (($1) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = $4 & 63;
  $6 = (64 - ($5))|0;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $6;
  $$0 = 0;
  return ($$0|0);
 } else if ((($reg|0) == 2)) {
  $8 = ($data>>>0)>(15);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
  $9 = (($this) + 44|0);
  HEAP32[$9>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 } else if ((($reg|0) == 4)) {
  $10 = $data & 128;
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = 0;
   return ($$0|0);
  }
  $12 = (($this) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 2|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 & 7;
  $18 = (($this) + 48|0);
  HEAP32[$18>>2] = $17;
  $19 = HEAP32[$12>>2]|0;
  $20 = (($19) + 2|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 >>> 4;
  $24 = (($this) + 36|0);
  HEAP32[$24>>2] = $23;
  $25 = (($this) + 44|0);
  HEAP32[$25>>2] = 1;
  $26 = (($this) + 40|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if (!($28)) {
   $$0 = 1;
   return ($$0|0);
  }
  HEAP32[$26>>2] = 64;
  $$0 = 1;
  return ($$0|0);
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN9Gb_Square5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 64|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 60|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 56|0);
 HEAP32[$2>>2] = 0;
 __ZN6Gb_Env5resetEv($this);
 return;
}
function __ZN9Gb_Square11clock_sweepEv($this) {
 $this = $this|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 >>> 4;
 $5 = $4 & 7;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 }
 $7 = (($this) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 $10 = (($8) + -1)|0;
 HEAP32[$7>>2] = $10;
 $11 = ($10|0)==(0);
 if (!($11)) {
  return;
 }
 HEAP32[$7>>2] = $5;
 $12 = (($this) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13&255;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 3|0);
 HEAP8[$16>>0] = $14;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 4|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 & 248;
 $22 = HEAP32[$12>>2]|0;
 $23 = $22 >>> 8;
 $24 = $23 & 7;
 $25 = $24 | $21;
 $26 = $25&255;
 HEAP8[$18>>0] = $26;
 $27 = HEAP32[$12>>2]|0;
 $28 = HEAP32[$0>>2]|0;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 & 7;
 $32 = $27 >> $31;
 $33 = $30 & 8;
 $34 = ($33|0)==(0);
 $35 = (0 - ($32))|0;
 $$ = $34 ? $32 : $35;
 $36 = (($$) + ($27))|0;
 HEAP32[$12>>2] = $36;
 $37 = ($36|0)<(0);
 if ($37) {
  HEAP32[$12>>2] = 0;
  return;
 }
 $38 = ($36|0)>(2047);
 if (!($38)) {
  return;
 }
 HEAP32[$7>>2] = 0;
 HEAP32[$12>>2] = 2048;
 return;
}
function __ZN9Gb_Square3runEiii($this,$time,$end_time,$playing) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 $playing = $playing|0;
 var $$ = 0, $$$ = 0, $$1 = 0, $$2 = 0, $$lcssa = 0, $$lcssa4 = 0, $$playing = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $delta1$0 = 0, $delta1$1 = 0, $delta1$1$lcssa = 0, $end_time$ = 0, $or$cond = 0, $phase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(2048);
 $$playing = $2 ? 0 : $playing;
 $3 = (($this) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 >>> 6;
 $9 = (37696 + ($8)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($this) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & $$playing;
 $15 = (($this) + 64|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)<($11|0);
 $18 = (0 - ($14))|0;
 $$ = $17 ? $14 : $18;
 $19 = (__ZNK6Gb_Osc9frequencyEv($this)|0);
 $20 = (($19) + -1)|0;
 $21 = ($20>>>0)>(2040);
 $22 = $13 >> 1;
 $$$ = $21 ? $22 : $$;
 $23 = (($this) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($$$|0)==($24|0);
 if (!($25)) {
  $26 = (($$$) - ($24))|0;
  HEAP32[$23>>2] = $$$;
  $27 = (($this) + 52|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($this) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($28,$time,$26,$30);
 }
 $31 = (($this) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($time))|0;
 $34 = ($$playing|0)==(0);
 $35 = $21 | $34;
 $end_time$ = $35 ? $end_time : $33;
 $36 = ($end_time$|0)<($end_time|0);
 if (!($36)) {
  $$2 = $end_time$;
  $53 = (($$2) - ($end_time))|0;
  HEAP32[$31>>2] = $53;
  return;
 }
 $37 = (2048 - ($19))|0;
 $38 = $37 << 2;
 $39 = (($this) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$15>>2]|0;
 $42 = $$$ << 1;
 $43 = (($this) + 52|0);
 $$1 = $end_time$;$delta1$0 = $42;$phase$0 = $41;
 while(1) {
  $44 = (($phase$0) + 1)|0;
  $45 = $44 & 7;
  $46 = ($45|0)==(0);
  $47 = ($45|0)==($11|0);
  $or$cond = $46 | $47;
  if ($or$cond) {
   $48 = (0 - ($delta1$0))|0;
   $49 = HEAP32[$43>>2]|0;
   __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($49,$$1,$48,$40);
   $delta1$1 = $48;
  } else {
   $delta1$1 = $delta1$0;
  }
  $50 = (($$1) + ($38))|0;
  $51 = ($50|0)<($end_time|0);
  if ($51) {
   $$1 = $50;$delta1$0 = $delta1$1;$phase$0 = $45;
  } else {
   $$lcssa = $45;$$lcssa4 = $50;$delta1$1$lcssa = $delta1$1;
   break;
  }
 }
 HEAP32[$15>>2] = $$lcssa;
 $52 = $delta1$1$lcssa >> 1;
 HEAP32[$23>>2] = $52;
 $$2 = $$lcssa4;
 $53 = (($$2) - ($end_time))|0;
 HEAP32[$31>>2] = $53;
 return;
}
function __ZN8Gb_Noise3runEiii($this,$time,$end_time,$playing) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 $playing = $playing|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $bits$0 = 0, $bits$1 = 0, $bits$1$lcssa = 0, $delta1$0 = 0, $delta1$1 = 0, $delta1$1$lcssa = 0, $end_time$ = 0, $resampled_time$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & $playing;
 $3 = (($this) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 & 8;
 $9 = (13 - ($8))|0;
 $10 = (($this) + 56|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = 2 << $9;
 $13 = $12 & $11;
 $14 = ($13|0)==(0);
 $15 = (0 - ($2))|0;
 $$ = $14 ? $2 : $15;
 $16 = (($this) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($$|0)==($17|0);
 if (!($18)) {
  $19 = (($$) - ($17))|0;
  HEAP32[$16>>2] = $$;
  $20 = (($this) + 52|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($this) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($21,$time,$19,$23);
 }
 $24 = (($this) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($time))|0;
 $27 = ($playing|0)==(0);
 $end_time$ = $27 ? $end_time : $26;
 $28 = ($end_time$|0)<($end_time|0);
 if (!($28)) {
  $$2 = $end_time$;
  $58 = (($$2) - ($end_time))|0;
  HEAP32[$24>>2] = $58;
  return;
 }
 $29 = HEAP32[$3>>2]|0;
 $30 = (($29) + 3|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 & 7;
 $34 = (37704 + ($33)|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $32 >>> 4;
 $38 = $36 << $37;
 $39 = (($this) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (__ZNK11Blip_Buffer18resampled_durationEi($40,$38)|0);
 $42 = (__ZNK11Blip_Buffer14resampled_timeEi($40,$end_time$)|0);
 $43 = HEAP32[$10>>2]|0;
 $44 = $$ << 1;
 $45 = (($this) + 52|0);
 $$1 = $end_time$;$bits$0 = $43;$delta1$0 = $44;$resampled_time$0 = $42;
 while(1) {
  $46 = $bits$0 >>> $9;
  $47 = (($46) + 1)|0;
  $48 = (($$1) + ($38))|0;
  $49 = $bits$0 << 1;
  $50 = $47 & 2;
  $51 = ($50|0)==(0);
  if ($51) {
   $bits$1 = $49;$delta1$1 = $delta1$0;
  } else {
   $52 = (0 - ($delta1$0))|0;
   $53 = $49 | 1;
   $54 = HEAP32[$45>>2]|0;
   __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($54,$resampled_time$0,$52,$40);
   $bits$1 = $53;$delta1$1 = $52;
  }
  $55 = (($resampled_time$0) + ($41))|0;
  $56 = ($48|0)<($end_time|0);
  if ($56) {
   $$1 = $48;$bits$0 = $bits$1;$delta1$0 = $delta1$1;$resampled_time$0 = $55;
  } else {
   $$lcssa = $48;$bits$1$lcssa = $bits$1;$delta1$1$lcssa = $delta1$1;
   break;
  }
 }
 HEAP32[$10>>2] = $bits$1$lcssa;
 $57 = $delta1$1$lcssa >> 1;
 HEAP32[$16>>2] = $57;
 $$2 = $$lcssa;
 $58 = (($$2) - ($end_time))|0;
 HEAP32[$24>>2] = $58;
 return;
}
function __ZN7Gb_Wave3runEiii($this,$time,$end_time,$playing) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 $playing = $playing|0;
 var $$01 = 0, $$1 = 0, $$2 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $amp$0 = 0, $end_time$ = 0, $wave_pos$0 = 0, $wave_pos$0$in = 0, $wave_pos$0$in$in = 0, $wave_pos$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 7)|0;
 $3 = $2 & 7;
 $4 = (($this) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this) + ($5)|0) + 56|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 >>> $3;
 $10 = $9 & $playing;
 $11 = $10 << 1;
 $12 = (__ZNK6Gb_Osc9frequencyEv($this)|0);
 $13 = (($12) + -1)|0;
 $14 = ($13>>>0)>(2044);
 if ($14) {
  $15 = 30 >>> $3;
  $16 = $15 & $playing;
  $$01 = 0;$amp$0 = $16;
 } else {
  $$01 = $playing;$amp$0 = $11;
 }
 $17 = (($this) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($amp$0|0)==($18|0);
 if (!($19)) {
  $20 = (($amp$0) - ($18))|0;
  HEAP32[$17>>2] = $amp$0;
  $21 = (($this) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($this) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($22,$time,$20,$24);
 }
 $25 = (($this) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($time))|0;
 $28 = ($$01|0)==(0);
 $end_time$ = $28 ? $end_time : $27;
 $29 = ($end_time$|0)<($end_time|0);
 if (!($29)) {
  $$2 = $end_time$;
  $47 = (($$2) - ($end_time))|0;
  HEAP32[$25>>2] = $47;
  return;
 }
 $30 = (($this) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (2048 - ($12))|0;
 $33 = $32 << 1;
 $34 = HEAP32[$4>>2]|0;
 $35 = (($this) + 48|0);
 $$1 = $end_time$;$wave_pos$0$in$in = $34;
 while(1) {
  $wave_pos$0$in = (($wave_pos$0$in$in) + 1)|0;
  $wave_pos$0 = $wave_pos$0$in & 31;
  $36 = ((($this) + ($wave_pos$0)|0) + 56|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $38 >>> $3;
  $40 = $39 << 1;
  $41 = HEAP32[$17>>2]|0;
  $42 = ($40|0)==($41|0);
  if (!($42)) {
   $43 = (($40) - ($41))|0;
   HEAP32[$17>>2] = $40;
   $44 = HEAP32[$35>>2]|0;
   __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($44,$$1,$43,$31);
  }
  $45 = (($$1) + ($33))|0;
  $46 = ($45|0)<($end_time|0);
  if ($46) {
   $$1 = $45;$wave_pos$0$in$in = $wave_pos$0;
  } else {
   $$lcssa = $45;$wave_pos$0$lcssa = $wave_pos$0;
   break;
  }
 }
 HEAP32[$4>>2] = $wave_pos$0$lcssa;
 $$2 = $$lcssa;
 $47 = (($$2) - ($end_time))|0;
 HEAP32[$25>>2] = $47;
 return;
}
function __ZN6Gb_Apu9write_oscEiii($this,$index,$reg,$data) {
 $this = $this|0;
 $index = $index|0;
 $reg = $reg|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $sq$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($index, -5)|0;
 $1 = (($0) + ($reg))|0;
 $2 = (($this) + 112|0);
 if ((($index|0) == 3)) {
  $18 = (($this) + 268|0);
  $19 = (__ZN6Gb_Env14write_registerEii($18,$1,$data)|0);
  if (!($19)) {
   return;
  }
  $20 = (($this) + 324|0);
  HEAP32[$20>>2] = 32767;
  return;
 } else if ((($index|0) == 1)) {
  $sq$0 = $2;
 } else if ((($index|0) == 2)) {
  $17 = (($this) + 180|0);
  __ZN7Gb_Wave14write_registerEii($17,$1,$data);
  return;
 } else if ((($index|0) == 0)) {
  $3 = (($this) + 44|0);
  $sq$0 = $3;
 } else {
  return;
 }
 $4 = (__ZN6Gb_Env14write_registerEii($sq$0,$1,$data)|0);
 $5 = ($index|0)==(0);
 $or$cond = $4 & $5;
 if (!($or$cond)) {
  return;
 }
 $6 = (($this) + 44|0);
 $7 = (__ZNK6Gb_Osc9frequencyEv($6)|0);
 $8 = (($this) + 104|0);
 HEAP32[$8>>2] = $7;
 $9 = (($this) + 328|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & 112;
 $13 = ($12|0)==(0);
 $14 = $11 & 7;
 $15 = ($14|0)==(0);
 $or$cond3 = $13 | $15;
 if ($or$cond3) {
  return;
 }
 $16 = (($this) + 100|0);
 HEAP32[$16>>2] = 1;
 __ZN9Gb_Square11clock_sweepEv($6);
 return;
}
function __ZNK6Gb_Osc9frequencyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 8;
 $6 = $5 & 1792;
 $7 = (($1) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $6 | $9;
 return ($10|0);
}
function __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($this,$t,$delta,$buf) {
 $this = $this|0;
 $t = $t|0;
 $delta = $delta|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$buf>>2]|0;
 $1 = Math_imul($0, $t)|0;
 $2 = (($buf) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3))|0;
 __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$4,$delta,$buf);
 return;
}
function __ZNK11Blip_Buffer18resampled_durationEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = Math_imul($0, $t)|0;
 return ($1|0);
}
function __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($this,$t,$delta,$buf) {
 $this = $this|0;
 $t = $t|0;
 $delta = $delta|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$buf>>2]|0;
 $1 = Math_imul($0, $t)|0;
 $2 = (($buf) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3))|0;
 __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$4,$delta,$buf);
 return;
}
function __ZN7Gb_Wave14write_registerEii($this,$reg,$data) {
 $this = $this|0;
 $reg = $reg|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($reg|0) == 2)) {
  $10 = $data >>> 5;
  $11 = $10 & 3;
  $12 = (($this) + 36|0);
  HEAP32[$12>>2] = $11;
  return;
 } else if ((($reg|0) == 0)) {
  $0 = $data & 128;
  $1 = ($0|0)==(0);
  if (!($1)) {
   return;
  }
  $2 = (($this) + 44|0);
  HEAP32[$2>>2] = 0;
  return;
 } else if ((($reg|0) == 4)) {
  $13 = $data & 128;
  $14 = (($this) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $13 & $17;
  $19 = ($18|0)==(0);
  if ($19) {
   return;
  }
  $20 = (($this) + 52|0);
  HEAP32[$20>>2] = 0;
  $21 = (($this) + 44|0);
  HEAP32[$21>>2] = 1;
  $22 = (($this) + 40|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0);
  if (!($24)) {
   return;
  }
  HEAP32[$22>>2] = 256;
  return;
 } else if ((($reg|0) == 1)) {
  $3 = (($this) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (256 - ($7))|0;
  $9 = (($this) + 40|0);
  HEAP32[$9>>2] = $8;
  return;
 } else {
  return;
 }
}
function __ZN7Gbs_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 272|0);
 __ZN6Gb_CpuC2Ev($0);
 __ZN11Classic_EmuC2Ev($this);
 HEAP32[$this>>2] = ((37712 + 8|0));
 $1 = (($this) + 336|0);
 __ZN8Rom_DataILi16384EEC2Ev($1);
 $2 = (($this) + 25072|0);
 __ZN6Gb_ApuC2Ev($2);
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,37872);
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,37800);
 __ZN11Classic_Emu15set_voice_typesEPKi($this,37824);
 __ZN9Music_Emu21set_silence_lookaheadEi($this,6);
 __ZN9Music_Emu23set_max_initial_silenceEi($this,21);
 __ZN9Music_Emu8set_gainEd($this,1.2);
 __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($this,37840);
 return;
}
function __ZN7Gbs_EmuD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((37712 + 8|0));
 $0 = (($this) + 336|0);
 __ZN9Rom_Data_D2Ev($0);
 __ZN11Classic_EmuD2Ev($this);
 return;
}
function __ZN7Gbs_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Gbs_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN7Gbs_Emu6unloadEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 336|0);
 __ZN8Rom_DataILi16384EE5clearEv($0);
 __ZN9Music_Emu6unloadEv($this);
 return;
}
function __ZNK7Gbs_Emu11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 372|0);
 __ZL15copy_gbs_fieldsRKN7Gbs_Emu8header_tEP12track_info_t($1,$out);
 return (0|0);
}
function __ZN7Gbs_Emu5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 336|0);
 $1 = (($this) + 372|0);
 $2 = (__ZN8Rom_DataILi16384EE4loadER11Data_ReaderiPvi($0,$in,112,$1,0)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = (($this) + 376|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 __ZN8Gme_File15set_track_countEi($this,$6);
 $7 = (__ZL16check_gbs_headerPKv($1)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$0 = $7;
  return ($$0|0);
 }
 $9 = (($this) + 375|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(1);
 if (!($11)) {
  __ZN8Gme_File11set_warningEPKc($this,44232);
 }
 $12 = (($this) + 387|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 & 120;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  __ZN8Gme_File11set_warningEPKc($this,37896);
 }
 $16 = (($this) + 378|0);
 $17 = (__Z8get_le16PKv($16)|0);
 $18 = (($this) + 379|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = (($this) + 381|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21 | $19;
 $23 = (($this) + 383|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $22 | $24;
 $26 = ($25<<24>>24)<(0);
 $27 = ($17>>>0)<(1024);
 $or$cond = $26 | $27;
 if ($or$cond) {
  __ZN8Gme_File11set_warningEPKc($this,37920);
 }
 __ZN9Music_Emu15set_voice_countEi($this,4);
 $28 = (($this) + 25072|0);
 $29 = (+__ZNK9Music_Emu4gainEv($this));
 __ZN6Gb_Apu6volumeEd($28,$29);
 $30 = (__ZN11Classic_Emu12setup_bufferEl($this,4194304)|0);
 $$0 = $30;
 return ($$0|0);
}
function __ZN7Gbs_Emu9update_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 25072|0);
 __ZN6Gb_Apu9treble_eqERK9blip_eq_t($0,$eq);
 return;
}
function __ZN7Gbs_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$c,$l,$r) {
 $this = $this|0;
 $i = $i|0;
 $c = $c|0;
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 25072|0);
 __ZN6Gb_Apu10osc_outputEiP11Blip_BufferS1_S1_($0,$i,$c,$l,$r);
 return;
}
function __ZN7Gbs_Emu8set_bankEi($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 336|0);
 $1 = $n << 14;
 $2 = (__ZNK8Rom_DataILi16384EE9mask_addrEi($0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (__ZNK8Rom_DataILi16384EE4sizeEv($0)|0);
  $5 = ($4|0)>(16384);
  if ($5) {
   return;
  }
 }
 $6 = (($this) + 272|0);
 $7 = (__ZN8Rom_DataILi16384EE7at_addrEi($0,$2)|0);
 __ZN6Gb_Cpu8map_codeEjjPv($6,16384,16384,$7);
 return;
}
function __ZN7Gbs_Emu12update_timerEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 387|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  $20 = (($this) + 364|0);
  HEAP32[$20>>2] = 70224;
 } else {
  $5 = (($this) + 24811|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $7 & 3;
  $9 = (37952 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $2 >>> 7;
  $13 = (($11) - ($12))|0;
  $14 = (($this) + 24810|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (256 - ($16))|0;
  $18 = $17 << $13;
  $19 = (($this) + 364|0);
  HEAP32[$19>>2] = $18;
 }
 $21 = (+__ZNK9Music_Emu5tempoEv($this));
 $22 = $21 != 1.0;
 if (!($22)) {
  return;
 }
 $23 = (($this) + 364|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (+($24|0));
 $26 = $25 / $21;
 $27 = (~~(($26)));
 HEAP32[$23>>2] = $27;
 return;
}
function __ZN7Gbs_Emu7cpu_jsrEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 272|0);
 $1 = (($0) + 8|0);
 HEAP32[$1>>2] = $addr;
 $2 = (($0) + 12|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = (($3) + -1)<<16>>16;
 HEAP16[$2>>1] = $4;
 $5 = $4&65535;
 __ZN7Gbs_Emu9cpu_writeEji($this,$5,240);
 $6 = HEAP16[$2>>1]|0;
 $7 = (($6) + -1)<<16>>16;
 HEAP16[$2>>1] = $7;
 $8 = $7&65535;
 __ZN7Gbs_Emu9cpu_writeEji($this,$8,13);
 return;
}
function __ZN7Gbs_Emu10set_tempo_Ed($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 25072|0);
 __ZN6Gb_Apu9set_tempoEd($0,$t);
 __ZN7Gbs_Emu12update_timerEv($this);
 return;
}
function __ZN7Gbs_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN11Classic_Emu12start_track_Ei($this,$track)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (($this) + 484|0);
 _memset(($2|0),0,16384)|0;
 $3 = (($this) + 16868|0);
 _memset(($3|0),-1,8064)|0;
 $4 = (($this) + 24932|0);
 _memset(($4|0),0,136)|0;
 $5 = (($this) + 24804|0);
 HEAP8[$5>>0] = 0;
 $6 = (($this) + 25072|0);
 __ZN6Gb_Apu5resetEv($6);
 $i$01 = 0;
 while(1) {
  $7 = (($i$01) + 65296)|0;
  $8 = (37960 + ($i$01)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  __ZN6Gb_Apu14write_registerEiji($6,0,$7,$10);
  $11 = (($i$01) + 1)|0;
  $exitcond = ($11|0)==(48);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $11;
  }
 }
 $12 = (($this) + 272|0);
 $13 = (($this) + 336|0);
 $14 = (__ZN8Rom_DataILi16384EE8unmappedEv($13)|0);
 __ZN6Gb_Cpu5resetEPv($12,$14);
 $15 = (($this) + 378|0);
 $16 = (__Z8get_le16PKv($15)|0);
 $17 = (($12) + 16|0);
 HEAP32[$17>>2] = $16;
 __ZN8Rom_DataILi16384EE8set_addrEl($13,$16);
 __ZN6Gb_Cpu8map_codeEjjPv($12,40960,24576,$2);
 $18 = (__ZN8Rom_DataILi16384EE7at_addrEi($13,0)|0);
 __ZN6Gb_Cpu8map_codeEjjPv($12,0,16384,$18);
 $19 = (__ZNK8Rom_DataILi16384EE4sizeEv($13)|0);
 $20 = ($19|0)>(16384);
 $21 = $20&1;
 __ZN7Gbs_Emu8set_bankEi($this,$21);
 $22 = (($this) + 386|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = (($this) + 24810|0);
 HEAP8[$24>>0] = $23;
 $25 = (($this) + 387|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = (($this) + 24811|0);
 HEAP8[$27>>0] = $26;
 __ZN7Gbs_Emu12update_timerEv($this);
 $28 = (($this) + 364|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($this) + 368|0);
 HEAP32[$30>>2] = $29;
 $31 = $track&255;
 $32 = (($12) + 6|0);
 HEAP8[$32>>0] = $31;
 $33 = (($12) + 8|0);
 HEAP32[$33>>2] = 61453;
 $34 = (($this) + 384|0);
 $35 = (__Z8get_le16PKv($34)|0);
 $36 = $35&65535;
 $37 = (($12) + 12|0);
 HEAP16[$37>>1] = $36;
 $38 = (($this) + 360|0);
 HEAP32[$38>>2] = 0;
 $39 = (($this) + 380|0);
 $40 = (__Z8get_le16PKv($39)|0);
 __ZN7Gbs_Emu7cpu_jsrEj($this,$40);
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Gbs_Emu10run_clocksERii($this,$duration,$0) {
 $this = $this|0;
 $duration = $duration|0;
 $0 = $0|0;
 var $$ = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 360|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[$duration>>2]|0;
 $3 = ($2|0)>(0);
 L1: do {
  if ($3) {
   $4 = (($this) + 272|0);
   $5 = (($4) + 8|0);
   $6 = (($this) + 368|0);
   $7 = (($this) + 364|0);
   $8 = (($this) + 382|0);
   $10 = $2;$11 = 0;
   L3: while(1) {
    $9 = (($10) - ($11))|0;
    HEAP32[$1>>2] = $10;
    $12 = (__ZN6Gb_Cpu3runEi($4,$9)|0);
    $13 = (__ZNK6Gb_Cpu6remainEv($4)|0);
    $14 = HEAP32[$1>>2]|0;
    $15 = (($14) - ($13))|0;
    HEAP32[$1>>2] = $15;
    do {
     if ($12) {
      $16 = HEAP32[$5>>2]|0;
      $17 = ($16|0)==(61453);
      if (!($17)) {
       $29 = ($16|0)>(65535);
       if ($29) {
        $30 = $16 & 65535;
        HEAP32[$5>>2] = $30;
        break;
       } else {
        __ZN8Gme_File11set_warningEPKc($this,46680);
        $31 = HEAP32[$5>>2]|0;
        $32 = (($31) + 1)|0;
        $33 = $32 & 65535;
        HEAP32[$5>>2] = $33;
        $34 = HEAP32[$1>>2]|0;
        $35 = (($34) + 6)|0;
        HEAP32[$1>>2] = $35;
        break;
       }
      }
      $18 = HEAP32[$6>>2]|0;
      $19 = HEAP32[$duration>>2]|0;
      $20 = ($18|0)>($19|0);
      if ($20) {
       $$lcssa = $19;
       break L3;
      }
      $21 = ($15|0)<($18|0);
      if ($21) {
       HEAP32[$1>>2] = $18;
      }
      $22 = HEAP32[$7>>2]|0;
      $23 = HEAP32[$6>>2]|0;
      $24 = (($23) + ($22))|0;
      HEAP32[$6>>2] = $24;
      $25 = (__Z8get_le16PKv($8)|0);
      __ZN7Gbs_Emu7cpu_jsrEj($this,$25);
     }
    } while(0);
    $26 = HEAP32[$1>>2]|0;
    $27 = HEAP32[$duration>>2]|0;
    $28 = ($27|0)>($26|0);
    if ($28) {
     $10 = $27;$11 = $26;
    } else {
     break L1;
    }
   }
   HEAP32[$1>>2] = $$lcssa;
  }
 } while(0);
 $36 = HEAP32[$1>>2]|0;
 HEAP32[$duration>>2] = $36;
 $37 = HEAP32[$1>>2]|0;
 $38 = (($this) + 368|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) - ($37))|0;
 $41 = ($40|0)<(0);
 $$ = $41 ? 0 : $40;
 HEAP32[$38>>2] = $$;
 $42 = (($this) + 25072|0);
 $43 = HEAP32[$1>>2]|0;
 __ZN6Gb_Apu9end_frameEi($42,$43);
 return (0|0);
}
function __ZN6Gb_CpuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 24|0);
 $2 = (($this) + 20|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN8Rom_DataILi16384EEC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Rom_Data_C2Ev($this);
 return;
}
function __ZN9Music_Emu23set_max_initial_silenceEi($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 160|0);
 HEAP32[$0>>2] = $n;
 return;
}
function __ZN9Music_Emu8set_gainEd($this,$g) {
 $this = $this|0;
 $g = +$g;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (($this) + 184|0);
  HEAPF64[$2>>3] = $g;
  return;
 } else {
  ___assert_fail((41824|0),(38184|0),207,(38232|0));
  // unreachable;
 }
}
function __ZN9Rom_Data_D2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13blargg_vectorIhED2Ev($this);
 return;
}
function __ZN8Rom_DataILi16384EE5clearEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13blargg_vectorIhE5clearEv($this);
 return;
}
function __ZL15copy_gbs_fieldsRKN7Gbs_Emu8header_tEP12track_info_t($h,$out) {
 $h = $h|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($out) + 272|0);
 $1 = (($h) + 16|0);
 __ZN8Gme_File11copy_field_EPcPKci($0,$1,32);
 $2 = (($out) + 784|0);
 $3 = (($h) + 48|0);
 __ZN8Gme_File11copy_field_EPcPKci($2,$3,32);
 $4 = (($out) + 1040|0);
 $5 = (($h) + 80|0);
 __ZN8Gme_File11copy_field_EPcPKci($4,$5,32);
 return;
}
function __ZN8Rom_DataILi16384EE4loadER11Data_ReaderiPvi($this,$in,$header_size,$header_out,$fill) {
 $this = $this|0;
 $in = $in|0;
 $header_size = $header_size|0;
 $header_out = $header_out|0;
 $fill = $fill|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($this,$in,$header_size,$header_out,$fill,16392)|0);
 return ($0|0);
}
function __ZL16check_gbs_headerPKv($header) {
 $header = $header|0;
 var $$ = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($header,50040,3)|0);
 $1 = ($0|0)==(0);
 $$ = $1 ? 0 : 38248;
 return ($$|0);
}
function __ZNK8Rom_DataILi16384EE9mask_addrEi($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & $addr;
 return ($2|0);
}
function __ZNK8Rom_DataILi16384EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN8Rom_DataILi16384EE7at_addrEi($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK8Rom_DataILi16384EE9mask_addrEi($this,$addr)|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) - ($2))|0;
 $4 = (__ZNK13blargg_vectorIhE4sizeEv($this)|0);
 $5 = (($4) + -16392)|0;
 $6 = ($3>>>0)>($5>>>0);
 $$ = $6 ? 0 : $3;
 $7 = (__ZNK13blargg_vectorIhEixEj($this,$$)|0);
 return ($7|0);
}
function __ZN8Rom_DataILi16384EE8unmappedEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK13blargg_vectorIhE5beginEv($this)|0);
 return ($0|0);
}
function __ZN8Rom_DataILi16384EE8set_addrEl($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Rom_Data_9set_addr_Eli($this,$addr,16384);
 return;
}
function __ZL11new_gbs_emuv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(26824)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN7Gbs_EmuC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZL12new_gbs_filev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(368)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN8Gbs_FileC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZN8Gbs_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN8Gbs_File5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 252|0);
 $4 = (FUNCTION_TABLE_iiii[$2 & 63]($in,$3,112)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $8 = (($this) + 256|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  __ZN8Gme_File15set_track_countEi($this,$10);
  $11 = (__ZL16check_gbs_headerPKv($3)|0);
  $$0 = $11;
  return ($$0|0);
 } else {
  $6 = ($4|0)==(36224|0);
  $7 = $6 ? 38248 : $4;
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZNK8Gbs_File11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 252|0);
 __ZL15copy_gbs_fieldsRKN7Gbs_Emu8header_tEP12track_info_t($1,$out);
 return (0|0);
}
function __ZN9Rom_Data_C2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13blargg_vectorIhEC2Ev($this);
 return;
}
function __ZNK9Music_Emu11sample_rateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 192|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN13blargg_vectorIhED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 _free($0);
 return;
}
function __ZNK13blargg_vectorIhE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN8Gbs_FileC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Gme_Info_C2Ev($this);
 HEAP32[$this>>2] = ((38072 + 8|0));
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,37872);
 return;
}
function __ZN13blargg_vectorIhEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN8Gme_File14clear_playlistEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZN12M3u_Playlist5clearEv($0);
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 127]($this);
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = $5;
 return;
}
function __ZN8Gme_File6unloadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8Gme_File14clear_playlistEv($this);
 $0 = (($this) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 132|0);
 __ZN13blargg_vectorIhE5clearEv($2);
 return;
}
function __ZN8Gme_FileC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((38288 + 8|0));
 $0 = (($this) + 28|0);
 __ZN12M3u_PlaylistC2Ev($0);
 $1 = (($this) + 132|0);
 __ZN13blargg_vectorIhEC2Ev($1);
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 127]($this);
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN8Gme_FileD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((38288 + 8|0));
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vi[$1 & 127]($4);
 }
 $5 = (($this) + 132|0);
 __ZN13blargg_vectorIhED2Ev($5);
 $6 = (($this) + 28|0);
 __ZN12M3u_PlaylistD2Ev($6);
 return;
}
function __ZN8Gme_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8Gme_FileD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN8Gme_File9load_mem_EPKhl($this,$data,$size) {
 $this = $this|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $in = sp;
 $0 = (($this) + 132|0);
 $1 = (__ZNK13blargg_vectorIhE5beginEv($0)|0);
 $2 = ($1|0)==($data|0);
 if ($2) {
  ___assert_fail((38336|0),(38368|0),55,(38416|0));
  // unreachable;
 } else {
  __ZN15Mem_File_ReaderC2EPKvl($in,$data,$size);
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iii[$5 & 63]($this,$in)|0);
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function __ZN8Gme_File5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 132|0);
 $1 = HEAP32[$in>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 15]($in)|0);
 $5 = (__ZN13blargg_vectorIhE6resizeEj($0,$4)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $$0 = $5;
  return ($$0|0);
 }
 $7 = HEAP32[$in>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNK13blargg_vectorIhE5beginEv($0)|0);
 $11 = (__ZNK13blargg_vectorIhE4sizeEv($0)|0);
 $12 = (FUNCTION_TABLE_iiii[$9 & 63]($in,$10,$11)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $$0 = $12;
  return ($$0|0);
 }
 $14 = HEAP32[$this>>2]|0;
 $15 = (($14) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZNK13blargg_vectorIhE5beginEv($0)|0);
 $18 = (__ZNK13blargg_vectorIhE4sizeEv($0)|0);
 $19 = (FUNCTION_TABLE_iiii[$16 & 63]($this,$17,$18)|0);
 $$0 = $19;
 return ($$0|0);
}
function __ZN8Gme_File8pre_loadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$2 & 127]($this);
 return;
}
function __ZN8Gme_File10post_load_Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN8Gme_File9post_loadEPKc($this,$err) {
 $this = $this|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK8Gme_File11track_countEv($this)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (__ZNK8Gme_File4typeEv($this)|0);
  $3 = (($2) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  __ZN8Gme_File15set_track_countEi($this,$4);
 }
 $5 = ($err|0)==(0|0);
 $6 = HEAP32[$this>>2]|0;
 if ($5) {
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 127]($this);
  return ($err|0);
 } else {
  $9 = (($6) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 127]($this);
  return ($err|0);
 }
 return (0)|0;
}
function __ZN8Gme_File4loadER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$2 & 127]($this);
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 63]($this,$in)|0);
 $7 = (__ZN8Gme_File9post_loadEPKc($this,$6)|0);
 return ($7|0);
}
function __ZN8Gme_File11copy_field_EPcPKci($out,$in,$in_size) {
 $out = $out|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var $$$0 = 0, $$0$lcssa = 0, $$02$lcssa = 0, $$027 = 0, $$08 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len$04 = 0, $len$1 = 0, $len$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($in|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP8[$in>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  return;
 }
 $3 = ($in_size|0)==(0);
 L7: do {
  if ($3) {
   $$0$lcssa = 0;$$02$lcssa = $in;
  } else {
   $$027 = $in;$$08 = $in_size;
   while(1) {
    $4 = HEAP8[$$027>>0]|0;
    $5 = $4 << 24 >> 24;
    $6 = (($5) + -1)|0;
    $7 = ($6>>>0)<(32);
    if (!($7)) {
     $$0$lcssa = $$08;$$02$lcssa = $$027;
     break L7;
    }
    $8 = (($$027) + 1|0);
    $9 = (($$08) + -1)|0;
    $10 = ($9|0)==(0);
    if ($10) {
     $$0$lcssa = 0;$$02$lcssa = $8;
     break;
    } else {
     $$027 = $8;$$08 = $9;
    }
   }
  }
 } while(0);
 $11 = ($$0$lcssa|0)>(255);
 $$$0 = $11 ? 255 : $$0$lcssa;
 $12 = ($$$0|0)>(0);
 L12: do {
  if ($12) {
   $len$04 = 0;
   while(1) {
    $15 = (($$02$lcssa) + ($len$04)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    $14 = (($len$04) + 1)|0;
    if ($17) {
     $len$1 = $len$04;
     break L12;
    }
    $13 = ($14|0)<($$$0|0);
    if ($13) {
     $len$04 = $14;
    } else {
     $len$1 = $14;
     break;
    }
   }
  } else {
   $len$1 = 0;
  }
 } while(0);
 while(1) {
  $18 = ($len$1|0)==(0);
  if ($18) {
   $len$1$lcssa = $len$1;
   break;
  }
  $19 = (($len$1) + -1)|0;
  $20 = (($$02$lcssa) + ($19)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21&255)<(33);
  if ($22) {
   $len$1 = $19;
  } else {
   $len$1$lcssa = $len$1;
   break;
  }
 }
 $23 = (($out) + ($len$1$lcssa)|0);
 HEAP8[$23>>0] = 0;
 _memcpy(($out|0),($$02$lcssa|0),($len$1$lcssa|0))|0;
 $24 = (_strcmp($out,38432)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  $26 = (_strcmp($out,38440)|0);
  $27 = ($26|0)==(0);
  if (!($27)) {
   $28 = (_strcmp($out,38448)|0);
   $29 = ($28|0)==(0);
   if (!($29)) {
    return;
   }
  }
 }
 HEAP8[$out>>0] = 0;
 return;
}
function __ZN8Gme_File11copy_field_EPcPKc($out,$in) {
 $out = $out|0;
 $in = $in|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8Gme_File11copy_field_EPcPKci($out,$in,255);
 return;
}
function __ZNK8Gme_File12remap_track_EPi($this,$track_io) {
 $this = $this|0;
 $track_io = $track_io|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$track_io>>2]|0;
 $1 = (__ZNK8Gme_File11track_countEv($this)|0);
 $2 = ($0>>>0)<($1>>>0);
 if (!($2)) {
  $$0 = 38456;
  return ($$0|0);
 }
 $3 = (($this) + 28|0);
 $4 = (__ZNK12M3u_Playlist4sizeEv($3)|0);
 $5 = ($0>>>0)<($4>>>0);
 if ($5) {
  $6 = (__ZNK12M3u_PlaylistixEi($3,$0)|0);
  HEAP32[$track_io>>2] = 0;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)>(-1);
  if ($9) {
   HEAP32[$track_io>>2] = $8;
   $10 = (($this) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 2;
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = (($6) + 12|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = (($8) - ($18))|0;
    HEAP32[$track_io>>2] = $19;
   }
  }
  $20 = HEAP32[$track_io>>2]|0;
  $21 = (($this) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($20|0)<($22|0);
  if (!($23)) {
   $$0 = 38472;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function __ZNK8Gme_File10track_infoEP12track_info_ti($this,$out,$track) {
 $this = $this|0;
 $out = $out|0;
 $track = $track|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remapped = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $remapped = sp;
 $0 = (__ZNK8Gme_File11track_countEv($this)|0);
 HEAP32[$out>>2] = $0;
 $1 = (($out) + 4|0);
 HEAP32[$1>>2] = -1;
 $2 = (($out) + 12|0);
 HEAP32[$2>>2] = -1;
 $3 = (($out) + 8|0);
 HEAP32[$3>>2] = -1;
 $4 = (($out) + 528|0);
 HEAP8[$4>>0] = 0;
 $5 = (($out) + 272|0);
 HEAP8[$5>>0] = 0;
 $6 = (($out) + 784|0);
 HEAP8[$6>>0] = 0;
 $7 = (($out) + 1040|0);
 HEAP8[$7>>0] = 0;
 $8 = (($out) + 1296|0);
 HEAP8[$8>>0] = 0;
 $9 = (($out) + 1552|0);
 HEAP8[$9>>0] = 0;
 $10 = (($out) + 16|0);
 HEAP8[$10>>0] = 0;
 $11 = (__ZNK8Gme_File4typeEv($this)|0);
 $12 = HEAP32[$11>>2]|0;
 __ZN8Gme_File11copy_field_EPcPKc($10,$12);
 HEAP32[$remapped>>2] = $track;
 $13 = (__ZNK8Gme_File12remap_track_EPi($this,$remapped)|0);
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$this>>2]|0;
 $16 = (($15) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$remapped>>2]|0;
 $19 = (FUNCTION_TABLE_iiii[$17 & 63]($this,$out,$18)|0);
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($this) + 28|0);
 $22 = (__ZNK12M3u_Playlist4sizeEv($21)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = (__ZNK12M3u_Playlist4infoEv($21)|0);
 $25 = HEAP32[$24>>2]|0;
 __ZN8Gme_File11copy_field_EPcPKc($5,$25);
 $26 = (($24) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 __ZN8Gme_File11copy_field_EPcPKc($6,$27);
 $28 = (($24) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 __ZN8Gme_File11copy_field_EPcPKc($6,$29);
 $30 = (($24) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 __ZN8Gme_File11copy_field_EPcPKc($9,$31);
 $32 = (__ZNK12M3u_PlaylistixEi($21,$track)|0);
 $33 = (($32) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 __ZN8Gme_File11copy_field_EPcPKc($4,$34);
 $35 = (($32) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)>(-1);
 if ($37) {
  $38 = ($36*1000)|0;
  HEAP32[$1>>2] = $38;
 }
 $39 = (($32) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)>(-1);
 if ($41) {
  $42 = ($40*1000)|0;
  HEAP32[$3>>2] = $42;
 }
 $43 = (($32) + 28|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)>(-1);
 if (!($45)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = ($44*1000)|0;
 HEAP32[$2>>2] = $46;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN12M3u_Playlist5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 __ZN13blargg_vectorIN12M3u_Playlist7entry_tEE5clearEv($this);
 $1 = (($this) + 8|0);
 __ZN13blargg_vectorIcE5clearEv($1);
 return;
}
function __ZN12M3u_PlaylistC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13blargg_vectorIN12M3u_Playlist7entry_tEEC2Ev($this);
 $0 = (($this) + 8|0);
 __ZN13blargg_vectorIcEC2Ev($0);
 return;
}
function __ZN12M3u_PlaylistD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZN13blargg_vectorIcED2Ev($0);
 __ZN13blargg_vectorIN12M3u_Playlist7entry_tEED2Ev($this);
 return;
}
function __ZNK8Gme_File11track_countEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK8Gme_File4typeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK12M3u_Playlist4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK13blargg_vectorIN12M3u_Playlist7entry_tEE4sizeEv($this)|0);
 return ($0|0);
}
function __ZNK12M3u_PlaylistixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK13blargg_vectorIN12M3u_Playlist7entry_tEEixEj($this,$i)|0);
 return ($0|0);
}
function __ZNK12M3u_Playlist4infoEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 return ($0|0);
}
function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 HEAP32[$this>>2] = 0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = 0;
 _free($0);
 return;
}
function __ZN13blargg_vectorIcE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 HEAP32[$this>>2] = 0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = 0;
 _free($0);
 return;
}
function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN13blargg_vectorIcEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN13blargg_vectorIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 _free($0);
 return;
}
function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 _free($0);
 return;
}
function __ZNK13blargg_vectorIN12M3u_Playlist7entry_tEE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK13blargg_vectorIN12M3u_Playlist7entry_tEEixEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 if ($2) {
  ___assert_fail((44880|0),(44896|0),51,(44944|0));
  // unreachable;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + (($n*40)|0)|0);
  return ($4|0);
 }
 return (0)|0;
}
function __ZN7Gym_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuC2Ev($this);
 $0 = (($this) + 256|0);
 __ZN14Dual_ResamplerC2Ev($0);
 HEAP32[$this>>2] = ((38528 + 8|0));
 $1 = (($this) + 256|0);
 HEAP32[$1>>2] = ((38528 + 88|0));
 $2 = (($this) + 1584|0);
 __ZN11Blip_BufferC2Ev($2);
 $3 = (($this) + 1628|0);
 __ZN10Ym2612_EmuC2Ev($3);
 $4 = (($this) + 1632|0);
 __ZN10Blip_SynthILi8ELi1EEC2Ev($4);
 $5 = (($this) + 2192|0);
 __ZN7Sms_ApuC2Ev($5);
 $6 = (($this) + 1112|0);
 HEAP32[$6>>2] = 0;
 $7 = (($this) + 1120|0);
 HEAP32[$7>>2] = 0;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,38680);
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,38632);
 __ZN9Music_Emu21set_silence_lookaheadEi($this,1);
 return;
}
function __ZN7Gym_EmuD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((38528 + 8|0));
 $0 = (($this) + 256|0);
 HEAP32[$0>>2] = ((38528 + 88|0));
 $1 = (($this) + 2192|0);
 __ZN7Sms_ApuD2Ev($1);
 $2 = (($this) + 1628|0);
 __ZN10Ym2612_EmuD2Ev($2);
 $3 = (($this) + 1584|0);
 __ZN11Blip_BufferD2Ev($3);
 $4 = (($this) + 256|0);
 __ZN14Dual_ResamplerD2Ev($4);
 __ZN9Music_EmuD2Ev($this);
 return;
}
function __ZThn256_N7Gym_EmuD1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -256|0);
 __ZN7Gym_EmuD2Ev($0);
 return;
}
function __ZN7Gym_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Gym_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZThn256_N7Gym_EmuD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -256|0);
 __ZN7Gym_EmuD0Ev($0);
 return;
}
function __ZNK7Gym_Emu11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 1132|0);
 $2 = (__ZNK7Gym_Emu12track_lengthEv($this)|0);
 __ZL12get_gym_infoRKN7Gym_Emu8header_tElP12track_info_t($1,$2,$out);
 return (0|0);
}
function __ZNK7Gym_Emu12track_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 1124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZL16gym_track_lengthPKhS0_($1,$3)|0);
 return ($4|0);
}
function __ZN7Gym_Emu16set_sample_rate_El($this,$sample_rate) {
 $this = $this|0;
 $sample_rate = $sample_rate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $eq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $eq = sp;
 __ZN9blip_eq_tC2Edlll($eq,-32.0,8000,$sample_rate,0);
 $0 = (($this) + 2192|0);
 __ZN7Sms_Apu9treble_eqERK9blip_eq_t($0,$eq);
 $1 = (($this) + 1632|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 $2 = (+__ZNK9Music_Emu4gainEv($this));
 $3 = $2 * 0.40500000000000003;
 __ZN7Sms_Apu6volumeEd($0,$3);
 $4 = (+__ZNK9Music_Emu4gainEv($this));
 $5 = $4 * 0.00146484375;
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($1,$5);
 $6 = (($this) + 256|0);
 $7 = (+__ZNK9Music_Emu4gainEv($this));
 $8 = $7 * 3.0;
 $9 = (+__ZN14Dual_Resampler5setupEddd($6,1.6666666666666667,0.98999999999999999,$8));
 $10 = (+($sample_rate|0));
 $11 = $10 * $9;
 $12 = (($this) + 1560|0);
 HEAPF64[$12>>3] = $11;
 $13 = (($this) + 1584|0);
 $14 = (__ZN11Blip_Buffer15set_sample_rateEli($13,$sample_rate,66)|0);
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 __ZN11Blip_Buffer10clock_rateEl($13,3580020);
 $16 = (($this) + 1628|0);
 $17 = +HEAPF64[$12>>3];
 $18 = (__ZN10Ym2612_Emu8set_rateEdd($16,$17,7671471.4285714282)|0);
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $10 * 0.066666666666666666;
 $21 = (~~(($20)));
 $22 = (__ZN14Dual_Resampler5resetEi($6,$21)|0);
 $$0 = $22;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7Gym_Emu10set_tempo_Ed($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $t < 0.25;
 if ($0) {
  __ZN9Music_Emu9set_tempoEd($this,0.25);
  return;
 }
 $1 = (($this) + 1584|0);
 $2 = (__ZNK11Blip_Buffer11sample_rateEv($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = (+__ZNK9Music_Emu5tempoEv($this));
 $5 = 59667.0 / $4;
 $6 = (~~(($5)));
 $7 = (($this) + 1568|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 256|0);
 $9 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
 $10 = (+($9|0));
 $11 = (+__ZNK9Music_Emu5tempoEv($this));
 $12 = $11 * 60.0;
 $13 = $10 / $12;
 $14 = (~~(($13)));
 __ZN14Dual_Resampler6resizeEi($8,$14);
 return;
}
function __ZN7Gym_Emu12mute_voices_Ei($this,$mask) {
 $this = $this|0;
 $mask = $mask|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1628|0);
 __ZN10Ym2612_Emu11mute_voicesEi($0,$mask);
 $1 = (($this) + 1581|0);
 $2 = $mask >>> 6;
 $$lobit = $2 & 1;
 $3 = $$lobit&255;
 HEAP8[$1>>0] = $3;
 $4 = (($this) + 2192|0);
 $5 = $mask & 128;
 $6 = ($5|0)!=(0);
 $7 = (($this) + 1584|0);
 $8 = $6 ? 0 : $7;
 __ZN7Sms_Apu6outputEP11Blip_Buffer($4,$8);
 return;
}
function __ZN7Gym_Emu9load_mem_EPKhl($this,$in,$size) {
 $this = $this|0;
 $in = $in|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset = sp;
 HEAP32[$offset>>2] = 0;
 $0 = (__ZL12check_headerPKhlPi($in,$size,$offset)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 __ZN9Music_Emu15set_voice_countEi($this,8);
 $2 = HEAP32[$offset>>2]|0;
 $3 = (($in) + ($2)|0);
 $4 = (($this) + 1112|0);
 HEAP32[$4>>2] = $3;
 $5 = (($in) + ($size)|0);
 $6 = (($this) + 1124|0);
 HEAP32[$6>>2] = $5;
 $7 = (($this) + 1116|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$offset>>2]|0;
 $9 = ($8|0)==(0);
 $10 = (($this) + 1132|0);
 if ($9) {
  _memset(($10|0),0,428)|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  _memcpy(($10|0),($in|0),428)|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7Gym_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 1120|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 1552|0);
 $4 = (__Z8get_le32PKv($3)|0);
 $5 = (($this) + 1128|0);
 HEAP32[$5>>2] = $4;
 $6 = (($this) + 1576|0);
 HEAP32[$6>>2] = 0;
 $7 = (($this) + 1580|0);
 HEAP8[$7>>0] = 0;
 $8 = (($this) + 1572|0);
 HEAP32[$8>>2] = -1;
 $9 = (($this) + 1628|0);
 __ZN10Ym2612_Emu5resetEv($9);
 $10 = (($this) + 2192|0);
 __ZN7Sms_Apu5resetEji($10,0,0);
 $11 = (($this) + 1584|0);
 __ZN11Blip_Buffer5clearEi($11,1);
 $12 = (($this) + 256|0);
 __ZN14Dual_Resampler5clearEv($12);
 return (0|0);
}
function __ZN7Gym_Emu7run_dacEi($this,$dac_count) {
 $this = $this|0;
 $dac_count = $dac_count|0;
 var $$ = 0, $$dac_count = 0, $$next_dac_count$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dac_amp$1$lcssa = 0, $dac_amp$1$ph = 0, $dac_amp$19 = 0, $exitcond = 0, $i$010 = 0, $next_dac_count$0$lcssa = 0, $next_dac_count$012 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond5$not = 0;
 var $or$cond6 = 0, $or$cond7 = 0, $p$011 = 0, $rate_count$0 = 0, $start$0 = 0, $time$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1120|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $next_dac_count$0$lcssa = 0;
 } else {
  $8 = $2;$next_dac_count$012 = 0;$p$011 = $1;
  while(1) {
   $4 = (($p$011) + 1|0);
   $5 = (($p$011) + 2|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = ($8&255)<(3);
   $9 = (($p$011) + 3|0);
   $$ = $7 ? $9 : $5;
   $10 = ($8<<24>>24)==(1);
   $11 = ($6<<24>>24)==(42);
   $or$cond = $10 & $11;
   $12 = $or$cond&1;
   $$next_dac_count$0 = (($12) + ($next_dac_count$012))|0;
   $13 = HEAP8[$$>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $next_dac_count$0$lcssa = $$next_dac_count$0;
    break;
   } else {
    $8 = $13;$next_dac_count$012 = $$next_dac_count$0;$p$011 = $$;
   }
  }
 }
 $15 = (($this) + 1576|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 $18 = ($next_dac_count$0$lcssa|0)!=(0);
 $or$cond3 = $17 & $18;
 $19 = ($next_dac_count$0$lcssa|0)>($dac_count|0);
 $or$cond6 = $or$cond3 & $19;
 if ($or$cond6) {
  $20 = (($next_dac_count$0$lcssa) - ($dac_count))|0;
  $rate_count$0 = $next_dac_count$0$lcssa;$start$0 = $20;
 } else {
  $or$cond5 = $17 | $18;
  $or$cond5$not = $or$cond5 ^ 1;
  $21 = ($16|0)>($dac_count|0);
  $or$cond7 = $21 & $or$cond5$not;
  $$dac_count = $or$cond7 ? $16 : $dac_count;
  $rate_count$0 = $$dac_count;$start$0 = 0;
 }
 $22 = (($this) + 1584|0);
 $23 = (($this) + 1568|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (__ZNK11Blip_Buffer18resampled_durationEi($22,$24)|0);
 $26 = (($25>>>0) / ($rate_count$0>>>0))&-1;
 $27 = (__ZNK11Blip_Buffer14resampled_timeEi($22,0)|0);
 $28 = Math_imul($26, $start$0)|0;
 $29 = (($27) + ($28))|0;
 $30 = $26 >>> 1;
 $31 = (($29) + ($30))|0;
 $32 = (($this) + 1572|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)<(0);
 if ($34) {
  $35 = (($this) + 3792|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $dac_amp$1$ph = $37;
 } else {
  $dac_amp$1$ph = $33;
 }
 $38 = ($dac_count|0)>(0);
 if (!($38)) {
  $dac_amp$1$lcssa = $dac_amp$1$ph;
  HEAP32[$32>>2] = $dac_amp$1$lcssa;
  return;
 }
 $39 = (($this) + 1632|0);
 $dac_amp$19 = $dac_amp$1$ph;$i$010 = 0;$time$08 = $31;
 while(1) {
  $40 = ((($this) + ($i$010)|0) + 3792|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = (($42) - ($dac_amp$19))|0;
  __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($39,$time$08,$43,$22);
  $44 = (($time$08) + ($26))|0;
  $45 = (($i$010) + 1)|0;
  $exitcond = ($45|0)==($dac_count|0);
  if ($exitcond) {
   $dac_amp$1$lcssa = $42;
   break;
  } else {
   $dac_amp$19 = $42;$i$010 = $45;$time$08 = $44;
  }
 }
 HEAP32[$32>>2] = $dac_amp$1$lcssa;
 return;
}
function __ZN7Gym_Emu11parse_frameEv($this) {
 $this = $this|0;
 var $$lcssa = 0, $$lcssa21 = 0, $$lcssa22 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dac_count$0$ph$lcssa = 0, $dac_count$0$ph9 = 0, $pos$0$be = 0, $pos$0$ph8 = 0, $pos$04 = 0;
 var $pos$04$lcssa = 0, $pos$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1120|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 1128|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (($3) + -1)|0;
  HEAP32[$2>>2] = $5;
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = (($this) + 1116|0);
   HEAP32[$7>>2] = $1;
  }
 }
 $8 = (($1) + 1|0);
 $9 = HEAP8[$1>>0]|0;
 $10 = ($9<<24>>24)==(0);
 L5: do {
  if ($10) {
   $$lcssa = $8;$dac_count$0$ph$lcssa = 0;
  } else {
   $11 = (($this) + 1628|0);
   $12 = (($this) + 1580|0);
   $13 = (($this) + 1628|0);
   $14 = (($this) + 2192|0);
   $15 = (($this) + 1580|0);
   $48 = $9;$49 = $8;$dac_count$0$ph9 = 0;$pos$0$ph8 = $1;
   while(1) {
    $16 = ($dac_count$0$ph9|0)<(1024);
    $19 = $49;$50 = $48;$pos$04 = $pos$0$ph8;
    L9: while(1) {
     $17 = (($pos$04) + 2|0);
     $18 = HEAP8[$19>>0]|0;
     $20 = $18&255;
     do {
      if ((($50<<24>>24) == 1)) {
       $21 = (($pos$04) + 3|0);
       $22 = HEAP8[$17>>0]|0;
       $23 = $22&255;
       if ((($18<<24>>24) == 43)) {
        $$lobit = ($22&255) >>> 7;
        HEAP8[$12>>0] = $$lobit;
       } else if ((($18<<24>>24) == 42)) {
        if ($16) {
         $$lcssa21 = $21;$$lcssa22 = $22;$pos$04$lcssa = $pos$04;
         break L9;
        } else {
         $pos$0$be = $21;
         break;
        }
       }
       __ZN10Ym2612_Emu6write0Eii($11,$20,$23);
       $pos$0$be = $21;
      } else if ((($50<<24>>24) == 3)) {
       __ZN7Sms_Apu10write_dataEii($14,0,$20);
       $pos$0$be = $17;
      } else if ((($50<<24>>24) == 2)) {
       $31 = (($pos$04) + 3|0);
       $32 = HEAP8[$17>>0]|0;
       $33 = $32&255;
       __ZN10Ym2612_Emu6write1Eii($13,$20,$33);
       $pos$0$be = $31;
      } else {
       $pos$0$be = $19;
      }
     } while(0);
     $34 = (($pos$0$be) + 1|0);
     $35 = HEAP8[$pos$0$be>>0]|0;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $$lcssa = $34;$dac_count$0$ph$lcssa = $dac_count$0$ph9;
      break L5;
     } else {
      $19 = $34;$50 = $35;$pos$04 = $pos$0$be;
     }
    }
    $24 = ((($this) + ($dac_count$0$ph9)|0) + 3792|0);
    HEAP8[$24>>0] = $$lcssa22;
    $25 = HEAP8[$15>>0]|0;
    $26 = $25&255;
    $27 = (($26) + ($dac_count$0$ph9))|0;
    $28 = (($pos$04$lcssa) + 4|0);
    $29 = HEAP8[$$lcssa21>>0]|0;
    $30 = ($29<<24>>24)==(0);
    if ($30) {
     $$lcssa = $28;$dac_count$0$ph$lcssa = $27;
     break;
    } else {
     $48 = $29;$49 = $28;$dac_count$0$ph9 = $27;$pos$0$ph8 = $$lcssa21;
    }
   }
  }
 } while(0);
 $37 = (($this) + 1124|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($$lcssa>>>0)<($38>>>0);
 if ($39) {
  $pos$1 = $$lcssa;
 } else {
  $40 = (($this) + 1116|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0|0);
  if ($42) {
   __ZN9Music_Emu15set_track_endedEv($this);
   $pos$1 = $$lcssa;
  } else {
   $pos$1 = $41;
  }
 }
 HEAP32[$0>>2] = $pos$1;
 $43 = ($dac_count$0$ph$lcssa|0)==(0);
 if ($43) {
  $47 = (($this) + 1576|0);
  HEAP32[$47>>2] = $dac_count$0$ph$lcssa;
  return;
 }
 $44 = (($this) + 1581|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = ($45<<24>>24)==(0);
 if (!($46)) {
  $47 = (($this) + 1576|0);
  HEAP32[$47>>2] = $dac_count$0$ph$lcssa;
  return;
 }
 __ZN7Gym_Emu7run_dacEi($this,$dac_count$0$ph$lcssa);
 $47 = (($this) + 1576|0);
 HEAP32[$47>>2] = $dac_count$0$ph$lcssa;
 return;
}
function __ZN7Gym_Emu10play_frameEiiPs($this,$blip_time,$sample_count,$buf) {
 $this = $this|0;
 $blip_time = $blip_time|0;
 $sample_count = $sample_count|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu11track_endedEv($this)|0);
 if (!($0)) {
  __ZN7Gym_Emu11parse_frameEv($this);
 }
 $1 = (($this) + 2192|0);
 __ZN7Sms_Apu9end_frameEi($1,$blip_time);
 $2 = $sample_count << 1;
 _memset(($buf|0),0,($2|0))|0;
 $3 = (($this) + 1628|0);
 $4 = $sample_count >> 1;
 __ZN10Ym2612_Emu3runEiPs($3,$4,$buf);
 return ($sample_count|0);
}
function __ZThn256_N7Gym_Emu10play_frameEiiPs($this,$blip_time,$sample_count,$buf) {
 $this = $this|0;
 $blip_time = $blip_time|0;
 $sample_count = $sample_count|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -256|0);
 $1 = (__ZN7Gym_Emu10play_frameEiiPs($0,$blip_time,$sample_count,$buf)|0);
 return ($1|0);
}
function __ZN7Gym_Emu5play_ElPs($this,$count,$out) {
 $this = $this|0;
 $count = $count|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 256|0);
 $1 = (($this) + 1584|0);
 __ZN14Dual_Resampler9dual_playElPsR11Blip_Buffer($0,$count,$out,$1);
 return (0|0);
}
function __ZN10Ym2612_EmuC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 return;
}
function __ZL12get_gym_infoRKN7Gym_Emu8header_tElP12track_info_t($h,$length,$out) {
 $h = $h|0;
 $length = $length|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($h,38752,4)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  return;
 }
 $2 = ($length*50)|0;
 $3 = (($2|0) / 3)&-1;
 $4 = (($h) + 420|0);
 $5 = (__Z8get_le32PKv($4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $12 = (($out) + 4|0);
  HEAP32[$12>>2] = $3;
  $13 = (($out) + 8|0);
  HEAP32[$13>>2] = $3;
  $14 = (($out) + 12|0);
  HEAP32[$14>>2] = 0;
 } else {
  $7 = ($5*50)|0;
  $8 = (($7|0) / 3)&-1;
  $9 = (($out) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = (($3) - ($8))|0;
  $11 = (($out) + 12|0);
  HEAP32[$11>>2] = $10;
 }
 $15 = (($h) + 4|0);
 $16 = (_strcmp($15,38904)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = (($out) + 528|0);
  __ZN8Gme_File11copy_field_EPcPKci($18,$15,32);
 }
 $19 = (($h) + 36|0);
 $20 = (_strcmp($19,38920)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = (($out) + 272|0);
  __ZN8Gme_File11copy_field_EPcPKci($22,$19,32);
 }
 $23 = (($h) + 68|0);
 $24 = (_strcmp($23,38936)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  $26 = (($out) + 1040|0);
  __ZN8Gme_File11copy_field_EPcPKci($26,$23,32);
 }
 $27 = (($h) + 132|0);
 $28 = (_strcmp($27,38960)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  $30 = (($out) + 1552|0);
  __ZN8Gme_File11copy_field_EPcPKci($30,$27,32);
 }
 $31 = (($h) + 164|0);
 $32 = (_strcmp($31,38976)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  return;
 }
 $34 = (($out) + 1296|0);
 __ZN8Gme_File11copy_field_EPcPKci($34,$31,256);
 return;
}
function __ZL16gym_track_lengthPKhS0_($p,$end) {
 $p = $p|0;
 $end = $end|0;
 var $$0$be = 0, $$0$ph3 = 0, $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $time$0$ph$lcssa = 0, $time$0$ph4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p>>>0)<($end>>>0);
 L1: do {
  if ($0) {
   $$0$ph3 = $p;$time$0$ph4 = 0;
   while(1) {
    $$01 = $$0$ph3;
    while(1) {
     $1 = (($$01) + 1|0);
     $2 = HEAP8[$$01>>0]|0;
     $3 = $2&255;
     if ((($3|0) == 0)) {
      $$lcssa = $1;
      break;
     } else if ((($3|0) == 2) | (($3|0) == 1)) {
      $6 = (($$01) + 3|0);
      $$0$be = $6;
     } else if ((($3|0) == 3)) {
      $7 = (($$01) + 2|0);
      $$0$be = $7;
     } else {
      $$0$be = $1;
     }
     $8 = ($$0$be>>>0)<($end>>>0);
     if ($8) {
      $$01 = $$0$be;
     } else {
      $time$0$ph$lcssa = $time$0$ph4;
      break L1;
     }
    }
    $4 = (($time$0$ph4) + 1)|0;
    $5 = ($$lcssa>>>0)<($end>>>0);
    if ($5) {
     $$0$ph3 = $$lcssa;$time$0$ph4 = $4;
    } else {
     $time$0$ph$lcssa = $4;
     break;
    }
   }
  } else {
   $time$0$ph$lcssa = 0;
  }
 } while(0);
 return ($time$0$ph$lcssa|0);
}
function __ZN9blip_eq_tC2Edlll($this,$t,$rf,$sr,$cf) {
 $this = $this|0;
 $t = +$t;
 $rf = $rf|0;
 $sr = $sr|0;
 $cf = $cf|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$this>>3] = $t;
 $0 = (($this) + 8|0);
 HEAP32[$0>>2] = $rf;
 $1 = (($this) + 12|0);
 HEAP32[$1>>2] = $sr;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $cf;
 return;
}
function __ZN14Dual_Resampler5setupEddd($this,$oversample,$rolloff,$gain) {
 $this = $this|0;
 $oversample = +$oversample;
 $rolloff = +$rolloff;
 $gain = +$gain;
 var $0 = 0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = $gain * 0.5;
 $2 = (+__ZN14Fir_Resampler_10time_ratioEddd($0,$oversample,$rolloff,$1));
 return (+$2);
}
function __ZN7Sms_Apu6outputEP11Blip_Buffer($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Sms_Apu6outputEP11Blip_BufferS1_S1_($this,$b,$b,$b);
 return;
}
function __ZL12check_headerPKhlPi($in,$size,$data_offset) {
 $in = $in|0;
 $size = $size|0;
 $data_offset = $data_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)<(4);
 do {
  if ($0) {
   $$0 = 38248;
  } else {
   $1 = (_memcmp($in,38752,4)|0);
   $2 = ($1|0)==(0);
   if ($2) {
    $3 = ($size|0)<(429);
    if ($3) {
     $$0 = 38248;
     break;
    }
    $4 = (($in) + 424|0);
    $5 = (_memcmp($4,39752,4)|0);
    $6 = ($5|0)==(0);
    if (!($6)) {
     $$0 = 38760;
     break;
    }
    $7 = ($data_offset|0)==(0|0);
    if (!($7)) {
     HEAP32[$data_offset>>2] = 428;
    }
   } else {
    $8 = HEAP8[$in>>0]|0;
    $9 = ($8&255)>(3);
    if ($9) {
     $$0 = 38248;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 return ($$0|0);
}
function __Z8get_le32PKv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 3|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 24;
 $4 = (($p) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 16;
 $8 = $7 | $3;
 $9 = (($p) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 8;
 $13 = $8 | $12;
 $14 = HEAP8[$p>>0]|0;
 $15 = $14&255;
 $16 = $13 | $15;
 return ($16|0);
}
function __ZN9Music_Emu15set_track_endedEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 208|0);
 HEAP8[$0>>0] = 1;
 return;
}
function __ZNK9Music_Emu11track_endedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 209|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 return ($2|0);
}
function __ZN9Music_Emu14set_equalizer_ERK15gme_equalizer_t($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZL11new_gym_emuv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(4816)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN7Gym_EmuC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZL12new_gym_filev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(264)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN8Gym_FileC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZN8Gym_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN8Gym_File9load_mem_EPKhl($this,$in,$size) {
 $this = $this|0;
 $in = $in|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 HEAP32[$0>>2] = $in;
 $1 = (($in) + ($size)|0);
 $2 = (($this) + 256|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 260|0);
 HEAP32[$3>>2] = 0;
 $4 = (__ZL12check_headerPKhlPi($in,$size,$3)|0);
 return ($4|0);
}
function __ZNK8Gym_File11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 260|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 252|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 $6 = (($this) + 256|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZL16gym_track_lengthPKhS0_($5,$7)|0);
 __ZL12get_gym_infoRKN7Gym_Emu8header_tElP12track_info_t($4,$8,$out);
 return (0|0);
}
function __ZN8Gym_FileC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Gme_Info_C2Ev($this);
 HEAP32[$this>>2] = ((38792 + 8|0));
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,38680);
 return;
}
function __ZN7Hes_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 536|0);
 __ZN10Blip_SynthILi8ELi1EEC2Ev($0);
 $1 = (($this) + 500|0);
 $2 = (($this) + 412|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;
 $3 = (($this) + 324|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 $4 = (($this) + 236|0);
 ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
 $5 = (($this) + 148|0);
 ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;
 $6 = (($this) + 60|0);
 ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;
 ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;
 __ZN7Hes_Apu5resetEv($this);
 return;
}
function __ZN7Hes_Apu5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 528|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 532|0);
 HEAP32[$1>>2] = 255;
 $2 = (($this) + 440|0);
 dest=$2+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = (($this) + 520|0);
 HEAP32[$3>>2] = 1;
 $4 = (($this) + 524|0);
 HEAP8[$4>>0] = 64;
 $5 = (($this) + 494|0);
 HEAP8[$5>>0] = -1;
 $6 = (($this) + 352|0);
 dest=$6+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = (($this) + 432|0);
 HEAP32[$7>>2] = 1;
 $8 = (($this) + 436|0);
 HEAP8[$8>>0] = 64;
 $9 = (($this) + 406|0);
 HEAP8[$9>>0] = -1;
 $10 = (($this) + 264|0);
 dest=$10+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $11 = (($this) + 344|0);
 HEAP32[$11>>2] = 1;
 $12 = (($this) + 348|0);
 HEAP8[$12>>0] = 64;
 $13 = (($this) + 318|0);
 HEAP8[$13>>0] = -1;
 $14 = (($this) + 176|0);
 dest=$14+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = (($this) + 256|0);
 HEAP32[$15>>2] = 1;
 $16 = (($this) + 260|0);
 HEAP8[$16>>0] = 64;
 $17 = (($this) + 230|0);
 HEAP8[$17>>0] = -1;
 $18 = (($this) + 88|0);
 dest=$18+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $19 = (($this) + 168|0);
 HEAP32[$19>>2] = 1;
 $20 = (($this) + 172|0);
 HEAP8[$20>>0] = 64;
 $21 = (($this) + 142|0);
 HEAP8[$21>>0] = -1;
 dest=$this+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $22 = (($this) + 80|0);
 HEAP32[$22>>2] = 1;
 $23 = (($this) + 84|0);
 HEAP8[$23>>0] = 64;
 $24 = (($this) + 54|0);
 HEAP8[$24>>0] = -1;
 return;
}
function __ZN7Hes_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,$index,$center,$left,$right) {
 $this = $this|0;
 $index = $index|0;
 $center = $center|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($index>>>0)<(6);
 if ($0) {
  $1 = ((($this) + (($index*88)|0)|0) + 68|0);
  HEAP32[$1>>2] = $center;
  $2 = ((($this) + (($index*88)|0)|0) + 72|0);
  HEAP32[$2>>2] = $left;
  $3 = ((($this) + (($index*88)|0)|0) + 76|0);
  HEAP32[$3>>2] = $right;
  $4 = (($this) + 440|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$4);
  $5 = (($this) + 352|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$5);
  $6 = (($this) + 264|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$6);
  $7 = (($this) + 176|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$7);
  $8 = (($this) + 88|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$8);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$this);
  return;
 } else {
  ___assert_fail((46216|0),(39000|0),58,(46296|0));
  // unreachable;
 }
}
function __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$osc) {
 $this = $this|0;
 $osc = $osc|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($osc) + 84|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 31;
 $4 = (($3) + -60)|0;
 $5 = (($osc) + 54|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 >>> 3;
 $9 = $8 & 30;
 $10 = (($9) + ($4))|0;
 $11 = (($this) + 532|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 3;
 $14 = $13 & 30;
 $15 = (($10) + ($14))|0;
 $16 = ($15|0)<(0);
 $$ = $16 ? 0 : $15;
 $17 = $7 << 1;
 $18 = $17 & 30;
 $19 = (($18) + ($4))|0;
 $20 = $12 << 1;
 $21 = $20 & 30;
 $22 = (($19) + ($21))|0;
 $23 = ($22|0)<(0);
 $$1 = $23 ? 0 : $22;
 $24 = (39064 + ($$<<1)|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = (39064 + ($$1<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 $30 = (($osc) + 68|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($osc) + 60|0);
 HEAP32[$32>>2] = $31;
 $33 = (($osc) + 64|0);
 HEAP32[$33>>2] = 0;
 $34 = ($25<<16>>16)==($28<<16>>16);
 if (!($34)) {
  $35 = (($osc) + 72|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$32>>2] = $36;
  $37 = (($osc) + 76|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$33>>2] = $38;
 }
 $39 = (($osc) + 32|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40 << 16 >> 16;
 $42 = (($26) - ($41))|0;
 $43 = $42 << 4;
 $44 = (($osc) + 36|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + ($45))|0;
 HEAP32[$44>>2] = $46;
 $47 = (($osc) + 34|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 $50 = (($29) - ($49))|0;
 $51 = $50 << 4;
 $52 = (($osc) + 40|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + ($53))|0;
 HEAP32[$52>>2] = $54;
 HEAP16[$39>>1] = $25;
 HEAP16[$47>>1] = $28;
 return;
}
function __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($this,$synth_,$end_time) {
 $this = $this|0;
 $synth_ = $synth_|0;
 $end_time = $end_time|0;
 var $$ = 0, $$2 = 0, $$lcssa14 = 0, $$lcssa15 = 0, $$lcssa16 = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dac$0 = 0, $dac$1 = 0, $dac$1$lcssa = 0, $dac$2 = 0, $dac$3 = 0, $dac$4 = 0;
 var $dac$5 = 0, $noise_lfsr$0 = 0, $or$cond = 0, $phase$0 = 0, $phase$1 = 0, $time$0 = 0, $time$1 = 0, $time$2 = 0, $time$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $107 = (($this) + 56|0);
  HEAP32[$107>>2] = $end_time;
  return;
 }
 $3 = (($this) + 84|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if (!($5)) {
  $107 = (($this) + 56|0);
  HEAP32[$107>>2] = $end_time;
  return;
 }
 $6 = (($this) + 55|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($this) + 32|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = Math_imul($11, $8)|0;
 $13 = (($this) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)==($14|0);
 if (!($15)) {
  $16 = (($12) - ($14))|0;
  $17 = (($this) + 56|0);
  $18 = HEAP32[$17>>2]|0;
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$18,$16,$1);
 }
 __ZN11Blip_Buffer12set_modifiedEv($1);
 $19 = (($this) + 64|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($this) + 34|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22 << 16 >> 16;
 $24 = ($20|0)!=(0|0);
 if ($24) {
  $25 = Math_imul($23, $8)|0;
  $26 = (($this) + 40|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($25|0)==($27|0);
  if (!($28)) {
   $29 = (($25) - ($27))|0;
   $30 = (($this) + 56|0);
   $31 = HEAP32[$30>>2]|0;
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$31,$29,$20);
  }
  __ZN11Blip_Buffer12set_modifiedEv($20);
 }
 $32 = (($this) + 56|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($this) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + ($33))|0;
 $37 = ($36|0)<($end_time|0);
 do {
  if ($37) {
   $38 = (($this) + 52|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $40 & 128;
   $42 = ($41|0)==(0);
   if ($42) {
    $65 = HEAP8[$3>>0]|0;
    $66 = $65 & 64;
    $67 = ($66<<24>>24)==(0);
    if (!($67)) {
     $dac$5 = $8;$time$3 = $36;
     break;
    }
    $68 = (($this) + 53|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69&255;
    $71 = (($70) + 1)|0;
    $72 = $71 & 31;
    $73 = (($this) + 48|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $74 << 1;
    $76 = ($75|0)<(14);
    $77 = $22 | $10;
    $78 = ($77<<16>>16)==(0);
    $or$cond = $76 | $78;
    if ($or$cond) {
     $90 = ($74|0)==(0);
     $$2 = $90 ? 1 : $75;
     $91 = (($end_time) + -1)|0;
     $92 = (($91) - ($36))|0;
     $93 = (($92) + ($$2))|0;
     $94 = (($93|0) / ($$2|0))&-1;
     $95 = (($94) + ($72))|0;
     $96 = Math_imul($94, $$2)|0;
     $97 = (($96) + ($36))|0;
     $dac$4 = $8;$phase$1 = $95;$time$2 = $97;
    } else {
     $dac$2 = $8;$phase$0 = $72;$time$1 = $36;
     while(1) {
      $79 = (($this) + ($phase$0)|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = $80&255;
      $82 = (($phase$0) + 1)|0;
      $83 = $82 & 31;
      $84 = (($81) - ($dac$2))|0;
      $85 = ($81|0)==($dac$2|0);
      if ($85) {
       $dac$3 = $dac$2;
      } else {
       $86 = Math_imul($84, $11)|0;
       __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time$1,$86,$1);
       if ($24) {
        $87 = Math_imul($84, $23)|0;
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time$1,$87,$20);
        $dac$3 = $81;
       } else {
        $dac$3 = $81;
       }
      }
      $88 = (($time$1) + ($75))|0;
      $89 = ($88|0)<($end_time|0);
      if ($89) {
       $dac$2 = $dac$3;$phase$0 = $83;$time$1 = $88;
      } else {
       $dac$4 = $dac$3;$phase$1 = $83;$time$2 = $88;
       break;
      }
     }
    }
    $98 = (($phase$1) + 31)|0;
    $99 = $98 & 31;
    $100 = $99&255;
    HEAP8[$68>>0] = $100;
    $dac$5 = $dac$4;$time$3 = $time$2;
    break;
   } else {
    $43 = $22 | $10;
    $44 = ($43<<16>>16)==(0);
    if ($44) {
     $dac$5 = $8;$time$3 = $36;
     break;
    }
    $45 = $40 & 31;
    $46 = (32 - ($45))|0;
    $47 = $46 << 6;
    $48 = (($this) + 80|0);
    $49 = HEAP32[$48>>2]|0;
    $dac$0 = $8;$noise_lfsr$0 = $49;$time$0 = $36;
    while(1) {
     $50 = $noise_lfsr$0 >>> 1;
     $51 = $50 & 1;
     $52 = (0 - ($51))|0;
     $53 = $52 & 31;
     $54 = $noise_lfsr$0 & 1;
     $55 = (0 - ($54))|0;
     $56 = $55 & 57352;
     $57 = $56 ^ $50;
     $58 = (($53) - ($dac$0))|0;
     $59 = ($53|0)==($dac$0|0);
     if ($59) {
      $dac$1 = $dac$0;
     } else {
      $60 = Math_imul($58, $11)|0;
      __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time$0,$60,$1);
      if ($24) {
       $61 = Math_imul($58, $23)|0;
       __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time$0,$61,$20);
       $dac$1 = $53;
      } else {
       $dac$1 = $53;
      }
     }
     $62 = (($time$0) + ($47))|0;
     $63 = ($62|0)<($end_time|0);
     if ($63) {
      $dac$0 = $dac$1;$noise_lfsr$0 = $57;$time$0 = $62;
     } else {
      $$lcssa14 = $50;$$lcssa15 = $56;$$lcssa16 = $57;$$lcssa17 = $62;$dac$1$lcssa = $dac$1;
      break;
     }
    }
    HEAP32[$48>>2] = $$lcssa16;
    $64 = ($$lcssa14|0)==($$lcssa15|0);
    if (!($64)) {
     $dac$5 = $dac$1$lcssa;$time$3 = $$lcssa17;
     break;
    }
    ___assert_fail((39048|0),(39000|0),127,(46400|0));
    // unreachable;
   }
  } else {
   $dac$5 = $8;$time$3 = $36;
  }
 } while(0);
 $101 = (($time$3) - ($end_time))|0;
 $102 = ($101|0)<(0);
 $$ = $102 ? 0 : $101;
 HEAP32[$34>>2] = $$;
 $103 = $dac$5&255;
 HEAP8[$6>>0] = $103;
 $104 = Math_imul($dac$5, $11)|0;
 HEAP32[$13>>2] = $104;
 $105 = Math_imul($dac$5, $23)|0;
 $106 = (($this) + 40|0);
 HEAP32[$106>>2] = $105;
 $107 = (($this) + 56|0);
 HEAP32[$107>>2] = $end_time;
 return;
}
function __ZN7Hes_Apu10write_dataEiii($this,$time,$addr,$data) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 if ((($addr|0) == 2049)) {
  $2 = (($this) + 532|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==($data|0);
  if ($4) {
   return;
  }
  HEAP32[$2>>2] = $data;
  $5 = (($this) + 536|0);
  $6 = (($this) + 440|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($6,$5,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$this);
  $7 = (($this) + 352|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($7,$5,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$this);
  $8 = (($this) + 264|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($8,$5,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$this);
  $9 = (($this) + 176|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($9,$5,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$this);
  $10 = (($this) + 88|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($10,$5,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$this);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($this,$5,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$this);
  return;
 } else if ((($addr|0) == 2048)) {
  $0 = $data & 7;
  $1 = (($this) + 528|0);
  HEAP32[$1>>2] = $0;
  return;
 } else {
  $11 = (($this) + 528|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)<(6);
  if (!($13)) {
   return;
  }
  $14 = (($this) + (($12*88)|0)|0);
  $15 = (($this) + 536|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($14,$15,$time);
  switch ($addr|0) {
  case 2052:  {
   $26 = ((($this) + (($12*88)|0)|0) + 84|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $data & 64;
   $30 = $29 ^ 64;
   $31 = $30 & $28;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $33 = ((($this) + (($12*88)|0)|0) + 53|0);
    HEAP8[$33>>0] = 0;
   }
   $34 = $data&255;
   HEAP8[$26>>0] = $34;
   __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$14);
   return;
   break;
  }
  case 2050:  {
   $16 = ((($this) + (($12*88)|0)|0) + 48|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 & 3840;
   $19 = $18 | $data;
   HEAP32[$16>>2] = $19;
   return;
   break;
  }
  case 2051:  {
   $20 = ((($this) + (($12*88)|0)|0) + 48|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 & 255;
   $23 = $data << 8;
   $24 = $23 & 3840;
   $25 = $22 | $24;
   HEAP32[$20>>2] = $25;
   return;
   break;
  }
  case 2055:  {
   $57 = ($12|0)>(3);
   if (!($57)) {
    return;
   }
   $58 = $data&255;
   $59 = ((($this) + (($12*88)|0)|0) + 52|0);
   HEAP8[$59>>0] = $58;
   return;
   break;
  }
  case 2054:  {
   $37 = $data & 31;
   $38 = ((($this) + (($12*88)|0)|0) + 84|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $40 & 64;
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = $37&255;
    $44 = ((($this) + (($12*88)|0)|0) + 53|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45&255;
    $47 = ((($this) + (($12*88)|0)|0) + ($46)|0);
    HEAP8[$47>>0] = $43;
    $48 = HEAP8[$44>>0]|0;
    $49 = $48&255;
    $50 = (($49) + 1)|0;
    $51 = $50 & 31;
    $52 = $51&255;
    HEAP8[$44>>0] = $52;
    return;
   }
   $53 = $40 & 128;
   $54 = ($53|0)==(0);
   if ($54) {
    return;
   }
   $55 = $37&255;
   $56 = ((($this) + (($12*88)|0)|0) + 55|0);
   HEAP8[$56>>0] = $55;
   return;
   break;
  }
  case 2053:  {
   $35 = $data&255;
   $36 = ((($this) + (($12*88)|0)|0) + 54|0);
   HEAP8[$36>>0] = $35;
   __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$14);
   return;
   break;
  }
  default: {
   return;
  }
  }
 }
}
function __ZN7Hes_Apu9end_frameEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $osc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 528|0);
 $1 = (($this) + 536|0);
 $osc$0 = $0;
 while(1) {
  $2 = (($osc$0) + -88|0);
  $3 = (($osc$0) + -32|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($end_time|0);
  if ($5) {
   __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($2,$1,$end_time);
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)<($end_time|0);
  if ($7) {
   label = 5;
   break;
  }
  $8 = (($6) - ($end_time))|0;
  HEAP32[$3>>2] = $8;
  $9 = ($2|0)==($this|0);
  if ($9) {
   label = 7;
   break;
  } else {
   $osc$0 = $2;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((39128|0),(39000|0),311,(46440|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  return;
 }
}
function __ZN7Hes_Emu8cpu_readEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 272|0);
 $1 = (__ZN7Hes_Cpu8get_codeEj($0,$addr)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $addr >>> 13;
 $$sum = (($4) + 8200)|0;
 $5 = ((($this) + ($$sum)|0) + 272|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(-1);
 if (!($7)) {
  $result$0 = $3;
  return ($result$0|0);
 }
 $8 = (__ZN7Hes_Emu9cpu_read_Ej($this,$addr)|0);
 $result$0 = $8;
 return ($result$0|0);
}
function __ZN7Hes_Emu9cpu_writeEji($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr >>> 13;
 $1 = ((($this) + ($0<<2)|0) + 8540|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $addr & 8191;
 $4 = ($2|0)==(0|0);
 if (!($4)) {
  $5 = $data&255;
  $6 = (($2) + ($3)|0);
  HEAP8[$6>>0] = $5;
  return;
 }
 $7 = (($this) + 8472|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(-1);
 if (!($9)) {
  return;
 }
 __ZN7Hes_Emu10cpu_write_Eji($this,$3,$data);
 return;
}
function __ZN7Hes_Cpu5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8216|0);
 $1 = (($this) + 8212|0);
 HEAP32[$1>>2] = $0;
 $2 = (($this) + 8256|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 8252|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 8260|0);
 HEAP32[$4>>2] = 1073741824;
 $5 = (($this) + 8264|0);
 HEAP32[$5>>2] = 1073741824;
 $6 = (($this) + 8197|0);
 HEAP8[$6>>0] = 4;
 $7 = (($this) + 8198|0);
 HEAP8[$7>>0] = 0;
 $8 = (($this) + 8192|0);
 ;HEAP16[$8+0>>1]=0|0;HEAP16[$8+2>>1]=0|0;HEAP8[$8+4>>0]=0|0;
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN7Hes_Cpu7set_mmrEii($this,$reg,$bank) {
 $this = $this|0;
 $reg = $reg|0;
 $bank = $bank|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($reg>>>0)<(9);
 if (!($0)) {
  ___assert_fail((39160|0),(39192|0),71,(39240|0));
  // unreachable;
 }
 $1 = ($bank>>>0)<(256);
 if (!($1)) {
  ___assert_fail((39248|0),(39192|0),72,(39240|0));
  // unreachable;
 }
 $2 = $bank&255;
 $3 = ((($this) + ($reg)|0) + 8200|0);
 HEAP8[$3>>0] = $2;
 $4 = ($this|0)==(0|0);
 if ($4) {
  $6 = 0;
 } else {
  $5 = (($this) + -272|0);
  $6 = $5;
 }
 $7 = (__ZN7Hes_Emu11cpu_set_mmrEii($6,$reg,$bank)|0);
 $8 = (($this) + 8212|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($reg<<2)|0);
 HEAP32[$10>>2] = $7;
 return;
}
function __ZN7Hes_Cpu3runEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$ = 0, $$24 = 0, $$25 = 0, $$26 = 0, $$27 = 0, $$28 = 0, $$29 = 0, $$30 = 0, $$31 = 0, $$66 = 0, $$67 = 0, $$68 = 0, $$69 = 0, $$70 = 0, $$71 = 0, $$72 = 0, $$73 = 0, $$74 = 0, $$75 = 0, $$76 = 0;
 var $$77 = 0, $$78 = 0, $$79 = 0, $$80 = 0, $$81 = 0, $$82 = 0, $$lcssa = 0, $$nz$4 = 0, $$nz$5 = 0, $$pn = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0;
 var $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0;
 var $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0;
 var $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0;
 var $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0;
 var $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0;
 var $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0;
 var $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0;
 var $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$0$lcssa = 0, $a$0$phi = 0, $a$1 = 0, $a$2 = 0, $a$2$lcssa = 0, $addr13$0 = 0, $addr15$0 = 0, $addr18$0 = 0, $addr19$0 = 0;
 var $c$0 = 0, $c$0$lcssa = 0, $c$0$phi = 0, $c$1 = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$7 = 0, $c$8 = 0, $c$9 = 0, $count$0 = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0;
 var $data$15 = 0, $data$16 = 0, $data$17 = 0, $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$20 = 0, $data$21 = 0, $data$22 = 0, $data$23 = 0, $data$2332 = 0, $data$2333 = 0, $data$24 = 0, $data$25 = 0, $data$26 = 0, $data$27 = 0, $data$28 = 0, $data$2837 = 0, $data$2838 = 0, $data$29 = 0;
 var $data$3 = 0, $data$30 = 0, $data$31 = 0, $data$32 = 0, $data$33 = 0, $data$3342 = 0, $data$3343 = 0, $data$34 = 0, $data$35 = 0, $data$36 = 0, $data$37 = 0, $data$38 = 0, $data$3847 = 0, $data$3848 = 0, $data$39 = 0, $data$4 = 0, $data$40 = 0, $data$41 = 0, $data$42 = 0, $data$43 = 0;
 var $data$4352 = 0, $data$4353 = 0, $data$44 = 0, $data$45 = 0, $data$46 = 0, $data$47 = 0, $data$48 = 0, $data$4857 = 0, $data$4858 = 0, $data$49 = 0, $data$5 = 0, $data$50 = 0, $data$51 = 0, $data$52 = 0, $data$53 = 0, $data$54 = 0, $data$55 = 0, $data$56 = 0, $data$57 = 0, $data$58 = 0;
 var $data$6 = 0, $data$60 = 0, $data$61 = 0, $data$62 = 0, $data$65 = 0, $data$66 = 0, $data$7 = 0, $data$9 = 0, $illegal_encountered$0$off0 = 0, $illegal_encountered$0$off0$lcssa = 0, $illegal_encountered$0$off0$phi = 0, $in$0 = 0, $in43$0 = 0, $in_alt$0 = 0, $in_alt$1 = 0, $in_inc$1 = 0, $in_inc$2 = 0, $in_inc$2$ = 0, $new_time$0 = 0, $nz$0 = 0;
 var $nz$0$lcssa = 0, $nz$0$phi = 0, $nz$10 = 0, $nz$11 = 0, $nz$12 = 0, $nz$4 = 0, $nz$5 = 0, $nz$7 = 0, $nz$8 = 0, $nz$9 = 0, $or$cond = 0, $out44$0 = 0, $out_alt$0 = 0, $out_inc$1 = 0, $out_inc$2 = 0, $out_inc$2$ = 0, $pc$0 = 0, $pc$1 = 0, $pc$1$lcssa = 0, $pc$1$phi = 0;
 var $pc$10 = 0, $pc$11 = 0, $pc$1139 = 0, $pc$1140 = 0, $pc$12 = 0, $pc$13 = 0, $pc$1344 = 0, $pc$1345 = 0, $pc$14 = 0, $pc$15 = 0, $pc$1549 = 0, $pc$1550 = 0, $pc$16 = 0, $pc$17 = 0, $pc$1754 = 0, $pc$1755 = 0, $pc$18 = 0, $pc$19 = 0, $pc$1959 = 0, $pc$1960 = 0;
 var $pc$2 = 0, $pc$20 = 0, $pc$22 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $pc$934 = 0, $pc$935 = 0, $phitmp = 0, $result_$0 = 0, $s = 0, $s_time$0 = 0, $s_time$10 = 0, $s_time$11 = 0, $s_time$12 = 0, $s_time$13 = 0;
 var $s_time$14 = 0, $s_time$15 = 0, $s_time$4 = 0, $s_time$5 = 0, $s_time$6 = 0, $s_time$7 = 0, $s_time$8 = 0, $s_time$9 = 0, $sext = 0, $sp$0 = 0, $sp$0$lcssa = 0, $sp$0$phi = 0, $sp$1 = 0, $sp$2 = 0, $sp$3 = 0, $status$0 = 0, $status$0$lcssa = 0, $status$0$phi = 0, $status$1 = 0, $status$2 = 0;
 var $temp21$0 = 0, $temp46$1 = 0, $x$0 = 0, $x$0$lcssa = 0, $x$0$phi = 0, $y$0 = 0, $y$0$lcssa = 0, $y$0$phi = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp;
 __ZN7Hes_Cpu12set_end_timeEi($this,$end_time);
 $0 = (($this) + 8216|0);
 dest=$s+0|0; src=$0+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $1 = (($this) + 8212|0);
 HEAP32[$1>>2] = $s;
 $2 = (($s) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 8192|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($this) + 8194|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($this) + 8195|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($this) + 8196|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($this) + 8198|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (($18) + 1)|0;
 $20 = $19 | 256;
 $21 = (($this) + 8197|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 & 76;
 $25 = $23 << 8;
 $26 = $23 & 2;
 $27 = $26 | $25;
 $28 = $27 ^ 2;
 $29 = (($this) + 8264|0);
 $30 = ($this|0)==(0|0);
 $31 = (($this) + -272|0);
 $32 = (($this) + -272|0);
 $33 = (($this) + 8268|0);
 $34 = (($this) + 8200|0);
 $35 = ($this|0)==(0|0);
 $$24 = $35 ? 0 : $32;
 $36 = (($this) + -272|0);
 $37 = (($this) + -272|0);
 $38 = (($this) + 8268|0);
 $39 = (($this) + 8200|0);
 $40 = ($this|0)==(0|0);
 $$25 = $40 ? 0 : $37;
 $41 = ($this|0)==(0|0);
 $42 = (($this) + -272|0);
 $43 = ($this|0)==(0|0);
 $44 = (($this) + -272|0);
 $45 = ($this|0)==(0|0);
 $46 = (($this) + -272|0);
 $47 = ($this|0)==(0|0);
 $48 = (($this) + -272|0);
 $49 = ($this|0)==(0|0);
 $50 = (($this) + -272|0);
 $51 = (($this) + -272|0);
 $52 = ($this|0)==(0|0);
 $53 = (($this) + -272|0);
 $54 = ($this|0)==(0|0);
 $55 = (($this) + -272|0);
 $56 = ($this|0)==(0|0);
 $57 = (($this) + -272|0);
 $58 = ($this|0)==(0|0);
 $59 = (($this) + -272|0);
 $60 = ($this|0)==(0|0);
 $61 = (($this) + -272|0);
 $62 = ($this|0)==(0|0);
 $63 = (($this) + -272|0);
 $64 = ($this|0)==(0|0);
 $65 = (($this) + -272|0);
 $66 = ($this|0)==(0|0);
 $67 = (($this) + -272|0);
 $68 = ($this|0)==(0|0);
 $69 = (($this) + -272|0);
 $70 = ($this|0)==(0|0);
 $71 = (($this) + -272|0);
 $72 = ($this|0)==(0|0);
 $73 = (($this) + -272|0);
 $74 = ($this|0)==(0|0);
 $75 = (($this) + -272|0);
 $76 = ($this|0)==(0|0);
 $77 = (($this) + -272|0);
 $78 = ($this|0)==(0|0);
 $79 = (($this) + -272|0);
 $80 = ($this|0)==(0|0);
 $81 = (($this) + -272|0);
 $82 = (($this) + -272|0);
 $83 = (($this) + 8260|0);
 $84 = (($s) + 36|0);
 $85 = (($s) + 36|0);
 $86 = (($this) + 8260|0);
 $87 = (($s) + 36|0);
 $88 = (($this) + 8200|0);
 $89 = ($this|0)==(0|0);
 $90 = (($this) + -272|0);
 $91 = ($this|0)==(0|0);
 $92 = (($this) + -272|0);
 $93 = (($this) + -272|0);
 $94 = ($this|0)==(0|0);
 $95 = (($this) + -272|0);
 $96 = (($s) + 28|0);
 $97 = (($s) + 36|0);
 $a$0 = $9;$c$0 = $25;$illegal_encountered$0$off0 = 0;$nz$0 = $28;$pc$1 = $6;$s_time$0 = $3;$sp$0 = $20;$status$0 = $24;$x$0 = $12;$y$0 = $15;
 L1: while(1) {
  $101 = $status$0 & 4;
  $102 = ($101|0)!=(0);
  $103 = $pc$1 >>> 13;
  $104 = (($s) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $pc$1 & 8191;
  $107 = (($105) + ($106)|0);
  $$sum = (($106) + 1)|0;
  $108 = (($105) + ($$sum)|0);
  $109 = HEAP8[$107>>0]|0;
  $110 = $109&255;
  $111 = (($pc$1) + 1)|0;
  $112 = (39272 + ($110)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $99 = (($114) + ($s_time$0))|0;
  $115 = ($99|0)<(0);
  $116 = ($99|0)<($114|0);
  $or$cond = $115 | $116;
  L3: do {
   if ($or$cond) {
    $117 = HEAP8[$108>>0]|0;
    $118 = $117&255;
    do {
     switch ($110|0) {
     case 174:  {
      $266 = (__Z8get_le16PKv($108)|0);
      $267 = (($pc$1) + 3)|0;
      $268 = $266 & 8191;
      $269 = $266 >>> 13;
      $270 = (($s) + ($269<<2)|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = (($271) + ($268)|0);
      $273 = HEAP8[$272>>0]|0;
      $274 = $273&255;
      $275 = ((($this) + ($269)|0) + 8200|0);
      $276 = HEAP8[$275>>0]|0;
      $277 = ($276<<24>>24)==(-1);
      if (!($277)) {
       $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $274;$pc$1 = $267;$s_time$0 = $99;$x$0 = $274;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      HEAP32[$2>>2] = $99;
      $278 = (__ZN7Hes_Emu9cpu_read_Ej($36,$266)|0);
      $279 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $278;$pc$1 = $267;$s_time$0 = $279;$x$0 = $278;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 165:  {
      $280 = (($this) + ($118)|0);
      $281 = HEAP8[$280>>0]|0;
      $282 = $281&255;
      $283 = (($pc$1) + 2)|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $282;$nz$0 = $282;$pc$1 = $283;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
      continue L1;
      break;
     }
     case 145:  {
      $284 = (($118) + 1)|0;
      $285 = $284 & 255;
      $286 = (($this) + ($285)|0);
      $287 = HEAP8[$286>>0]|0;
      $288 = $287&255;
      $289 = $288 << 8;
      $290 = (($this) + ($118)|0);
      $291 = HEAP8[$290>>0]|0;
      $292 = $291&255;
      $293 = (($292) + ($y$0))|0;
      $294 = (($293) + ($289))|0;
      $295 = (($pc$1) + 2)|0;
      $addr13$0 = $294;$pc$2 = $295;
      label = 48;
      break;
     }
     case 129:  {
      $296 = (($118) + ($x$0))|0;
      $297 = $296 & 255;
      $data$2 = $297;
      label = 45;
      break;
     }
     case 146:  {
      $data$2 = $118;
      label = 45;
      break;
     }
     case 153:  {
      $309 = (($118) + ($y$0))|0;
      $data$3 = $309;
      label = 47;
      break;
     }
     case 141:  {
      $data$3 = $118;
      label = 47;
      break;
     }
     case 161:  {
      $326 = (($118) + ($x$0))|0;
      $327 = $326 & 255;
      $data$4 = $327;
      label = 53;
      break;
     }
     case 178:  {
      $data$4 = $118;
      label = 53;
      break;
     }
     case 177:  {
      $339 = (($this) + ($118)|0);
      $340 = HEAP8[$339>>0]|0;
      $341 = $340&255;
      $342 = (($341) + ($y$0))|0;
      $343 = (($118) + 1)|0;
      $344 = $343 & 255;
      $345 = (($this) + ($344)|0);
      $346 = HEAP8[$345>>0]|0;
      $347 = $346&255;
      $348 = $347 << 8;
      $349 = (($342) + ($348))|0;
      $350 = (($pc$1) + 2)|0;
      $addr15$0 = $349;$pc$3 = $350;
      label = 57;
      break;
     }
     case 185:  {
      $351 = (($118) + ($y$0))|0;
      $data$5 = $351;
      label = 56;
      break;
     }
     case 173:  {
      $data$5 = $118;
      label = 56;
      break;
     }
     case 190:  {
      $370 = (__Z8get_le16PKv($108)|0);
      $371 = (($370) + ($y$0))|0;
      $372 = (($pc$1) + 3)|0;
      HEAP32[$2>>2] = $99;
      $$68 = $43 ? 0 : $44;
      $373 = (__ZN7Hes_Emu8cpu_readEj($$68,$371)|0);
      $374 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $373;$pc$1 = $372;$s_time$0 = $374;$x$0 = $373;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 169:  {
      $381 = (($pc$1) + 2)|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $118;$nz$0 = $118;$pc$1 = $381;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
      continue L1;
      break;
     }
     case 181:  {
      $375 = (($118) + ($x$0))|0;
      $376 = $375 & 255;
      $377 = (($this) + ($376)|0);
      $378 = HEAP8[$377>>0]|0;
      $379 = $378&255;
      $380 = (($pc$1) + 2)|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $379;$nz$0 = $379;$pc$1 = $380;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
      continue L1;
      break;
     }
     case 60:  {
      $382 = (($118) + ($x$0))|0;
      $data$6 = $382;
      label = 63;
      break;
     }
     case 44:  {
      $data$6 = $118;
      label = 63;
      break;
     }
     case 52:  {
      $391 = (($118) + ($x$0))|0;
      $392 = $391 & 255;
      $data$7 = $392;
      label = 65;
      break;
     }
     case 36:  {
      $data$7 = $118;
      label = 65;
      break;
     }
     case 137:  {
      $nz$4 = $118;$pc$4 = $111;$s_time$4 = $99;
      label = 66;
      break;
     }
     case 179:  {
      $$sum17 = (($106) + 2)|0;
      $403 = (($105) + ($$sum17)|0);
      $404 = HEAP8[$403>>0]|0;
      $405 = $404&255;
      $406 = (($405) + ($x$0))|0;
      $addr18$0 = $406;
      label = 69;
      break;
     }
     case 147:  {
      $$sum15 = (($106) + 2)|0;
      $407 = (($105) + ($$sum15)|0);
      $408 = HEAP8[$407>>0]|0;
      $409 = $408&255;
      $addr18$0 = $409;
      label = 69;
      break;
     }
     case 163:  {
      $$sum14 = (($106) + 2)|0;
      $418 = (($105) + ($$sum14)|0);
      $419 = HEAP8[$418>>0]|0;
      $420 = $419&255;
      $421 = (($420) + ($x$0))|0;
      $422 = $421 & 255;
      $423 = (($this) + ($422)|0);
      $424 = HEAP8[$423>>0]|0;
      $425 = $424&255;
      $nz$5 = $425;$pc$5 = $111;$s_time$5 = $99;
      label = 72;
      break;
     }
     case 131:  {
      $$sum13 = (($106) + 2)|0;
      $426 = (($105) + ($$sum13)|0);
      $427 = HEAP8[$426>>0]|0;
      $428 = $427&255;
      $429 = (($this) + ($428)|0);
      $430 = HEAP8[$429>>0]|0;
      $431 = $430&255;
      $nz$5 = $431;$pc$5 = $111;$s_time$5 = $99;
      label = 72;
      break;
     }
     case 28: case 12:  {
      $439 = (__Z8get_le16PKv($108)|0);
      $440 = (($pc$1) + 2)|0;
      $addr19$0 = $439;$pc$6 = $440;
      label = 75;
      break;
     }
     case 20: case 4:  {
      $441 = $118 | 8192;
      $addr19$0 = $441;$pc$6 = $111;
      label = 75;
      break;
     }
     case 119: case 103: case 87: case 71: case 55: case 39: case 23: case 7:  {
      $453 = (($pc$1) + 2)|0;
      $454 = $110 >>> 4;
      $455 = 1 << $454;
      $456 = $455 ^ 255;
      $457 = (($this) + ($118)|0);
      $458 = HEAP8[$457>>0]|0;
      $459 = $458&255;
      $460 = $459 & $456;
      $461 = $460&255;
      HEAP8[$457>>0] = $461;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $453;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 247: case 231: case 215: case 199: case 183: case 167: case 151: case 135:  {
      $462 = (($pc$1) + 2)|0;
      $463 = $110 >>> 4;
      $464 = (($463) + -8)|0;
      $465 = 1 << $464;
      $466 = (($this) + ($118)|0);
      $467 = HEAP8[$466>>0]|0;
      $468 = $467&255;
      $469 = $468 | $465;
      $470 = $469&255;
      HEAP8[$466>>0] = $470;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $462;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 158:  {
      $471 = (($118) + ($x$0))|0;
      $data$9 = $471;
      label = 79;
      break;
     }
     case 156:  {
      $data$9 = $118;
      label = 79;
      break;
     }
     case 116:  {
      $479 = (($118) + ($x$0))|0;
      $480 = $479 & 255;
      $data$10 = $480;
      label = 81;
      break;
     }
     case 38:  {
      $c$6 = $c$0;$data$58 = $118;
      label = 194;
      break;
     }
     case 212: case 234:  {
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 240:  {
      $119 = (($pc$1) + 2)|0;
      $120 = $nz$0&255;
      $121 = ($120<<24>>24)==(0);
      if ($121) {
       $122 = $117 << 24 >> 24;
       $123 = (($122) + ($119))|0;
       $124 = $123 & 65535;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $124;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      } else {
       $pc$0 = $119;
       label = 2;
      }
      break;
     }
     case 208:  {
      $125 = (($pc$1) + 2)|0;
      $126 = $nz$0&255;
      $127 = ($126<<24>>24)==(0);
      if ($127) {
       $pc$0 = $125;
       label = 2;
      } else {
       $128 = $117 << 24 >> 24;
       $129 = (($128) + ($125))|0;
       $130 = $129 & 65535;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $130;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      break;
     }
     case 16:  {
      $131 = (($pc$1) + 2)|0;
      $132 = $nz$0 & 32896;
      $133 = ($132|0)==(0);
      if ($133) {
       $134 = $117 << 24 >> 24;
       $135 = (($134) + ($131))|0;
       $136 = $135 & 65535;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $136;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      } else {
       $pc$0 = $131;
       label = 2;
      }
      break;
     }
     case 144:  {
      $137 = (($pc$1) + 2)|0;
      $138 = $c$0 & 256;
      $139 = ($138|0)==(0);
      if ($139) {
       $140 = $117 << 24 >> 24;
       $141 = (($140) + ($137))|0;
       $142 = $141 & 65535;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $142;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      } else {
       $pc$0 = $137;
       label = 2;
      }
      break;
     }
     case 48:  {
      $143 = (($pc$1) + 2)|0;
      $144 = $nz$0 & 32896;
      $145 = ($144|0)==(0);
      if ($145) {
       $pc$0 = $143;
       label = 2;
      } else {
       $146 = $117 << 24 >> 24;
       $147 = (($146) + ($143))|0;
       $148 = $147 & 65535;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $148;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      break;
     }
     case 80:  {
      $149 = (($pc$1) + 2)|0;
      $150 = $status$0 & 64;
      $151 = ($150|0)==(0);
      if ($151) {
       $152 = $117 << 24 >> 24;
       $153 = (($152) + ($149))|0;
       $154 = $153 & 65535;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $154;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      } else {
       $pc$0 = $149;
       label = 2;
      }
      break;
     }
     case 112:  {
      $155 = (($pc$1) + 2)|0;
      $156 = $status$0 & 64;
      $157 = ($156|0)==(0);
      if ($157) {
       $pc$0 = $155;
       label = 2;
      } else {
       $158 = $117 << 24 >> 24;
       $159 = (($158) + ($155))|0;
       $160 = $159 & 65535;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $160;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      break;
     }
     case 176:  {
      $161 = (($pc$1) + 2)|0;
      $162 = $c$0 & 256;
      $163 = ($162|0)==(0);
      if ($163) {
       $pc$0 = $161;
       label = 2;
      } else {
       $164 = $117 << 24 >> 24;
       $165 = (($164) + ($161))|0;
       $166 = $165 & 65535;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $166;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      break;
     }
     case 128:  {
      $sp$1 = $sp$0;
      label = 22;
      break;
     }
     case 255:  {
      $171 = ($111|0)==(8192);
      if ($171) {
       $s_time$15 = 0;
       label = 272;
       break L3;
      } else {
       label = 24;
      }
      break;
     }
     case 239: case 223: case 207: case 191: case 175: case 159: case 143: case 127: case 111: case 95: case 79: case 63: case 47: case 31: case 15:  {
      label = 24;
      break;
     }
     case 76:  {
      $187 = (__Z8get_le16PKv($108)|0);
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $187;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 124:  {
      $188 = (($118) + ($x$0))|0;
      $data$0 = $188;
      label = 28;
      break;
     }
     case 108:  {
      $data$0 = $118;
      label = 28;
      break;
     }
     case 68:  {
      $200 = $111 >>> 8;
      $201 = $200&255;
      $202 = (($sp$0) + -1)|0;
      $203 = $202 | 256;
      $204 = (($this) + ($203)|0);
      HEAP8[$204>>0] = $201;
      $205 = (($sp$0) + -2)|0;
      $206 = $205 | 256;
      $207 = $111&255;
      $208 = (($this) + ($206)|0);
      HEAP8[$208>>0] = $207;
      $sp$1 = $206;
      label = 22;
      break;
     }
     case 32:  {
      $209 = (($pc$1) + 2)|0;
      $210 = (__Z8get_le16PKv($108)|0);
      $211 = $209 >>> 8;
      $212 = $211&255;
      $213 = (($sp$0) + -1)|0;
      $214 = $213 | 256;
      $215 = (($this) + ($214)|0);
      HEAP8[$215>>0] = $212;
      $216 = (($sp$0) + -2)|0;
      $217 = $216 | 256;
      $218 = $209&255;
      $219 = (($this) + ($217)|0);
      HEAP8[$219>>0] = $218;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $210;$s_time$0 = $99;$sp$0 = $217;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 96:  {
      $220 = (($sp$0) + -255)|0;
      $221 = $220 | 256;
      $222 = (($this) + ($221)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      $225 = $224 << 8;
      $226 = (($this) + ($sp$0)|0);
      $227 = HEAP8[$226>>0]|0;
      $228 = $227&255;
      $229 = (($228) + 1)|0;
      $230 = (($229) + ($225))|0;
      $231 = (($sp$0) + -254)|0;
      $232 = $231 | 256;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $230;$s_time$0 = $99;$sp$0 = $232;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 189:  {
      $233 = (__Z8get_le16PKv($108)|0);
      $234 = (($233) + ($x$0))|0;
      $235 = (($pc$1) + 3)|0;
      $236 = $234 & 8191;
      $237 = $234 >>> 13;
      $238 = (($s) + ($237<<2)|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = (($239) + ($236)|0);
      $241 = HEAP8[$240>>0]|0;
      $242 = $241&255;
      $243 = ((($this) + ($237)|0) + 8200|0);
      $244 = HEAP8[$243>>0]|0;
      $245 = ($244<<24>>24)==(-1);
      if (!($245)) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $242;$nz$0 = $242;$pc$1 = $235;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
       continue L1;
      }
      HEAP32[$2>>2] = $99;
      $$66 = $30 ? 0 : $31;
      $246 = (__ZN7Hes_Emu9cpu_read_Ej($$66,$234)|0);
      $247 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $246;$nz$0 = $246;$pc$1 = $235;$s_time$0 = $247;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
      continue L1;
      break;
     }
     case 157:  {
      $248 = (__Z8get_le16PKv($108)|0);
      $249 = (($248) + ($x$0))|0;
      $250 = (($pc$1) + 3)|0;
      $251 = $249 >>> 13;
      $252 = (($33) + ($251<<2)|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = $249 & 8191;
      $255 = ($253|0)==(0|0);
      if (!($255)) {
       $256 = $a$0&255;
       $257 = (($253) + ($254)|0);
       HEAP8[$257>>0] = $256;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $250;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      $258 = HEAP8[$34>>0]|0;
      $259 = ($258<<24>>24)==(-1);
      if (!($259)) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $250;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      HEAP32[$2>>2] = $99;
      __ZN7Hes_Emu10cpu_write_Eji($$24,$254,$a$0);
      $260 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $250;$s_time$0 = $260;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 149:  {
      $261 = (($118) + ($x$0))|0;
      $262 = $261 & 255;
      $data$1 = $262;
      label = 39;
      break;
     }
     case 133:  {
      $data$1 = $118;
      label = 39;
      break;
     }
     case 26:  {
      $861 = (($a$0) + 1)|0;
      $862 = $861 & 255;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $862;$nz$0 = $861;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
      continue L1;
      break;
     }
     case 232:  {
      $863 = (($x$0) + 1)|0;
      $864 = $863 & 255;
      $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $863;$pc$1 = $111;$s_time$0 = $99;$x$0 = $864;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 200:  {
      $865 = (($y$0) + 1)|0;
      $866 = $865 & 255;
      $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $865;$pc$1 = $111;$s_time$0 = $99;$y$0 = $866;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 58:  {
      $867 = (($a$0) + -1)|0;
      $868 = $867 & 255;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $868;$nz$0 = $867;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
      continue L1;
      break;
     }
     case 202:  {
      $869 = (($x$0) + -1)|0;
      $870 = $869 & 255;
      $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $869;$pc$1 = $111;$s_time$0 = $99;$x$0 = $870;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 136:  {
      $871 = (($y$0) + -1)|0;
      $872 = $871 & 255;
      $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $871;$pc$1 = $111;$s_time$0 = $99;$y$0 = $872;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 246:  {
      $873 = (($118) + ($x$0))|0;
      $874 = $873 & 255;
      $data$61 = $874;$nz$8 = 1;
      label = 204;
      break;
     }
     case 214:  {
      $875 = (($118) + ($x$0))|0;
      $876 = $875 & 255;
      $data$60 = $876;
      label = 203;
      break;
     }
     case 198:  {
      $data$60 = $118;
      label = 203;
      break;
     }
     case 230:  {
      $data$61 = $118;$nz$8 = 1;
      label = 204;
      break;
     }
     case 254:  {
      $884 = (__Z8get_le16PKv($108)|0);
      $885 = (($884) + ($x$0))|0;
      $data$65 = $885;$nz$10 = 1;
      label = 210;
      break;
     }
     case 238:  {
      $886 = (__Z8get_le16PKv($108)|0);
      $data$65 = $886;$nz$10 = 1;
      label = 210;
      break;
     }
     case 222:  {
      $887 = (__Z8get_le16PKv($108)|0);
      $888 = (($887) + ($x$0))|0;
      $data$65 = $888;$nz$10 = -1;
      label = 210;
      break;
     }
     case 206:  {
      $889 = (__Z8get_le16PKv($108)|0);
      $data$65 = $889;$nz$10 = -1;
      label = 210;
      break;
     }
     case 168:  {
      $y$0$phi = $a$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $a$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 152:  {
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $y$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $y$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 170:  {
      $y$0$phi = $y$0;$x$0$phi = $a$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $a$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 138:  {
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $x$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 154:  {
      $897 = (($x$0) + 1)|0;
      $898 = $897 | 256;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$sp$0 = $898;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 186:  {
      $899 = (($sp$0) + 255)|0;
      $900 = $899 & 255;
      $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $900;$pc$1 = $111;$s_time$0 = $99;$x$0 = $900;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 2:  {
      $y$0$phi = $x$0;$x$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 34:  {
      $y$0$phi = $y$0;$x$0$phi = $a$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $x$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 66:  {
      $y$0$phi = $a$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $y$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 98:  {
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = 0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
      continue L1;
      break;
     }
     case 130:  {
      $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$x$0 = 0;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 194:  {
      $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = 0;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 72:  {
      $901 = (($sp$0) + -1)|0;
      $902 = $901 | 256;
      $903 = $a$0&255;
      $904 = (($this) + ($902)|0);
      HEAP8[$904>>0] = $903;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$sp$0 = $902;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 218:  {
      $905 = (($sp$0) + -1)|0;
      $906 = $905 | 256;
      $907 = $x$0&255;
      $908 = (($this) + ($906)|0);
      HEAP8[$908>>0] = $907;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$sp$0 = $906;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 90:  {
      $909 = (($sp$0) + -1)|0;
      $910 = $909 | 256;
      $911 = $y$0&255;
      $912 = (($this) + ($910)|0);
      HEAP8[$912>>0] = $911;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$sp$0 = $910;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 64:  {
      $913 = (($this) + ($sp$0)|0);
      $914 = HEAP8[$913>>0]|0;
      $915 = $914&255;
      $916 = (($sp$0) + -255)|0;
      $917 = $916 | 256;
      $918 = (($this) + ($917)|0);
      $919 = HEAP8[$918>>0]|0;
      $920 = $919&255;
      $921 = (($sp$0) + -254)|0;
      $922 = $921 | 256;
      $923 = (($this) + ($922)|0);
      $924 = HEAP8[$923>>0]|0;
      $925 = $924&255;
      $926 = $925 << 8;
      $927 = $926 | $920;
      $928 = (($sp$0) + -253)|0;
      $929 = $928 | 256;
      $930 = $915 & 76;
      $931 = $915 << 8;
      $932 = $915 & 2;
      $933 = $932 | $931;
      $934 = $933 ^ 2;
      $935 = $930&255;
      HEAP8[$21>>0] = $935;
      $936 = $915 ^ $status$0;
      $937 = $936 & 4;
      $938 = ($937|0)==(0);
      if ($938) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $931;$nz$0 = $934;$pc$1 = $927;$s_time$0 = $99;$sp$0 = $929;$status$0 = $930;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      $939 = HEAP32[$29>>2]|0;
      $940 = $915 & 4;
      $941 = ($940|0)==(0);
      if ($941) {
       $942 = HEAP32[$83>>2]|0;
       $943 = ($939|0)>($942|0);
       $$27 = $943 ? $942 : $939;
       $new_time$0 = $$27;
      } else {
       $new_time$0 = $939;
      }
      $944 = HEAP32[$84>>2]|0;
      HEAP32[$84>>2] = $new_time$0;
      $945 = (($99) - ($new_time$0))|0;
      $946 = (($945) + ($944))|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $931;$nz$0 = $934;$pc$1 = $927;$s_time$0 = $946;$sp$0 = $929;$status$0 = $930;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 104:  {
      $947 = (($this) + ($sp$0)|0);
      $948 = HEAP8[$947>>0]|0;
      $949 = $948&255;
      $950 = (($sp$0) + -255)|0;
      $951 = $950 | 256;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $949;$nz$0 = $949;$pc$1 = $111;$s_time$0 = $99;$sp$0 = $951;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
      continue L1;
      break;
     }
     case 250:  {
      $952 = (($this) + ($sp$0)|0);
      $953 = HEAP8[$952>>0]|0;
      $954 = $953&255;
      $955 = (($sp$0) + -255)|0;
      $956 = $955 | 256;
      $y$0$phi = $y$0;$status$0$phi = $status$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $954;$pc$1 = $111;$s_time$0 = $99;$sp$0 = $956;$x$0 = $954;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 122:  {
      $957 = (($this) + ($sp$0)|0);
      $958 = HEAP8[$957>>0]|0;
      $959 = $958&255;
      $960 = (($sp$0) + -255)|0;
      $961 = $960 | 256;
      $x$0$phi = $x$0;$status$0$phi = $status$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $959;$pc$1 = $111;$s_time$0 = $99;$sp$0 = $961;$y$0 = $959;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 40:  {
      $962 = (($this) + ($sp$0)|0);
      $963 = HEAP8[$962>>0]|0;
      $964 = $963&255;
      $965 = (($sp$0) + -255)|0;
      $966 = $965 | 256;
      $967 = $964 ^ $status$0;
      $968 = $964 & 76;
      $969 = $964 << 8;
      $970 = $964 & 2;
      $971 = $970 | $969;
      $972 = $971 ^ 2;
      $973 = $967 & 4;
      $974 = ($973|0)==(0);
      if ($974) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $969;$nz$0 = $972;$pc$1 = $111;$s_time$0 = $99;$sp$0 = $966;$status$0 = $968;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      $975 = $964 & 4;
      $976 = ($975|0)==(0);
      if ($976) {
       $c$8 = $969;$nz$11 = $972;$sp$2 = $966;$status$1 = $968;
       label = 246;
      } else {
       $c$9 = $969;$nz$12 = $972;$sp$3 = $966;$status$2 = $968;
       label = 252;
      }
      break;
     }
     case 56:  {
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = -1;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 24:  {
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = 0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 8:  {
      $977 = $status$0 & 76;
      $978 = $nz$0 >>> 8;
      $979 = $978 | $nz$0;
      $980 = $979 & 128;
      $981 = $977 | $980;
      $982 = $c$0 >>> 8;
      $983 = $982 & 1;
      $984 = $981 | $983;
      $985 = $nz$0 & 255;
      $986 = ($985|0)==(0);
      $987 = $984 | 2;
      $$28 = $986 ? $987 : $984;
      $988 = (($sp$0) + -1)|0;
      $989 = $988 | 256;
      $990 = $$28 | 16;
      $991 = $990&255;
      $992 = (($this) + ($989)|0);
      HEAP8[$992>>0] = $991;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$sp$0 = $989;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 184:  {
      $993 = $status$0 & -65;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$status$0 = $993;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 216:  {
      $994 = $status$0 & -9;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$status$0 = $994;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 248:  {
      $995 = $status$0 | 8;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$status$0 = $995;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 88:  {
      if (!($102)) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      $996 = $status$0 & -5;
      $c$8 = $c$0;$nz$11 = $nz$0;$sp$2 = $sp$0;$status$1 = $996;
      label = 246;
      break;
     }
     case 120:  {
      if ($102) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      $1007 = $status$0 | 4;
      $c$9 = $c$0;$nz$12 = $nz$0;$sp$3 = $sp$0;$status$2 = $1007;
      label = 252;
      break;
     }
     case 83:  {
      $1013 = $118 & 1;
      $1014 = ($1013|0)==(0);
      if (!($1014)) {
       __ZN7Hes_Cpu7set_mmrEii($this,0,$a$0);
      }
      $1015 = $118 & 2;
      $1016 = ($1015|0)==(0);
      if (!($1016)) {
       __ZN7Hes_Cpu7set_mmrEii($this,1,$a$0);
      }
      $1123 = $118 & 4;
      $1124 = ($1123|0)==(0);
      if (!($1124)) {
       __ZN7Hes_Cpu7set_mmrEii($this,2,$a$0);
      }
      $1125 = $118 & 8;
      $1126 = ($1125|0)==(0);
      if (!($1126)) {
       __ZN7Hes_Cpu7set_mmrEii($this,3,$a$0);
      }
      $1127 = $118 & 16;
      $1128 = ($1127|0)==(0);
      if (!($1128)) {
       __ZN7Hes_Cpu7set_mmrEii($this,4,$a$0);
      }
      $1129 = $118 & 32;
      $1130 = ($1129|0)==(0);
      if (!($1130)) {
       __ZN7Hes_Cpu7set_mmrEii($this,5,$a$0);
      }
      $1131 = $118 & 64;
      $1132 = ($1131|0)==(0);
      if (!($1132)) {
       __ZN7Hes_Cpu7set_mmrEii($this,6,$a$0);
      }
      $1133 = $118 & 128;
      $1134 = ($1133|0)==(0);
      if (!($1134)) {
       __ZN7Hes_Cpu7set_mmrEii($this,7,$a$0);
      }
      $1135 = (($pc$1) + 2)|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $1135;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 67:  {
      $a$1 = $a$0;$data$66 = $118;$in$0 = $88;
      while(1) {
       $1017 = $data$66 & 1;
       $1018 = ($1017|0)==(0);
       if ($1018) {
        $a$2 = $a$1;
       } else {
        $1019 = HEAP8[$in$0>>0]|0;
        $1020 = $1019&255;
        $a$2 = $1020;
       }
       $1021 = (($in$0) + 1|0);
       $1022 = $data$66 >>> 1;
       $1023 = ($1022|0)==(0);
       if ($1023) {
        $a$2$lcssa = $a$2;
        break;
       } else {
        $a$1 = $a$2;$data$66 = $1022;$in$0 = $1021;
       }
      }
      $100 = (($pc$1) + 2)|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $a$2$lcssa;$pc$1 = $100;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
      continue L1;
      break;
     }
     case 195:  {
      $in_alt$1 = 0;$in_inc$1 = -1;$out_alt$0 = 1;$out_inc$1 = -1;
      label = 266;
      break;
     }
     case 35: case 19: case 3:  {
      $1024 = $110 >>> 4;
      $1025 = ($1024|0)==(0);
      $1026 = (($1024) + 1)|0;
      $$29 = $1025 ? 0 : $1026;
      $1027 = (($pc$1) + 2)|0;
      HEAP32[$2>>2] = $99;
      $$80 = $89 ? 0 : $90;
      __ZN7Hes_Emu13cpu_write_vdpEii($$80,$$29,$118);
      $1028 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $1027;$s_time$0 = $1028;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 84:  {
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$illegal_encountered$0$off0 = 1;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 244:  {
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$illegal_encountered$0$off0 = 1;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 243:  {
      $in_alt$0 = 1;
      label = 263;
      break;
     }
     case 227:  {
      $in_alt$0 = 0;
      label = 263;
      break;
     }
     case 115:  {
      $in_alt$1 = 0;$in_inc$1 = 1;$out_alt$0 = 1;$out_inc$1 = 1;
      label = 266;
      break;
     }
     case 211:  {
      $in_alt$1 = 0;$in_inc$1 = 1;$out_alt$0 = 1;$out_inc$1 = 0;
      label = 266;
      break;
     }
     case 0:  {
      $1063 = (($pc$1) + 2)|0;
      $pc$22 = $1063;$result_$0 = 6;$s_time$14 = $99;
      break L3;
      break;
     }
     case 46:  {
      $c$3 = $c$0;$data$53 = $118;
      label = 184;
      break;
     }
     case 126:  {
      $837 = (($118) + ($x$0))|0;
      $c$2 = $c$0;$data$51 = $837;
      label = 180;
      break;
     }
     case 97:  {
      $745 = (($118) + ($x$0))|0;
      $746 = $745 & 255;
      $data$45 = $746;
      label = 163;
      break;
     }
     case 118:  {
      $838 = (($118) + ($x$0))|0;
      $839 = $838 & 255;
      $c$5 = $c$0;$data$56 = $839;
      label = 190;
      break;
     }
     case 86:  {
      $840 = (($118) + ($x$0))|0;
      $841 = $840 & 255;
      $data$55 = $841;
      label = 189;
      break;
     }
     case 70:  {
      $data$55 = $118;
      label = 189;
      break;
     }
     case 102:  {
      $c$5 = $c$0;$data$56 = $118;
      label = 190;
      break;
     }
     case 54:  {
      $850 = (($118) + ($x$0))|0;
      $851 = $850 & 255;
      $c$6 = $c$0;$data$58 = $851;
      label = 194;
      break;
     }
     case 22:  {
      $852 = (($118) + ($x$0))|0;
      $853 = $852 & 255;
      $data$57 = $853;
      label = 193;
      break;
     }
     case 6:  {
      $data$57 = $118;
      label = 193;
      break;
     }
     case 78:  {
      $data$50 = $118;
      label = 179;
      break;
     }
     case 62:  {
      $822 = (($118) + ($x$0))|0;
      $c$3 = $c$0;$data$53 = $822;
      label = 184;
      break;
     }
     case 110:  {
      $c$2 = $c$0;$data$51 = $118;
      label = 180;
      break;
     }
     case 30:  {
      $823 = (($118) + ($x$0))|0;
      $data$52 = $823;
      label = 183;
      break;
     }
     case 14:  {
      $data$52 = $118;
      label = 183;
      break;
     }
     case 113:  {
      $757 = (($this) + ($118)|0);
      $758 = HEAP8[$757>>0]|0;
      $759 = $758&255;
      $760 = (($759) + ($y$0))|0;
      $761 = (($118) + 1)|0;
      $762 = $761 & 255;
      $763 = (($this) + ($762)|0);
      $764 = HEAP8[$763>>0]|0;
      $765 = $764&255;
      $766 = $765 << 8;
      $767 = (($760) + ($766))|0;
      HEAP32[$2>>2] = $99;
      $data$4857 = $767;$pc$1959 = $111;
      label = 171;
      break;
     }
     case 117:  {
      $768 = (($118) + ($x$0))|0;
      $769 = $768 & 255;
      $data$46 = $769;
      label = 166;
      break;
     }
     case 101:  {
      $data$46 = $118;
      label = 166;
      break;
     }
     case 121:  {
      $773 = (($118) + ($y$0))|0;
      $data$47 = $773;
      label = 169;
      break;
     }
     case 125:  {
      $774 = (($118) + ($x$0))|0;
      $data$47 = $774;
      label = 169;
      break;
     }
     case 109:  {
      $data$47 = $118;
      label = 169;
      break;
     }
     case 74:  {
      $c$1 = 0;
      label = 175;
      break;
     }
     case 105:  {
      $data$49 = $118;$pc$20 = $111;$s_time$13 = $99;
      break;
     }
     case 106:  {
      $c$1 = $c$0;
      label = 175;
      break;
     }
     case 10:  {
      $803 = $a$0 << 1;
      $804 = $803 & 254;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0 = $804;$c$0 = $803;$nz$0 = $803;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;
      continue L1;
      break;
     }
     case 42:  {
      $805 = $a$0 << 1;
      $806 = $c$0 >>> 8;
      $807 = $806 & 1;
      $808 = $805 | $807;
      $809 = $808 & 255;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0 = $809;$c$0 = $805;$nz$0 = $808;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;
      continue L1;
      break;
     }
     case 94:  {
      $810 = (($118) + ($x$0))|0;
      $data$50 = $810;
      label = 179;
      break;
     }
     case 114:  {
      $data$45 = $118;
      label = 163;
      break;
     }
     case 100:  {
      $data$10 = $118;
      label = 81;
      break;
     }
     case 148:  {
      $483 = (($118) + ($x$0))|0;
      $484 = $483 & 255;
      $data$11 = $484;
      label = 83;
      break;
     }
     case 132:  {
      $data$11 = $118;
      label = 83;
      break;
     }
     case 150:  {
      $488 = (($118) + ($y$0))|0;
      $489 = $488 & 255;
      $data$12 = $489;
      label = 85;
      break;
     }
     case 134:  {
      $data$12 = $118;
      label = 85;
      break;
     }
     case 182:  {
      $493 = (($118) + ($y$0))|0;
      $494 = $493 & 255;
      $data$13 = $494;
      label = 87;
      break;
     }
     case 166:  {
      $data$13 = $118;
      label = 87;
      break;
     }
     case 162:  {
      $data$14 = $118;
      label = 88;
      break;
     }
     case 180:  {
      $499 = (($118) + ($x$0))|0;
      $500 = $499 & 255;
      $data$15 = $500;
      label = 90;
      break;
     }
     case 164:  {
      $data$15 = $118;
      label = 90;
      break;
     }
     case 160:  {
      $data$16 = $118;
      label = 91;
      break;
     }
     case 188:  {
      $505 = (($118) + ($x$0))|0;
      $data$17 = $505;
      label = 93;
      break;
     }
     case 142:  {
      $temp21$0 = $x$0;
      label = 95;
      break;
     }
     case 172:  {
      $data$17 = $118;
      label = 93;
      break;
     }
     case 140:  {
      $temp21$0 = $y$0;
      label = 95;
      break;
     }
     case 236:  {
      $517 = (__Z8get_le16PKv($108)|0);
      $518 = (($pc$1) + 2)|0;
      HEAP32[$2>>2] = $99;
      $$75 = $58 ? 0 : $59;
      $519 = (__ZN7Hes_Emu8cpu_readEj($$75,$517)|0);
      $520 = HEAP32[$2>>2]|0;
      $data$18 = $519;$pc$7 = $518;$s_time$6 = $520;
      label = 98;
      break;
     }
     case 228:  {
      $521 = (($this) + ($118)|0);
      $522 = HEAP8[$521>>0]|0;
      $523 = $522&255;
      $data$18 = $523;$pc$7 = $111;$s_time$6 = $99;
      label = 98;
      break;
     }
     case 224:  {
      $data$18 = $118;$pc$7 = $111;$s_time$6 = $99;
      label = 98;
      break;
     }
     case 204:  {
      $528 = (__Z8get_le16PKv($108)|0);
      $529 = (($pc$1) + 2)|0;
      HEAP32[$2>>2] = $99;
      $$76 = $60 ? 0 : $61;
      $530 = (__ZN7Hes_Emu8cpu_readEj($$76,$528)|0);
      $531 = HEAP32[$2>>2]|0;
      $data$19 = $530;$pc$8 = $529;$s_time$7 = $531;
      label = 101;
      break;
     }
     case 196:  {
      $532 = (($this) + ($118)|0);
      $533 = HEAP8[$532>>0]|0;
      $534 = $533&255;
      $data$19 = $534;$pc$8 = $111;$s_time$7 = $99;
      label = 101;
      break;
     }
     case 192:  {
      $data$19 = $118;$pc$8 = $111;$s_time$7 = $99;
      label = 101;
      break;
     }
     case 193:  {
      $539 = (($118) + ($x$0))|0;
      $540 = $539 & 255;
      $data$20 = $540;
      label = 103;
      break;
     }
     case 210:  {
      $data$20 = $118;
      label = 103;
      break;
     }
     case 209:  {
      $551 = (($this) + ($118)|0);
      $552 = HEAP8[$551>>0]|0;
      $553 = $552&255;
      $554 = (($553) + ($y$0))|0;
      $555 = (($118) + 1)|0;
      $556 = $555 & 255;
      $557 = (($this) + ($556)|0);
      $558 = HEAP8[$557>>0]|0;
      $559 = $558&255;
      $560 = $559 << 8;
      $561 = (($554) + ($560))|0;
      HEAP32[$2>>2] = $99;
      $data$2332 = $561;$pc$934 = $111;
      label = 111;
      break;
     }
     case 213:  {
      $562 = (($118) + ($x$0))|0;
      $563 = $562 & 255;
      $data$21 = $563;
      label = 106;
      break;
     }
     case 197:  {
      $data$21 = $118;
      label = 106;
      break;
     }
     case 217:  {
      $567 = (($118) + ($y$0))|0;
      $data$22 = $567;
      label = 109;
      break;
     }
     case 221:  {
      $568 = (($118) + ($x$0))|0;
      $data$22 = $568;
      label = 109;
      break;
     }
     case 205:  {
      $data$22 = $118;
      label = 109;
      break;
     }
     case 201:  {
      $data$24 = $118;$pc$10 = $111;$s_time$8 = $99;
      label = 113;
      break;
     }
     case 33:  {
      $582 = (($118) + ($x$0))|0;
      $583 = $582 & 255;
      $data$25 = $583;
      label = 115;
      break;
     }
     case 50:  {
      $data$25 = $118;
      label = 115;
      break;
     }
     case 49:  {
      $594 = (($this) + ($118)|0);
      $595 = HEAP8[$594>>0]|0;
      $596 = $595&255;
      $597 = (($596) + ($y$0))|0;
      $598 = (($118) + 1)|0;
      $599 = $598 & 255;
      $600 = (($this) + ($599)|0);
      $601 = HEAP8[$600>>0]|0;
      $602 = $601&255;
      $603 = $602 << 8;
      $604 = (($597) + ($603))|0;
      HEAP32[$2>>2] = $99;
      $data$2837 = $604;$pc$1139 = $111;
      label = 123;
      break;
     }
     case 53:  {
      $605 = (($118) + ($x$0))|0;
      $606 = $605 & 255;
      $data$26 = $606;
      label = 118;
      break;
     }
     case 37:  {
      $data$26 = $118;
      label = 118;
      break;
     }
     case 57:  {
      $610 = (($118) + ($y$0))|0;
      $data$27 = $610;
      label = 121;
      break;
     }
     case 61:  {
      $611 = (($118) + ($x$0))|0;
      $data$27 = $611;
      label = 121;
      break;
     }
     case 45:  {
      $data$27 = $118;
      label = 121;
      break;
     }
     case 41:  {
      $data$29 = $118;$pc$12 = $111;$s_time$9 = $99;
      label = 125;
      break;
     }
     case 65:  {
      $623 = (($118) + ($x$0))|0;
      $624 = $623 & 255;
      $data$30 = $624;
      label = 127;
      break;
     }
     case 82:  {
      $data$30 = $118;
      label = 127;
      break;
     }
     case 81:  {
      $635 = (($this) + ($118)|0);
      $636 = HEAP8[$635>>0]|0;
      $637 = $636&255;
      $638 = (($637) + ($y$0))|0;
      $639 = (($118) + 1)|0;
      $640 = $639 & 255;
      $641 = (($this) + ($640)|0);
      $642 = HEAP8[$641>>0]|0;
      $643 = $642&255;
      $644 = $643 << 8;
      $645 = (($638) + ($644))|0;
      HEAP32[$2>>2] = $99;
      $data$3342 = $645;$pc$1344 = $111;
      label = 135;
      break;
     }
     case 85:  {
      $646 = (($118) + ($x$0))|0;
      $647 = $646 & 255;
      $data$31 = $647;
      label = 130;
      break;
     }
     case 69:  {
      $data$31 = $118;
      label = 130;
      break;
     }
     case 89:  {
      $651 = (($118) + ($y$0))|0;
      $data$32 = $651;
      label = 133;
      break;
     }
     case 93:  {
      $652 = (($118) + ($x$0))|0;
      $data$32 = $652;
      label = 133;
      break;
     }
     case 77:  {
      $data$32 = $118;
      label = 133;
      break;
     }
     case 73:  {
      $data$34 = $118;$pc$14 = $111;$s_time$10 = $99;
      label = 137;
      break;
     }
     case 1:  {
      $664 = (($118) + ($x$0))|0;
      $665 = $664 & 255;
      $data$35 = $665;
      label = 139;
      break;
     }
     case 18:  {
      $data$35 = $118;
      label = 139;
      break;
     }
     case 17:  {
      $676 = (($this) + ($118)|0);
      $677 = HEAP8[$676>>0]|0;
      $678 = $677&255;
      $679 = (($678) + ($y$0))|0;
      $680 = (($118) + 1)|0;
      $681 = $680 & 255;
      $682 = (($this) + ($681)|0);
      $683 = HEAP8[$682>>0]|0;
      $684 = $683&255;
      $685 = $684 << 8;
      $686 = (($679) + ($685))|0;
      HEAP32[$2>>2] = $99;
      $data$3847 = $686;$pc$1549 = $111;
      label = 147;
      break;
     }
     case 21:  {
      $687 = (($118) + ($x$0))|0;
      $688 = $687 & 255;
      $data$36 = $688;
      label = 142;
      break;
     }
     case 5:  {
      $data$36 = $118;
      label = 142;
      break;
     }
     case 25:  {
      $692 = (($118) + ($y$0))|0;
      $data$37 = $692;
      label = 145;
      break;
     }
     case 29:  {
      $693 = (($118) + ($x$0))|0;
      $data$37 = $693;
      label = 145;
      break;
     }
     case 13:  {
      $data$37 = $118;
      label = 145;
      break;
     }
     case 9:  {
      $data$39 = $118;$pc$16 = $111;$s_time$11 = $99;
      label = 149;
      break;
     }
     case 225:  {
      $705 = (($118) + ($x$0))|0;
      $706 = $705 & 255;
      $data$40 = $706;
      label = 151;
      break;
     }
     case 242:  {
      $data$40 = $118;
      label = 151;
      break;
     }
     case 241:  {
      $717 = (($this) + ($118)|0);
      $718 = HEAP8[$717>>0]|0;
      $719 = $718&255;
      $720 = (($719) + ($y$0))|0;
      $721 = (($118) + 1)|0;
      $722 = $721 & 255;
      $723 = (($this) + ($722)|0);
      $724 = HEAP8[$723>>0]|0;
      $725 = $724&255;
      $726 = $725 << 8;
      $727 = (($720) + ($726))|0;
      HEAP32[$2>>2] = $99;
      $data$4352 = $727;$pc$1754 = $111;
      label = 159;
      break;
     }
     case 245:  {
      $728 = (($118) + ($x$0))|0;
      $729 = $728 & 255;
      $data$41 = $729;
      label = 154;
      break;
     }
     case 229:  {
      $data$41 = $118;
      label = 154;
      break;
     }
     case 249:  {
      $733 = (($118) + ($y$0))|0;
      $data$42 = $733;
      label = 157;
      break;
     }
     case 253:  {
      $734 = (($118) + ($x$0))|0;
      $data$42 = $734;
      label = 157;
      break;
     }
     case 237:  {
      $data$42 = $118;
      label = 157;
      break;
     }
     case 233:  {
      $data$44 = $118;$pc$18 = $111;$s_time$12 = $99;
      label = 161;
      break;
     }
     default: {
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$illegal_encountered$0$off0 = 1;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
     }
     }
    } while(0);
    switch (label|0) {
     case 22: {
      label = 0;
      $167 = $117 << 24 >> 24;
      $168 = (($pc$1) + 2)|0;
      $169 = (($168) + ($167))|0;
      $170 = $169 & 65535;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $170;$s_time$0 = $99;$sp$0 = $sp$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 24: {
      label = 0;
      $172 = (($this) + ($118)|0);
      $173 = HEAP8[$172>>0]|0;
      $174 = $173&255;
      $175 = ($174*257)|0;
      $176 = $175 ^ 255;
      $177 = (($pc$1) + 3)|0;
      $178 = $110 >>> 4;
      $179 = 1 << $178;
      $180 = $176 & $179;
      $181 = ($180|0)==(0);
      if ($181) {
       $pc$0 = $177;
       label = 2;
      } else {
       $$sum23 = (($106) + 2)|0;
       $182 = (($105) + ($$sum23)|0);
       $183 = HEAP8[$182>>0]|0;
       $184 = $183 << 24 >> 24;
       $185 = (($184) + ($177))|0;
       $186 = $185 & 65535;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $186;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      break;
     }
     case 28: {
      label = 0;
      $$sum22 = (($106) + 2)|0;
      $189 = (($105) + ($$sum22)|0);
      $190 = HEAP8[$189>>0]|0;
      $191 = $190&255;
      $192 = $191 << 8;
      $193 = (($192) + ($data$0))|0;
      $194 = $193 & 8191;
      $195 = $193 >>> 13;
      $196 = (($s) + ($195<<2)|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (($197) + ($194)|0);
      $199 = (__Z8get_le16PKv($198)|0);
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $199;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 39: {
      label = 0;
      $263 = (($pc$1) + 2)|0;
      $264 = $a$0&255;
      $265 = (($this) + ($data$1)|0);
      HEAP8[$265>>0] = $264;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $263;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 45: {
      label = 0;
      $298 = (($data$2) + 1)|0;
      $299 = $298 & 255;
      $300 = (($this) + ($299)|0);
      $301 = HEAP8[$300>>0]|0;
      $302 = $301&255;
      $303 = $302 << 8;
      $304 = (($this) + ($data$2)|0);
      $305 = HEAP8[$304>>0]|0;
      $306 = $305&255;
      $307 = $303 | $306;
      $308 = (($pc$1) + 2)|0;
      $addr13$0 = $307;$pc$2 = $308;
      label = 48;
      break;
     }
     case 47: {
      label = 0;
      $$sum20 = (($106) + 2)|0;
      $310 = (($105) + ($$sum20)|0);
      $311 = HEAP8[$310>>0]|0;
      $312 = $311&255;
      $313 = $312 << 8;
      $314 = (($313) + ($data$3))|0;
      $315 = (($pc$1) + 3)|0;
      $addr13$0 = $314;$pc$2 = $315;
      label = 48;
      break;
     }
     case 53: {
      label = 0;
      $328 = (($data$4) + 1)|0;
      $329 = $328 & 255;
      $330 = (($this) + ($329)|0);
      $331 = HEAP8[$330>>0]|0;
      $332 = $331&255;
      $333 = $332 << 8;
      $334 = (($this) + ($data$4)|0);
      $335 = HEAP8[$334>>0]|0;
      $336 = $335&255;
      $337 = $333 | $336;
      $338 = (($pc$1) + 2)|0;
      $addr15$0 = $337;$pc$3 = $338;
      label = 57;
      break;
     }
     case 56: {
      label = 0;
      $$sum19 = (($106) + 2)|0;
      $352 = (($105) + ($$sum19)|0);
      $353 = HEAP8[$352>>0]|0;
      $354 = $353&255;
      $355 = $354 << 8;
      $356 = (($355) + ($data$5))|0;
      $357 = (($pc$1) + 3)|0;
      $addr15$0 = $356;$pc$3 = $357;
      label = 57;
      break;
     }
     case 63: {
      label = 0;
      $383 = (($pc$1) + 2)|0;
      $$sum18 = (($106) + 2)|0;
      $384 = (($105) + ($$sum18)|0);
      $385 = HEAP8[$384>>0]|0;
      $386 = $385&255;
      $387 = $386 << 8;
      $388 = (($387) + ($data$6))|0;
      HEAP32[$2>>2] = $99;
      $$69 = $45 ? 0 : $46;
      $389 = (__ZN7Hes_Emu8cpu_readEj($$69,$388)|0);
      $390 = HEAP32[$2>>2]|0;
      $nz$4 = $389;$pc$4 = $383;$s_time$4 = $390;
      label = 66;
      break;
     }
     case 65: {
      label = 0;
      $393 = (($this) + ($data$7)|0);
      $394 = HEAP8[$393>>0]|0;
      $395 = $394&255;
      $nz$4 = $395;$pc$4 = $111;$s_time$4 = $99;
      label = 66;
      break;
     }
     case 69: {
      label = 0;
      $$sum16 = (($106) + 3)|0;
      $410 = (($105) + ($$sum16)|0);
      $411 = HEAP8[$410>>0]|0;
      $412 = $411&255;
      $413 = $412 << 8;
      $414 = (($413) + ($addr18$0))|0;
      $415 = (($pc$1) + 2)|0;
      HEAP32[$2>>2] = $99;
      $$70 = $47 ? 0 : $48;
      $416 = (__ZN7Hes_Emu8cpu_readEj($$70,$414)|0);
      $417 = HEAP32[$2>>2]|0;
      $nz$5 = $416;$pc$5 = $415;$s_time$5 = $417;
      label = 72;
      break;
     }
     case 75: {
      label = 0;
      HEAP32[$2>>2] = $99;
      $$71 = $49 ? 0 : $51;
      $442 = (__ZN7Hes_Emu8cpu_readEj($$71,$addr19$0)|0);
      $443 = $442 | $a$0;
      $444 = $110 & 16;
      $445 = ($444|0)==(0);
      $446 = $445 ? 0 : $a$0;
      $$26 = $443 ^ $446;
      $447 = $status$0 & -65;
      $448 = $$26 & 64;
      $449 = $448 | $447;
      $450 = (($pc$6) + 1)|0;
      $451 = $49 ? 0 : $50;
      __ZN7Hes_Emu9cpu_writeEji($451,$addr19$0,$$26);
      $452 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$26;$pc$1 = $450;$s_time$0 = $452;$status$0 = $449;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 79: {
      label = 0;
      $$sum12 = (($106) + 2)|0;
      $472 = (($105) + ($$sum12)|0);
      $473 = HEAP8[$472>>0]|0;
      $474 = $473&255;
      $475 = $474 << 8;
      $476 = (($475) + ($data$9))|0;
      $477 = (($pc$1) + 3)|0;
      HEAP32[$2>>2] = $99;
      $$72 = $52 ? 0 : $53;
      __ZN7Hes_Emu9cpu_writeEji($$72,$476,0);
      $478 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $477;$s_time$0 = $478;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 81: {
      label = 0;
      $481 = (($pc$1) + 2)|0;
      $482 = (($this) + ($data$10)|0);
      HEAP8[$482>>0] = 0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $481;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 83: {
      label = 0;
      $485 = (($pc$1) + 2)|0;
      $486 = $y$0&255;
      $487 = (($this) + ($data$11)|0);
      HEAP8[$487>>0] = $486;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $485;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 85: {
      label = 0;
      $490 = (($pc$1) + 2)|0;
      $491 = $x$0&255;
      $492 = (($this) + ($data$12)|0);
      HEAP8[$492>>0] = $491;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $490;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 87: {
      label = 0;
      $495 = (($this) + ($data$13)|0);
      $496 = HEAP8[$495>>0]|0;
      $497 = $496&255;
      $data$14 = $497;
      label = 88;
      break;
     }
     case 90: {
      label = 0;
      $501 = (($this) + ($data$15)|0);
      $502 = HEAP8[$501>>0]|0;
      $503 = $502&255;
      $data$16 = $503;
      label = 91;
      break;
     }
     case 93: {
      label = 0;
      $$sum11 = (($106) + 2)|0;
      $506 = (($105) + ($$sum11)|0);
      $507 = HEAP8[$506>>0]|0;
      $508 = $507&255;
      $509 = $508 << 8;
      $510 = (($509) + ($data$17))|0;
      $511 = (($pc$1) + 3)|0;
      HEAP32[$2>>2] = $99;
      $$73 = $54 ? 0 : $55;
      $512 = (__ZN7Hes_Emu8cpu_readEj($$73,$510)|0);
      $513 = HEAP32[$2>>2]|0;
      $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $512;$pc$1 = $511;$s_time$0 = $513;$y$0 = $512;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 95: {
      label = 0;
      $514 = (__Z8get_le16PKv($108)|0);
      $515 = (($pc$1) + 3)|0;
      HEAP32[$2>>2] = $99;
      $$74 = $56 ? 0 : $57;
      __ZN7Hes_Emu9cpu_writeEji($$74,$514,$temp21$0);
      $516 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $515;$s_time$0 = $516;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 98: {
      label = 0;
      $524 = (($x$0) - ($data$18))|0;
      $525 = (($pc$7) + 1)|0;
      $526 = $524 ^ -1;
      $527 = $524 & 255;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $526;$nz$0 = $527;$pc$1 = $525;$s_time$0 = $s_time$6;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 101: {
      label = 0;
      $535 = (($y$0) - ($data$19))|0;
      $536 = (($pc$8) + 1)|0;
      $537 = $535 ^ -1;
      $538 = $535 & 255;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $537;$nz$0 = $538;$pc$1 = $536;$s_time$0 = $s_time$7;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 103: {
      label = 0;
      $541 = (($data$20) + 1)|0;
      $542 = $541 & 255;
      $543 = (($this) + ($542)|0);
      $544 = HEAP8[$543>>0]|0;
      $545 = $544&255;
      $546 = $545 << 8;
      $547 = (($this) + ($data$20)|0);
      $548 = HEAP8[$547>>0]|0;
      $549 = $548&255;
      $550 = $546 | $549;
      $data$23 = $550;$pc$9 = $111;
      label = 110;
      break;
     }
     case 106: {
      label = 0;
      $564 = (($this) + ($data$21)|0);
      $565 = HEAP8[$564>>0]|0;
      $566 = $565&255;
      $data$24 = $566;$pc$10 = $111;$s_time$8 = $99;
      label = 113;
      break;
     }
     case 109: {
      label = 0;
      $569 = (($pc$1) + 2)|0;
      $$sum10 = (($106) + 2)|0;
      $570 = (($105) + ($$sum10)|0);
      $571 = HEAP8[$570>>0]|0;
      $572 = $571&255;
      $573 = $572 << 8;
      $574 = (($573) + ($data$22))|0;
      $data$23 = $574;$pc$9 = $569;
      label = 110;
      break;
     }
     case 115: {
      label = 0;
      $584 = (($data$25) + 1)|0;
      $585 = $584 & 255;
      $586 = (($this) + ($585)|0);
      $587 = HEAP8[$586>>0]|0;
      $588 = $587&255;
      $589 = $588 << 8;
      $590 = (($this) + ($data$25)|0);
      $591 = HEAP8[$590>>0]|0;
      $592 = $591&255;
      $593 = $589 | $592;
      $data$28 = $593;$pc$11 = $111;
      label = 122;
      break;
     }
     case 118: {
      label = 0;
      $607 = (($this) + ($data$26)|0);
      $608 = HEAP8[$607>>0]|0;
      $609 = $608&255;
      $data$29 = $609;$pc$12 = $111;$s_time$9 = $99;
      label = 125;
      break;
     }
     case 121: {
      label = 0;
      $612 = (($pc$1) + 2)|0;
      $$sum9 = (($106) + 2)|0;
      $613 = (($105) + ($$sum9)|0);
      $614 = HEAP8[$613>>0]|0;
      $615 = $614&255;
      $616 = $615 << 8;
      $617 = (($616) + ($data$27))|0;
      $data$28 = $617;$pc$11 = $612;
      label = 122;
      break;
     }
     case 127: {
      label = 0;
      $625 = (($data$30) + 1)|0;
      $626 = $625 & 255;
      $627 = (($this) + ($626)|0);
      $628 = HEAP8[$627>>0]|0;
      $629 = $628&255;
      $630 = $629 << 8;
      $631 = (($this) + ($data$30)|0);
      $632 = HEAP8[$631>>0]|0;
      $633 = $632&255;
      $634 = $630 | $633;
      $data$33 = $634;$pc$13 = $111;
      label = 134;
      break;
     }
     case 130: {
      label = 0;
      $648 = (($this) + ($data$31)|0);
      $649 = HEAP8[$648>>0]|0;
      $650 = $649&255;
      $data$34 = $650;$pc$14 = $111;$s_time$10 = $99;
      label = 137;
      break;
     }
     case 133: {
      label = 0;
      $653 = (($pc$1) + 2)|0;
      $$sum8 = (($106) + 2)|0;
      $654 = (($105) + ($$sum8)|0);
      $655 = HEAP8[$654>>0]|0;
      $656 = $655&255;
      $657 = $656 << 8;
      $658 = (($657) + ($data$32))|0;
      $data$33 = $658;$pc$13 = $653;
      label = 134;
      break;
     }
     case 139: {
      label = 0;
      $666 = (($data$35) + 1)|0;
      $667 = $666 & 255;
      $668 = (($this) + ($667)|0);
      $669 = HEAP8[$668>>0]|0;
      $670 = $669&255;
      $671 = $670 << 8;
      $672 = (($this) + ($data$35)|0);
      $673 = HEAP8[$672>>0]|0;
      $674 = $673&255;
      $675 = $671 | $674;
      $data$38 = $675;$pc$15 = $111;
      label = 146;
      break;
     }
     case 142: {
      label = 0;
      $689 = (($this) + ($data$36)|0);
      $690 = HEAP8[$689>>0]|0;
      $691 = $690&255;
      $data$39 = $691;$pc$16 = $111;$s_time$11 = $99;
      label = 149;
      break;
     }
     case 145: {
      label = 0;
      $694 = (($pc$1) + 2)|0;
      $$sum7 = (($106) + 2)|0;
      $695 = (($105) + ($$sum7)|0);
      $696 = HEAP8[$695>>0]|0;
      $697 = $696&255;
      $698 = $697 << 8;
      $699 = (($698) + ($data$37))|0;
      $data$38 = $699;$pc$15 = $694;
      label = 146;
      break;
     }
     case 151: {
      label = 0;
      $707 = (($data$40) + 1)|0;
      $708 = $707 & 255;
      $709 = (($this) + ($708)|0);
      $710 = HEAP8[$709>>0]|0;
      $711 = $710&255;
      $712 = $711 << 8;
      $713 = (($this) + ($data$40)|0);
      $714 = HEAP8[$713>>0]|0;
      $715 = $714&255;
      $716 = $712 | $715;
      $data$43 = $716;$pc$17 = $111;
      label = 158;
      break;
     }
     case 154: {
      label = 0;
      $730 = (($this) + ($data$41)|0);
      $731 = HEAP8[$730>>0]|0;
      $732 = $731&255;
      $data$44 = $732;$pc$18 = $111;$s_time$12 = $99;
      label = 161;
      break;
     }
     case 157: {
      label = 0;
      $735 = (($pc$1) + 2)|0;
      $$sum6 = (($106) + 2)|0;
      $736 = (($105) + ($$sum6)|0);
      $737 = HEAP8[$736>>0]|0;
      $738 = $737&255;
      $739 = $738 << 8;
      $740 = (($739) + ($data$42))|0;
      $data$43 = $740;$pc$17 = $735;
      label = 158;
      break;
     }
     case 163: {
      label = 0;
      $747 = (($data$45) + 1)|0;
      $748 = $747 & 255;
      $749 = (($this) + ($748)|0);
      $750 = HEAP8[$749>>0]|0;
      $751 = $750&255;
      $752 = $751 << 8;
      $753 = (($this) + ($data$45)|0);
      $754 = HEAP8[$753>>0]|0;
      $755 = $754&255;
      $756 = $752 | $755;
      $data$48 = $756;$pc$19 = $111;
      label = 170;
      break;
     }
     case 166: {
      label = 0;
      $770 = (($this) + ($data$46)|0);
      $771 = HEAP8[$770>>0]|0;
      $772 = $771&255;
      $data$49 = $772;$pc$20 = $111;$s_time$13 = $99;
      break;
     }
     case 169: {
      label = 0;
      $775 = (($pc$1) + 2)|0;
      $$sum5 = (($106) + 2)|0;
      $776 = (($105) + ($$sum5)|0);
      $777 = HEAP8[$776>>0]|0;
      $778 = $777&255;
      $779 = $778 << 8;
      $780 = (($779) + ($data$47))|0;
      $data$48 = $780;$pc$19 = $775;
      label = 170;
      break;
     }
     case 175: {
      label = 0;
      $798 = $c$1 >>> 1;
      $799 = $798 & 128;
      $800 = $a$0 << 8;
      $801 = $a$0 >>> 1;
      $802 = $799 | $801;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0 = $802;$c$0 = $800;$nz$0 = $802;$pc$1 = $111;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;
      continue L1;
      break;
     }
     case 179: {
      label = 0;
      $c$2 = 0;$data$51 = $data$50;
      label = 180;
      break;
     }
     case 183: {
      label = 0;
      $c$3 = 0;$data$53 = $data$52;
      label = 184;
      break;
     }
     case 189: {
      label = 0;
      $c$5 = 0;$data$56 = $data$55;
      label = 190;
      break;
     }
     case 193: {
      label = 0;
      $c$6 = 0;$data$58 = $data$57;
      label = 194;
      break;
     }
     case 203: {
      label = 0;
      $data$61 = $data$60;$nz$8 = -1;
      label = 204;
      break;
     }
     case 210: {
      label = 0;
      HEAP32[$2>>2] = $99;
      if ($80) {
       $890 = (__ZN7Hes_Emu8cpu_readEj(0,$data$65)|0);
       $$pn = $890;$895 = 0;
      } else {
       $891 = (__ZN7Hes_Emu8cpu_readEj($81,$data$65)|0);
       $$pn = $891;$895 = $82;
      }
      $892 = (($$pn) + ($nz$10))|0;
      $893 = (($pc$1) + 3)|0;
      $894 = $892 & 255;
      __ZN7Hes_Emu9cpu_writeEji($895,$data$65,$894);
      $896 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $892;$pc$1 = $893;$s_time$0 = $896;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 246: {
      label = 0;
      $997 = $status$1&255;
      HEAP8[$21>>0] = $997;
      $998 = HEAP32[$85>>2]|0;
      $999 = HEAP32[$86>>2]|0;
      $1000 = (($998) - ($999))|0;
      $1001 = ($1000|0)<(1);
      if ($1001) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$11;$pc$1 = $111;$s_time$0 = $99;$sp$0 = $sp$2;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      HEAP32[$85>>2] = $999;
      $1002 = (($1000) + ($99))|0;
      $1003 = ($1002|0)<(0);
      if ($1003) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$11;$pc$1 = $111;$s_time$0 = $1002;$sp$0 = $sp$2;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      $1004 = (($1002) + 1)|0;
      $1005 = ($1000|0)<($1004|0);
      if ($1005) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$11;$pc$1 = $111;$s_time$0 = $1002;$sp$0 = $sp$2;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      $1006 = (($1004) + ($999))|0;
      HEAP32[$85>>2] = $1006;
      HEAP32[$86>>2] = $1006;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$11;$pc$1 = $111;$s_time$0 = -1;$sp$0 = $sp$2;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 252: {
      label = 0;
      $1008 = $status$2&255;
      HEAP8[$21>>0] = $1008;
      $1009 = HEAP32[$87>>2]|0;
      $1010 = HEAP32[$29>>2]|0;
      HEAP32[$87>>2] = $1010;
      $1011 = (($1009) + ($99))|0;
      $1012 = (($1011) - ($1010))|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$9;$nz$0 = $nz$12;$pc$1 = $111;$s_time$0 = $1012;$sp$0 = $sp$3;$status$0 = $status$2;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 263: {
      label = 0;
      $1029 = $in_alt$0 ^ 1;
      $phitmp = ($in_alt$0|0)==(1);
      $in_alt$1 = $in_alt$0;$in_inc$1 = $1029;$out_alt$0 = $phitmp;$out_inc$1 = $in_alt$0;
      label = 266;
      break;
     }
    }
    switch (label|0) {
     case 2: {
      label = 0;
      $98 = (($99) + -2)|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$0;$s_time$0 = $98;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 48: {
      label = 0;
      $316 = $addr13$0 >>> 13;
      $317 = (($38) + ($316<<2)|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = $addr13$0 & 8191;
      $320 = ($318|0)==(0|0);
      if (!($320)) {
       $321 = $a$0&255;
       $322 = (($318) + ($319)|0);
       HEAP8[$322>>0] = $321;
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$2;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      $323 = HEAP8[$39>>0]|0;
      $324 = ($323<<24>>24)==(-1);
      if (!($324)) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$2;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       continue L1;
      }
      HEAP32[$2>>2] = $99;
      __ZN7Hes_Emu10cpu_write_Eji($$25,$319,$a$0);
      $325 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$2;$s_time$0 = $325;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 57: {
      label = 0;
      $358 = $addr15$0 & 8191;
      $359 = $addr15$0 >>> 13;
      $360 = (($s) + ($359<<2)|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = (($361) + ($358)|0);
      $363 = HEAP8[$362>>0]|0;
      $364 = $363&255;
      $365 = ((($this) + ($359)|0) + 8200|0);
      $366 = HEAP8[$365>>0]|0;
      $367 = ($366<<24>>24)==(-1);
      if (!($367)) {
       $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $364;$nz$0 = $364;$pc$1 = $pc$3;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
       continue L1;
      }
      HEAP32[$2>>2] = $99;
      $$67 = $41 ? 0 : $42;
      $368 = (__ZN7Hes_Emu9cpu_read_Ej($$67,$addr15$0)|0);
      $369 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $368;$nz$0 = $368;$pc$1 = $pc$3;$s_time$0 = $369;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
      continue L1;
      break;
     }
     case 66: {
      label = 0;
      $396 = (($pc$4) + 1)|0;
      $397 = $status$0 & -65;
      $398 = $nz$4 & 64;
      $399 = $398 | $397;
      $400 = $nz$4 & $a$0;
      $401 = ($400|0)==(0);
      $402 = $nz$4 << 8;
      $$nz$4 = $401 ? $402 : $nz$4;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$nz$4;$pc$1 = $396;$s_time$0 = $s_time$4;$status$0 = $399;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 72: {
      label = 0;
      $432 = (($pc$5) + 2)|0;
      $433 = $status$0 & -65;
      $434 = $nz$5 & 64;
      $435 = $434 | $433;
      $436 = $nz$5 & $118;
      $437 = ($436|0)==(0);
      $438 = $nz$5 << 8;
      $$nz$5 = $437 ? $438 : $nz$5;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$nz$5;$pc$1 = $432;$s_time$0 = $s_time$5;$status$0 = $435;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 88: {
      label = 0;
      $498 = (($pc$1) + 2)|0;
      $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$14;$pc$1 = $498;$s_time$0 = $99;$x$0 = $data$14;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 91: {
      label = 0;
      $504 = (($pc$1) + 2)|0;
      $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$16;$pc$1 = $504;$s_time$0 = $99;$y$0 = $data$16;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
     case 110: {
      label = 0;
      HEAP32[$2>>2] = $99;
      if ($62) {
       $575 = 0;$data$2333 = $data$23;$pc$935 = $pc$9;
       label = 112;
      } else {
       $data$2332 = $data$23;$pc$934 = $pc$9;
       label = 111;
      }
      break;
     }
     case 122: {
      label = 0;
      HEAP32[$2>>2] = $99;
      if ($64) {
       $618 = 0;$data$2838 = $data$28;$pc$1140 = $pc$11;
       label = 124;
      } else {
       $data$2837 = $data$28;$pc$1139 = $pc$11;
       label = 123;
      }
      break;
     }
     case 134: {
      label = 0;
      HEAP32[$2>>2] = $99;
      if ($66) {
       $659 = 0;$data$3343 = $data$33;$pc$1345 = $pc$13;
       label = 136;
      } else {
       $data$3342 = $data$33;$pc$1344 = $pc$13;
       label = 135;
      }
      break;
     }
     case 146: {
      label = 0;
      HEAP32[$2>>2] = $99;
      if ($68) {
       $700 = 0;$data$3848 = $data$38;$pc$1550 = $pc$15;
       label = 148;
      } else {
       $data$3847 = $data$38;$pc$1549 = $pc$15;
       label = 147;
      }
      break;
     }
     case 158: {
      label = 0;
      HEAP32[$2>>2] = $99;
      if ($70) {
       $741 = 0;$data$4353 = $data$43;$pc$1755 = $pc$17;
       label = 160;
      } else {
       $data$4352 = $data$43;$pc$1754 = $pc$17;
       label = 159;
      }
      break;
     }
     case 170: {
      label = 0;
      HEAP32[$2>>2] = $99;
      if ($72) {
       $781 = 0;$data$4858 = $data$48;$pc$1960 = $pc$19;
       label = 172;
      } else {
       $data$4857 = $data$48;$pc$1959 = $pc$19;
       label = 171;
      }
      break;
     }
     case 180: {
      label = 0;
      $$sum3 = (($106) + 2)|0;
      $811 = (($105) + ($$sum3)|0);
      $812 = HEAP8[$811>>0]|0;
      $813 = $812&255;
      $814 = $813 << 8;
      $815 = (($814) + ($data$51))|0;
      HEAP32[$2>>2] = $99;
      $$77 = $74 ? 0 : $75;
      $816 = (__ZN7Hes_Emu8cpu_readEj($$77,$815)|0);
      $817 = $c$2 >>> 1;
      $818 = $817 & 128;
      $819 = $816 >> 1;
      $820 = $819 | $818;
      $821 = $816 << 8;
      $c$4 = $821;$data$54 = $815;$nz$7 = $820;
      label = 185;
      break;
     }
     case 184: {
      label = 0;
      $$sum4 = (($106) + 2)|0;
      $824 = (($105) + ($$sum4)|0);
      $825 = HEAP8[$824>>0]|0;
      $826 = $825&255;
      $827 = $826 << 8;
      $828 = (($827) + ($data$53))|0;
      $829 = $c$3 >>> 8;
      $830 = $829 & 1;
      HEAP32[$2>>2] = $99;
      $$78 = $78 ? 0 : $79;
      $831 = (__ZN7Hes_Emu8cpu_readEj($$78,$828)|0);
      $832 = $831 << 1;
      $833 = $832 | $830;
      $c$4 = $832;$data$54 = $828;$nz$7 = $833;
      label = 185;
      break;
     }
     case 190: {
      label = 0;
      $842 = (($this) + ($data$56)|0);
      $843 = HEAP8[$842>>0]|0;
      $844 = $843&255;
      $845 = $c$5 >>> 1;
      $846 = $845 & 128;
      $847 = $844 >>> 1;
      $848 = $847 | $846;
      $849 = $844 << 8;
      $c$7 = $849;$data$62 = $data$56;$nz$9 = $848;
      label = 205;
      break;
     }
     case 194: {
      label = 0;
      $854 = $c$6 >>> 8;
      $855 = $854 & 1;
      $856 = (($this) + ($data$58)|0);
      $857 = HEAP8[$856>>0]|0;
      $858 = $857&255;
      $859 = $858 << 1;
      $860 = $859 | $855;
      $c$7 = $859;$data$62 = $data$58;$nz$9 = $860;
      label = 205;
      break;
     }
     case 204: {
      label = 0;
      $877 = (($this) + ($data$61)|0);
      $878 = HEAP8[$877>>0]|0;
      $879 = $878&255;
      $880 = (($879) + ($nz$8))|0;
      $c$7 = $c$0;$data$62 = $data$61;$nz$9 = $880;
      label = 205;
      break;
     }
     case 266: {
      label = 0;
      $1030 = (__Z8get_le16PKv($108)|0);
      $$sum1 = (($106) + 3)|0;
      $1031 = (($105) + ($$sum1)|0);
      $1032 = (__Z8get_le16PKv($1031)|0);
      $$sum2 = (($106) + 5)|0;
      $1033 = (($105) + ($$sum2)|0);
      $1034 = (__Z8get_le16PKv($1033)|0);
      $1035 = ($1034|0)!=(0);
      $$ = $1035 ? $1034 : 65536;
      $1036 = $y$0&255;
      $1037 = (($sp$0) + -1)|0;
      $1038 = $1037 | 256;
      $1039 = (($this) + ($1038)|0);
      HEAP8[$1039>>0] = $1036;
      $1040 = $a$0&255;
      $1041 = (($sp$0) + -2)|0;
      $1042 = $1041 | 256;
      $1043 = (($this) + ($1042)|0);
      HEAP8[$1043>>0] = $1040;
      $1044 = $x$0&255;
      $1045 = (($sp$0) + -3)|0;
      $1046 = $1045 | 256;
      $1047 = (($this) + ($1046)|0);
      HEAP8[$1047>>0] = $1044;
      HEAP32[$2>>2] = $99;
      $1048 = ($in_alt$1|0)==(0);
      $count$0 = $$;$in43$0 = $1030;$in_inc$2 = $in_inc$1;$out44$0 = $1032;$out_inc$2 = $out_inc$1;
      while(1) {
       $$81 = $91 ? 0 : $93;
       $1049 = (__ZN7Hes_Emu8cpu_readEj($$81,$in43$0)|0);
       $1050 = (($in43$0) + ($in_inc$2))|0;
       $1051 = $1050 & 65535;
       $1052 = HEAP32[$2>>2]|0;
       $1053 = (($1052) + 6)|0;
       HEAP32[$2>>2] = $1053;
       $1054 = (0 - ($in_inc$2))|0;
       $in_inc$2$ = $1048 ? $in_inc$2 : $1054;
       $1055 = $91 ? 0 : $92;
       __ZN7Hes_Emu9cpu_writeEji($1055,$out44$0,$1049);
       $1056 = (($out44$0) + ($out_inc$2))|0;
       $1057 = $1056 & 65535;
       $1058 = (0 - ($out_inc$2))|0;
       $out_inc$2$ = $out_alt$0 ? $out_inc$2 : $1058;
       $1059 = (($count$0) + -1)|0;
       $1060 = ($1059|0)==(0);
       if ($1060) {
        break;
       } else {
        $count$0 = $1059;$in43$0 = $1051;$in_inc$2 = $in_inc$2$;$out44$0 = $1057;$out_inc$2 = $out_inc$2$;
       }
      }
      $1061 = (($pc$1) + 7)|0;
      $1062 = HEAP32[$2>>2]|0;
      $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $1061;$s_time$0 = $1062;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
      continue L1;
      break;
     }
    }
    if ((label|0) == 111) {
     label = 0;
     $575 = $63;$data$2333 = $data$2332;$pc$935 = $pc$934;
     label = 112;
    }
    else if ((label|0) == 123) {
     label = 0;
     $618 = $65;$data$2838 = $data$2837;$pc$1140 = $pc$1139;
     label = 124;
    }
    else if ((label|0) == 135) {
     label = 0;
     $659 = $67;$data$3343 = $data$3342;$pc$1345 = $pc$1344;
     label = 136;
    }
    else if ((label|0) == 147) {
     label = 0;
     $700 = $69;$data$3848 = $data$3847;$pc$1550 = $pc$1549;
     label = 148;
    }
    else if ((label|0) == 159) {
     label = 0;
     $741 = $71;$data$4353 = $data$4352;$pc$1755 = $pc$1754;
     label = 160;
    }
    else if ((label|0) == 171) {
     label = 0;
     $781 = $73;$data$4858 = $data$4857;$pc$1960 = $pc$1959;
     label = 172;
    }
    else if ((label|0) == 185) {
     label = 0;
     $834 = (($pc$1) + 3)|0;
     $$79 = $76 ? 0 : $77;
     $835 = $nz$7 & 255;
     __ZN7Hes_Emu9cpu_writeEji($$79,$data$54,$835);
     $836 = HEAP32[$2>>2]|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$4;$nz$0 = $nz$7;$pc$1 = $834;$s_time$0 = $836;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    else if ((label|0) == 205) {
     label = 0;
     $881 = (($pc$1) + 2)|0;
     $882 = $nz$9&255;
     $883 = (($this) + ($data$62)|0);
     HEAP8[$883>>0] = $882;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$7;$nz$0 = $nz$9;$pc$1 = $881;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    if ((label|0) == 112) {
     label = 0;
     $576 = (__ZN7Hes_Emu8cpu_readEj($575,$data$2333)|0);
     $577 = HEAP32[$2>>2]|0;
     $data$24 = $576;$pc$10 = $pc$935;$s_time$8 = $577;
     label = 113;
    }
    else if ((label|0) == 124) {
     label = 0;
     $619 = (__ZN7Hes_Emu8cpu_readEj($618,$data$2838)|0);
     $620 = HEAP32[$2>>2]|0;
     $data$29 = $619;$pc$12 = $pc$1140;$s_time$9 = $620;
     label = 125;
    }
    else if ((label|0) == 136) {
     label = 0;
     $660 = (__ZN7Hes_Emu8cpu_readEj($659,$data$3343)|0);
     $661 = HEAP32[$2>>2]|0;
     $data$34 = $660;$pc$14 = $pc$1345;$s_time$10 = $661;
     label = 137;
    }
    else if ((label|0) == 148) {
     label = 0;
     $701 = (__ZN7Hes_Emu8cpu_readEj($700,$data$3848)|0);
     $702 = HEAP32[$2>>2]|0;
     $data$39 = $701;$pc$16 = $pc$1550;$s_time$11 = $702;
     label = 149;
    }
    else if ((label|0) == 160) {
     label = 0;
     $742 = (__ZN7Hes_Emu8cpu_readEj($741,$data$4353)|0);
     $743 = HEAP32[$2>>2]|0;
     $data$44 = $742;$pc$18 = $pc$1755;$s_time$12 = $743;
     label = 161;
    }
    else if ((label|0) == 172) {
     label = 0;
     $782 = (__ZN7Hes_Emu8cpu_readEj($781,$data$4858)|0);
     $783 = HEAP32[$2>>2]|0;
     $data$49 = $782;$pc$20 = $pc$1960;$s_time$13 = $783;
    }
    if ((label|0) == 113) {
     label = 0;
     $578 = (($a$0) - ($data$24))|0;
     $579 = (($pc$10) + 1)|0;
     $580 = $578 ^ -1;
     $581 = $578 & 255;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $580;$nz$0 = $581;$pc$1 = $579;$s_time$0 = $s_time$8;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    else if ((label|0) == 125) {
     label = 0;
     $621 = $data$29 & $a$0;
     $622 = (($pc$12) + 1)|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $621;$nz$0 = $621;$pc$1 = $622;$s_time$0 = $s_time$9;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
     continue L1;
    }
    else if ((label|0) == 137) {
     label = 0;
     $662 = $data$34 ^ $a$0;
     $663 = (($pc$14) + 1)|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $662;$nz$0 = $662;$pc$1 = $663;$s_time$0 = $s_time$10;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
     continue L1;
    }
    else if ((label|0) == 149) {
     label = 0;
     $703 = $data$39 | $a$0;
     $704 = (($pc$16) + 1)|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $703;$nz$0 = $703;$pc$1 = $704;$s_time$0 = $s_time$11;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
     continue L1;
    }
    else if ((label|0) == 161) {
     label = 0;
     $744 = $data$44 ^ 255;
     $data$49 = $744;$pc$20 = $pc$18;$s_time$13 = $s_time$12;
    }
    $784 = $c$0 >>> 8;
    $785 = $784 & 1;
    $786 = $a$0 ^ 128;
    $787 = (($786) + ($785))|0;
    $sext = $data$49 << 24;
    $788 = $sext >> 24;
    $789 = (($787) + ($788))|0;
    $790 = $status$0 & -65;
    $791 = $789 >>> 2;
    $792 = $791 & 64;
    $793 = $792 | $790;
    $794 = (($a$0) + ($785))|0;
    $795 = (($794) + ($data$49))|0;
    $796 = (($pc$20) + 1)|0;
    $797 = $795 & 255;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0 = $797;$c$0 = $795;$nz$0 = $795;$pc$1 = $796;$s_time$0 = $s_time$13;$status$0 = $793;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;
    continue L1;
   } else {
    $s_time$15 = $s_time$0;
    label = 272;
   }
  } while(0);
  if ((label|0) == 272) {
   label = 0;
   HEAP32[$2>>2] = $s_time$15;
   $$82 = $94 ? 0 : $95;
   $1101 = (__ZN7Hes_Emu8cpu_doneEv($$82)|0);
   $1102 = HEAP32[$2>>2]|0;
   $1103 = ($1101|0)>(0);
   if ($1103) {
    $pc$22 = $pc$1;$result_$0 = $1101;$s_time$14 = $1102;
   } else {
    $1104 = ($1102|0)<(0);
    if ($1104) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$pc$1$phi = $pc$1;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$s_time$0 = $1102;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue;
    } else {
     $$lcssa = $1102;$a$0$lcssa = $a$0;$c$0$lcssa = $c$0;$illegal_encountered$0$off0$lcssa = $illegal_encountered$0$off0;$nz$0$lcssa = $nz$0;$pc$1$lcssa = $pc$1;$sp$0$lcssa = $sp$0;$status$0$lcssa = $status$0;$x$0$lcssa = $x$0;$y$0$lcssa = $y$0;
     break;
    }
   }
  }
  $1064 = $pc$22 >>> 8;
  $1065 = $1064&255;
  $1066 = (($sp$0) + -1)|0;
  $1067 = $1066 | 256;
  $1068 = (($this) + ($1067)|0);
  HEAP8[$1068>>0] = $1065;
  $1069 = $pc$22&255;
  $1070 = (($sp$0) + -2)|0;
  $1071 = $1070 | 256;
  $1072 = (($this) + ($1071)|0);
  HEAP8[$1072>>0] = $1069;
  $1073 = HEAP32[$96>>2]|0;
  $$sum21 = (($result_$0) + 8176)|0;
  $1074 = (($1073) + ($$sum21)|0);
  $1075 = (__Z8get_le16PKv($1074)|0);
  $1076 = (($sp$0) + -3)|0;
  $1077 = $1076 | 256;
  $1078 = $status$0 & 76;
  $1079 = $nz$0 >>> 8;
  $1080 = $1079 | $nz$0;
  $1081 = $1080 & 128;
  $1082 = $1078 | $1081;
  $1083 = $c$0 >>> 8;
  $1084 = $1083 & 1;
  $1085 = $1082 | $1084;
  $1086 = $nz$0 & 255;
  $1087 = ($1086|0)==(0);
  $1088 = $1085 | 2;
  $$30 = $1087 ? $1088 : $1085;
  $1089 = ($result_$0|0)==(6);
  $1090 = $$30 | 16;
  $temp46$1 = $1089 ? $1090 : $$30;
  $1091 = $temp46$1&255;
  $1092 = (($this) + ($1077)|0);
  HEAP8[$1092>>0] = $1091;
  $1093 = $status$0 & -13;
  $1094 = $1093 | 4;
  $1095 = $1094&255;
  HEAP8[$21>>0] = $1095;
  $1096 = HEAP32[$97>>2]|0;
  $1097 = HEAP32[$29>>2]|0;
  HEAP32[$97>>2] = $1097;
  $1098 = (($s_time$14) + 7)|0;
  $1099 = (($1098) + ($1096))|0;
  $1100 = (($1099) - ($1097))|0;
  $y$0$phi = $y$0;$x$0$phi = $x$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $1075;$s_time$0 = $1100;$sp$0 = $1077;$status$0 = $1094;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
 }
 HEAP32[$2>>2] = $$lcssa;
 $1105 = $pc$1$lcssa&65535;
 HEAP16[$4>>1] = $1105;
 $1106 = (($sp$0$lcssa) + 255)|0;
 $1107 = $1106&255;
 HEAP8[$16>>0] = $1107;
 $1108 = $a$0$lcssa&255;
 HEAP8[$7>>0] = $1108;
 $1109 = $x$0$lcssa&255;
 HEAP8[$10>>0] = $1109;
 $1110 = $y$0$lcssa&255;
 HEAP8[$13>>0] = $1110;
 $1111 = $status$0$lcssa & 76;
 $1112 = $nz$0$lcssa >>> 8;
 $1113 = $1112 | $nz$0$lcssa;
 $1114 = $1113 & 128;
 $1115 = $1111 | $1114;
 $1116 = $c$0$lcssa >>> 8;
 $1117 = $1116 & 1;
 $1118 = $1115 | $1117;
 $1119 = $nz$0$lcssa & 255;
 $1120 = ($1119|0)==(0);
 $1121 = $1118 | 2;
 $$31 = $1120 ? $1121 : $1118;
 $1122 = $$31&255;
 HEAP8[$21>>0] = $1122;
 dest=$0+0|0; src=$s+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$1>>2] = $0;
 STACKTOP = sp;return ($illegal_encountered$0$off0$lcssa|0);
}
function __ZN7Hes_Cpu8get_codeEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr >>> 13;
 $1 = (($this) + 8212|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $addr & 8191;
 $6 = (($4) + ($5)|0);
 return ($6|0);
}
function __ZN7Hes_Emu11cpu_set_mmrEii($this,$page,$bank) {
 $this = $this|0;
 $page = $page|0;
 $bank = $bank|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this) + ($page<<2)|0) + 8540|0);
 HEAP32[$0>>2] = 0;
 $1 = ($bank|0)<(128);
 if ($1) {
  $2 = (($this) + 8576|0);
  $3 = $bank << 13;
  $4 = (__ZN8Rom_DataILi8192EE7at_addrEi($2,$3)|0);
  $$0 = $4;
  return ($$0|0);
 }
 if ((($bank|0) == 248)) {
  $5 = (($this) + 272|0);
  $data$0 = $5;
 } else if ((($bank|0) == 251) | (($bank|0) == 250) | (($bank|0) == 249)) {
  $6 = $bank << 13;
  $7 = (($6) + -2039808)|0;
  $8 = ((($this) + ($7)|0) + 9784|0);
  $data$0 = $8;
 } else {
  $9 = (($this) + 8576|0);
  $10 = (__ZN8Rom_DataILi8192EE8unmappedEv($9)|0);
  $$0 = $10;
  return ($$0|0);
 }
 HEAP32[$0>>2] = $data$0;
 $$0 = $data$0;
 return ($$0|0);
}
function __ZN7Hes_Cpu12set_end_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8264|0);
 HEAP32[$0>>2] = $t;
 $1 = (($this) + 8260|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN7Hes_Cpu15update_end_timeEii($this,$t,$2)|0);
 $4 = (($this) + 8212|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($3))|0;
 HEAP32[$6>>2] = $8;
 return;
}
function __ZN8Rom_DataILi8192EE7at_addrEi($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK8Rom_DataILi8192EE9mask_addrEi($this,$addr)|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) - ($2))|0;
 $4 = (__ZNK13blargg_vectorIhE4sizeEv($this)|0);
 $5 = (($4) + -8200)|0;
 $6 = ($3>>>0)>($5>>>0);
 $$ = $6 ? 0 : $3;
 $7 = (__ZNK13blargg_vectorIhEixEj($this,$$)|0);
 return ($7|0);
}
function __ZN8Rom_DataILi8192EE8unmappedEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK13blargg_vectorIhE5beginEv($this)|0);
 return ($0|0);
}
function __ZN7Hes_Cpu15update_end_timeEii($this,$t,$irq) {
 $this = $this|0;
 $t = $t|0;
 $irq = $irq|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq$t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($irq|0)<($t|0);
 if ($0) {
  $1 = (($this) + 8197|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2 & 4;
  $4 = ($3<<24>>24)==(0);
  $irq$t = $4 ? $irq : $t;
  $$0 = $irq$t;
 } else {
  $$0 = $t;
 }
 $5 = (($this) + 8212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$0))|0;
 HEAP32[$7>>2] = $$0;
 return ($9|0);
}
function __ZNK8Rom_DataILi8192EE9mask_addrEi($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & $addr;
 return ($2|0);
}
function __ZN7Hes_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 272|0);
 __ZN7Hes_CpuC2Ev($0);
 __ZN11Classic_EmuC2Ev($this);
 HEAP32[$this>>2] = ((39528 + 8|0));
 $1 = (($this) + 8576|0);
 __ZN8Rom_DataILi8192EEC2Ev($1);
 $2 = (($this) + 8688|0);
 __ZN7Hes_ApuC2Ev($2);
 $3 = (($this) + 8656|0);
 HEAP32[$3>>2] = 0;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,39696);
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,39616);
 __ZN11Classic_Emu15set_voice_typesEPKi($this,39656);
 __ZN9Music_Emu21set_silence_lookaheadEi($this,6);
 __ZN9Music_Emu8set_gainEd($this,1.1100000000000001);
 return;
}
function __ZN7Hes_EmuD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((39528 + 8|0));
 $0 = (($this) + 8576|0);
 __ZN9Rom_Data_D2Ev($0);
 __ZN11Classic_EmuD2Ev($this);
 return;
}
function __ZN7Hes_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Hes_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN7Hes_Emu6unloadEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8576|0);
 __ZN8Rom_DataILi8192EE5clearEv($0);
 __ZN9Music_Emu6unloadEv($this);
 return;
}
function __ZNK7Hes_Emu11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 8576|0);
 $2 = (__ZNK8Rom_DataILi8192EE5beginEv($1)|0);
 $3 = (($2) + 32|0);
 __ZL15copy_hes_fieldsPKhP12track_info_t($3,$out);
 return (0|0);
}
function __ZN7Hes_Emu5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8576|0);
 $1 = (($this) + 8600|0);
 $2 = (__ZN8Rom_DataILi8192EE4loadER11Data_ReaderiPvi($0,$in,32,$1,255)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = (__ZL16check_hes_headerPKv($1)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = (($this) + 8604|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  __ZN8Gme_File11set_warningEPKc($this,44232);
 }
 $9 = (($this) + 8616|0);
 $10 = (_memcmp($9,39720,4)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  __ZN8Gme_File11set_warningEPKc($this,39728);
 }
 $12 = (($this) + 8628|0);
 $13 = (_memcmp($12,39752,4)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  __ZN8Gme_File11set_warningEPKc($this,39760);
 }
 $15 = (($this) + 8624|0);
 $16 = (__Z8get_le32PKv($15)|0);
 $17 = (($this) + 8620|0);
 $18 = (__Z8get_le32PKv($17)|0);
 $19 = ($16>>>0)>(1048575);
 if ($19) {
  __ZN8Gme_File11set_warningEPKc($this,39784);
  $20 = $16 & 1048575;
  $addr$0 = $20;
 } else {
  $addr$0 = $16;
 }
 $21 = (($addr$0) + ($18))|0;
 $22 = ($21>>>0)>(1048576);
 if ($22) {
  __ZN8Gme_File11set_warningEPKc($this,39800);
 }
 $23 = (__ZNK8Rom_DataILi8192EE9file_sizeEv($0)|0);
 $24 = ($18|0)==($23|0);
 do {
  if (!($24)) {
   $25 = (($23) + -4)|0;
   $26 = ($18|0)>($25|0);
   if (!($26)) {
    $27 = (__ZNK8Rom_DataILi8192EE5beginEv($0)|0);
    $28 = (($27) + ($18)|0);
    $29 = (_memcmp($28,39720,4)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     __ZN8Gme_File11set_warningEPKc($this,39816);
     break;
    }
   }
   $31 = (__ZNK8Rom_DataILi8192EE9file_sizeEv($0)|0);
   $32 = ($18|0)<($31|0);
   if ($32) {
    __ZN8Gme_File11set_warningEPKc($this,39848);
    break;
   } else {
    __ZN8Gme_File11set_warningEPKc($this,39864);
    break;
   }
  }
 } while(0);
 __ZN8Rom_DataILi8192EE8set_addrEl($0,$addr$0);
 __ZN9Music_Emu15set_voice_countEi($this,6);
 $33 = (($this) + 8688|0);
 $34 = (+__ZNK9Music_Emu4gainEv($this));
 __ZN7Hes_Apu6volumeEd($33,$34);
 $35 = (__ZN11Classic_Emu12setup_bufferEl($this,7159091)|0);
 $$0 = $35;
 return ($$0|0);
}
function __ZN7Hes_Emu9update_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8688|0);
 __ZN7Hes_Apu9treble_eqERK9blip_eq_t($0,$eq);
 return;
}
function __ZN7Hes_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$left,$right) {
 $this = $this|0;
 $i = $i|0;
 $center = $center|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8688|0);
 __ZN7Hes_Apu10osc_outputEiP11Blip_BufferS1_S1_($0,$i,$center,$left,$right);
 return;
}
function __ZN7Hes_Emu17recalc_timer_loadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8656|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8640|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = (($4) + 1)|0;
 $6 = (($this) + 8652|0);
 HEAP32[$6>>2] = $5;
 return;
}
function __ZN7Hes_Emu10set_tempo_Ed($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 119210.0 / $t;
 $1 = (~~(($0)));
 $2 = (($this) + 8632|0);
 HEAP32[$2>>2] = $1;
 $3 = 1024.0 / $t;
 $4 = (~~(($3)));
 $5 = (($this) + 8640|0);
 HEAP32[$5>>2] = $4;
 __ZN7Hes_Emu17recalc_timer_loadEv($this);
 return;
}
function __ZN7Hes_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN11Classic_Emu12start_track_Ei($this,$track)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (($this) + 272|0);
 _memset(($2|0),0,8192)|0;
 $3 = (($this) + 9784|0);
 _memset(($3|0),0,24584)|0;
 $4 = (($this) + 8688|0);
 __ZN7Hes_Apu5resetEv($4);
 __ZN7Hes_Cpu5resetEv($2);
 $5 = (($this) + 8608|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 __ZN7Hes_Cpu7set_mmrEii($2,0,$7);
 $8 = (($this) + 8609|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 __ZN7Hes_Cpu7set_mmrEii($2,1,$10);
 $11 = (($this) + 8610|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 __ZN7Hes_Cpu7set_mmrEii($2,2,$13);
 $14 = (($this) + 8611|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 __ZN7Hes_Cpu7set_mmrEii($2,3,$16);
 $17 = (($this) + 8612|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 __ZN7Hes_Cpu7set_mmrEii($2,4,$19);
 $20 = (($this) + 8613|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 __ZN7Hes_Cpu7set_mmrEii($2,5,$22);
 $23 = (($this) + 8614|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 __ZN7Hes_Cpu7set_mmrEii($2,6,$25);
 $26 = (($this) + 8615|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 __ZN7Hes_Cpu7set_mmrEii($2,7,$28);
 __ZN7Hes_Cpu7set_mmrEii($2,8,255);
 $29 = (($this) + 8680|0);
 HEAP8[$29>>0] = 6;
 $30 = (($this) + 8672|0);
 HEAP32[$30>>2] = 1073741824;
 $31 = (($this) + 8676|0);
 HEAP32[$31>>2] = 1073741824;
 $32 = (($this) + 8660|0);
 HEAP8[$32>>0] = 0;
 $33 = (($this) + 8656|0);
 HEAP32[$33>>2] = 128;
 $34 = (($this) + 8652|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($this) + 8648|0);
 HEAP32[$36>>2] = $35;
 $37 = (($this) + 8661|0);
 HEAP8[$37>>0] = 0;
 $38 = (($this) + 8644|0);
 HEAP32[$38>>2] = 0;
 $39 = (($this) + 8668|0);
 HEAP8[$39>>0] = 0;
 $40 = (($this) + 8669|0);
 HEAP8[$40>>0] = 0;
 $41 = (($this) + 8664|0);
 HEAP32[$41>>2] = 0;
 $42 = (($this) + 783|0);
 HEAP8[$42>>0] = 31;
 $43 = (($this) + 782|0);
 HEAP8[$43>>0] = -2;
 $44 = (($this) + 8464|0);
 $45 = (($this) + 8470|0);
 HEAP8[$45>>0] = -3;
 $46 = (($this) + 8606|0);
 $47 = (__Z8get_le16PKv($46)|0);
 $48 = $47&65535;
 HEAP16[$44>>1] = $48;
 $49 = $track&255;
 $50 = (($this) + 8466|0);
 HEAP8[$50>>0] = $49;
 __ZN7Hes_Emu17recalc_timer_loadEv($this);
 $51 = (($this) + 8636|0);
 HEAP32[$51>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Hes_Emu13cpu_write_vdpEii($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($addr|0) == 2)) {
  $3 = (($this) + 8668|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(5);
  if (!($5)) {
   return;
  }
  $6 = $data & 4;
  $7 = ($6|0)==(0);
  if (!($7)) {
   __ZN8Gme_File11set_warningEPKc($this,39888);
  }
  $8 = (($this) + 272|0);
  $9 = (__ZNK7Hes_Cpu4timeEv($8)|0);
  __ZN7Hes_Emu9run_untilEi($this,$9);
  $10 = $data&255;
  $11 = (($this) + 8669|0);
  HEAP8[$11>>0] = $10;
  __ZN7Hes_Emu11irq_changedEv($this);
  return;
 } else if ((($addr|0) == 0)) {
  $0 = $data & 31;
  $1 = $0&255;
  $2 = (($this) + 8668|0);
  HEAP8[$2>>0] = $1;
  return;
 } else {
  return;
 }
}
function __ZN7Hes_Emu9run_untilEi($this,$present) {
 $this = $this|0;
 $present = $present|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8664|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($present|0);
 if ($2) {
  $3 = (($this) + 8632|0);
  $4 = HEAP32[$3>>2]|0;
  $6 = $1;
  while(1) {
   $5 = (($4) + ($6))|0;
   $7 = ($5|0)<($present|0);
   if ($7) {
    $6 = $5;
   } else {
    $$lcssa = $5;
    break;
   }
  }
  HEAP32[$0>>2] = $$lcssa;
 }
 $8 = (($this) + 8644|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($present) - ($9))|0;
 $11 = ($10|0)>(0);
 if (!($11)) {
  return;
 }
 $12 = (($this) + 8660|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if (!($14)) {
  $15 = (($this) + 8648|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - ($10))|0;
  HEAP32[$15>>2] = $17;
  $18 = ($17|0)<(1);
  if ($18) {
   $19 = (($this) + 8652|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + ($17))|0;
   HEAP32[$15>>2] = $21;
  }
 }
 HEAP32[$8>>2] = $present;
 return;
}
function __ZN7Hes_Emu11irq_changedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $time$0 = 0, $time$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 272|0);
 $1 = (__ZNK7Hes_Cpu4timeEv($0)|0);
 $2 = (($this) + 8672|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>($1|0);
 if ($4) {
  HEAP32[$2>>2] = 1073741824;
  $5 = (($this) + 8660|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if (!($7)) {
   $8 = (($this) + 8661|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $11 = (($this) + 8648|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($1))|0;
    HEAP32[$2>>2] = $13;
   }
  }
 }
 $14 = (($this) + 8676|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)>($1|0);
 if ($16) {
  HEAP32[$14>>2] = 1073741824;
  $17 = (($this) + 8669|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 & 8;
  $20 = ($19<<24>>24)==(0);
  if (!($20)) {
   $21 = (($this) + 8664|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$14>>2] = $22;
  }
 }
 $23 = (($this) + 8680|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 & 4;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  $27 = HEAP32[$2>>2]|0;
  $time$0 = $27;
 } else {
  $time$0 = 1073741824;
 }
 $28 = HEAP8[$23>>0]|0;
 $29 = $28 & 2;
 $30 = ($29<<24>>24)==(0);
 if (!($30)) {
  $time$1 = $time$0;
  __ZN7Hes_Cpu12set_irq_timeEi($0,$time$1);
  return;
 }
 $31 = HEAP32[$14>>2]|0;
 $32 = (__Z3minIiET_S0_S0_($time$0,$31)|0);
 $time$1 = $32;
 __ZN7Hes_Cpu12set_irq_timeEi($0,$time$1);
 return;
}
function __ZN7Hes_Emu10cpu_write_Eji($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($addr) + -2048)|0;
 $1 = ($0>>>0)<(10);
 $2 = (($this) + 272|0);
 $3 = (__ZNK7Hes_Cpu4timeEv($2)|0);
 if ($1) {
  $4 = (__ZNK7Hes_Cpu8end_timeEv($2)|0);
  $5 = (($4) + 8)|0;
  $6 = (__Z3minIiET_S0_S0_($3,$5)|0);
  $7 = (($this) + 8688|0);
  __ZN7Hes_Apu10write_dataEiii($7,$6,$addr,$data);
  return;
 }
 switch ($addr|0) {
 case 5122:  {
  __ZN7Hes_Emu9run_untilEi($this,$3);
  $24 = $data&255;
  $25 = (($this) + 8680|0);
  HEAP8[$25>>0] = $24;
  break;
 }
 case 3: case 2: case 0:  {
  __ZN7Hes_Emu13cpu_write_vdpEii($this,$addr,$data);
  return;
  break;
 }
 case 5123:  {
  __ZN7Hes_Emu9run_untilEi($this,$3);
  $26 = (($this) + 8660|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ($27<<24>>24)==(0);
  if (!($28)) {
   $29 = (($this) + 8652|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($this) + 8648|0);
   HEAP32[$31>>2] = $30;
  }
  $32 = (($this) + 8661|0);
  HEAP8[$32>>0] = 0;
  break;
 }
 case 3072:  {
  __ZN7Hes_Emu9run_untilEi($this,$3);
  $8 = $data & 127;
  $9 = (($8) + 1)|0;
  $10 = (($this) + 8656|0);
  HEAP32[$10>>2] = $9;
  __ZN7Hes_Emu17recalc_timer_loadEv($this);
  $11 = (($this) + 8652|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($this) + 8648|0);
  HEAP32[$13>>2] = $12;
  break;
 }
 case 3073:  {
  $14 = $data & 1;
  $15 = (($this) + 8660|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17|0)==($14|0);
  if ($18) {
   return;
  }
  __ZN7Hes_Emu9run_untilEi($this,$3);
  $19 = $14&255;
  HEAP8[$15>>0] = $19;
  $20 = ($14|0)==(0);
  if (!($20)) {
   $21 = (($this) + 8652|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($this) + 8648|0);
   HEAP32[$23>>2] = $22;
  }
  break;
 }
 default: {
  return;
 }
 }
 __ZN7Hes_Emu11irq_changedEv($this);
 return;
}
function __ZN7Hes_Emu9cpu_read_Ej($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $status$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 272|0);
 $1 = (__ZNK7Hes_Cpu4timeEv($0)|0);
 $2 = $addr & 8191;
 switch ($2|0) {
 case 3: case 2:  {
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 5123:  {
  $15 = (($this) + 8672|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)>($1|0);
  $$ = $17 ? 0 : 4;
  $18 = (($this) + 8676|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)>($1|0);
  $21 = $$ | 2;
  $status$1 = $20 ? $$ : $21;
  $$0 = $status$1;
  return ($$0|0);
  break;
 }
 case 0:  {
  $3 = (($this) + 8676|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>($1|0);
  if ($5) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$3>>2] = 1073741824;
  __ZN7Hes_Emu9run_untilEi($this,$1);
  __ZN7Hes_Emu11irq_changedEv($this);
  $$0 = 32;
  return ($$0|0);
  break;
 }
 case 5122:  {
  $12 = (($this) + 8680|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $$0 = $14;
  return ($$0|0);
  break;
 }
 case 3072: case 3073:  {
  __ZN7Hes_Emu9run_untilEi($this,$1);
  $6 = (($this) + 8648|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + -1)|0;
  $9 = (($this) + 8640|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8>>>0) / ($10>>>0))&-1;
  $$0 = $11;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 255;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN7Hes_Emu8cpu_doneEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8469|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 4;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (($this) + 272|0);
  $5 = (__ZNK7Hes_Cpu4timeEv($4)|0);
  $6 = (($this) + 8672|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>($5|0);
  if (!($8)) {
   $9 = (($this) + 8680|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 & 4;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $13 = (($this) + 8661|0);
    HEAP8[$13>>0] = 1;
    HEAP32[$6>>2] = 1073741824;
    __ZN7Hes_Emu11irq_changedEv($this);
    $$0 = 10;
    return ($$0|0);
   }
  }
  $14 = (($this) + 8676|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>($5|0);
  if (!($16)) {
   $17 = (($this) + 8680|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 & 2;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $$0 = 8;
    return ($$0|0);
   }
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Hes_Emu10run_clocksERii($this,$duration_,$0) {
 $this = $this|0;
 $duration_ = $duration_|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$duration_>>2]|0;
 $2 = (($this) + 272|0);
 $3 = (__ZN7Hes_Cpu3runEi($2,$1)|0);
 if ($3) {
  __ZN8Gme_File11set_warningEPKc($this,45704);
 }
 __ZN7Hes_Emu9run_untilEi($this,$1);
 $4 = (($this) + 8644|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($1))|0;
 HEAP32[$4>>2] = $6;
 $7 = (($this) + 8664|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($1))|0;
 HEAP32[$7>>2] = $9;
 __ZN7Hes_Cpu9end_frameEi($2,$1);
 $10 = (($this) + 8672|0);
 __ZL11adjust_timeRii($10,$1);
 $11 = (($this) + 8676|0);
 __ZL11adjust_timeRii($11,$1);
 $12 = (($this) + 8688|0);
 __ZN7Hes_Apu9end_frameEi($12,$1);
 return (0|0);
}
function __ZN7Hes_CpuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8216|0);
 $1 = (($this) + 8212|0);
 HEAP32[$1>>2] = $0;
 return;
}
function __ZN8Rom_DataILi8192EEC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Rom_Data_C2Ev($this);
 return;
}
function __ZN8Rom_DataILi8192EE5clearEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13blargg_vectorIhE5clearEv($this);
 return;
}
function __ZNK8Rom_DataILi8192EE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK13blargg_vectorIhE5beginEv($this)|0);
 $1 = (($0) + 8200|0);
 return ($1|0);
}
function __ZL15copy_hes_fieldsPKhP12track_info_t($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$in>>0]|0;
 $1 = ($0&255)>(31);
 if (!($1)) {
  return;
 }
 $2 = (($out) + 272|0);
 $3 = (__ZL10copy_fieldPKhPc($in,$2)|0);
 $4 = (($out) + 784|0);
 $5 = (__ZL10copy_fieldPKhPc($3,$4)|0);
 $6 = (($out) + 1040|0);
 (__ZL10copy_fieldPKhPc($5,$6)|0);
 return;
}
function __ZN8Rom_DataILi8192EE4loadER11Data_ReaderiPvi($this,$in,$header_size,$header_out,$fill) {
 $this = $this|0;
 $in = $in|0;
 $header_size = $header_size|0;
 $header_out = $header_out|0;
 $fill = $fill|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($this,$in,$header_size,$header_out,$fill,8200)|0);
 return ($0|0);
}
function __ZL16check_hes_headerPKv($header) {
 $header = $header|0;
 var $$ = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($header,40056,4)|0);
 $1 = ($0|0)==(0);
 $$ = $1 ? 0 : 38248;
 return ($$|0);
}
function __ZNK8Rom_DataILi8192EE9file_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN8Rom_DataILi8192EE8set_addrEl($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Rom_Data_9set_addr_Eli($this,$addr,8192);
 return;
}
function __ZN7Hes_Apu6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 536|0);
 $1 = $v * 9.1552734374999997E-6;
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($0,$1);
 return;
}
function __ZN7Hes_Apu9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 536|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($0,$eq);
 return;
}
function __ZNK7Hes_Cpu4timeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8212|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 return ($6|0);
}
function __ZN7Hes_Cpu12set_irq_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8264|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8260|0);
 HEAP32[$2>>2] = $t;
 $3 = (__ZN7Hes_Cpu15update_end_timeEii($this,$1,$t)|0);
 $4 = (($this) + 8212|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($3))|0;
 HEAP32[$6>>2] = $8;
 return;
}
function __ZNK7Hes_Cpu8end_timeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8264|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN7Hes_Cpu9end_frameEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8212|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8216|0);
 $3 = ($1|0)==($2|0);
 if (!($3)) {
  ___assert_fail((39992|0),(40016|0),118,(46440|0));
  // unreachable;
 }
 $4 = (($this) + 8252|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($t))|0;
 HEAP32[$4>>2] = $6;
 $7 = (($this) + 8260|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(1073741824);
 if ($9) {
  $10 = (($8) - ($t))|0;
  HEAP32[$7>>2] = $10;
 }
 $11 = (($this) + 8264|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(1073741824);
 if (!($13)) {
  return;
 }
 $14 = (($12) - ($t))|0;
 HEAP32[$11>>2] = $14;
 return;
}
function __ZL11adjust_timeRii($time,$delta) {
 $time = $time|0;
 $delta = $delta|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$time>>2]|0;
 $1 = ($0|0)<(1073741824);
 if ($1) {
  $2 = (($0) - ($delta))|0;
  $3 = ($2|0)<(0);
  $$ = $3 ? 0 : $2;
  HEAP32[$time>>2] = $$;
  return;
 } else {
  return;
 }
}
function __ZL11new_hes_emuv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(34368)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN7Hes_EmuC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZL12new_hes_filev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(464)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN8Hes_FileC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZN8Hes_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN8Hes_File5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 252|0);
 $4 = (FUNCTION_TABLE_iiii[$2 & 63]($in,$3,208)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $8 = (__ZL16check_hes_headerPKv($3)|0);
  $$0 = $8;
  return ($$0|0);
 } else {
  $6 = ($4|0)==(36224|0);
  $7 = $6 ? 38248 : $4;
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZNK8Hes_File11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 316|0);
 __ZL15copy_hes_fieldsPKhP12track_info_t($1,$out);
 return (0|0);
}
function __ZL10copy_fieldPKhPc($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$05 = 0, $i$14 = 0, $len$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($in|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($in) + 31|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $len$0 = 32;
 } else {
  $4 = (($in) + 47|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  $$ = $6 ? 48 : 32;
  $len$0 = $$;
 }
 $i$05 = 0;
 while(1) {
  $9 = (($in) + ($i$05)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $i$0$lcssa = $i$05;
   break;
  }
  $13 = $10&255;
  $14 = (($13) + 1)|0;
  $15 = $14 & 255;
  $16 = ($15>>>0)<(33);
  $8 = (($i$05) + 1)|0;
  if ($16) {
   $$0 = 0;
   label = 12;
   break;
  }
  $7 = ($8|0)<($len$0|0);
  if ($7) {
   $i$05 = $8;
  } else {
   $i$0$lcssa = $8;
   break;
  }
 }
 if ((label|0) == 12) {
  return ($$0|0);
 }
 $12 = ($i$0$lcssa|0)<($len$0|0);
 L14: do {
  if ($12) {
   $i$14 = $i$0$lcssa;
   while(1) {
    $19 = (($in) + ($i$14)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(0);
    $18 = (($i$14) + 1)|0;
    if (!($21)) {
     $$0 = 0;
     break;
    }
    $17 = ($18|0)<($len$0|0);
    if ($17) {
     $i$14 = $18;
    } else {
     break L14;
    }
   }
   return ($$0|0);
  }
 } while(0);
 __ZN8Gme_File11copy_field_EPcPKci($out,$in,$len$0);
 $22 = (($in) + ($len$0)|0);
 $$0 = $22;
 return ($$0|0);
}
function __ZN8Hes_FileC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Gme_Info_C2Ev($this);
 HEAP32[$this>>2] = ((40064 + 8|0));
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,39696);
 return;
}
function __ZN7Kss_CpuC2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $even$0$lcssa = 0, $even$01 = 0, $i$03 = 0, $p$02 = 0, $phitmp = 0, $phitmp4 = 0, $phitmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 520|0);
 $1 = (($this) + 516|0);
 HEAP32[$1>>2] = $0;
 $i$03 = 255;
 while(1) {
  $2 = ($i$03|0)==(0);
  if ($2) {
   $even$0$lcssa = 4;
  } else {
   $even$01 = 1;$p$02 = $i$03;
   while(1) {
    $3 = $p$02 ^ $even$01;
    $4 = $p$02 >> 1;
    $5 = ($4|0)==(0);
    if ($5) {
     $$lcssa = $3;
     break;
    } else {
     $even$01 = $3;$p$02 = $4;
    }
   }
   $phitmp4 = $$lcssa << 2;
   $phitmp5 = $phitmp4 & 4;
   $even$0$lcssa = $phitmp5;
  }
  $6 = $i$03 & 168;
  $7 = $even$0$lcssa | $6;
  $8 = $7&255;
  $9 = (($this) + ($i$03)|0);
  HEAP8[$9>>0] = $8;
  $10 = $7 | 1;
  $11 = $10&255;
  $12 = (($i$03) + 256)|0;
  $13 = (($this) + ($12)|0);
  HEAP8[$13>>0] = $11;
  $phitmp = (($i$03) + -1)|0;
  $14 = ($phitmp|0)>(-1);
  if ($14) {
   $i$03 = $phitmp;
  } else {
   break;
  }
 }
 $15 = HEAP8[$this>>0]|0;
 $16 = $15&255;
 $17 = $16 | 64;
 $18 = $17&255;
 HEAP8[$this>>0] = $18;
 $19 = (($this) + 256|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 | 64;
 $23 = $22&255;
 HEAP8[$19>>0] = $23;
 return;
}
function __ZN7Kss_Cpu5resetEPvPKv($this,$unmapped_write,$unmapped_read) {
 $this = $this|0;
 $unmapped_write = $unmapped_write|0;
 $unmapped_read = $unmapped_read|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 520|0);
 $1 = (($this) + 516|0);
 HEAP32[$1>>2] = $0;
 $2 = (($this) + 596|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 592|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 512|0);
 HEAP32[$4>>2] = 0;
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,0,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,1,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,2,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,3,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,4,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,5,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,6,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,7,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,8,$unmapped_write,$unmapped_read);
 $5 = (($this) + 600|0);
 dest=$5+0|0; stop=dest+30|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN7Kss_Cpu7map_memEjjPvPKv($this,$addr,$size,$write,$read) {
 $this = $this|0;
 $addr = $addr|0;
 $size = $size|0;
 $write = $write|0;
 $read = $read|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr & 8191;
 $1 = ($0|0)==(0);
 if (!($1)) {
  ___assert_fail((40176|0),(40200|0),103,(40248|0));
  // unreachable;
 }
 $2 = $size & 8191;
 $3 = ($2|0)==(0);
 if (!($3)) {
  ___assert_fail((42584|0),(40200|0),104,(40248|0));
  // unreachable;
 }
 $4 = $addr >>> 13;
 $5 = $size >>> 13;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 } else {
  $$in = $5;
 }
 while(1) {
  $7 = (($$in) + -1)|0;
  $8 = $7 << 13;
  $9 = (($7) + ($4))|0;
  $10 = (($write) + ($8)|0);
  $11 = (($read) + ($8)|0);
  __ZN7Kss_Cpu8set_pageEiPvPKv($this,$9,$10,$11);
  $12 = ($7|0)==(0);
  if ($12) {
   break;
  } else {
   $$in = $7;
  }
 }
 return;
}
function __ZN7Kss_Cpu3runEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$ = 0, $$20 = 0, $$20$v = 0, $$23 = 0, $$24 = 0, $$24$v = 0, $$25 = 0, $$26 = 0, $$27 = 0, $$27$v = 0, $$28 = 0, $$30 = 0, $$31 = 0, $$33 = 0, $$34 = 0, $$35 = 0, $$flags$0 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$masked = 0;
 var $$masked11 = 0, $$pc$1 = 0, $$pc$129 = 0, $$sink = 0, $$sink$in = 0, $$sum = 0, $$sum10 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
 var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
 var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0;
 var $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0;
 var $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0;
 var $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0;
 var $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0;
 var $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0;
 var $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0;
 var $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0;
 var $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0;
 var $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0;
 var $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0;
 var $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0;
 var $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0;
 var $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0;
 var $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0;
 var $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0;
 var $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0;
 var $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0;
 var $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0;
 var $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0;
 var $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0;
 var $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0;
 var $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0;
 var $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0;
 var $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $adjust$0 = 0, $adjust$0$ = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$3 = 0, $data$4 = 0, $data$5 = 0, $data$6 = 0, $data$7 = 0;
 var $data$8 = 0, $data$9 = 0, $data269$0 = 0, $data269$1 = 0, $flags$0 = 0, $flags$0$lcssa113 = 0, $flags$0$lcssa115 = 0, $flags$0$phi = 0, $flags$0116 = 0, $flags$1 = 0, $flags$10 = 0, $flags$11 = 0, $flags$2 = 0, $flags$3 = 0, $flags$4 = 0, $flags$6 = 0, $flags$8 = 0, $flags$9 = 0, $inc$0 = 0, $inc59$0 = 0;
 var $inc62$0 = 0, $inc65$0 = 0, $ix$0 = 0, $ix$0$lcssa123 = 0, $ix$0$lcssa125 = 0, $ix$0$phi = 0, $ix$0126 = 0, $ix$1 = 0, $ix$2 = 0, $ixy$0 = 0, $ixy$1 = 0, $ixy$1$ix$0 = 0, $ixy$2 = 0, $ixy$2$ix$0 = 0, $ixy$3 = 0, $ixy$3$ix$0 = 0, $iy$0 = 0, $iy$0$ixy$1 = 0, $iy$0$ixy$2 = 0, $iy$0$ixy$3 = 0;
 var $iy$0$lcssa118 = 0, $iy$0$lcssa120 = 0, $iy$0$phi = 0, $iy$0121 = 0, $iy$1 = 0, $iy$2 = 0, $opcode$0 = 0, $or$cond = 0, $or$cond19 = 0, $or$cond22 = 0, $or$cond3 = 0, $or$cond5 = 0, $pc$0 = 0, $pc$1 = 0, $pc$1$ = 0, $pc$1$32 = 0, $pc$1$lcssa133 = 0, $pc$1$lcssa135 = 0, $pc$10 = 0, $pc$11 = 0;
 var $pc$1136 = 0, $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$2 = 0, $pc$20 = 0, $pc$21 = 0, $pc$22 = 0, $pc$23 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $s = 0;
 var $s_time$0 = 0, $s_time$1 = 0, $s_time$10 = 0, $s_time$11 = 0, $s_time$12 = 0, $s_time$13 = 0, $s_time$14 = 0, $s_time$15 = 0, $s_time$16 = 0, $s_time$17 = 0, $s_time$18 = 0, $s_time$19 = 0, $s_time$2 = 0, $s_time$22 = 0, $s_time$3 = 0, $s_time$4 = 0, $s_time$5 = 0, $s_time$6 = 0, $s_time$7 = 0, $s_time$8 = 0;
 var $s_time$9 = 0, $sp$0 = 0, $sp$0$lcssa128 = 0, $sp$0$lcssa130 = 0, $sp$0$phi = 0, $sp$0131 = 0, $sp$1 = 0, $temp45$0 = 0, $temp47$0 = 0, $temp50$0 = 0, $temp70$0 = 0, $warning$0$off0 = 0, $warning$0$off0$lcssa142 = 0, $warning$0$off0$lcssa144 = 0, $warning$0$off0$phi = 0, $warning$0$off0145 = 0, $warning$1$off0 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 8|0;
 $0 = sp;
 __ZN7Kss_Cpu12set_end_timeEi($this,$end_time);
 $1 = (($this) + 520|0);
 dest=$s+0|0; src=$1+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = (($this) + 516|0);
 HEAP32[$2>>2] = $s;
 $3 = (($this) + 608|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8)|(HEAPU8[$8+2>>0]<<16)|(HEAPU8[$8+3>>0]<<24);
 $10 = $0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (($s) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($this) + 600|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = (($this) + 602|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($this) + 604|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = (($this) + 606|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = (($3) + 7|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = (($this) + 616|0);
 $32 = (($this) + 622|0);
 $33 = (($0) + 6|0);
 $34 = (($31) + 7|0);
 $35 = (($s) + 72|0);
 $36 = (($0) + 6|0);
 $37 = (($0) + 4|0);
 $38 = (($0) + 6|0);
 $39 = (($0) + 6|0);
 $40 = (($0) + 1|0);
 $41 = (($0) + 4|0);
 $42 = (($0) + 6|0);
 $43 = (($0) + -24|0);
 $44 = (($0) + 6|0);
 $45 = (($0) + -24|0);
 $46 = (($0) + 4|0);
 $47 = (($0) + 6|0);
 $48 = (($0) + 4|0);
 $49 = (($0) + 6|0);
 $50 = (($0) + -184|0);
 $51 = (($0) + 4|0);
 $52 = (($0) + 6|0);
 $53 = (($0) + 4|0);
 $54 = (($0) + 4|0);
 $55 = (($0) + 4|0);
 $56 = (($0) + 6|0);
 $57 = (($0) + -160|0);
 $58 = (($0) + 4|0);
 $59 = (($0) + 6|0);
 $60 = (($0) + -176|0);
 $61 = (($0) + 4|0);
 $62 = (($0) + 6|0);
 $63 = (($0) + -168|0);
 $64 = (($0) + 4|0);
 $65 = (($0) + -112|0);
 $66 = (($0) + 4|0);
 $67 = (($0) + 4|0);
 $68 = (($0) + -8|0);
 $69 = (($0) + 4|0);
 $70 = (($0) + 6|0);
 $71 = (($0) + 4|0);
 $72 = (($0) + 6|0);
 $73 = (($0) + 6|0);
 $74 = (($0) + 4|0);
 $75 = (($0) + 6|0);
 $76 = (($0) + 6|0);
 $77 = (($0) + 6|0);
 $78 = (($0) + 6|0);
 $79 = (($0) + 6|0);
 $80 = (($0) + 6|0);
 $81 = (($0) + 6|0);
 $82 = (($s) + 72|0);
 $83 = (($0) + 6|0);
 $84 = (($0) + 4|0);
 $85 = (($0) + 4|0);
 $86 = (($0) + 2|0);
 $87 = (($this) + 616|0);
 $88 = (($this) + 618|0);
 $89 = (($0) + 2|0);
 $90 = (($this) + 620|0);
 $91 = (($0) + 4|0);
 $92 = (($this) + 624|0);
 $93 = (($this) + 625|0);
 $94 = (($this) + 624|0);
 $95 = (($this) + 625|0);
 $96 = (($0) + 4|0);
 $97 = (($0) + 4|0);
 $98 = (($0) + -16|0);
 $99 = (($0) + 4|0);
 $100 = (($0) + -32|0);
 $101 = (($0) + 4|0);
 $102 = (($0) + -48|0);
 $103 = (($0) + 4|0);
 $104 = (($0) + -8|0);
 $105 = (($0) + 4|0);
 $106 = (($0) + -24|0);
 $107 = (($0) + 4|0);
 $108 = (($0) + -40|0);
 $109 = (($0) + 4|0);
 $110 = (($0) + -56|0);
 $111 = (($0) + 4|0);
 $112 = (($0) + 4|0);
 $113 = (($0) + 4|0);
 $114 = (($s) + 72|0);
 $115 = (($0) + -8|0);
 $116 = (($0) + 7|0);
 $117 = (($s) + 72|0);
 $118 = (($0) + -8|0);
 $119 = (($0) + -8|0);
 $120 = (($0) + 4|0);
 $121 = (($0) + 6|0);
 $122 = (($0) + 4|0);
 $123 = (($0) + 6|0);
 $124 = (($0) + 6|0);
 $125 = (($0) + 4|0);
 $126 = (($0) + 6|0);
 $127 = (($0) + 4|0);
 $128 = (($0) + 2|0);
 $129 = (($0) + 6|0);
 $130 = (($0) + 4|0);
 $131 = (($0) + 1|0);
 $132 = (($s) + 72|0);
 $133 = (($0) + 4|0);
 $134 = (($s) + 72|0);
 $135 = (($0) + 1|0);
 $136 = (($0) + 6|0);
 $137 = (($this) + 627|0);
 $138 = (($0) + 6|0);
 $139 = (($this) + 626|0);
 $140 = (($this) + 627|0);
 $141 = (($0) + 6|0);
 $142 = (($0) + 6|0);
 $143 = (($this) + 625|0);
 $144 = (($this) + 626|0);
 $145 = (($0) + 6|0);
 $146 = (($this) + 625|0);
 $147 = (($this) + 624|0);
 $148 = (($this) + 628|0);
 $149 = (($this) + 628|0);
 $150 = (($this) + 628|0);
 $151 = (($0) + -112|0);
 $152 = (($0) + -8|0);
 $153 = (($0) + -8|0);
 $154 = (($0) + -8|0);
 $155 = (($0) + -96|0);
 $156 = (($0) + -104|0);
 $flags$0 = $30;$ix$0 = $24;$iy$0 = $27;$pc$1 = $18;$s_time$1 = $15;$sp$0 = $21;$warning$0$off0 = 0;
 L1: while(1) {
  $161 = $pc$1 >>> 13;
  $162 = (($s) + ($161<<2)|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $pc$1 & 8191;
  $165 = (($163) + ($164)|0);
  $$sum = (($164) + 1)|0;
  $166 = (($163) + ($$sum)|0);
  $167 = HEAP8[$165>>0]|0;
  $168 = $167&255;
  $169 = (($pc$1) + 1)|0;
  $170 = (40256 + ($168)|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = $171&255;
  $158 = (($172) + ($s_time$1))|0;
  $173 = ($158|0)<(0);
  $174 = ($158|0)<($172|0);
  $or$cond19 = $173 | $174;
  if (!($or$cond19)) {
   $flags$0116 = $flags$0;$ix$0126 = $ix$0;$iy$0121 = $iy$0;$pc$1136 = $pc$1;$s_time$22 = $s_time$1;$sp$0131 = $sp$0;$warning$0$off0145 = $warning$0$off0;
   label = 262;
   break;
  }
  $175 = $169 & 8191;
  $176 = $169 >>> 13;
  $177 = (($s) + ($176<<2)|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (($178) + ($175)|0);
  $180 = HEAP8[$179>>0]|0;
  $181 = $180&255;
  L4: do {
   switch ($168|0) {
   case 118:  {
    $$lcssa147 = $158;$flags$0$lcssa113 = $flags$0;$ix$0$lcssa123 = $ix$0;$iy$0$lcssa118 = $iy$0;$pc$1$lcssa133 = $pc$1;$sp$0$lcssa128 = $sp$0;$warning$0$off0$lcssa142 = $warning$0$off0;
    label = 261;
    break L1;
    break;
   }
   case 127: case 109: case 100: case 91: case 82: case 73: case 64: case 0:  {
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 8:  {
    $182 = HEAP8[$32>>0]|0;
    $183 = HEAP8[$33>>0]|0;
    HEAP8[$32>>0] = $183;
    HEAP8[$33>>0] = $182;
    $184 = HEAP8[$34>>0]|0;
    $185 = $184&255;
    $186 = $flags$0&255;
    HEAP8[$34>>0] = $186;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $185;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 211:  {
    $187 = (($pc$1) + 2)|0;
    $188 = HEAP32[$35>>2]|0;
    $189 = (($188) + ($158))|0;
    $190 = HEAP8[$36>>0]|0;
    $191 = $190&255;
    $192 = $191 << 8;
    $193 = $192 | $181;
    __Z11kss_cpu_outP7Kss_Cpuiji($this,$189,$193,$191);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $187;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 46:  {
    $194 = (($pc$1) + 2)|0;
    HEAP8[$37>>0] = $180;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $194;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 62:  {
    $195 = (($pc$1) + 2)|0;
    HEAP8[$38>>0] = $180;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $195;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 58:  {
    $196 = (__Z8get_le16PKv($166)|0);
    $197 = (($pc$1) + 3)|0;
    $198 = $196 & 8191;
    $199 = $196 >>> 13;
    $200 = (($s) + ($199<<2)|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = (($201) + ($198)|0);
    $203 = HEAP8[$202>>0]|0;
    HEAP8[$39>>0] = $203;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $197;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 32:  {
    $204 = (($pc$1) + 2)|0;
    $205 = $flags$0 & 64;
    $206 = ($205|0)==(0);
    if ($206) {
     $207 = $180 << 24 >> 24;
     $208 = (($207) + ($204))|0;
     $209 = $208 & 65535;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $209;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    } else {
     $pc$0 = $204;
     label = 2;
    }
    break;
   }
   case 40:  {
    $210 = (($pc$1) + 2)|0;
    $211 = $flags$0 & 64;
    $212 = ($211|0)==(0);
    if ($212) {
     $pc$0 = $210;
     label = 2;
    } else {
     $213 = $180 << 24 >> 24;
     $214 = (($213) + ($210))|0;
     $215 = $214 & 65535;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $215;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 48:  {
    $216 = (($pc$1) + 2)|0;
    $217 = $flags$0 & 1;
    $218 = ($217|0)==(0);
    if ($218) {
     $219 = $180 << 24 >> 24;
     $220 = (($219) + ($216))|0;
     $221 = $220 & 65535;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $221;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    } else {
     $pc$0 = $216;
     label = 2;
    }
    break;
   }
   case 56:  {
    $222 = (($pc$1) + 2)|0;
    $223 = $flags$0 & 1;
    $224 = ($223|0)==(0);
    if ($224) {
     $pc$0 = $222;
     label = 2;
    } else {
     $225 = $180 << 24 >> 24;
     $226 = (($225) + ($222))|0;
     $227 = $226 & 65535;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $227;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 24:  {
    $228 = $180 << 24 >> 24;
    $229 = (($pc$1) + 2)|0;
    $230 = (($229) + ($228))|0;
    $231 = $230 & 65535;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $231;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 16:  {
    $232 = HEAP8[$40>>0]|0;
    $233 = $232&255;
    $234 = (($233) + -1)|0;
    $235 = $234&255;
    HEAP8[$40>>0] = $235;
    $236 = (($pc$1) + 2)|0;
    $237 = ($234|0)==(0);
    if ($237) {
     $pc$0 = $236;
     label = 2;
    } else {
     $238 = $180 << 24 >> 24;
     $239 = (($238) + ($236))|0;
     $240 = $239 & 65535;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $240;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 194:  {
    $241 = $flags$0 & 64;
    $242 = ($241|0)==(0);
    if ($242) {
     $243 = (__Z8get_le16PKv($166)|0);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $243;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    } else {
     $s_time$0 = $158;
     label = 4;
    }
    break;
   }
   case 202:  {
    $244 = $flags$0 & 64;
    $245 = ($244|0)==(0);
    if ($245) {
     $s_time$0 = $158;
     label = 4;
    } else {
     $246 = (__Z8get_le16PKv($166)|0);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $246;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 210:  {
    $247 = $flags$0 & 1;
    $248 = ($247|0)==(0);
    if ($248) {
     $249 = (__Z8get_le16PKv($166)|0);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $249;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    } else {
     $s_time$0 = $158;
     label = 4;
    }
    break;
   }
   case 218:  {
    $250 = $flags$0 & 1;
    $251 = ($250|0)==(0);
    if ($251) {
     $s_time$0 = $158;
     label = 4;
    } else {
     $252 = (__Z8get_le16PKv($166)|0);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $252;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 226:  {
    $253 = $flags$0 & 4;
    $254 = ($253|0)==(0);
    if ($254) {
     $255 = (__Z8get_le16PKv($166)|0);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $255;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    } else {
     $s_time$0 = $158;
     label = 4;
    }
    break;
   }
   case 234:  {
    $256 = $flags$0 & 4;
    $257 = ($256|0)==(0);
    if ($257) {
     $s_time$0 = $158;
     label = 4;
    } else {
     $258 = (__Z8get_le16PKv($166)|0);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $258;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 242:  {
    $259 = $flags$0 & 128;
    $260 = ($259|0)==(0);
    if ($260) {
     $261 = (__Z8get_le16PKv($166)|0);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $261;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    } else {
     $s_time$0 = $158;
     label = 4;
    }
    break;
   }
   case 250:  {
    $262 = $flags$0 & 128;
    $263 = ($262|0)==(0);
    if ($263) {
     $s_time$0 = $158;
     label = 4;
    } else {
     $264 = (__Z8get_le16PKv($166)|0);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $264;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 195:  {
    $265 = (__Z8get_le16PKv($166)|0);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $265;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 233:  {
    $266 = HEAP16[$41>>1]|0;
    $267 = $266&65535;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $267;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 192:  {
    $268 = $flags$0 & 64;
    $269 = ($268|0)==(0);
    if ($269) {
     $s_time$2 = $158;
     label = 57;
    } else {
     $270 = (($158) + -6)|0;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $270;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 200:  {
    $271 = $flags$0 & 64;
    $272 = ($271|0)==(0);
    if ($272) {
     $273 = (($158) + -6)|0;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $273;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    } else {
     $s_time$2 = $158;
     label = 57;
    }
    break;
   }
   case 208:  {
    $274 = $flags$0 & 1;
    $275 = ($274|0)==(0);
    if ($275) {
     $s_time$2 = $158;
     label = 57;
    } else {
     $276 = (($158) + -6)|0;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $276;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 216:  {
    $277 = $flags$0 & 1;
    $278 = ($277|0)==(0);
    if ($278) {
     $279 = (($158) + -6)|0;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $279;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    } else {
     $s_time$2 = $158;
     label = 57;
    }
    break;
   }
   case 224:  {
    $280 = $flags$0 & 4;
    $281 = ($280|0)==(0);
    if ($281) {
     $s_time$2 = $158;
     label = 57;
    } else {
     $282 = (($158) + -6)|0;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $282;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 232:  {
    $283 = $flags$0 & 4;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = (($158) + -6)|0;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $285;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    } else {
     $s_time$2 = $158;
     label = 57;
    }
    break;
   }
   case 240:  {
    $286 = $flags$0 & 128;
    $287 = ($286|0)==(0);
    if ($287) {
     $s_time$2 = $158;
     label = 57;
    } else {
     $288 = (($158) + -6)|0;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $288;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    break;
   }
   case 248:  {
    $289 = $flags$0 & 128;
    $290 = ($289|0)==(0);
    if ($290) {
     $291 = (($158) + -6)|0;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $291;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    } else {
     $s_time$2 = $158;
     label = 57;
    }
    break;
   }
   case 201:  {
    $s_time$2 = $158;
    label = 57;
    break;
   }
   case 196:  {
    $300 = $flags$0 & 64;
    $301 = ($300|0)==(0);
    if ($301) {
     label = 66;
    } else {
     label = 3;
    }
    break;
   }
   case 204:  {
    $302 = $flags$0 & 64;
    $303 = ($302|0)==(0);
    if ($303) {
     label = 3;
    } else {
     label = 66;
    }
    break;
   }
   case 212:  {
    $304 = $flags$0 & 1;
    $305 = ($304|0)==(0);
    if ($305) {
     label = 66;
    } else {
     label = 3;
    }
    break;
   }
   case 220:  {
    $306 = $flags$0 & 1;
    $307 = ($306|0)==(0);
    if ($307) {
     label = 3;
    } else {
     label = 66;
    }
    break;
   }
   case 228:  {
    $308 = $flags$0 & 4;
    $309 = ($308|0)==(0);
    if ($309) {
     label = 66;
    } else {
     label = 3;
    }
    break;
   }
   case 236:  {
    $310 = $flags$0 & 4;
    $311 = ($310|0)==(0);
    if ($311) {
     label = 3;
    } else {
     label = 66;
    }
    break;
   }
   case 244:  {
    $312 = $flags$0 & 128;
    $313 = ($312|0)==(0);
    if ($313) {
     label = 66;
    } else {
     label = 3;
    }
    break;
   }
   case 252:  {
    $314 = $flags$0 & 128;
    $315 = ($314|0)==(0);
    if ($315) {
     label = 3;
    } else {
     label = 66;
    }
    break;
   }
   case 205:  {
    label = 66;
    break;
   }
   case 255:  {
    $325 = ($169>>>0)>(65535);
    if ($325) {
     $$lcssa149 = $158;$flags$0$lcssa115 = $flags$0;$ix$0$lcssa125 = $ix$0;$iy$0$lcssa120 = $iy$0;$pc$1$lcssa135 = $pc$1;$sp$0$lcssa130 = $sp$0;$warning$0$off0$lcssa144 = $warning$0$off0;
     label = 260;
     break L1;
    } else {
     label = 68;
    }
    break;
   }
   case 247: case 239: case 231: case 223: case 215: case 207: case 199:  {
    label = 68;
    break;
   }
   case 245:  {
    $327 = HEAP8[$42>>0]|0;
    $328 = $327&255;
    $329 = $328 << 8;
    $330 = (($329) + ($flags$0))|0;
    $data$0 = $330;$pc$2 = $169;$s_time$3 = $158;
    label = 71;
    break;
   }
   case 229: case 213: case 197:  {
    $331 = $168 >>> 3;
    $332 = (($43) + ($331)|0);
    $333 = HEAP16[$332>>1]|0;
    $334 = $333&65535;
    $data$0 = $334;$pc$2 = $169;$s_time$3 = $158;
    label = 71;
    break;
   }
   case 241:  {
    $342 = $sp$0 & 8191;
    $343 = $sp$0 >>> 13;
    $344 = (($s) + ($343<<2)|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = (($345) + ($342)|0);
    $347 = HEAP8[$346>>0]|0;
    $348 = $347&255;
    $349 = (($sp$0) + 1)|0;
    $350 = $349 & 8191;
    $351 = $349 >>> 13;
    $352 = (($s) + ($351<<2)|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = (($353) + ($350)|0);
    $355 = HEAP8[$354>>0]|0;
    HEAP8[$44>>0] = $355;
    $356 = (($sp$0) + 2)|0;
    $357 = $356 & 65535;
    $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $348;$pc$1 = $169;$s_time$1 = $158;$sp$0 = $357;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 134: case 150:  {
    $369 = $flags$0 & -2;
    $flags$1 = $369;
    label = 75;
    break;
   }
   case 225: case 209: case 193:  {
    $358 = $sp$0 & 8191;
    $359 = $sp$0 >>> 13;
    $360 = (($s) + ($359<<2)|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = (($361) + ($358)|0);
    $363 = (__Z8get_le16PKv($362)|0);
    $364 = $363&65535;
    $365 = $168 >>> 3;
    $366 = (($45) + ($365)|0);
    HEAP16[$366>>1] = $364;
    $367 = (($sp$0) + 2)|0;
    $368 = $367 & 65535;
    $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$sp$0 = $368;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 142: case 158:  {
    $flags$1 = $flags$0;
    label = 75;
    break;
   }
   case 198: case 214:  {
    $379 = $flags$0 & -2;
    $flags$2 = $379;
    label = 77;
    break;
   }
   case 206: case 222:  {
    $flags$2 = $flags$0;
    label = 77;
    break;
   }
   case 135: case 133: case 132: case 131: case 130: case 129: case 128: case 151: case 149: case 148: case 147: case 146: case 145: case 144:  {
    $381 = $flags$0 & -2;
    $flags$3 = $381;
    label = 79;
    break;
   }
   case 143: case 141: case 140: case 139: case 138: case 137: case 136: case 159: case 157: case 156: case 155: case 154: case 153: case 152:  {
    $flags$3 = $flags$0;
    label = 79;
    break;
   }
   case 190:  {
    $411 = HEAP16[$48>>1]|0;
    $412 = $411&65535;
    $413 = $412 & 8191;
    $414 = $412 >>> 13;
    $415 = (($s) + ($414<<2)|0);
    $416 = HEAP32[$415>>2]|0;
    $417 = (($416) + ($413)|0);
    $418 = HEAP8[$417>>0]|0;
    $419 = $418&255;
    $data$2 = $419;$pc$4 = $169;$s_time$5 = $158;
    label = 84;
    break;
   }
   case 254:  {
    $420 = (($pc$1) + 2)|0;
    $data$2 = $181;$pc$4 = $420;$s_time$5 = $158;
    label = 84;
    break;
   }
   case 191: case 189: case 188: case 187: case 186: case 185: case 184:  {
    $421 = $168 ^ 1;
    $422 = (($50) + ($421)|0);
    $423 = HEAP8[$422>>0]|0;
    $424 = $423&255;
    $data$2 = $424;$pc$4 = $169;$s_time$5 = $158;
    label = 84;
    break;
   }
   case 41: case 25: case 9:  {
    $443 = $168 >>> 3;
    $$sum18 = (($443) + -1)|0;
    $444 = (($0) + ($$sum18)|0);
    $445 = HEAP16[$444>>1]|0;
    $446 = $445&65535;
    $data$3 = $446;
    label = 86;
    break;
   }
   case 57:  {
    $data$3 = $sp$0;
    label = 86;
    break;
   }
   case 39:  {
    $462 = HEAP8[$52>>0]|0;
    $463 = $462&255;
    $464 = ($462&255)>(153);
    $465 = $464&1;
    $$flags$0 = $465 | $flags$0;
    $466 = $$flags$0 & 1;
    $467 = (0 - ($466))|0;
    $468 = $467 & 96;
    $469 = $flags$0 & 16;
    $470 = ($469|0)!=(0);
    $471 = $463 & 14;
    $472 = ($471>>>0)>(9);
    $or$cond22 = $470 | $472;
    $473 = $468 | 6;
    $adjust$0 = $or$cond22 ? $473 : $468;
    $474 = $flags$0 & 2;
    $475 = ($474|0)==(0);
    $476 = (0 - ($adjust$0))|0;
    $adjust$0$ = $475 ? $adjust$0 : $476;
    $477 = (($adjust$0$) + ($463))|0;
    $478 = $$flags$0 & 3;
    $479 = $477 ^ $463;
    $480 = $479 & 16;
    $481 = $477&255;
    $482 = $477 & 255;
    $483 = (($this) + ($482)|0);
    $484 = HEAP8[$483>>0]|0;
    $485 = $484&255;
    $486 = $478 | $485;
    $487 = $486 | $480;
    HEAP8[$52>>0] = $481;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $487;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 52:  {
    $488 = HEAP16[$53>>1]|0;
    $489 = $488&65535;
    $490 = $489 & 8191;
    $491 = $489 >>> 13;
    $492 = (($s) + ($491<<2)|0);
    $493 = HEAP32[$492>>2]|0;
    $494 = (($493) + ($490)|0);
    $495 = HEAP8[$494>>0]|0;
    $496 = $495&255;
    $497 = (($496) + 1)|0;
    HEAP32[$14>>2] = $158;
    $498 = HEAP16[$53>>1]|0;
    $499 = $498&65535;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$499,$497);
    $data$4 = $497;$ix$1 = $ix$0;$iy$1 = $iy$0;$pc$5 = $169;$s_time$6 = $158;
    label = 90;
    break;
   }
   case 60: case 44: case 36: case 28: case 20: case 12: case 4:  {
    $500 = $168 >>> 3;
    $501 = $500 ^ 1;
    $502 = (($0) + ($501)|0);
    $503 = HEAP8[$502>>0]|0;
    $504 = (($503) + 1)<<24>>24;
    HEAP8[$502>>0] = $504;
    $505 = $504&255;
    $data$4 = $505;$ix$1 = $ix$0;$iy$1 = $iy$0;$pc$5 = $169;$s_time$6 = $158;
    label = 90;
    break;
   }
   case 53:  {
    $519 = HEAP16[$54>>1]|0;
    $520 = $519&65535;
    $521 = $520 & 8191;
    $522 = $520 >>> 13;
    $523 = (($s) + ($522<<2)|0);
    $524 = HEAP32[$523>>2]|0;
    $525 = (($524) + ($521)|0);
    $526 = HEAP8[$525>>0]|0;
    $527 = $526&255;
    $528 = (($527) + -1)|0;
    HEAP32[$14>>2] = $158;
    $529 = HEAP16[$54>>1]|0;
    $530 = $529&65535;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$530,$528);
    $data$5 = $528;$ix$2 = $ix$0;$iy$2 = $iy$0;$pc$6 = $169;$s_time$7 = $158;
    label = 93;
    break;
   }
   case 61: case 45: case 37: case 29: case 21: case 13: case 5:  {
    $531 = $168 >>> 3;
    $532 = $531 ^ 1;
    $533 = (($0) + ($532)|0);
    $534 = HEAP8[$533>>0]|0;
    $535 = (($534) + -1)<<24>>24;
    HEAP8[$533>>0] = $535;
    $536 = $535&255;
    $data$5 = $536;$ix$2 = $ix$0;$iy$2 = $iy$0;$pc$6 = $169;$s_time$7 = $158;
    label = 93;
    break;
   }
   case 35: case 19: case 3:  {
    $549 = $168 >>> 3;
    $550 = (($0) + ($549)|0);
    $551 = HEAP16[$550>>1]|0;
    $552 = (($551) + 1)<<16>>16;
    HEAP16[$550>>1] = $552;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 51:  {
    $553 = (($sp$0) + 1)|0;
    $554 = $553 & 65535;
    $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$sp$0 = $554;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 43: case 27: case 11:  {
    $555 = $168 >>> 3;
    $$sum17 = (($555) + -1)|0;
    $556 = (($0) + ($$sum17)|0);
    $557 = HEAP16[$556>>1]|0;
    $558 = (($557) + -1)<<16>>16;
    HEAP16[$556>>1] = $558;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 59:  {
    $559 = (($sp$0) + 65535)|0;
    $560 = $559 & 65535;
    $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$sp$0 = $560;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 166:  {
    $561 = HEAP16[$55>>1]|0;
    $562 = $561&65535;
    $563 = $562 & 8191;
    $564 = $562 >>> 13;
    $565 = (($s) + ($564<<2)|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = (($566) + ($563)|0);
    $568 = HEAP8[$567>>0]|0;
    $569 = $568&255;
    $data$6 = $569;$pc$7 = $169;$s_time$8 = $158;
    label = 101;
    break;
   }
   case 230:  {
    $570 = (($pc$1) + 2)|0;
    $data$6 = $181;$pc$7 = $570;$s_time$8 = $158;
    label = 101;
    break;
   }
   case 167: case 165: case 164: case 163: case 162: case 161: case 160:  {
    $571 = $168 ^ 1;
    $572 = (($57) + ($571)|0);
    $573 = HEAP8[$572>>0]|0;
    $574 = $573&255;
    $data$6 = $574;$pc$7 = $169;$s_time$8 = $158;
    label = 101;
    break;
   }
   case 182:  {
    $583 = HEAP16[$58>>1]|0;
    $584 = $583&65535;
    $585 = $584 & 8191;
    $586 = $584 >>> 13;
    $587 = (($s) + ($586<<2)|0);
    $588 = HEAP32[$587>>2]|0;
    $589 = (($588) + ($585)|0);
    $590 = HEAP8[$589>>0]|0;
    $591 = $590&255;
    $data$7 = $591;$pc$8 = $169;$s_time$9 = $158;
    label = 105;
    break;
   }
   case 246:  {
    $592 = (($pc$1) + 2)|0;
    $data$7 = $181;$pc$8 = $592;$s_time$9 = $158;
    label = 105;
    break;
   }
   case 183: case 181: case 180: case 179: case 178: case 177: case 176:  {
    $593 = $168 ^ 1;
    $594 = (($60) + ($593)|0);
    $595 = HEAP8[$594>>0]|0;
    $596 = $595&255;
    $data$7 = $596;$pc$8 = $169;$s_time$9 = $158;
    label = 105;
    break;
   }
   case 174:  {
    $605 = HEAP16[$61>>1]|0;
    $606 = $605&65535;
    $607 = $606 & 8191;
    $608 = $606 >>> 13;
    $609 = (($s) + ($608<<2)|0);
    $610 = HEAP32[$609>>2]|0;
    $611 = (($610) + ($607)|0);
    $612 = HEAP8[$611>>0]|0;
    $613 = $612&255;
    $data$8 = $613;$pc$9 = $169;$s_time$10 = $158;
    label = 109;
    break;
   }
   case 238:  {
    $614 = (($pc$1) + 2)|0;
    $data$8 = $181;$pc$9 = $614;$s_time$10 = $158;
    label = 109;
    break;
   }
   case 175: case 173: case 172: case 171: case 170: case 169: case 168:  {
    $615 = $168 ^ 1;
    $616 = (($63) + ($615)|0);
    $617 = HEAP8[$616>>0]|0;
    $618 = $617&255;
    $data$8 = $618;$pc$9 = $169;$s_time$10 = $158;
    label = 109;
    break;
   }
   case 119: case 117: case 116: case 115: case 114: case 113: case 112:  {
    HEAP32[$14>>2] = $158;
    $627 = HEAP16[$64>>1]|0;
    $628 = $627&65535;
    $629 = $168 ^ 1;
    $630 = (($65) + ($629)|0);
    $631 = HEAP8[$630>>0]|0;
    $632 = $631&255;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$628,$632);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 125: case 124: case 123: case 122: case 121: case 120: case 111: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 72: case 71: case 69: case 68: case 67: case 66: case 65:  {
    $633 = $168 & 7;
    $634 = $633 ^ 1;
    $635 = (($0) + ($634)|0);
    $636 = HEAP8[$635>>0]|0;
    $637 = $168 >>> 3;
    $638 = $637 & 7;
    $639 = $638 ^ 1;
    $640 = (($0) + ($639)|0);
    HEAP8[$640>>0] = $636;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 38: case 30: case 22: case 14: case 6:  {
    $641 = $168 >>> 3;
    $642 = $641 ^ 1;
    $643 = (($0) + ($642)|0);
    HEAP8[$643>>0] = $180;
    $644 = (($pc$1) + 2)|0;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $644;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 54:  {
    $645 = (($pc$1) + 2)|0;
    HEAP32[$14>>2] = $158;
    $646 = HEAP16[$66>>1]|0;
    $647 = $646&65535;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$647,$181);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $645;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 126: case 110: case 102: case 94: case 86: case 78: case 70:  {
    $648 = HEAP16[$67>>1]|0;
    $649 = $648&65535;
    $650 = $649 & 8191;
    $651 = $649 >>> 13;
    $652 = (($s) + ($651<<2)|0);
    $653 = HEAP32[$652>>2]|0;
    $654 = (($653) + ($650)|0);
    $655 = HEAP8[$654>>0]|0;
    $656 = $168 >>> 3;
    $657 = $656 ^ 1;
    $658 = (($68) + ($657)|0);
    HEAP8[$658>>0] = $655;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 33: case 17: case 1:  {
    $659 = (__Z8get_le16PKv($166)|0);
    $660 = $659&65535;
    $661 = $168 >>> 3;
    $662 = (($0) + ($661)|0);
    HEAP16[$662>>1] = $660;
    $663 = (($pc$1) + 3)|0;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $663;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 49:  {
    $664 = (__Z8get_le16PKv($166)|0);
    $665 = (($pc$1) + 3)|0;
    $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $665;$s_time$1 = $158;$sp$0 = $664;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 42:  {
    $666 = (__Z8get_le16PKv($166)|0);
    $667 = (($pc$1) + 3)|0;
    $668 = $666 & 8191;
    $669 = $666 >>> 13;
    $670 = (($s) + ($669<<2)|0);
    $671 = HEAP32[$670>>2]|0;
    $672 = (($671) + ($668)|0);
    $673 = (__Z8get_le16PKv($672)|0);
    $674 = $673&65535;
    HEAP16[$69>>1] = $674;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $667;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 50:  {
    $675 = (__Z8get_le16PKv($166)|0);
    $676 = (($pc$1) + 3)|0;
    HEAP32[$14>>2] = $158;
    $677 = HEAP8[$70>>0]|0;
    $678 = $677&255;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$675,$678);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $676;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 34:  {
    $679 = (__Z8get_le16PKv($166)|0);
    $680 = (($pc$1) + 3)|0;
    $681 = $679 & 8191;
    $682 = $679 >>> 13;
    $683 = ((($s) + ($682<<2)|0) + 36|0);
    $684 = HEAP32[$683>>2]|0;
    $685 = (($684) + ($681)|0);
    $686 = HEAP16[$71>>1]|0;
    $687 = $686&65535;
    __Z8set_le16Pvj($685,$687);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $680;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 18: case 2:  {
    HEAP32[$14>>2] = $158;
    $688 = $168 >>> 3;
    $689 = (($0) + ($688)|0);
    $690 = HEAP16[$689>>1]|0;
    $691 = $690&65535;
    $692 = HEAP8[$72>>0]|0;
    $693 = $692&255;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$691,$693);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 26: case 10:  {
    $694 = $168 >>> 3;
    $$sum16 = (($694) + -1)|0;
    $695 = (($0) + ($$sum16)|0);
    $696 = HEAP16[$695>>1]|0;
    $697 = $696&65535;
    $698 = $697 & 8191;
    $699 = $697 >>> 13;
    $700 = (($s) + ($699<<2)|0);
    $701 = HEAP32[$700>>2]|0;
    $702 = (($701) + ($698)|0);
    $703 = HEAP8[$702>>0]|0;
    HEAP8[$73>>0] = $703;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 249:  {
    $704 = HEAP16[$74>>1]|0;
    $705 = $704&65535;
    $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$sp$0 = $705;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 7:  {
    $706 = HEAP8[$75>>0]|0;
    $707 = $706&255;
    $708 = $707 << 1;
    $709 = $707 >>> 7;
    $710 = $708 | $709;
    $711 = $flags$0 & 196;
    $712 = $710 & 41;
    $713 = $712 | $711;
    $714 = $710&255;
    HEAP8[$75>>0] = $714;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $713;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 15:  {
    $715 = HEAP8[$76>>0]|0;
    $716 = $715&255;
    $717 = $flags$0 & 196;
    $718 = $716 & 1;
    $719 = $718 | $717;
    $720 = $716 << 7;
    $721 = $716 >>> 1;
    $722 = $720 | $721;
    $723 = $721 & 40;
    $724 = $719 | $723;
    $725 = $722&255;
    HEAP8[$76>>0] = $725;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $724;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 23:  {
    $726 = HEAP8[$77>>0]|0;
    $727 = $726&255;
    $728 = $727 << 1;
    $729 = $flags$0 & 1;
    $730 = $728 | $729;
    $731 = $flags$0 & 196;
    $732 = $728 & 40;
    $733 = $727 >>> 7;
    $734 = $733 | $731;
    $735 = $734 | $732;
    $736 = $730&255;
    HEAP8[$77>>0] = $736;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $735;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 31:  {
    $737 = $flags$0 << 7;
    $738 = HEAP8[$78>>0]|0;
    $739 = $738&255;
    $740 = $739 >>> 1;
    $741 = $740 | $737;
    $742 = $flags$0 & 196;
    $743 = $740 & 40;
    $744 = $739 & 1;
    $745 = $744 | $742;
    $746 = $745 | $743;
    $747 = $741&255;
    HEAP8[$78>>0] = $747;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $746;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 47:  {
    $748 = HEAP8[$79>>0]|0;
    $749 = $748&255;
    $750 = $749 ^ -1;
    $751 = $flags$0 & 197;
    $752 = $750 & 40;
    $753 = $751 | $752;
    $754 = $753 | 18;
    $755 = $750&255;
    HEAP8[$79>>0] = $755;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $754;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 63:  {
    $756 = $flags$0 & 197;
    $757 = $flags$0 << 4;
    $758 = $757 & 16;
    $759 = $758 | $756;
    $760 = HEAP8[$80>>0]|0;
    $761 = $760&255;
    $762 = $761 & 40;
    $763 = $759 | $762;
    $764 = $763 ^ 1;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $764;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 55:  {
    $765 = $flags$0 & 196;
    $766 = HEAP8[$81>>0]|0;
    $767 = $766&255;
    $768 = $767 & 40;
    $769 = $765 | $768;
    $770 = $769 | 1;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $770;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 219:  {
    $771 = (($pc$1) + 2)|0;
    $772 = HEAP32[$82>>2]|0;
    $773 = (($772) + ($158))|0;
    $774 = HEAP8[$83>>0]|0;
    $775 = $774&255;
    $776 = $775 << 8;
    $777 = $776 | $181;
    $778 = (__Z10kss_cpu_inP7Kss_Cpuij($this,$773,$777)|0);
    $779 = $778&255;
    HEAP8[$83>>0] = $779;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $771;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 227:  {
    $780 = $sp$0 & 8191;
    $781 = $sp$0 >>> 13;
    $782 = (($s) + ($781<<2)|0);
    $783 = HEAP32[$782>>2]|0;
    $784 = (($783) + ($780)|0);
    $785 = (__Z8get_le16PKv($784)|0);
    $786 = ((($s) + ($781<<2)|0) + 36|0);
    $787 = HEAP32[$786>>2]|0;
    $788 = (($787) + ($780)|0);
    $789 = HEAP16[$84>>1]|0;
    $790 = $789&65535;
    __Z8set_le16Pvj($788,$790);
    $791 = $785&65535;
    HEAP16[$84>>1] = $791;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 235:  {
    $792 = HEAP16[$85>>1]|0;
    $793 = HEAP16[$86>>1]|0;
    HEAP16[$85>>1] = $793;
    HEAP16[$86>>1] = $792;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 243:  {
    HEAP8[$92>>0] = 0;
    HEAP8[$93>>0] = 0;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 217:  {
    $794 = HEAP16[$87>>1]|0;
    $795 = HEAP16[$0>>1]|0;
    HEAP16[$87>>1] = $795;
    HEAP16[$0>>1] = $794;
    $796 = HEAP16[$88>>1]|0;
    $797 = HEAP16[$89>>1]|0;
    HEAP16[$88>>1] = $797;
    HEAP16[$89>>1] = $796;
    $798 = HEAP16[$90>>1]|0;
    $799 = HEAP16[$91>>1]|0;
    HEAP16[$90>>1] = $799;
    HEAP16[$91>>1] = $798;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 251:  {
    HEAP8[$94>>0] = 1;
    HEAP8[$95>>0] = 1;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 203:  {
    $800 = (($pc$1) + 2)|0;
    do {
     switch ($181|0) {
     case 47: case 45: case 44: case 43: case 42: case 41: case 40:  {
      $991 = $181 ^ 1;
      $992 = (($108) + ($991)|0);
      $993 = HEAP8[$992>>0]|0;
      $994 = $993&255;
      $995 = $994 & 1;
      $996 = $994 & 128;
      $997 = $994 >>> 1;
      $998 = $996 | $997;
      $999 = (($this) + ($998)|0);
      $1000 = HEAP8[$999>>0]|0;
      $1001 = $1000&255;
      $1002 = $995 | $1001;
      $1003 = $998&255;
      HEAP8[$992>>0] = $1003;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1002;$pc$1 = $800;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 62:  {
      $1004 = (($158) + 7)|0;
      $1005 = HEAP16[$109>>1]|0;
      $1006 = $1005&65535;
      $data$16 = $1006;$pc$17 = $800;$s_time$18 = $1004;
      label = 159;
      break L4;
      break;
     }
     case 6:  {
      $801 = (($158) + 7)|0;
      $802 = HEAP16[$96>>1]|0;
      $803 = $802&65535;
      $data$9 = $803;$pc$10 = $800;$s_time$11 = $801;
      label = 138;
      break L4;
      break;
     }
     case 7: case 5: case 4: case 3: case 2: case 1: case 0:  {
      $819 = $181 ^ 1;
      $820 = (($0) + ($819)|0);
      $821 = HEAP8[$820>>0]|0;
      $822 = $821&255;
      $823 = $822 << 1;
      $824 = $823 & 254;
      $825 = $822 >>> 7;
      $826 = $824 | $825;
      $827 = (($this) + ($826)|0);
      $828 = HEAP8[$827>>0]|0;
      $829 = $828&255;
      $830 = $829 | $825;
      $831 = $826&255;
      HEAP8[$820>>0] = $831;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $830;$pc$1 = $800;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 22:  {
      $832 = (($158) + 7)|0;
      $833 = HEAP16[$97>>1]|0;
      $834 = $833&65535;
      $data$10 = $834;$pc$11 = $800;$s_time$12 = $832;
      label = 141;
      break L4;
      break;
     }
     case 23: case 21: case 20: case 19: case 18: case 17: case 16:  {
      $848 = $181 ^ 1;
      $849 = (($98) + ($848)|0);
      $850 = HEAP8[$849>>0]|0;
      $851 = $850&255;
      $852 = $851 << 1;
      $853 = $flags$0 & 1;
      $854 = $852 | $853;
      $855 = (($this) + ($854)|0);
      $856 = HEAP8[$855>>0]|0;
      $857 = $856&255;
      $858 = $854&255;
      HEAP8[$849>>0] = $858;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $857;$pc$1 = $800;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 38:  {
      $859 = (($158) + 7)|0;
      $860 = HEAP16[$99>>1]|0;
      $861 = $860&65535;
      $data$11 = $861;$pc$12 = $800;$s_time$13 = $859;
      label = 144;
      break L4;
      break;
     }
     case 39: case 37: case 36: case 35: case 34: case 33: case 32:  {
      $873 = $181 ^ 1;
      $874 = (($100) + ($873)|0);
      $875 = HEAP8[$874>>0]|0;
      $876 = $875&255;
      $877 = $876 << 1;
      $878 = (($this) + ($877)|0);
      $879 = HEAP8[$878>>0]|0;
      $880 = $879&255;
      $881 = $877&255;
      HEAP8[$874>>0] = $881;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $880;$pc$1 = $800;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 54:  {
      $882 = (($158) + 7)|0;
      $883 = HEAP16[$101>>1]|0;
      $884 = $883&65535;
      $data$12 = $884;$pc$13 = $800;$s_time$14 = $882;
      label = 147;
      break L4;
      break;
     }
     case 55: case 53: case 52: case 51: case 50: case 49: case 48:  {
      $897 = $181 ^ 1;
      $898 = (($102) + ($897)|0);
      $899 = HEAP8[$898>>0]|0;
      $900 = $899&255;
      $901 = $900 << 1;
      $902 = $901 | 1;
      $903 = (($this) + ($902)|0);
      $904 = HEAP8[$903>>0]|0;
      $905 = $904&255;
      $906 = $902&255;
      HEAP8[$898>>0] = $906;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $905;$pc$1 = $800;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 14:  {
      $907 = (($158) + 7)|0;
      $908 = HEAP16[$103>>1]|0;
      $909 = $908&65535;
      $data$13 = $909;$pc$14 = $800;$s_time$15 = $907;
      label = 150;
      break L4;
      break;
     }
     case 15: case 13: case 12: case 11: case 10: case 9: case 8:  {
      $926 = $181 ^ 1;
      $927 = (($104) + ($926)|0);
      $928 = HEAP8[$927>>0]|0;
      $929 = $928&255;
      $930 = $929 & 1;
      $931 = $929 << 7;
      $932 = $931 & 128;
      $933 = $929 >>> 1;
      $934 = $932 | $933;
      $935 = (($this) + ($934)|0);
      $936 = HEAP8[$935>>0]|0;
      $937 = $936&255;
      $938 = $930 | $937;
      $939 = $934&255;
      HEAP8[$927>>0] = $939;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $938;$pc$1 = $800;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 30:  {
      $940 = (($158) + 7)|0;
      $941 = HEAP16[$105>>1]|0;
      $942 = $941&65535;
      $data$14 = $942;$pc$15 = $800;$s_time$16 = $940;
      label = 153;
      break L4;
      break;
     }
     case 31: case 29: case 28: case 27: case 26: case 25: case 24:  {
      $959 = $181 ^ 1;
      $960 = (($106) + ($959)|0);
      $961 = HEAP8[$960>>0]|0;
      $962 = $961&255;
      $963 = $962 & 1;
      $964 = $flags$0 << 7;
      $965 = $964 & 128;
      $966 = $962 >>> 1;
      $967 = $966 | $965;
      $968 = (($this) + ($967)|0);
      $969 = HEAP8[$968>>0]|0;
      $970 = $969&255;
      $971 = $970 | $963;
      $972 = $967&255;
      HEAP8[$960>>0] = $972;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $971;$pc$1 = $800;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 46:  {
      $973 = HEAP16[$107>>1]|0;
      $974 = $973&65535;
      $975 = (($158) + 7)|0;
      $data$15 = $974;$pc$16 = $800;$s_time$17 = $975;
      label = 156;
      break L4;
      break;
     }
     case 126: case 118: case 110: case 102: case 94: case 86: case 78: case 70:  {
      $1031 = (($158) + 4)|0;
      $1032 = HEAP16[$111>>1]|0;
      $1033 = $1032&65535;
      $1034 = $1033 & 8191;
      $1035 = $1033 >>> 13;
      $1036 = (($s) + ($1035<<2)|0);
      $1037 = HEAP32[$1036>>2]|0;
      $1038 = (($1037) + ($1034)|0);
      $1039 = HEAP8[$1038>>0]|0;
      $1040 = $1039&255;
      $1041 = $flags$0 & 1;
      $flags$6 = $1041;$s_time$19 = $1031;$temp45$0 = $1040;
      break;
     }
     case 63: case 61: case 60: case 59: case 58: case 57: case 56:  {
      $1020 = $181 ^ 1;
      $1021 = (($110) + ($1020)|0);
      $1022 = HEAP8[$1021>>0]|0;
      $1023 = $1022&255;
      $1024 = $1023 & 1;
      $1025 = $1023 >>> 1;
      $1026 = (($this) + ($1025)|0);
      $1027 = HEAP8[$1026>>0]|0;
      $1028 = $1027&255;
      $1029 = $1024 | $1028;
      $1030 = $1025&255;
      HEAP8[$1021>>0] = $1030;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1029;$pc$1 = $800;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 254: case 246: case 238: case 230: case 222: case 214: case 206: case 198: case 190: case 182: case 174: case 166: case 158: case 150: case 142: case 134:  {
      $1061 = (($158) + 7)|0;
      $1062 = HEAP16[$112>>1]|0;
      $1063 = $1062&65535;
      $1064 = $1063 & 8191;
      $1065 = $1063 >>> 13;
      $1066 = (($s) + ($1065<<2)|0);
      $1067 = HEAP32[$1066>>2]|0;
      $1068 = (($1067) + ($1064)|0);
      $1069 = HEAP8[$1068>>0]|0;
      $1070 = $1069&255;
      $1071 = $181 >>> 3;
      $1072 = $1071 & 7;
      $1073 = 1 << $1072;
      $1074 = $1070 | $1073;
      $1075 = $181 & 64;
      $1076 = ($1075|0)==(0);
      $1077 = $1076 ? $1073 : 0;
      $$25 = $1074 ^ $1077;
      HEAP32[$14>>2] = $1061;
      $1078 = HEAP16[$112>>1]|0;
      $1079 = $1078&65535;
      __Z13kss_cpu_writeP7Kss_Cpuji($this,$1079,$$25);
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $800;$s_time$1 = $1061;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 255: case 253: case 252: case 251: case 250: case 249: case 248: case 247: case 245: case 244: case 243: case 242: case 241: case 240: case 239: case 237: case 236: case 235: case 234: case 233: case 232: case 231: case 229: case 228: case 227: case 226: case 225: case 224: case 223: case 221: case 220: case 219: case 218: case 217: case 216: case 215: case 213: case 212: case 211: case 210: case 209: case 208: case 207: case 205: case 204: case 203: case 202: case 201: case 200: case 199: case 197: case 196: case 195: case 194: case 193: case 192:  {
      $1080 = $181 >>> 3;
      $1081 = $1080 & 7;
      $1082 = 1 << $1081;
      $1083 = $181 & 7;
      $1084 = $1083 ^ 1;
      $1085 = (($0) + ($1084)|0);
      $1086 = HEAP8[$1085>>0]|0;
      $1087 = $1086&255;
      $1088 = $1087 | $1082;
      $1089 = $1088&255;
      HEAP8[$1085>>0] = $1089;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $800;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 191: case 189: case 188: case 187: case 186: case 185: case 184: case 183: case 181: case 180: case 179: case 178: case 177: case 176: case 175: case 173: case 172: case 171: case 170: case 169: case 168: case 167: case 165: case 164: case 163: case 162: case 161: case 160: case 159: case 157: case 156: case 155: case 154: case 153: case 152: case 151: case 149: case 148: case 147: case 146: case 145: case 144: case 143: case 141: case 140: case 139: case 138: case 137: case 136: case 135: case 133: case 132: case 131: case 130: case 129: case 128:  {
      $1090 = $181 >>> 3;
      $1091 = $1090 & 7;
      $1092 = 1 << $1091;
      $1093 = $1092 ^ 255;
      $1094 = $181 & 7;
      $1095 = $1094 ^ 1;
      $1096 = (($0) + ($1095)|0);
      $1097 = HEAP8[$1096>>0]|0;
      $1098 = $1097&255;
      $1099 = $1098 & $1093;
      $1100 = $1099&255;
      HEAP8[$1096>>0] = $1100;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $800;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 127: case 125: case 124: case 123: case 122: case 121: case 120: case 119: case 117: case 116: case 115: case 114: case 113: case 112: case 111: case 109: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 100: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 91: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 82: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 73: case 72: case 71: case 69: case 68: case 67: case 66: case 65: case 64:  {
      $1042 = $181 & 7;
      $1043 = $1042 ^ 1;
      $1044 = (($0) + ($1043)|0);
      $1045 = HEAP8[$1044>>0]|0;
      $1046 = $1045&255;
      $1047 = $flags$0 & 1;
      $1048 = $1046 & 40;
      $1049 = $1048 | $1047;
      $flags$6 = $1049;$s_time$19 = $158;$temp45$0 = $1046;
      break;
     }
     default: {
      label = 167;
      break L1;
     }
     }
    } while(0);
    $1050 = $181 >>> 3;
    $1051 = $1050 & 7;
    $1052 = 1 << $1051;
    $1053 = $temp45$0 & $1052;
    $1054 = $1053 & 128;
    $1055 = (($1053) + 32767)|0;
    $1056 = $1055 >>> 8;
    $1057 = $1056 & 68;
    $1058 = $flags$6 | $1054;
    $1059 = $1058 | $1057;
    $1060 = $1059 | 16;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1060;$pc$1 = $800;$s_time$1 = $s_time$19;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 237:  {
    $1101 = (($pc$1) + 2)|0;
    $1102 = (40520 + ($181)|0);
    $1103 = HEAP8[$1102>>0]|0;
    $1104 = $1103&255;
    $1105 = $1104 >>> 4;
    $1106 = (($1105) + ($158))|0;
    do {
     switch ($181|0) {
     case 106: case 90: case 74: case 98: case 82: case 66:  {
      $1107 = $181 >>> 3;
      $1108 = $1107 & 6;
      $1109 = (($0) + ($1108)|0);
      $1110 = HEAP16[$1109>>1]|0;
      $1111 = $1110&65535;
      $temp47$0 = $1111;
      label = 170;
      break;
     }
     case 122: case 114:  {
      $temp47$0 = $sp$0;
      label = 170;
      break;
     }
     case 113:  {
      HEAP8[$116>>0] = 0;
      label = 173;
      break;
     }
     case 120: case 112: case 104: case 96: case 88: case 80: case 72: case 64:  {
      $1140 = HEAP32[$114>>2]|0;
      $1141 = (($1140) + ($1106))|0;
      $1142 = HEAP16[$0>>1]|0;
      $1143 = $1142&65535;
      $1144 = (__Z10kss_cpu_inP7Kss_Cpuij($this,$1141,$1143)|0);
      $1145 = $1144&255;
      $1146 = $181 >>> 3;
      $1147 = $1146 ^ 1;
      $1148 = (($115) + ($1147)|0);
      HEAP8[$1148>>0] = $1145;
      $1149 = $flags$0 & 1;
      $1150 = (($this) + ($1144)|0);
      $1151 = HEAP8[$1150>>0]|0;
      $1152 = $1151&255;
      $1153 = $1152 | $1149;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1153;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 121: case 105: case 97: case 89: case 81: case 73: case 65:  {
      label = 173;
      break;
     }
     case 83: case 67:  {
      $1163 = $181 >>> 3;
      $1164 = (($119) + ($1163)|0);
      $1165 = HEAP16[$1164>>1]|0;
      $1166 = $1165&65535;
      $temp50$0 = $1166;
      label = 175;
      break;
     }
     case 115:  {
      $temp50$0 = $sp$0;
      label = 175;
      break;
     }
     case 91: case 75:  {
      $$sum13 = (($164) + 2)|0;
      $1175 = (($163) + ($$sum13)|0);
      $1176 = (__Z8get_le16PKv($1175)|0);
      $1177 = (($pc$1) + 4)|0;
      $1178 = $1176 & 8191;
      $1179 = $1176 >>> 13;
      $1180 = (($s) + ($1179<<2)|0);
      $1181 = HEAP32[$1180>>2]|0;
      $1182 = (($1181) + ($1178)|0);
      $1183 = (__Z8get_le16PKv($1182)|0);
      $1184 = $1183&65535;
      $1185 = $181 >>> 3;
      $$sum14 = (($1185) + -9)|0;
      $1186 = (($0) + ($$sum14)|0);
      HEAP16[$1186>>1] = $1184;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1177;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 123:  {
      $$sum12 = (($164) + 2)|0;
      $1187 = (($163) + ($$sum12)|0);
      $1188 = (__Z8get_le16PKv($1187)|0);
      $1189 = (($pc$1) + 4)|0;
      $1190 = $1188 & 8191;
      $1191 = $1188 >>> 13;
      $1192 = (($s) + ($1191<<2)|0);
      $1193 = HEAP32[$1192>>2]|0;
      $1194 = (($1193) + ($1190)|0);
      $1195 = (__Z8get_le16PKv($1194)|0);
      $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1189;$s_time$1 = $1106;$sp$0 = $1195;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 103:  {
      $1196 = HEAP16[$120>>1]|0;
      $1197 = $1196&65535;
      $1198 = $1197 & 8191;
      $1199 = $1197 >>> 13;
      $1200 = (($s) + ($1199<<2)|0);
      $1201 = HEAP32[$1200>>2]|0;
      $1202 = (($1201) + ($1198)|0);
      $1203 = HEAP8[$1202>>0]|0;
      $1204 = $1203&255;
      HEAP32[$14>>2] = $1106;
      $1205 = HEAP16[$120>>1]|0;
      $1206 = $1205&65535;
      $1207 = HEAP8[$121>>0]|0;
      $1208 = $1207&255;
      $1209 = $1208 << 4;
      $1210 = $1204 >>> 4;
      $1211 = $1209 | $1210;
      __Z13kss_cpu_writeP7Kss_Cpuji($this,$1206,$1211);
      $1212 = HEAP8[$121>>0]|0;
      $1213 = $1212&255;
      $1214 = $1213 & 240;
      $1215 = $1204 & 15;
      $1216 = $1214 | $1215;
      $1217 = $flags$0 & 1;
      $1218 = (($this) + ($1216)|0);
      $1219 = HEAP8[$1218>>0]|0;
      $1220 = $1219&255;
      $1221 = $1220 | $1217;
      $1222 = $1216&255;
      HEAP8[$121>>0] = $1222;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1221;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 124: case 116: case 108: case 100: case 92: case 84: case 76: case 68:  {
      $1250 = $flags$0 & -2;
      $1251 = HEAP8[$124>>0]|0;
      $1252 = $1251&255;
      HEAP8[$124>>0] = 0;
      $data$1 = $1252;$flags$4 = $1250;$opcode$0 = 16;$pc$3 = $1101;$s_time$4 = $1106;
      label = 80;
      break L4;
      break;
     }
     case 111:  {
      $1223 = HEAP16[$122>>1]|0;
      $1224 = $1223&65535;
      $1225 = $1224 & 8191;
      $1226 = $1224 >>> 13;
      $1227 = (($s) + ($1226<<2)|0);
      $1228 = HEAP32[$1227>>2]|0;
      $1229 = (($1228) + ($1225)|0);
      $1230 = HEAP8[$1229>>0]|0;
      $1231 = $1230&255;
      HEAP32[$14>>2] = $1106;
      $1232 = HEAP16[$122>>1]|0;
      $1233 = $1232&65535;
      $1234 = $1231 << 4;
      $1235 = HEAP8[$123>>0]|0;
      $1236 = $1235&255;
      $1237 = $1236 & 15;
      $1238 = $1237 | $1234;
      __Z13kss_cpu_writeP7Kss_Cpuji($this,$1233,$1238);
      $1239 = HEAP8[$123>>0]|0;
      $1240 = $1239&255;
      $1241 = $1240 & 240;
      $1242 = $1231 >>> 4;
      $1243 = $1241 | $1242;
      $1244 = $flags$0 & 1;
      $1245 = (($this) + ($1243)|0);
      $1246 = HEAP8[$1245>>0]|0;
      $1247 = $1246&255;
      $1248 = $1247 | $1244;
      $1249 = $1243&255;
      HEAP8[$123>>0] = $1249;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1248;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
      break;
     }
     case 177: case 161:  {
      $inc$0 = 1;
      label = 182;
      break;
     }
     case 185: case 169:  {
      $inc$0 = -1;
      label = 182;
      break;
     }
     case 176: case 160:  {
      $inc59$0 = 1;
      label = 185;
      break;
     }
     case 179: case 163:  {
      $inc62$0 = 1;
      label = 188;
      break;
     }
     case 184: case 168:  {
      $inc59$0 = -1;
      label = 185;
      break;
     }
     case 178: case 162:  {
      $inc65$0 = 1;
      label = 190;
      break;
     }
     case 187: case 171:  {
      $inc62$0 = -1;
      label = 188;
      break;
     }
     case 71:  {
      $1371 = HEAP8[$136>>0]|0;
      HEAP8[$137>>0] = $1371;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 79:  {
      $1372 = HEAP8[$138>>0]|0;
      HEAP8[$139>>0] = $1372;
      $sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = 1;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 186: case 170:  {
      $inc65$0 = -1;
      label = 190;
      break;
     }
     case 87:  {
      $1373 = HEAP8[$140>>0]|0;
      HEAP8[$141>>0] = $1373;
      $warning$1$off0 = $warning$0$off0;
      label = 195;
      break;
     }
     case 95:  {
      $1374 = HEAP8[$144>>0]|0;
      HEAP8[$145>>0] = $1374;
      $warning$1$off0 = 1;
      label = 195;
      break;
     }
     case 125: case 117: case 109: case 101: case 93: case 85: case 77: case 69:  {
      $1388 = HEAP8[$146>>0]|0;
      HEAP8[$147>>0] = $1388;
      $s_time$2 = $1106;
      label = 57;
      break L4;
      break;
     }
     case 110: case 102: case 78: case 70:  {
      HEAP8[$148>>0] = 0;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 118: case 86:  {
      HEAP8[$149>>0] = 1;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 126: case 94:  {
      HEAP8[$150>>0] = 2;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     default: {
      $sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = 1;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
     }
     }
    } while(0);
    if ((label|0) == 170) {
     label = 0;
     $1112 = $flags$0 & 1;
     $1113 = (($temp47$0) + ($1112))|0;
     $1114 = $181 >>> 2;
     $1115 = $1114 & 2;
     $1116 = ($1115|0)==(0);
     $1117 = (0 - ($1113))|0;
     $$26 = $1116 ? $1117 : $1113;
     $1118 = HEAP16[$113>>1]|0;
     $1119 = $1118&65535;
     $1120 = (($$26) + ($1119))|0;
     $1121 = $1119 ^ $temp47$0;
     $1122 = $1121 ^ $1120;
     $1123 = $1120 >>> 16;
     $1124 = $1123 & 1;
     $1125 = $1122 >>> 8;
     $1126 = $1125 & 16;
     $1127 = $1120 >>> 8;
     $1128 = $1127 & 168;
     $1129 = (($1122) + 32768)|0;
     $1130 = $1129 >>> 14;
     $1131 = $1130 & 4;
     $1132 = $1124 | $1115;
     $1133 = $1132 | $1128;
     $1134 = $1133 | $1126;
     $1135 = $1134 | $1131;
     $1136 = $1135 ^ 2;
     $1137 = $1120&65535;
     HEAP16[$113>>1] = $1137;
     $1138 = ($1137<<16>>16)==(0);
     $1139 = $1136 | 64;
     $$35 = $1138 ? $1139 : $1136;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $$35;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
     continue L1;
    }
    else if ((label|0) == 173) {
     label = 0;
     $1154 = HEAP32[$117>>2]|0;
     $1155 = (($1154) + ($1106))|0;
     $1156 = HEAP16[$0>>1]|0;
     $1157 = $1156&65535;
     $1158 = $181 >>> 3;
     $1159 = $1158 ^ 1;
     $1160 = (($118) + ($1159)|0);
     $1161 = HEAP8[$1160>>0]|0;
     $1162 = $1161&255;
     __Z11kss_cpu_outP7Kss_Cpuiji($this,$1155,$1157,$1162);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    else if ((label|0) == 175) {
     label = 0;
     $$sum15 = (($164) + 2)|0;
     $1167 = (($163) + ($$sum15)|0);
     $1168 = (__Z8get_le16PKv($1167)|0);
     $1169 = (($pc$1) + 4)|0;
     $1170 = $1168 & 8191;
     $1171 = $1168 >>> 13;
     $1172 = ((($s) + ($1171<<2)|0) + 36|0);
     $1173 = HEAP32[$1172>>2]|0;
     $1174 = (($1173) + ($1170)|0);
     __Z8set_le16Pvj($1174,$temp50$0);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1169;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    else if ((label|0) == 182) {
     label = 0;
     $1253 = HEAP16[$125>>1]|0;
     $1254 = $1253&65535;
     $1255 = (($1254) + ($inc$0))|0;
     $1256 = $1255&65535;
     HEAP16[$125>>1] = $1256;
     $1257 = $1254 & 8191;
     $1258 = $1254 >>> 13;
     $1259 = (($s) + ($1258<<2)|0);
     $1260 = HEAP32[$1259>>2]|0;
     $1261 = (($1260) + ($1257)|0);
     $1262 = HEAP8[$1261>>0]|0;
     $1263 = $1262&255;
     $1264 = HEAP8[$126>>0]|0;
     $1265 = $1264&255;
     $1266 = (($1265) - ($1263))|0;
     $1267 = $flags$0 & 1;
     $1268 = $1264 ^ $1262;
     $1269 = $1268&255;
     $1270 = $1269 & 16;
     $$masked11 = $1266 & 144;
     $1271 = $1270 ^ $$masked11;
     $1272 = $1271 | $1267;
     $1273 = $1266&255;
     $1274 = ($1273<<24>>24)==(0);
     $$27$v = $1274 ? 66 : 2;
     $$27 = $1272 | $$27$v;
     $1275 = $1271 >>> 4;
     $1276 = $1275 & 1;
     $1277 = (($1266) - ($1276))|0;
     $1278 = $1277 & 8;
     $1279 = $$27 | $1278;
     $1280 = $1277 << 4;
     $1281 = $1280 & 32;
     $1282 = $1279 | $1281;
     $1283 = HEAP16[$0>>1]|0;
     $1284 = (($1283) + -1)<<16>>16;
     HEAP16[$0>>1] = $1284;
     $1285 = ($1284<<16>>16)==(0);
     if ($1285) {
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1282;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
     }
     $1286 = $1282 | 4;
     $1287 = $$27$v & 64;
     $1288 = ($1287|0)!=(0);
     $1289 = ($180&255)<(176);
     $or$cond = $1288 | $1289;
     $1290 = (($1106) + 5)|0;
     $$pc$1 = $or$cond ? $1101 : $pc$1;
     $$28 = $or$cond ? $1106 : $1290;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1286;$pc$1 = $$pc$1;$s_time$1 = $$28;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
     continue L1;
    }
    else if ((label|0) == 185) {
     label = 0;
     $1291 = HEAP16[$127>>1]|0;
     $1292 = $1291&65535;
     $1293 = (($1292) + ($inc59$0))|0;
     $1294 = $1293&65535;
     HEAP16[$127>>1] = $1294;
     $1295 = $1292 & 8191;
     $1296 = $1292 >>> 13;
     $1297 = (($s) + ($1296<<2)|0);
     $1298 = HEAP32[$1297>>2]|0;
     $1299 = (($1298) + ($1295)|0);
     $1300 = HEAP8[$1299>>0]|0;
     $1301 = $1300&255;
     $1302 = HEAP16[$128>>1]|0;
     $1303 = $1302&65535;
     $1304 = (($1303) + ($inc59$0))|0;
     $1305 = $1304&65535;
     HEAP16[$128>>1] = $1305;
     HEAP32[$14>>2] = $1106;
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1303,$1301);
     $1306 = HEAP8[$129>>0]|0;
     $1307 = $1306&255;
     $1308 = (($1307) + ($1301))|0;
     $1309 = $flags$0 & 193;
     $1310 = $1308 & 8;
     $1311 = $1310 | $1309;
     $1312 = $1308 << 4;
     $1313 = $1312 & 32;
     $1314 = $1311 | $1313;
     $1315 = HEAP16[$0>>1]|0;
     $1316 = (($1315) + -1)<<16>>16;
     HEAP16[$0>>1] = $1316;
     $1317 = ($1316<<16>>16)==(0);
     if ($1317) {
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1314;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
      continue L1;
     }
     $1318 = $1314 | 4;
     $1319 = ($180&255)<(176);
     $1320 = (($1106) + 5)|0;
     $$pc$129 = $1319 ? $1101 : $pc$1;
     $$30 = $1319 ? $1106 : $1320;
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1318;$pc$1 = $$pc$129;$s_time$1 = $$30;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
     continue L1;
    }
    else if ((label|0) == 188) {
     label = 0;
     $1321 = HEAP16[$130>>1]|0;
     $1322 = $1321&65535;
     $1323 = (($1322) + ($inc62$0))|0;
     $1324 = $1323&65535;
     HEAP16[$130>>1] = $1324;
     $1325 = $1322 & 8191;
     $1326 = $1322 >>> 13;
     $1327 = (($s) + ($1326<<2)|0);
     $1328 = HEAP32[$1327>>2]|0;
     $1329 = (($1328) + ($1325)|0);
     $1330 = HEAP8[$1329>>0]|0;
     $1331 = $1330&255;
     $1332 = HEAP8[$131>>0]|0;
     $1333 = (($1332) + -1)<<24>>24;
     HEAP8[$131>>0] = $1333;
     $1334 = $1333&255;
     $1335 = $1331 >>> 6;
     $1336 = $1335 & 2;
     $1337 = (($this) + ($1334)|0);
     $1338 = HEAP8[$1337>>0]|0;
     $1339 = $1338&255;
     $1340 = $1339 & 251;
     $1341 = $1340 | $1336;
     $1342 = ($1333<<24>>24)!=(0);
     $1343 = ($180&255)>(175);
     $or$cond3 = $1342 & $1343;
     $1344 = (($1106) + 5)|0;
     $pc$1$ = $or$cond3 ? $pc$1 : $1101;
     $$31 = $or$cond3 ? $1344 : $1106;
     $1345 = HEAP32[$132>>2]|0;
     $1346 = (($$31) + ($1345))|0;
     $1347 = HEAP16[$0>>1]|0;
     $1348 = $1347&65535;
     __Z11kss_cpu_outP7Kss_Cpuiji($this,$1346,$1348,$1331);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1341;$pc$1 = $pc$1$;$s_time$1 = $$31;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
     continue L1;
    }
    else if ((label|0) == 190) {
     label = 0;
     $1349 = HEAP16[$133>>1]|0;
     $1350 = $1349&65535;
     $1351 = (($1350) + ($inc65$0))|0;
     $1352 = $1351&65535;
     HEAP16[$133>>1] = $1352;
     $1353 = HEAP32[$134>>2]|0;
     $1354 = (($1353) + ($1106))|0;
     $1355 = HEAP16[$0>>1]|0;
     $1356 = $1355&65535;
     $1357 = (__Z10kss_cpu_inP7Kss_Cpuij($this,$1354,$1356)|0);
     $1358 = HEAP8[$135>>0]|0;
     $1359 = (($1358) + -1)<<24>>24;
     HEAP8[$135>>0] = $1359;
     $1360 = $1359&255;
     $1361 = $1357 >>> 6;
     $1362 = $1361 & 2;
     $1363 = (($this) + ($1360)|0);
     $1364 = HEAP8[$1363>>0]|0;
     $1365 = $1364&255;
     $1366 = $1365 & 251;
     $1367 = $1366 | $1362;
     $1368 = ($1359<<24>>24)!=(0);
     $1369 = ($180&255)>(175);
     $or$cond5 = $1368 & $1369;
     $1370 = (($1106) + 5)|0;
     $pc$1$32 = $or$cond5 ? $pc$1 : $1101;
     $$33 = $or$cond5 ? $1370 : $1106;
     HEAP32[$14>>2] = $$33;
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1350,$1357);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1367;$pc$1 = $pc$1$32;$s_time$1 = $$33;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
     continue L1;
    }
    else if ((label|0) == 195) {
     label = 0;
     $1375 = $flags$0 & 1;
     $1376 = HEAP8[$142>>0]|0;
     $1377 = $1376&255;
     $1378 = (($this) + ($1377)|0);
     $1379 = HEAP8[$1378>>0]|0;
     $1380 = $1379&255;
     $1381 = $1380 & 251;
     $1382 = $1381 | $1375;
     $1383 = HEAP8[$143>>0]|0;
     $1384 = $1383&255;
     $1385 = $1384 << 2;
     $1386 = $1385 & 4;
     $1387 = $1382 | $1386;
     $sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1387;$pc$1 = $1101;$s_time$1 = $1106;$warning$0$off0 = $warning$1$off0;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
     continue L1;
    }
    break;
   }
   case 253:  {
    $ixy$0 = $iy$0;
    label = 201;
    break;
   }
   case 221:  {
    $ixy$0 = $ix$0;
    label = 201;
    break;
   }
   default: {
    label = 259;
    break L1;
   }
   }
  } while(0);
  L178:   switch (label|0) {
   case 2: {
    label = 0;
    $157 = (($158) + -5)|0;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $pc$0;$s_time$1 = $157;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 3: {
    label = 0;
    $159 = (($158) + -7)|0;
    $s_time$0 = $159;
    label = 4;
    break;
   }
   case 57: {
    label = 0;
    $292 = $sp$0 & 8191;
    $293 = $sp$0 >>> 13;
    $294 = (($s) + ($293<<2)|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($295) + ($292)|0);
    $297 = (__Z8get_le16PKv($296)|0);
    $298 = (($sp$0) + 2)|0;
    $299 = $298 & 65535;
    $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $297;$s_time$1 = $s_time$2;$sp$0 = $299;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 66: {
    label = 0;
    $316 = (($pc$1) + 3)|0;
    $317 = (__Z8get_le16PKv($166)|0);
    $318 = (($sp$0) + 65534)|0;
    $319 = $318 & 65535;
    $320 = $318 & 8191;
    $321 = $319 >>> 13;
    $322 = ((($s) + ($321<<2)|0) + 36|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = (($323) + ($320)|0);
    __Z8set_le16Pvj($324,$316);
    $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $317;$s_time$1 = $158;$sp$0 = $319;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 68: {
    label = 0;
    $326 = $168 & 56;
    $data$0 = $169;$pc$2 = $326;$s_time$3 = $158;
    label = 71;
    break;
   }
   case 75: {
    label = 0;
    $370 = HEAP16[$46>>1]|0;
    $371 = $370&65535;
    $372 = $371 & 8191;
    $373 = $371 >>> 13;
    $374 = (($s) + ($373<<2)|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (($375) + ($372)|0);
    $377 = HEAP8[$376>>0]|0;
    $378 = $377&255;
    $data$1 = $378;$flags$4 = $flags$1;$opcode$0 = $168;$pc$3 = $169;$s_time$4 = $158;
    label = 80;
    break;
   }
   case 77: {
    label = 0;
    $380 = (($pc$1) + 2)|0;
    $data$1 = $181;$flags$4 = $flags$2;$opcode$0 = $168;$pc$3 = $380;$s_time$4 = $158;
    label = 80;
    break;
   }
   case 79: {
    label = 0;
    $382 = $168 & 7;
    $383 = $382 ^ 1;
    $384 = (($0) + ($383)|0);
    $385 = HEAP8[$384>>0]|0;
    $386 = $385&255;
    $data$1 = $386;$flags$4 = $flags$3;$opcode$0 = $168;$pc$3 = $169;$s_time$4 = $158;
    label = 80;
    break;
   }
   case 86: {
    label = 0;
    $447 = HEAP16[$51>>1]|0;
    $448 = $447&65535;
    $449 = (($448) + ($data$3))|0;
    $450 = $448 ^ $data$3;
    $451 = $449&65535;
    HEAP16[$51>>1] = $451;
    $452 = $flags$0 & 196;
    $453 = $449 >>> 16;
    $454 = $453 | $452;
    $455 = $449 >>> 8;
    $456 = $455 & 40;
    $457 = $454 | $456;
    $458 = $450 ^ $449;
    $459 = $458 >>> 8;
    $460 = $459 & 16;
    $461 = $457 | $460;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $461;$pc$1 = $169;$s_time$1 = $158;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 201: {
    label = 0;
    $1389 = (($pc$1) + 2)|0;
    $1390 = $1389 & 8191;
    $1391 = $1389 >>> 13;
    $1392 = (($s) + ($1391<<2)|0);
    $1393 = HEAP32[$1392>>2]|0;
    $1394 = (($1393) + ($1390)|0);
    $1395 = HEAP8[$1394>>0]|0;
    $1396 = $1395&255;
    $1397 = (40520 + ($181)|0);
    $1398 = HEAP8[$1397>>0]|0;
    $1399 = $1398&255;
    $1400 = $1399 & 15;
    $1401 = (($1400) + ($158))|0;
    do {
     switch ($181|0) {
     case 180:  {
      $1459 = $ixy$0 >>> 8;
      $data$7 = $1459;$pc$8 = $1389;$s_time$9 = $1401;
      label = 105;
      break L178;
      break;
     }
     case 182:  {
      $1448 = (($pc$1) + 3)|0;
      $1449 = $1395 << 24 >> 24;
      $1450 = (($1449) + ($ixy$0))|0;
      $1451 = $1450 & 8191;
      $1452 = $1450 >>> 13;
      $1453 = $1452 & 7;
      $1454 = (($s) + ($1453<<2)|0);
      $1455 = HEAP32[$1454>>2]|0;
      $1456 = (($1455) + ($1451)|0);
      $1457 = HEAP8[$1456>>0]|0;
      $1458 = $1457&255;
      $data$7 = $1458;$pc$8 = $1448;$s_time$9 = $1401;
      label = 105;
      break L178;
      break;
     }
     case 181:  {
      $1460 = $ixy$0 & 255;
      $data$7 = $1460;$pc$8 = $1389;$s_time$9 = $1401;
      label = 105;
      break L178;
      break;
     }
     case 172:  {
      $1472 = $ixy$0 >>> 8;
      $data$8 = $1472;$pc$9 = $1389;$s_time$10 = $1401;
      label = 109;
      break L178;
      break;
     }
     case 174:  {
      $1461 = (($pc$1) + 3)|0;
      $1462 = $1395 << 24 >> 24;
      $1463 = (($1462) + ($ixy$0))|0;
      $1464 = $1463 & 8191;
      $1465 = $1463 >>> 13;
      $1466 = $1465 & 7;
      $1467 = (($s) + ($1466<<2)|0);
      $1468 = HEAP32[$1467>>2]|0;
      $1469 = (($1468) + ($1464)|0);
      $1470 = HEAP8[$1469>>0]|0;
      $1471 = $1470&255;
      $data$8 = $1471;$pc$9 = $1461;$s_time$10 = $1401;
      label = 109;
      break L178;
      break;
     }
     case 173:  {
      $1473 = $ixy$0 & 255;
      $data$8 = $1473;$pc$9 = $1389;$s_time$10 = $1401;
      label = 109;
      break L178;
      break;
     }
     case 188:  {
      $1485 = $ixy$0 >>> 8;
      $data$2 = $1485;$pc$4 = $1389;$s_time$5 = $1401;
      label = 84;
      break L178;
      break;
     }
     case 190:  {
      $1474 = (($pc$1) + 3)|0;
      $1475 = $1395 << 24 >> 24;
      $1476 = (($1475) + ($ixy$0))|0;
      $1477 = $1476 & 8191;
      $1478 = $1476 >>> 13;
      $1479 = $1478 & 7;
      $1480 = (($s) + ($1479<<2)|0);
      $1481 = HEAP32[$1480>>2]|0;
      $1482 = (($1481) + ($1477)|0);
      $1483 = HEAP8[$1482>>0]|0;
      $1484 = $1483&255;
      $data$2 = $1484;$pc$4 = $1474;$s_time$5 = $1401;
      label = 84;
      break L178;
      break;
     }
     case 189:  {
      $1486 = $ixy$0 & 255;
      $data$2 = $1486;$pc$4 = $1389;$s_time$5 = $1401;
      label = 84;
      break L178;
      break;
     }
     case 119: case 117: case 116: case 115: case 114: case 113: case 112:  {
      $1487 = $181 ^ 1;
      $1488 = (($151) + ($1487)|0);
      $$sink$in = $1488;$pc$20 = $1389;
      label = 225;
      break;
     }
     case 54:  {
      $1489 = (($pc$1) + 3)|0;
      $1490 = $1489 & 8191;
      $1491 = $1489 >>> 13;
      $1492 = (($s) + ($1491<<2)|0);
      $1493 = HEAP32[$1492>>2]|0;
      $1494 = (($1493) + ($1490)|0);
      $$sink$in = $1494;$pc$20 = $1489;
      label = 225;
      break;
     }
     case 124: case 92: case 84: case 76: case 68:  {
      $1500 = $ixy$0 >>> 8;
      $1501 = $1500&255;
      $1502 = $181 >>> 3;
      $1503 = $1502 ^ 1;
      $1504 = (($152) + ($1503)|0);
      HEAP8[$1504>>0] = $1501;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1389;$s_time$1 = $1401;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 125: case 93: case 85: case 77: case 69:  {
      $1505 = $ixy$0&255;
      $1506 = $181 >>> 3;
      $1507 = $1506 ^ 1;
      $1508 = (($153) + ($1507)|0);
      HEAP8[$1508>>0] = $1505;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1389;$s_time$1 = $1401;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 38:  {
      $1522 = (($pc$1) + 3)|0;
      $data269$0 = $1396;$pc$21 = $1522;
      label = 232;
      break;
     }
     case 126: case 110: case 102: case 94: case 86: case 78: case 70:  {
      $1509 = (($pc$1) + 3)|0;
      $1510 = $1395 << 24 >> 24;
      $1511 = (($1510) + ($ixy$0))|0;
      $1512 = $1511 & 8191;
      $1513 = $1511 >>> 13;
      $1514 = $1513 & 7;
      $1515 = (($s) + ($1514<<2)|0);
      $1516 = HEAP32[$1515>>2]|0;
      $1517 = (($1516) + ($1512)|0);
      $1518 = HEAP8[$1517>>0]|0;
      $1519 = $181 >>> 3;
      $1520 = $1519 ^ 1;
      $1521 = (($154) + ($1520)|0);
      HEAP8[$1521>>0] = $1518;
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1509;$s_time$1 = $1401;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 101:  {
      $1523 = $ixy$0 & 255;
      $data269$0 = $1523;$pc$21 = $1389;
      label = 232;
      break;
     }
     case 103: case 99: case 98: case 97: case 96:  {
      $1524 = $181 ^ 1;
      $1525 = (($155) + ($1524)|0);
      $1526 = HEAP8[$1525>>0]|0;
      $1527 = $1526&255;
      $data269$0 = $1527;$pc$21 = $1389;
      label = 232;
      break;
     }
     case 46:  {
      $1531 = (($pc$1) + 3)|0;
      $data269$1 = $1396;$pc$22 = $1531;
      label = 236;
      break;
     }
     case 108:  {
      $1532 = $ixy$0 >>> 8;
      $data269$1 = $1532;$pc$22 = $1389;
      label = 236;
      break;
     }
     case 111: case 107: case 106: case 105: case 104:  {
      $1533 = $181 ^ 1;
      $1534 = (($156) + ($1533)|0);
      $1535 = HEAP8[$1534>>0]|0;
      $1536 = $1535&255;
      $data269$1 = $1536;$pc$22 = $1389;
      label = 236;
      break;
     }
     case 249:  {
      $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1389;$s_time$1 = $1401;$sp$0 = $ixy$0;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 34:  {
      $$sum9 = (($164) + 2)|0;
      $1540 = (($163) + ($$sum9)|0);
      $1541 = (__Z8get_le16PKv($1540)|0);
      $1542 = (($pc$1) + 4)|0;
      $1543 = $1541 & 8191;
      $1544 = $1541 >>> 13;
      $1545 = ((($s) + ($1544<<2)|0) + 36|0);
      $1546 = HEAP32[$1545>>2]|0;
      $1547 = (($1546) + ($1543)|0);
      __Z8set_le16Pvj($1547,$ixy$0);
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1542;$s_time$1 = $1401;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 33:  {
      $$sum8 = (($164) + 2)|0;
      $1548 = (($163) + ($$sum8)|0);
      $1549 = (__Z8get_le16PKv($1548)|0);
      $1550 = (($pc$1) + 4)|0;
      $flags$11 = $flags$0;$ixy$1 = $1549;$pc$23 = $1550;$sp$1 = $sp$0;
      break;
     }
     case 42:  {
      $$sum7 = (($164) + 2)|0;
      $1551 = (($163) + ($$sum7)|0);
      $1552 = (__Z8get_le16PKv($1551)|0);
      $1553 = $1552 & 8191;
      $1554 = $1552 >>> 13;
      $1555 = (($s) + ($1554<<2)|0);
      $1556 = HEAP32[$1555>>2]|0;
      $1557 = (($1556) + ($1553)|0);
      $1558 = (__Z8get_le16PKv($1557)|0);
      $1559 = (($pc$1) + 4)|0;
      $flags$11 = $flags$0;$ixy$1 = $1558;$pc$23 = $1559;$sp$1 = $sp$0;
      break;
     }
     case 203:  {
      $1560 = $1395 << 24 >> 24;
      $1561 = (($1560) + ($ixy$0))|0;
      $1562 = $1561 & 65535;
      $1563 = (($pc$1) + 3)|0;
      $1564 = $1563 & 8191;
      $1565 = $1563 >>> 13;
      $1566 = (($s) + ($1565<<2)|0);
      $1567 = HEAP32[$1566>>2]|0;
      $1568 = (($1567) + ($1564)|0);
      $1569 = HEAP8[$1568>>0]|0;
      $1570 = $1569&255;
      $1571 = (($pc$1) + 4)|0;
      switch ($1570|0) {
      case 126: case 118: case 110: case 102: case 94: case 86: case 78: case 70:  {
       $1572 = $1561 & 8191;
       $1573 = $1562 >>> 13;
       $1574 = (($s) + ($1573<<2)|0);
       $1575 = HEAP32[$1574>>2]|0;
       $1576 = (($1575) + ($1572)|0);
       $1577 = HEAP8[$1576>>0]|0;
       $1578 = $1577&255;
       $1579 = $1570 >>> 3;
       $1580 = $1579 & 7;
       $1581 = 1 << $1580;
       $1582 = $1578 & $1581;
       $1583 = $flags$0 & 1;
       $1584 = $1582 & 128;
       $1585 = (($1582) + 32767)|0;
       $1586 = $1585 >>> 8;
       $1587 = $1586 & 68;
       $1588 = $1583 | $1584;
       $1589 = $1588 | $1587;
       $1590 = $1589 | 16;
       $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1590;$pc$1 = $1571;$s_time$1 = $1401;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
       continue L1;
       break;
      }
      case 254: case 246: case 238: case 230: case 222: case 214: case 206: case 198: case 190: case 182: case 174: case 166: case 158: case 150: case 142: case 134:  {
       $1591 = $1561 & 8191;
       $1592 = $1562 >>> 13;
       $1593 = (($s) + ($1592<<2)|0);
       $1594 = HEAP32[$1593>>2]|0;
       $1595 = (($1594) + ($1591)|0);
       $1596 = HEAP8[$1595>>0]|0;
       $1597 = $1596&255;
       $1598 = $1570 >>> 3;
       $1599 = $1598 & 7;
       $1600 = 1 << $1599;
       $1601 = $1597 | $1600;
       $1602 = $1570 & 64;
       $1603 = ($1602|0)==(0);
       $1604 = $1603 ? $1600 : 0;
       $$34 = $1601 ^ $1604;
       HEAP32[$14>>2] = $1401;
       __Z13kss_cpu_writeP7Kss_Cpuji($this,$1562,$$34);
       $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1571;$s_time$1 = $1401;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
       continue L1;
       break;
      }
      case 6:  {
       $data$9 = $1562;$pc$10 = $1571;$s_time$11 = $1401;
       label = 138;
       break L178;
       break;
      }
      case 22:  {
       $data$10 = $1562;$pc$11 = $1571;$s_time$12 = $1401;
       label = 141;
       break L178;
       break;
      }
      case 38:  {
       $data$11 = $1562;$pc$12 = $1571;$s_time$13 = $1401;
       label = 144;
       break L178;
       break;
      }
      case 54:  {
       $data$12 = $1562;$pc$13 = $1571;$s_time$14 = $1401;
       label = 147;
       break L178;
       break;
      }
      case 14:  {
       $data$13 = $1562;$pc$14 = $1571;$s_time$15 = $1401;
       label = 150;
       break L178;
       break;
      }
      case 30:  {
       $data$14 = $1562;$pc$15 = $1571;$s_time$16 = $1401;
       label = 153;
       break L178;
       break;
      }
      case 46:  {
       $data$15 = $1562;$pc$16 = $1571;$s_time$17 = $1401;
       label = 156;
       break L178;
       break;
      }
      case 62:  {
       $data$16 = $1562;$pc$17 = $1571;$s_time$18 = $1401;
       label = 159;
       break L178;
       break;
      }
      default: {
       $sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1571;$s_time$1 = $1401;$warning$0$off0 = 1;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
       continue L1;
      }
      }
      break;
     }
     case 35:  {
      $1605 = (($ixy$0) + 1)|0;
      $1606 = $1605 & 65535;
      $flags$11 = $flags$0;$ixy$1 = $1606;$pc$23 = $1389;$sp$1 = $sp$0;
      break;
     }
     case 43:  {
      $1607 = (($ixy$0) + 65535)|0;
      $1608 = $1607 & 65535;
      $flags$11 = $flags$0;$ixy$1 = $1608;$pc$23 = $1389;$sp$1 = $sp$0;
      break;
     }
     case 52:  {
      $1609 = $1395 << 24 >> 24;
      $1610 = (($1609) + ($ixy$0))|0;
      $1611 = $1610 & 65535;
      $1612 = (($pc$1) + 3)|0;
      $1613 = $1610 & 8191;
      $1614 = $1611 >>> 13;
      $1615 = (($s) + ($1614<<2)|0);
      $1616 = HEAP32[$1615>>2]|0;
      $1617 = (($1616) + ($1613)|0);
      $1618 = HEAP8[$1617>>0]|0;
      $1619 = $1618&255;
      $1620 = (($1619) + 1)|0;
      HEAP32[$14>>2] = $1401;
      __Z13kss_cpu_writeP7Kss_Cpuji($this,$1611,$1620);
      $data$4 = $1620;$ix$1 = $ix$0;$iy$1 = $iy$0;$pc$5 = $1612;$s_time$6 = $1401;
      label = 90;
      break L178;
      break;
     }
     case 53:  {
      $1621 = $1395 << 24 >> 24;
      $1622 = (($1621) + ($ixy$0))|0;
      $1623 = $1622 & 65535;
      $1624 = (($pc$1) + 3)|0;
      $1625 = $1622 & 8191;
      $1626 = $1623 >>> 13;
      $1627 = (($s) + ($1626<<2)|0);
      $1628 = HEAP32[$1627>>2]|0;
      $1629 = (($1628) + ($1625)|0);
      $1630 = HEAP8[$1629>>0]|0;
      $1631 = $1630&255;
      $1632 = (($1631) + -1)|0;
      HEAP32[$14>>2] = $1401;
      __Z13kss_cpu_writeP7Kss_Cpuji($this,$1623,$1632);
      $data$5 = $1632;$ix$2 = $ix$0;$iy$2 = $iy$0;$pc$6 = $1624;$s_time$7 = $1401;
      label = 93;
      break L178;
      break;
     }
     case 36:  {
      $1633 = (($ixy$0) + 256)|0;
      $1634 = $1633 & 65535;
      $1635 = $1634 >>> 8;
      $data$18 = $1635;$ixy$2 = $1634;
      label = 251;
      break;
     }
     case 44:  {
      $1636 = (($ixy$0) + 1)|0;
      $1637 = $1636 & 255;
      $1638 = $ixy$0 & 65280;
      $1639 = $1637 | $1638;
      $data$18 = $1637;$ixy$2 = $1639;
      label = 251;
      break;
     }
     case 37:  {
      $1641 = (($ixy$0) + 65280)|0;
      $1642 = $1641 & 65535;
      $1643 = $1642 >>> 8;
      $data$19 = $1643;$ixy$3 = $1642;
      label = 254;
      break;
     }
     case 45:  {
      $1644 = (($ixy$0) + 255)|0;
      $1645 = $1644 & 255;
      $1646 = $ixy$0 & 65280;
      $1647 = $1645 | $1646;
      $data$19 = $1645;$ixy$3 = $1647;
      label = 254;
      break;
     }
     case 225:  {
      $1649 = $sp$0 & 8191;
      $1650 = $sp$0 >>> 13;
      $1651 = (($s) + ($1650<<2)|0);
      $1652 = HEAP32[$1651>>2]|0;
      $1653 = (($1652) + ($1649)|0);
      $1654 = (__Z8get_le16PKv($1653)|0);
      $1655 = (($sp$0) + 2)|0;
      $1656 = $1655 & 65535;
      $flags$11 = $flags$0;$ixy$1 = $1654;$pc$23 = $1389;$sp$1 = $1656;
      break;
     }
     case 233:  {
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $ixy$0;$s_time$1 = $1401;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 227:  {
      $1657 = $sp$0 & 8191;
      $1658 = $sp$0 >>> 13;
      $1659 = (($s) + ($1658<<2)|0);
      $1660 = HEAP32[$1659>>2]|0;
      $1661 = (($1660) + ($1657)|0);
      $1662 = (__Z8get_le16PKv($1661)|0);
      $1663 = ((($s) + ($1658<<2)|0) + 36|0);
      $1664 = HEAP32[$1663>>2]|0;
      $1665 = (($1664) + ($1657)|0);
      __Z8set_le16Pvj($1665,$ixy$0);
      $flags$11 = $flags$0;$ixy$1 = $1662;$pc$23 = $1389;$sp$1 = $sp$0;
      break;
     }
     case 109: case 100:  {
      $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1389;$s_time$1 = $1401;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
      break;
     }
     case 229:  {
      $data$0 = $ixy$0;$pc$2 = $1389;$s_time$3 = $1401;
      label = 71;
      break L178;
      break;
     }
     case 134: case 150:  {
      $1402 = $flags$0 & -2;
      $flags$8 = $1402;
      label = 203;
      break;
     }
     case 142: case 158:  {
      $flags$8 = $flags$0;
      label = 203;
      break;
     }
     case 132: case 148:  {
      $1414 = $flags$0 & -2;
      $flags$9 = $1414;
      label = 205;
      break;
     }
     case 140: case 156:  {
      $flags$9 = $flags$0;
      label = 205;
      break;
     }
     case 133: case 149:  {
      $1416 = $flags$0 & -2;
      $flags$10 = $1416;
      label = 207;
      break;
     }
     case 141: case 157:  {
      $flags$10 = $flags$0;
      label = 207;
      break;
     }
     case 41:  {
      $temp70$0 = $ixy$0;
      label = 210;
      break;
     }
     case 25: case 9:  {
      $1418 = $181 >>> 3;
      $$sum10 = (($1418) + -1)|0;
      $1419 = (($0) + ($$sum10)|0);
      $1420 = HEAP16[$1419>>1]|0;
      $1421 = $1420&65535;
      $temp70$0 = $1421;
      label = 210;
      break;
     }
     case 57:  {
      $temp70$0 = $sp$0;
      label = 210;
      break;
     }
     case 164:  {
      $1446 = $ixy$0 >>> 8;
      $data$6 = $1446;$pc$7 = $1389;$s_time$8 = $1401;
      label = 101;
      break L178;
      break;
     }
     case 166:  {
      $1435 = (($pc$1) + 3)|0;
      $1436 = $1395 << 24 >> 24;
      $1437 = (($1436) + ($ixy$0))|0;
      $1438 = $1437 & 8191;
      $1439 = $1437 >>> 13;
      $1440 = $1439 & 7;
      $1441 = (($s) + ($1440<<2)|0);
      $1442 = HEAP32[$1441>>2]|0;
      $1443 = (($1442) + ($1438)|0);
      $1444 = HEAP8[$1443>>0]|0;
      $1445 = $1444&255;
      $data$6 = $1445;$pc$7 = $1435;$s_time$8 = $1401;
      label = 101;
      break L178;
      break;
     }
     case 165:  {
      $1447 = $ixy$0 & 255;
      $data$6 = $1447;$pc$7 = $1389;$s_time$8 = $1401;
      label = 101;
      break L178;
      break;
     }
     default: {
      $sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $169;$s_time$1 = $1401;$warning$0$off0 = 1;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
      continue L1;
     }
     }
    } while(0);
    if ((label|0) == 203) {
     label = 0;
     $1403 = (($pc$1) + 3)|0;
     $1404 = $1395 << 24 >> 24;
     $1405 = (($1404) + ($ixy$0))|0;
     $1406 = $1405 & 8191;
     $1407 = $1405 >>> 13;
     $1408 = $1407 & 7;
     $1409 = (($s) + ($1408<<2)|0);
     $1410 = HEAP32[$1409>>2]|0;
     $1411 = (($1410) + ($1406)|0);
     $1412 = HEAP8[$1411>>0]|0;
     $1413 = $1412&255;
     $data$1 = $1413;$flags$4 = $flags$8;$opcode$0 = $181;$pc$3 = $1403;$s_time$4 = $1401;
     label = 80;
     break;
    }
    else if ((label|0) == 205) {
     label = 0;
     $1415 = $ixy$0 >>> 8;
     $data$1 = $1415;$flags$4 = $flags$9;$opcode$0 = $181;$pc$3 = $1389;$s_time$4 = $1401;
     label = 80;
     break;
    }
    else if ((label|0) == 207) {
     label = 0;
     $1417 = $ixy$0 & 255;
     $data$1 = $1417;$flags$4 = $flags$10;$opcode$0 = $181;$pc$3 = $1389;$s_time$4 = $1401;
     label = 80;
     break;
    }
    else if ((label|0) == 210) {
     label = 0;
     $1422 = (($temp70$0) + ($ixy$0))|0;
     $1423 = $temp70$0 ^ $ixy$0;
     $1424 = $1422 & 65535;
     $1425 = $flags$0 & 196;
     $1426 = $1422 >>> 16;
     $1427 = $1426 | $1425;
     $1428 = $1422 >>> 8;
     $1429 = $1428 & 40;
     $1430 = $1427 | $1429;
     $1431 = $1423 ^ $1422;
     $1432 = $1431 >>> 8;
     $1433 = $1432 & 16;
     $1434 = $1430 | $1433;
     $flags$11 = $1434;$ixy$1 = $1424;$pc$23 = $1389;$sp$1 = $sp$0;
    }
    else if ((label|0) == 225) {
     label = 0;
     $$sink = HEAP8[$$sink$in>>0]|0;
     $1495 = $$sink&255;
     $1496 = (($pc$20) + 1)|0;
     HEAP32[$14>>2] = $1401;
     $1497 = $1395 << 24 >> 24;
     $1498 = (($1497) + ($ixy$0))|0;
     $1499 = $1498 & 65535;
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1499,$1495);
     $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1496;$s_time$1 = $1401;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
     continue L1;
    }
    else if ((label|0) == 232) {
     label = 0;
     $1528 = $ixy$0 & 255;
     $1529 = $data269$0 << 8;
     $1530 = $1529 | $1528;
     $flags$11 = $flags$0;$ixy$1 = $1530;$pc$23 = $pc$21;$sp$1 = $sp$0;
    }
    else if ((label|0) == 236) {
     label = 0;
     $1537 = $ixy$0 & 65280;
     $1538 = $data269$1 | $1537;
     $flags$11 = $flags$0;$ixy$1 = $1538;$pc$23 = $pc$22;$sp$1 = $sp$0;
    }
    else if ((label|0) == 251) {
     label = 0;
     $1640 = ($167<<24>>24)==(-35);
     $iy$0$ixy$2 = $1640 ? $iy$0 : $ixy$2;
     $ixy$2$ix$0 = $1640 ? $ixy$2 : $ix$0;
     $data$4 = $data$18;$ix$1 = $ixy$2$ix$0;$iy$1 = $iy$0$ixy$2;$pc$5 = $1389;$s_time$6 = $1401;
     label = 90;
     break;
    }
    else if ((label|0) == 254) {
     label = 0;
     $1648 = ($167<<24>>24)==(-35);
     $iy$0$ixy$3 = $1648 ? $iy$0 : $ixy$3;
     $ixy$3$ix$0 = $1648 ? $ixy$3 : $ix$0;
     $data$5 = $data$19;$ix$2 = $ixy$3$ix$0;$iy$2 = $iy$0$ixy$3;$pc$6 = $1389;$s_time$7 = $1401;
     label = 93;
     break;
    }
    $1539 = ($167<<24>>24)==(-35);
    $iy$0$ixy$1 = $1539 ? $iy$0 : $ixy$1;
    $ixy$1$ix$0 = $1539 ? $ixy$1 : $ix$0;
    $warning$0$off0$phi = $warning$0$off0;$flags$0 = $flags$11;$ix$0 = $ixy$1$ix$0;$iy$0 = $iy$0$ixy$1;$pc$1 = $pc$23;$s_time$1 = $1401;$sp$0 = $sp$1;$warning$0$off0 = $warning$0$off0$phi;
    continue L1;
    break;
   }
  }
  switch (label|0) {
   case 4: {
    label = 0;
    $160 = (($pc$1) + 3)|0;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $160;$s_time$1 = $s_time$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 71: {
    label = 0;
    $335 = (($sp$0) + 65534)|0;
    $336 = $335 & 65535;
    $337 = $335 & 8191;
    $338 = $336 >>> 13;
    $339 = ((($s) + ($338<<2)|0) + 36|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = (($340) + ($337)|0);
    __Z8set_le16Pvj($341,$data$0);
    $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $pc$2;$s_time$1 = $s_time$3;$sp$0 = $336;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
    continue L1;
    break;
   }
   case 80: {
    label = 0;
    $387 = $flags$4 & 1;
    $388 = (($387) + ($data$1))|0;
    $389 = HEAP8[$47>>0]|0;
    $390 = $389&255;
    $391 = $390 ^ $data$1;
    $392 = $opcode$0 >>> 3;
    $393 = $392 & 2;
    $394 = ($393|0)==(0);
    $395 = (0 - ($388))|0;
    $$ = $394 ? $388 : $395;
    $396 = (($390) + ($$))|0;
    $397 = $391 ^ $396;
    $398 = $397 & 16;
    $399 = (($397) + 128)|0;
    $400 = $399 >>> 6;
    $401 = $400 & 4;
    $402 = $396 & 511;
    $403 = (($this) + ($402)|0);
    $404 = HEAP8[$403>>0]|0;
    $405 = $404&255;
    $406 = $405 & 251;
    $407 = $406 | $393;
    $408 = $407 | $398;
    $409 = $408 | $401;
    $410 = $396&255;
    HEAP8[$47>>0] = $410;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $409;$pc$1 = $pc$3;$s_time$1 = $s_time$4;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 84: {
    label = 0;
    $425 = HEAP8[$49>>0]|0;
    $426 = $425&255;
    $427 = (($426) - ($data$2))|0;
    $428 = $data$2 & 40;
    $429 = $427 >>> 8;
    $430 = $429 & 1;
    $431 = $426 ^ $data$2;
    $432 = $427 ^ $426;
    $433 = $432 & $431;
    $434 = $433 >>> 5;
    $435 = $434 & 4;
    $436 = $431 & 16;
    $$masked = $427 & 144;
    $437 = $436 ^ $$masked;
    $438 = $427&255;
    $439 = ($438<<24>>24)==(0);
    $$20$v = $439 ? 66 : 2;
    $440 = $430 | $428;
    $441 = $440 | $437;
    $442 = $441 | $$20$v;
    $$20 = $442 | $435;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $$20;$pc$1 = $pc$4;$s_time$1 = $s_time$5;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 90: {
    label = 0;
    $506 = $flags$0 & 1;
    $507 = $data$4 & 15;
    $508 = (($507) + 31)|0;
    $509 = $508 & 16;
    $510 = $509 | $506;
    $511 = $data$4 & 255;
    $512 = (($this) + ($511)|0);
    $513 = HEAP8[$512>>0]|0;
    $514 = $513&255;
    $515 = $514 & 251;
    $516 = $510 | $515;
    $517 = ($data$4|0)==(128);
    $518 = $516 | 4;
    $$23 = $517 ? $518 : $516;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$flags$0 = $$23;$ix$0 = $ix$1;$iy$0 = $iy$1;$pc$1 = $pc$5;$s_time$1 = $s_time$6;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;
    continue L1;
    break;
   }
   case 93: {
    label = 0;
    $537 = $flags$0 & 1;
    $538 = $data$5 & 15;
    $539 = (($538) + 1)|0;
    $540 = $539 & 16;
    $541 = $data$5 & 255;
    $542 = (($this) + ($541)|0);
    $543 = HEAP8[$542>>0]|0;
    $544 = $543&255;
    $545 = $544 & 249;
    $546 = ($data$5|0)==(127);
    $$24$v = $546 ? 6 : 2;
    $547 = $$24$v | $537;
    $548 = $547 | $540;
    $$24 = $548 | $545;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$flags$0 = $$24;$ix$0 = $ix$2;$iy$0 = $iy$2;$pc$1 = $pc$6;$s_time$1 = $s_time$7;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;
    continue L1;
    break;
   }
   case 101: {
    label = 0;
    $575 = HEAP8[$56>>0]|0;
    $576 = $575&255;
    $577 = $576 & $data$6;
    $578 = $577&255;
    HEAP8[$56>>0] = $578;
    $579 = (($this) + ($577)|0);
    $580 = HEAP8[$579>>0]|0;
    $581 = $580&255;
    $582 = $581 | 16;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $582;$pc$1 = $pc$7;$s_time$1 = $s_time$8;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 105: {
    label = 0;
    $597 = HEAP8[$59>>0]|0;
    $598 = $597&255;
    $599 = $598 | $data$7;
    $600 = $599&255;
    HEAP8[$59>>0] = $600;
    $601 = $599 & 255;
    $602 = (($this) + ($601)|0);
    $603 = HEAP8[$602>>0]|0;
    $604 = $603&255;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $604;$pc$1 = $pc$8;$s_time$1 = $s_time$9;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 109: {
    label = 0;
    $619 = HEAP8[$62>>0]|0;
    $620 = $619&255;
    $621 = $620 ^ $data$8;
    $622 = $621&255;
    HEAP8[$62>>0] = $622;
    $623 = $621 & 255;
    $624 = (($this) + ($623)|0);
    $625 = HEAP8[$624>>0]|0;
    $626 = $625&255;
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $626;$pc$1 = $pc$9;$s_time$1 = $s_time$10;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 138: {
    label = 0;
    $804 = $data$9 & 8191;
    $805 = $data$9 >>> 13;
    $806 = (($s) + ($805<<2)|0);
    $807 = HEAP32[$806>>2]|0;
    $808 = (($807) + ($804)|0);
    $809 = HEAP8[$808>>0]|0;
    $810 = $809&255;
    $811 = $810 << 1;
    $812 = $811 & 254;
    $813 = $810 >>> 7;
    $814 = $812 | $813;
    $815 = (($this) + ($814)|0);
    $816 = HEAP8[$815>>0]|0;
    $817 = $816&255;
    $818 = $817 | $813;
    HEAP32[$14>>2] = $s_time$11;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$9,$814);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $818;$pc$1 = $pc$10;$s_time$1 = $s_time$11;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 141: {
    label = 0;
    $835 = $data$10 & 8191;
    $836 = $data$10 >>> 13;
    $837 = (($s) + ($836<<2)|0);
    $838 = HEAP32[$837>>2]|0;
    $839 = (($838) + ($835)|0);
    $840 = HEAP8[$839>>0]|0;
    $841 = $840&255;
    $842 = $841 << 1;
    $843 = $flags$0 & 1;
    $844 = $842 | $843;
    $845 = (($this) + ($844)|0);
    $846 = HEAP8[$845>>0]|0;
    $847 = $846&255;
    HEAP32[$14>>2] = $s_time$12;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$10,$844);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $847;$pc$1 = $pc$11;$s_time$1 = $s_time$12;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 144: {
    label = 0;
    $862 = $data$11 & 8191;
    $863 = $data$11 >>> 13;
    $864 = (($s) + ($863<<2)|0);
    $865 = HEAP32[$864>>2]|0;
    $866 = (($865) + ($862)|0);
    $867 = HEAP8[$866>>0]|0;
    $868 = $867&255;
    $869 = $868 << 1;
    $870 = (($this) + ($869)|0);
    $871 = HEAP8[$870>>0]|0;
    $872 = $871&255;
    HEAP32[$14>>2] = $s_time$13;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$11,$869);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $872;$pc$1 = $pc$12;$s_time$1 = $s_time$13;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 147: {
    label = 0;
    $885 = $data$12 & 8191;
    $886 = $data$12 >>> 13;
    $887 = (($s) + ($886<<2)|0);
    $888 = HEAP32[$887>>2]|0;
    $889 = (($888) + ($885)|0);
    $890 = HEAP8[$889>>0]|0;
    $891 = $890&255;
    $892 = $891 << 1;
    $893 = $892 | 1;
    $894 = (($this) + ($893)|0);
    $895 = HEAP8[$894>>0]|0;
    $896 = $895&255;
    HEAP32[$14>>2] = $s_time$14;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$12,$893);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $896;$pc$1 = $pc$13;$s_time$1 = $s_time$14;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 150: {
    label = 0;
    $910 = $data$13 & 8191;
    $911 = $data$13 >>> 13;
    $912 = (($s) + ($911<<2)|0);
    $913 = HEAP32[$912>>2]|0;
    $914 = (($913) + ($910)|0);
    $915 = HEAP8[$914>>0]|0;
    $916 = $915&255;
    $917 = $916 & 1;
    $918 = $916 << 7;
    $919 = $918 & 128;
    $920 = $916 >>> 1;
    $921 = $919 | $920;
    $922 = (($this) + ($921)|0);
    $923 = HEAP8[$922>>0]|0;
    $924 = $923&255;
    $925 = $917 | $924;
    HEAP32[$14>>2] = $s_time$15;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$13,$921);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $925;$pc$1 = $pc$14;$s_time$1 = $s_time$15;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 153: {
    label = 0;
    $943 = $data$14 & 8191;
    $944 = $data$14 >>> 13;
    $945 = (($s) + ($944<<2)|0);
    $946 = HEAP32[$945>>2]|0;
    $947 = (($946) + ($943)|0);
    $948 = HEAP8[$947>>0]|0;
    $949 = $948&255;
    $950 = $949 & 1;
    $951 = $flags$0 << 7;
    $952 = $951 & 128;
    $953 = $949 >>> 1;
    $954 = $953 | $952;
    $955 = (($this) + ($954)|0);
    $956 = HEAP8[$955>>0]|0;
    $957 = $956&255;
    $958 = $957 | $950;
    HEAP32[$14>>2] = $s_time$16;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$14,$954);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $958;$pc$1 = $pc$15;$s_time$1 = $s_time$16;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 156: {
    label = 0;
    $976 = $data$15 & 8191;
    $977 = $data$15 >>> 13;
    $978 = (($s) + ($977<<2)|0);
    $979 = HEAP32[$978>>2]|0;
    $980 = (($979) + ($976)|0);
    $981 = HEAP8[$980>>0]|0;
    $982 = $981&255;
    $983 = $982 & 1;
    $984 = $982 & 128;
    $985 = $982 >>> 1;
    $986 = $984 | $985;
    $987 = (($this) + ($986)|0);
    $988 = HEAP8[$987>>0]|0;
    $989 = $988&255;
    $990 = $983 | $989;
    HEAP32[$14>>2] = $s_time$17;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$15,$986);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $990;$pc$1 = $pc$16;$s_time$1 = $s_time$17;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
   case 159: {
    label = 0;
    $1007 = $data$16 & 8191;
    $1008 = $data$16 >>> 13;
    $1009 = (($s) + ($1008<<2)|0);
    $1010 = HEAP32[$1009>>2]|0;
    $1011 = (($1010) + ($1007)|0);
    $1012 = HEAP8[$1011>>0]|0;
    $1013 = $1012&255;
    $1014 = $1013 & 1;
    $1015 = $1013 >>> 1;
    $1016 = (($this) + ($1015)|0);
    $1017 = HEAP8[$1016>>0]|0;
    $1018 = $1017&255;
    $1019 = $1014 | $1018;
    HEAP32[$14>>2] = $s_time$18;
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$16,$1015);
    $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1019;$pc$1 = $pc$17;$s_time$1 = $s_time$18;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
    continue L1;
    break;
   }
  }
 }
 if ((label|0) == 167) {
  ___assert_fail((50368|0),(40200|0),1058,(40512|0));
  // unreachable;
 }
 else if ((label|0) == 259) {
  ___assert_fail((50368|0),(40200|0),1685,(40512|0));
  // unreachable;
 }
 else if ((label|0) == 260) {
  $1666 = (($$lcssa149) + -11)|0;
  $flags$0116 = $flags$0$lcssa115;$ix$0126 = $ix$0$lcssa125;$iy$0121 = $iy$0$lcssa120;$pc$1136 = $pc$1$lcssa135;$s_time$22 = $1666;$sp$0131 = $sp$0$lcssa130;$warning$0$off0145 = $warning$0$off0$lcssa144;
  HEAP32[$14>>2] = $s_time$22;
  $1668 = $flags$0116&255;
  $1669 = (($0) + 7|0);
  HEAP8[$1669>>0] = $1668;
  $1670 = $ix$0126&65535;
  HEAP16[$22>>1] = $1670;
  $1671 = $iy$0121&65535;
  HEAP16[$25>>1] = $1671;
  $1672 = $sp$0131&65535;
  HEAP16[$19>>1] = $1672;
  $1673 = $pc$1136&65535;
  HEAP16[$16>>1] = $1673;
  $1674 = $0;
  $1675 = $1674;
  $1676 = HEAP32[$1675>>2]|0;
  $1677 = (($1674) + 4)|0;
  $1678 = $1677;
  $1679 = HEAP32[$1678>>2]|0;
  $1680 = $3;
  $1681 = $1680;
  HEAP8[$1681>>0]=$1676&255;HEAP8[$1681+1>>0]=($1676>>8)&255;HEAP8[$1681+2>>0]=($1676>>16)&255;HEAP8[$1681+3>>0]=$1676>>24;
  $1682 = (($1680) + 4)|0;
  $1683 = $1682;
  HEAP8[$1683>>0]=$1679&255;HEAP8[$1683+1>>0]=($1679>>8)&255;HEAP8[$1683+2>>0]=($1679>>16)&255;HEAP8[$1683+3>>0]=$1679>>24;
  dest=$1+0|0; src=$s+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$2>>2] = $1;
  STACKTOP = sp;return ($warning$0$off0145|0);
 }
 else if ((label|0) == 261) {
  $1667 = $$lcssa147 & 3;
  $flags$0116 = $flags$0$lcssa113;$ix$0126 = $ix$0$lcssa123;$iy$0121 = $iy$0$lcssa118;$pc$1136 = $pc$1$lcssa133;$s_time$22 = $1667;$sp$0131 = $sp$0$lcssa128;$warning$0$off0145 = $warning$0$off0$lcssa142;
  HEAP32[$14>>2] = $s_time$22;
  $1668 = $flags$0116&255;
  $1669 = (($0) + 7|0);
  HEAP8[$1669>>0] = $1668;
  $1670 = $ix$0126&65535;
  HEAP16[$22>>1] = $1670;
  $1671 = $iy$0121&65535;
  HEAP16[$25>>1] = $1671;
  $1672 = $sp$0131&65535;
  HEAP16[$19>>1] = $1672;
  $1673 = $pc$1136&65535;
  HEAP16[$16>>1] = $1673;
  $1674 = $0;
  $1675 = $1674;
  $1676 = HEAP32[$1675>>2]|0;
  $1677 = (($1674) + 4)|0;
  $1678 = $1677;
  $1679 = HEAP32[$1678>>2]|0;
  $1680 = $3;
  $1681 = $1680;
  HEAP8[$1681>>0]=$1676&255;HEAP8[$1681+1>>0]=($1676>>8)&255;HEAP8[$1681+2>>0]=($1676>>16)&255;HEAP8[$1681+3>>0]=$1676>>24;
  $1682 = (($1680) + 4)|0;
  $1683 = $1682;
  HEAP8[$1683>>0]=$1679&255;HEAP8[$1683+1>>0]=($1679>>8)&255;HEAP8[$1683+2>>0]=($1679>>16)&255;HEAP8[$1683+3>>0]=$1679>>24;
  dest=$1+0|0; src=$s+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$2>>2] = $1;
  STACKTOP = sp;return ($warning$0$off0145|0);
 }
 else if ((label|0) == 262) {
  HEAP32[$14>>2] = $s_time$22;
  $1668 = $flags$0116&255;
  $1669 = (($0) + 7|0);
  HEAP8[$1669>>0] = $1668;
  $1670 = $ix$0126&65535;
  HEAP16[$22>>1] = $1670;
  $1671 = $iy$0121&65535;
  HEAP16[$25>>1] = $1671;
  $1672 = $sp$0131&65535;
  HEAP16[$19>>1] = $1672;
  $1673 = $pc$1136&65535;
  HEAP16[$16>>1] = $1673;
  $1674 = $0;
  $1675 = $1674;
  $1676 = HEAP32[$1675>>2]|0;
  $1677 = (($1674) + 4)|0;
  $1678 = $1677;
  $1679 = HEAP32[$1678>>2]|0;
  $1680 = $3;
  $1681 = $1680;
  HEAP8[$1681>>0]=$1676&255;HEAP8[$1681+1>>0]=($1676>>8)&255;HEAP8[$1681+2>>0]=($1676>>16)&255;HEAP8[$1681+3>>0]=$1676>>24;
  $1682 = (($1680) + 4)|0;
  $1683 = $1682;
  HEAP8[$1683>>0]=$1679&255;HEAP8[$1683+1>>0]=($1679>>8)&255;HEAP8[$1683+2>>0]=($1679>>16)&255;HEAP8[$1683+3>>0]=$1679>>24;
  dest=$1+0|0; src=$s+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$2>>2] = $1;
  STACKTOP = sp;return ($warning$0$off0145|0);
 }
 return (0)|0;
}
function __ZN7Kss_Cpu8set_pageEiPvPKv($this,$i,$write,$read) {
 $this = $this|0;
 $i = $i|0;
 $write = $write|0;
 $read = $read|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 516|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1) + ($i<<2)|0) + 36|0);
 HEAP32[$2>>2] = $write;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + ($i<<2)|0);
 HEAP32[$4>>2] = $read;
 return;
}
function __ZN7Kss_Cpu12set_end_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 516|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) - ($t))|0;
 HEAP32[$2>>2] = $t;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + ($7))|0;
 HEAP32[$6>>2] = $8;
 return;
}
function __ZN7Kss_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 272|0);
 __ZN7Kss_CpuC2Ev($0);
 __ZN11Classic_EmuC2Ev($this);
 HEAP32[$this>>2] = ((40776 + 8|0));
 $1 = (($this) + 904|0);
 __ZN8Rom_DataILi8192EEC2Ev($1);
 $2 = (($this) + 66784|0);
 __ZN6Ay_ApuC2Ev($2);
 $3 = (($this) + 68080|0);
 __ZN7Scc_ApuC2Ev($3);
 $4 = (($this) + 68872|0);
 HEAP32[$4>>2] = 0;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,40936);
 __ZN9Music_Emu21set_silence_lookaheadEi($this,6);
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,40864);
 __ZN11Classic_Emu15set_voice_typesEPKi($this,40896);
 $5 = (($this) + 68876|0);
 _memset(($5|0),-1,256)|0;
 return;
}
function __ZN7Kss_EmuD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((40776 + 8|0));
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$2 & 127]($this);
 $3 = (($this) + 904|0);
 __ZN9Rom_Data_D2Ev($3);
 __ZN11Classic_EmuD2Ev($this);
 return;
}
function __ZN7Kss_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Kss_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN7Kss_Emu6unloadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 68872|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZN7Sms_ApuD2Ev($1);
  __ZdlPv($1);
 }
 HEAP32[$0>>2] = 0;
 __ZN9Music_Emu6unloadEv($this);
 return;
}
function __ZNK7Kss_Emu11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 928|0);
 __ZL15copy_kss_fieldsRKN7Kss_Emu8header_tEP12track_info_t($1,$out);
 return (0|0);
}
function __ZN7Kss_Emu11update_gainEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+__ZNK9Music_Emu4gainEv($this));
 $1 = $0 * 1.3999999999999999;
 $2 = (($this) + 960|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $g$0 = $1;
 } else {
  $5 = $1 * 1.5;
  $g$0 = $5;
 }
 $6 = (($this) + 66784|0);
 __ZN6Ay_Apu6volumeEd($6,$g$0);
 $7 = (($this) + 68080|0);
 __ZN7Scc_Apu6volumeEd($7,$g$0);
 $8 = (($this) + 68872|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 __ZN7Sms_Apu6volumeEd($9,$g$0);
 return;
}
function __ZN7Kss_Emu5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 928|0);
 dest=$0+0|0; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $1 = (($this) + 904|0);
 $2 = (__ZN8Rom_DataILi8192EE4loadER11Data_ReaderiPvi($1,$in,16,$0,0)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = (__ZL16check_kss_headerPKv($0)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = (($this) + 931|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(67);
 if ($8) {
  $9 = (($this) + 942|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   HEAP8[$9>>0] = 0;
   __ZN8Gme_File11set_warningEPKc($this,40960);
  }
  $12 = (($this) + 943|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 & 240;
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = $14 & 15;
   $18 = $17&255;
   HEAP8[$12>>0] = $18;
   __ZN8Gme_File11set_warningEPKc($this,40960);
  }
 } else {
  $19 = (($this) + 944|0);
  $20 = (__ZNK8Rom_DataILi8192EE5beginEv($1)|0);
  $21 = (($this) + 942|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = (__Z3minIiET_S0_S0_(16,$23)|0);
  _memcpy(($19|0),($20|0),($24|0))|0;
  $25 = HEAP8[$21>>0]|0;
  $26 = ($25&255)>(16);
  if ($26) {
   __ZN8Gme_File11set_warningEPKc($this,40960);
  }
 }
 $27 = (($this) + 943|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 & 9;
 $30 = ($29<<24>>24)==(0);
 if (!($30)) {
  __ZN8Gme_File11set_warningEPKc($this,40984);
 }
 $31 = (($this) + 964|0);
 $32 = HEAP8[$27>>0]|0;
 $33 = $32 & 4;
 $34 = ($33<<24>>24)==(0);
 $$ = $34 ? 49152 : 0;
 HEAP32[$31>>2] = $$;
 $35 = HEAP8[$27>>0]|0;
 $36 = $35 & 2;
 $37 = ($36<<24>>24)==(0);
 if (!($37)) {
  $38 = (($this) + 68872|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if ($40) {
   $41 = (__Znwj(1600)|0);
   __ZN7Sms_ApuC2Ev($41);
   HEAP32[$38>>2] = $41;
  }
 }
 __ZN9Music_Emu15set_voice_countEi($this,8);
 $42 = (__ZN11Classic_Emu12setup_bufferEl($this,3579545)|0);
 $$0 = $42;
 return ($$0|0);
}
function __ZN7Kss_Emu9update_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 66784|0);
 __ZN6Ay_Apu9treble_eqERK9blip_eq_t($0,$eq);
 $1 = (($this) + 68080|0);
 __ZN7Scc_Apu9treble_eqERK9blip_eq_t($1,$eq);
 $2 = (($this) + 68872|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 __ZN7Sms_Apu9treble_eqERK9blip_eq_t($3,$eq);
 return;
}
function __ZN7Kss_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$left,$right) {
 $this = $this|0;
 $i = $i|0;
 $center = $center|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($i) + -3)|0;
 $1 = ($0|0)>(-1);
 if ($1) {
  $2 = (($this) + 68080|0);
  __ZN7Scc_Apu10osc_outputEiP11Blip_Buffer($2,$0,$center);
 } else {
  $3 = (($this) + 66784|0);
  __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($3,$i,$center);
 }
 $4 = (($this) + 68872|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = ($i|0)<(4);
 $or$cond = $6 & $7;
 if (!($or$cond)) {
  return;
 }
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($5,$i,$center,$left,$right);
 return;
}
function __ZN7Kss_Emu10set_tempo_Ed($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 943|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 64;
 $3 = ($2<<24>>24)!=(0);
 $4 = $3 ? 71590.0 : 59659.0;
 $5 = $4 / $t;
 $6 = (~~(($5)));
 $7 = (($this) + 976|0);
 HEAP32[$7>>2] = $6;
 return;
}
function __ZN7Kss_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $sum = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (__ZN11Classic_Emu12start_track_Ei($this,$track)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (($this) + 988|0);
 _memset(($2|0),-55,16384)|0;
 $3 = (($this) + 17372|0);
 _memset(($3|0),0,49408)|0;
 $4 = (($this) + 989|0);
 dest=$4+0|0; src=41008+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $5 = (($this) + 1135|0);
 ;HEAP8[$5+0>>0]=HEAP8[41024+0>>0]|0;HEAP8[$5+1>>0]=HEAP8[41024+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[41024+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[41024+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[41024+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[41024+5>>0]|0;
 $6 = (($this) + 932|0);
 $7 = (__Z8get_le16PKv($6)|0);
 $8 = (($this) + 934|0);
 $9 = (__Z8get_le16PKv($8)|0);
 $10 = (($this) + 904|0);
 $11 = (__ZNK8Rom_DataILi8192EE9file_sizeEv($10)|0);
 $12 = (__Z3minIlET_S0_S0_($9,$11)|0);
 $13 = (65536 - ($7))|0;
 $14 = (__Z3minIlET_S0_S0_($12,$13)|0);
 $15 = ($14|0)==($9|0);
 if (!($15)) {
  __ZN8Gme_File11set_warningEPKc($this,41032);
 }
 $16 = ((($this) + ($7)|0) + 988|0);
 $17 = (__ZNK8Rom_DataILi8192EE5beginEv($10)|0);
 $18 = (($this) + 942|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($17) + ($20)|0);
 _memcpy(($16|0),($21|0),($14|0))|0;
 $22 = HEAP8[$18>>0]|0;
 $23 = $22&255;
 $sum = (($23) + ($14))|0;
 $24 = (0 - ($sum))|0;
 __ZN8Rom_DataILi8192EE8set_addrEl($10,$24);
 $25 = (__ZNK7Kss_Emu9bank_sizeEv($this)|0);
 $26 = (__ZNK8Rom_DataILi8192EE9file_sizeEv($10)|0);
 $27 = $14 ^ -1;
 $28 = (($25) + ($27))|0;
 $29 = (($28) + ($26))|0;
 $30 = (($29|0) / ($25|0))&-1;
 $31 = (($this) + 941|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 & 127;
 $35 = (($this) + 972|0);
 HEAP32[$35>>2] = $34;
 $36 = ($34|0)>($30|0);
 if ($36) {
  HEAP32[$35>>2] = $30;
  __ZN8Gme_File11set_warningEPKc($this,41056);
 }
 $37 = (($this) + 66523|0);
 HEAP8[$37>>0] = -1;
 $38 = (($this) + 272|0);
 $39 = (($this) + 69132|0);
 $40 = (($this) + 68876|0);
 __ZN7Kss_Cpu5resetEPvPKv($38,$39,$40);
 __ZN7Kss_Cpu7map_memEjjPvPKv($38,0,65536,$2,$2);
 $41 = (($this) + 66784|0);
 __ZN6Ay_Apu5resetEv($41);
 $42 = (($this) + 68080|0);
 __ZN7Scc_Apu5resetEv($42);
 $43 = (($this) + 68872|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if (!($45)) {
  __ZN7Sms_Apu5resetEji($44,0,0);
 }
 $46 = (($this) + 872|0);
 $47 = (($this) + 874|0);
 HEAP16[$47>>1] = -3201;
 $48 = (($this) + 63323|0);
 HEAP8[$48>>0] = -1;
 $49 = HEAP16[$47>>1]|0;
 $50 = (($49) + -1)<<16>>16;
 HEAP16[$47>>1] = $50;
 $51 = $50&65535;
 $52 = ((($this) + ($51)|0) + 988|0);
 HEAP8[$52>>0] = -1;
 $53 = $track&255;
 $54 = (($this) + 886|0);
 HEAP8[$54>>0] = $53;
 $55 = (($this) + 936|0);
 $56 = (__Z8get_le16PKv($55)|0);
 $57 = $56&65535;
 HEAP16[$46>>1] = $57;
 $58 = (($this) + 976|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($this) + 980|0);
 HEAP32[$60>>2] = $59;
 $61 = (($this) + 960|0);
 HEAP8[$61>>0] = 0;
 $62 = (($this) + 961|0);
 HEAP8[$62>>0] = 0;
 __ZN7Kss_Emu11update_gainEv($this);
 $63 = (($this) + 984|0);
 HEAP32[$63>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Kss_Emu8set_bankEii($this,$logical,$physical) {
 $this = $this|0;
 $logical = $logical|0;
 $physical = $physical|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $offset$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK7Kss_Emu9bank_sizeEv($this)|0);
 $1 = ($logical|0)!=(0);
 $2 = ($0|0)==(8192);
 $or$cond = $1 & $2;
 $$ = $or$cond ? 40960 : 32768;
 $3 = (($this) + 940|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($physical) - ($5))|0;
 $7 = (($this) + 972|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if (!($9)) {
  $10 = ((($this) + ($$)|0) + 988|0);
  $11 = (($this) + 272|0);
  __ZN7Kss_Cpu7map_memEjjPvPKv($11,$$,$0,$10,$10);
  return;
 }
 $12 = Math_imul($6, $0)|0;
 $13 = ($0|0)==(0);
 if ($13) {
  return;
 }
 $14 = (($this) + 272|0);
 $15 = (($this) + 69132|0);
 $16 = (($this) + 904|0);
 $offset$02 = 0;
 while(1) {
  $17 = (($offset$02) + ($$))|0;
  $18 = (($offset$02) + ($12))|0;
  $19 = (__ZN8Rom_DataILi8192EE7at_addrEi($16,$18)|0);
  __ZN7Kss_Cpu7map_memEjjPvPKv($14,$17,8192,$15,$19);
  $20 = (($offset$02) + 8192)|0;
  $21 = ($20>>>0)<($0>>>0);
  if ($21) {
   $offset$02 = $20;
  } else {
   break;
  }
 }
 return;
}
function __ZN7Kss_Emu9cpu_writeEji($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $data & 255;
 if ((($addr|0) == 36864)) {
  __ZN7Kss_Emu8set_bankEii($this,0,$0);
  return;
 } else if ((($addr|0) == 45056)) {
  __ZN7Kss_Emu8set_bankEii($this,1,$0);
  return;
 } else {
  $1 = $addr & 57343;
  $2 = $1 ^ 38912;
  $3 = ($2>>>0)<(144);
  if (!($3)) {
   return;
  }
  $4 = (($this) + 960|0);
  HEAP8[$4>>0] = 1;
  $5 = (($this) + 68080|0);
  $6 = (($this) + 272|0);
  $7 = (__ZNK7Kss_Cpu4timeEv($6)|0);
  __ZN7Scc_Apu5writeEiii($5,$7,$2,$0);
  return;
 }
}
function __Z13kss_cpu_writeP7Kss_Cpuji($cpu,$addr,$data) {
 $cpu = $cpu|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $data&255;
 $1 = (__ZN7Kss_Cpu5writeEj($cpu,$addr)|0);
 HEAP8[$1>>0] = $0;
 $2 = (($cpu) + 692|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & $addr;
 $5 = ($4|0)==(32768);
 if (!($5)) {
  return;
 }
 $6 = (($cpu) + -272|0);
 __ZN7Kss_Emu9cpu_writeEji($6,$addr,$data);
 return;
}
function __Z11kss_cpu_outP7Kss_Cpuiji($cpu,$time,$addr,$data) {
 $cpu = $cpu|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $data & 255;
 $1 = $addr & 255;
 switch ($1|0) {
 case 160:  {
  $2 = $data & 15;
  $3 = (($cpu) + 712|0);
  HEAP32[$3>>2] = $2;
  return;
  break;
 }
 case 254:  {
  $17 = (($cpu) + -272|0);
  __ZN7Kss_Emu8set_bankEii($17,0,$0);
  return;
  break;
 }
 case 161:  {
  $4 = (($cpu) + 66512|0);
  $5 = (($cpu) + 712|0);
  $6 = HEAP32[$5>>2]|0;
  __ZN6Ay_Apu5writeEiii($4,$time,$6,$0);
  return;
  break;
 }
 case 127: case 126:  {
  $14 = (($cpu) + 68600|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   return;
  }
  __ZN7Sms_Apu10write_dataEii($15,$time,$0);
  return;
  break;
 }
 case 6:  {
  $7 = (($cpu) + 68600|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   return;
  }
  $10 = (($cpu) + 671|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & 4;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   return;
  }
  __ZN7Sms_Apu14write_ggstereoEii($8,$time,$0);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __Z10kss_cpu_inP7Kss_Cpuij($0,$1,$addr) {
 $0 = $0|0;
 $1 = $1|0;
 $addr = $addr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN7Kss_Emu10run_clocksERii($this,$duration,$0) {
 $this = $this|0;
 $duration = $duration|0;
 $0 = $0|0;
 var $$lcssa1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 272|0);
 $2 = (__ZNK7Kss_Cpu4timeEv($1)|0);
 $3 = HEAP32[$duration>>2]|0;
 $4 = ($2|0)<($3|0);
 if ($4) {
  $5 = (($this) + 980|0);
  $6 = (($this) + 872|0);
  $7 = (($this) + 976|0);
  $8 = (($this) + 961|0);
  $9 = (($this) + 960|0);
  $10 = (($this) + 874|0);
  $11 = (($this) + 938|0);
  $13 = $3;
  while(1) {
   $12 = HEAP32[$5>>2]|0;
   $14 = (__Z3minIiET_S0_S0_($13,$12)|0);
   (__ZN7Kss_Cpu3runEi($1,$14)|0);
   $15 = HEAP16[$6>>1]|0;
   $16 = ($15<<16>>16)==(-1);
   if ($16) {
    __ZN7Kss_Cpu8set_timeEi($1,$14);
   }
   $17 = (__ZNK7Kss_Cpu4timeEv($1)|0);
   $18 = HEAP32[$5>>2]|0;
   $19 = ($17|0)<($18|0);
   if (!($19)) {
    $20 = HEAP32[$7>>2]|0;
    $21 = (($20) + ($18))|0;
    HEAP32[$5>>2] = $21;
    $22 = HEAP16[$6>>1]|0;
    $23 = ($22<<16>>16)==(-1);
    if ($23) {
     $27 = HEAP8[$8>>0]|0;
     $28 = ($27<<24>>24)==(0);
     if ($28) {
      HEAP8[$8>>0] = 1;
      $29 = HEAP8[$9>>0]|0;
      $30 = ($29<<24>>24)==(0);
      if (!($30)) {
       __ZN7Kss_Emu11update_gainEv($this);
      }
     }
     $31 = HEAP16[$10>>1]|0;
     $32 = (($31) + -1)<<16>>16;
     HEAP16[$10>>1] = $32;
     $33 = $32&65535;
     $34 = ((($this) + ($33)|0) + 988|0);
     HEAP8[$34>>0] = -1;
     $35 = HEAP16[$10>>1]|0;
     $36 = (($35) + -1)<<16>>16;
     HEAP16[$10>>1] = $36;
     $37 = $36&65535;
     $38 = ((($this) + ($37)|0) + 988|0);
     HEAP8[$38>>0] = -1;
     $39 = (__Z8get_le16PKv($11)|0);
     $40 = $39&65535;
     HEAP16[$6>>1] = $40;
    }
   }
   $24 = (__ZNK7Kss_Cpu4timeEv($1)|0);
   $25 = HEAP32[$duration>>2]|0;
   $26 = ($24|0)<($25|0);
   if ($26) {
    $13 = $25;
   } else {
    $$lcssa1 = $24;
    break;
   }
  }
 } else {
  $$lcssa1 = $2;
 }
 HEAP32[$duration>>2] = $$lcssa1;
 $41 = (($this) + 980|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) - ($$lcssa1))|0;
 HEAP32[$41>>2] = $43;
 $44 = HEAP32[$duration>>2]|0;
 $45 = (0 - ($44))|0;
 __ZN7Kss_Cpu11adjust_timeEi($1,$45);
 $46 = (($this) + 66784|0);
 $47 = HEAP32[$duration>>2]|0;
 __ZN6Ay_Apu9end_frameEi($46,$47);
 $48 = (($this) + 68080|0);
 $49 = HEAP32[$duration>>2]|0;
 __ZN7Scc_Apu9end_frameEi($48,$49);
 $50 = (($this) + 68872|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 if ($52) {
  return (0|0);
 }
 $53 = HEAP32[$duration>>2]|0;
 __ZN7Sms_Apu9end_frameEi($51,$53);
 return (0|0);
}
function __ZN7Scc_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 232|0);
 __ZN10Blip_SynthILi8ELi1EEC2Ev($0);
 __ZN7Scc_Apu6outputEP11Blip_Buffer($this,0);
 return;
}
function __ZL15copy_kss_fieldsRKN7Kss_Emu8header_tEP12track_info_t($h,$out) {
 $h = $h|0;
 $out = $out|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $system$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($h) + 15|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 2;
 $4 = ($3|0)==(0);
 if ($4) {
  $system$0 = 40928;
 } else {
  $5 = $2 & 4;
  $6 = ($5|0)!=(0);
  $$ = $6 ? 41384 : 41360;
  $system$0 = $$;
 }
 $7 = (($out) + 16|0);
 __ZN8Gme_File11copy_field_EPcPKc($7,$system$0);
 return;
}
function __ZN7Scc_Apu6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 232|0);
 $1 = $v * 2.6245117187499998E-6;
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($0,$1);
 return;
}
function __ZL16check_kss_headerPKv($header) {
 $header = $header|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($header,41232,4)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (_memcmp($header,41240,4)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $$0 = 38248;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Scc_Apu9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 232|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($0,$eq);
 return;
}
function __ZN7Scc_Apu10osc_outputEiP11Blip_Buffer($this,$index,$b) {
 $this = $this|0;
 $index = $index|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($index>>>0)<(5);
 if ($0) {
  $1 = ((($this) + ($index<<4)|0) + 12|0);
  HEAP32[$1>>2] = $b;
  return;
 } else {
  ___assert_fail((46216|0),(41152|0),66,(46296|0));
  // unreachable;
 }
}
function __Z3minIlET_S0_S0_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $x$y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x|0)<($y|0);
 $x$y = $0 ? $x : $y;
 return ($x$y|0);
}
function __ZNK7Kss_Emu9bank_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 941|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 >>> 7;
 $4 = 16384 >>> $3;
 return ($4|0);
}
function __ZN7Scc_Apu5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 80|0);
 HEAP32[$0>>2] = 0;
 ;HEAP32[$this+0>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;
 $1 = (($this) + 16|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $2 = (($this) + 32|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $3 = (($this) + 48|0);
 ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $4 = (($this) + 64|0);
 ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $5 = (($this) + 84|0);
 _memset(($5|0),0,144)|0;
 return;
}
function __ZNK7Kss_Cpu4timeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 516|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 return ($6|0);
}
function __ZN7Scc_Apu5writeEiii($this,$time,$addr,$data) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($addr>>>0)<(144);
 if ($0) {
  __ZN7Scc_Apu9run_untilEi($this,$time);
  $1 = $data&255;
  $2 = ((($this) + ($addr)|0) + 84|0);
  HEAP8[$2>>0] = $1;
  return;
 } else {
  ___assert_fail((41200|0),(41152|0),72,(47200|0));
  // unreachable;
 }
}
function __ZN7Kss_Cpu5writeEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr >>> 13;
 $1 = (($this) + 516|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2) + ($0<<2)|0) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $addr & 8191;
 $6 = (($4) + ($5)|0);
 return ($6|0);
}
function __ZN7Kss_Cpu8set_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 516|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($t) - ($3))|0;
 $5 = (($1) + 76|0);
 HEAP32[$5>>2] = $4;
 return;
}
function __ZN7Kss_Cpu11adjust_timeEi($this,$delta) {
 $this = $this|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 516|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($delta))|0;
 HEAP32[$2>>2] = $4;
 return;
}
function __ZN7Scc_Apu9end_frameEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($end_time|0);
 if ($2) {
  __ZN7Scc_Apu9run_untilEi($this,$end_time);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) - ($end_time))|0;
 HEAP32[$0>>2] = $4;
 $5 = ($4|0)>(-1);
 if ($5) {
  return;
 } else {
  ___assert_fail((42304|0),(41152|0),82,(46440|0));
  // unreachable;
 }
}
function __ZL11new_kss_emuv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(77328)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN7Kss_EmuC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZL12new_kss_filev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(272)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN8Kss_FileC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZN8Kss_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN8Kss_File5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 252|0);
 $4 = (FUNCTION_TABLE_iiii[$2 & 63]($in,$3,16)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $8 = (__ZL16check_kss_headerPKv($3)|0);
  $$0 = $8;
  return ($$0|0);
 } else {
  $6 = ($4|0)==(36224|0);
  $7 = $6 ? 38248 : $4;
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZNK8Kss_File11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 252|0);
 __ZL15copy_kss_fieldsRKN7Kss_Emu8header_tEP12track_info_t($1,$out);
 return (0|0);
}
function __ZN7Scc_Apu6outputEP11Blip_Buffer($this,$buf) {
 $this = $this|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = $buf;
 $1 = (($this) + 28|0);
 HEAP32[$1>>2] = $buf;
 $2 = (($this) + 44|0);
 HEAP32[$2>>2] = $buf;
 $3 = (($this) + 60|0);
 HEAP32[$3>>2] = $buf;
 $4 = (($this) + 76|0);
 HEAP32[$4>>2] = $buf;
 return;
}
function __ZN8Kss_FileC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Gme_Info_C2Ev($this);
 HEAP32[$this>>2] = ((41248 + 8|0));
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,40936);
 return;
}
function __ZN7Scc_Apu9run_untilEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$lcssa = 0, $$lcssa8 = 0, $$sum = 0, $$sum$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $exitcond = 0, $index$05 = 0, $last_wave$0 = 0, $last_wave$1 = 0, $phase$0 = 0, $phase$0$in = 0, $phase$0$in$in = 0, $phase$0$lcssa = 0, $time$0 = 0, $time$1 = 0, $volume$0 = 0, $wave$0$sum1 = 0, $wave$0$sum2 = 0, $wave$0$sum3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 227|0);
 $1 = (($this) + 80|0);
 $2 = (($this) + 232|0);
 $3 = (($this) + 232|0);
 $4 = (($this) + 80|0);
 $index$05 = 0;
 while(1) {
  $5 = ((($this) + ($index$05<<4)|0) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   __ZN11Blip_Buffer12set_modifiedEv($6);
   $8 = $index$05 << 1;
   $9 = (($8) + 128)|0;
   $10 = (($8) + 129)|0;
   $11 = ((($this) + ($10)|0) + 84|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = $13 << 8;
   $15 = $14 & 3840;
   $16 = ((($this) + ($9)|0) + 84|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = $15 | $18;
   $20 = (($19) + 1)|0;
   $21 = HEAP8[$0>>0]|0;
   $22 = $21&255;
   $23 = 1 << $index$05;
   $24 = $22 & $23;
   $25 = ($24|0)==(0);
   if ($25) {
    $volume$0 = 0;
   } else {
    $26 = (__ZNK11Blip_Buffer10clock_rateEv($6)|0);
    $27 = (($26) + 524288)|0;
    $28 = $27 >>> 18;
    $29 = ($20>>>0)>($28>>>0);
    if ($29) {
     $30 = (($index$05) + 138)|0;
     $31 = ((($this) + ($30)|0) + 84|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 << 3;
     $35 = $34 & 120;
     $volume$0 = $35;
    } else {
     $volume$0 = 0;
    }
   }
   $36 = $index$05 << 5;
   $37 = ($index$05|0)==(4);
   $$sum = (($36) + -32)|0;
   $$sum$ = $37 ? $$sum : $36;
   $38 = ((($this) + ($index$05<<4)|0) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $wave$0$sum3 = (($39) + ($$sum$))|0;
   $40 = ((($this) + ($wave$0$sum3)|0) + 84|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = Math_imul($42, $volume$0)|0;
   $44 = ((($this) + ($index$05<<4)|0) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($43|0)==($45|0);
   if (!($46)) {
    $47 = (($43) - ($45))|0;
    HEAP32[$44>>2] = $43;
    $48 = HEAP32[$4>>2]|0;
    __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($3,$48,$47,$6);
   }
   $49 = HEAP32[$1>>2]|0;
   $50 = (($this) + ($index$05<<4)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($49))|0;
   $53 = ($52|0)<($end_time|0);
   do {
    if ($53) {
     $54 = ($volume$0|0)==(0);
     if ($54) {
      $55 = (($19) + ($end_time))|0;
      $56 = (($55) - ($52))|0;
      $57 = (($56|0) / ($20|0))&-1;
      $58 = HEAP32[$38>>2]|0;
      $59 = (($58) + ($57))|0;
      $60 = $59 & 31;
      HEAP32[$38>>2] = $60;
      $61 = Math_imul($57, $20)|0;
      $62 = (($61) + ($52))|0;
      $time$1 = $62;
      break;
     }
     $63 = HEAP32[$38>>2]|0;
     $wave$0$sum2 = (($63) + ($$sum$))|0;
     $64 = ((($this) + ($wave$0$sum2)|0) + 84|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65 << 24 >> 24;
     $last_wave$0 = $66;$phase$0$in$in = $63;$time$0 = $52;
     while(1) {
      $phase$0$in = (($phase$0$in$in) + 1)|0;
      $phase$0 = $phase$0$in & 31;
      $wave$0$sum1 = $phase$0 | $$sum$;
      $67 = ((($this) + ($wave$0$sum1)|0) + 84|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 << 24 >> 24;
      $70 = ($69|0)==($last_wave$0|0);
      if ($70) {
       $last_wave$1 = $last_wave$0;
      } else {
       $71 = (($69) - ($last_wave$0))|0;
       $72 = Math_imul($71, $volume$0)|0;
       __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($2,$time$0,$72,$6);
       $last_wave$1 = $69;
      }
      $73 = (($time$0) + ($20))|0;
      $74 = ($73|0)<($end_time|0);
      if ($74) {
       $last_wave$0 = $last_wave$1;$phase$0$in$in = $phase$0;$time$0 = $73;
      } else {
       $$lcssa = $67;$$lcssa8 = $73;$phase$0$lcssa = $phase$0;
       break;
      }
     }
     HEAP32[$38>>2] = $phase$0$lcssa;
     $75 = HEAP8[$$lcssa>>0]|0;
     $76 = $75 << 24 >> 24;
     $77 = Math_imul($76, $volume$0)|0;
     HEAP32[$44>>2] = $77;
     $time$1 = $$lcssa8;
    } else {
     $time$1 = $52;
    }
   } while(0);
   $78 = (($time$1) - ($end_time))|0;
   HEAP32[$50>>2] = $78;
  }
  $79 = (($index$05) + 1)|0;
  $exitcond = ($79|0)==(5);
  if ($exitcond) {
   break;
  } else {
   $index$05 = $79;
  }
 }
 $80 = (($this) + 80|0);
 HEAP32[$80>>2] = $end_time;
 return;
}
function __ZN13blargg_vectorIcE6resizeEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (_realloc($0,$n)|0);
 $2 = ($1|0)==(0|0);
 $3 = ($n|0)!=(0);
 $or$cond = $2 & $3;
 if ($or$cond) {
  $$0 = 50160;
  return ($$0|0);
 }
 HEAP32[$this>>2] = $1;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = $n;
 $$0 = 0;
 return ($$0|0);
}
function __Z13from_hex_chari($h) {
 $h = $h|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($h) + -48)|0;
 $1 = ($0>>>0)>(9);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (($h) + 191)|0;
 $3 = $2 & 223;
 $4 = (($3) + 10)|0;
 $$0 = $4;
 return ($$0|0);
}
function __ZN12Multi_BufferC2Ei($this,$spf) {
 $this = $this|0;
 $spf = $spf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((41400 + 8|0));
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = $spf;
 $1 = (($this) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 4|0);
 HEAP32[$3>>2] = 1;
 return;
}
function __ZN12Multi_Buffer17set_channel_countEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN13Stereo_BufferC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12Multi_BufferC2Ei($this,2);
 HEAP32[$this>>2] = ((41456 + 8|0));
 $0 = (($this) + 20|0);
 $1 = (($this) + 152|0);
 $2 = $0;
 while(1) {
  __ZN11Blip_BufferC2Ev($2);
  $3 = (($2) + 44|0);
  $4 = ($3|0)==($1|0);
  if ($4) {
   break;
  } else {
   $2 = $3;
  }
 }
 $5 = (($this) + 152|0);
 HEAP32[$5>>2] = $0;
 $6 = (($this) + 64|0);
 $7 = (($this) + 156|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 108|0);
 $9 = (($this) + 160|0);
 HEAP32[$9>>2] = $8;
 return;
}
function __ZN13Stereo_BufferD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((41456 + 8|0));
 $0 = (($this) + 20|0);
 $1 = (($this) + 152|0);
 $3 = $1;
 while(1) {
  $2 = (($3) + -44|0);
  __ZN11Blip_BufferD2Ev($2);
  $4 = ($2|0)==($0|0);
  if ($4) {
   break;
  } else {
   $3 = $2;
  }
 }
 return;
}
function __ZN13Stereo_BufferD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13Stereo_BufferD2Ev($this);
 __ZN12Multi_BufferdlEPv($this);
 return;
}
function __ZN13Stereo_Buffer15set_sample_rateEli($this,$rate,$msec) {
 $this = $this|0;
 $rate = $rate|0;
 $msec = $msec|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $2 = ((($this) + (($i$01*44)|0)|0) + 20|0);
  $3 = (__ZN11Blip_Buffer15set_sample_rateEli($2,$rate,$msec)|0);
  $4 = ($3|0)==(0|0);
  $1 = (($i$01) + 1)|0;
  if (!($4)) {
   $$0 = $3;
   label = 5;
   break;
  }
  $0 = ($1|0)<(3);
  if ($0) {
   $i$01 = $1;
  } else {
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 $5 = (($this) + 20|0);
 $6 = (__ZNK11Blip_Buffer11sample_rateEv($5)|0);
 $7 = (__ZNK11Blip_Buffer6lengthEv($5)|0);
 (__ZN12Multi_Buffer15set_sample_rateEli($this,$6,$7)|0);
 $$0 = 0;
 return ($$0|0);
}
function __ZN13Stereo_Buffer10clock_rateEl($this,$rate) {
 $this = $this|0;
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 __ZN11Blip_Buffer10clock_rateEl($0,$rate);
 $1 = (($this) + 64|0);
 __ZN11Blip_Buffer10clock_rateEl($1,$rate);
 $2 = (($this) + 108|0);
 __ZN11Blip_Buffer10clock_rateEl($2,$rate);
 return;
}
function __ZN13Stereo_Buffer9bass_freqEi($this,$bass) {
 $this = $this|0;
 $bass = $bass|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 __ZN11Blip_Buffer9bass_freqEi($0,$bass);
 $1 = (($this) + 64|0);
 __ZN11Blip_Buffer9bass_freqEi($1,$bass);
 $2 = (($this) + 108|0);
 __ZN11Blip_Buffer9bass_freqEi($2,$bass);
 return;
}
function __ZN13Stereo_Buffer5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 164|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 168|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 20|0);
 __ZN11Blip_Buffer5clearEi($2,1);
 $3 = (($this) + 64|0);
 __ZN11Blip_Buffer5clearEi($3,1);
 $4 = (($this) + 108|0);
 __ZN11Blip_Buffer5clearEi($4,1);
 return;
}
function __ZN13Stereo_Buffer9end_frameEi($this,$clock_count) {
 $this = $this|0;
 $clock_count = $clock_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 164|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 20|0);
 $2 = (__ZN11Blip_Buffer14clear_modifiedEv($1)|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 | $2;
 HEAP32[$0>>2] = $4;
 __ZN11Blip_Buffer9end_frameEi($1,$clock_count);
 $5 = (($this) + 64|0);
 $6 = (__ZN11Blip_Buffer14clear_modifiedEv($5)|0);
 $7 = $6 << 1;
 $8 = HEAP32[$0>>2]|0;
 $9 = $8 | $7;
 HEAP32[$0>>2] = $9;
 __ZN11Blip_Buffer9end_frameEi($5,$clock_count);
 $10 = (($this) + 108|0);
 $11 = (__ZN11Blip_Buffer14clear_modifiedEv($10)|0);
 $12 = $11 << 2;
 $13 = HEAP32[$0>>2]|0;
 $14 = $13 | $12;
 HEAP32[$0>>2] = $14;
 __ZN11Blip_Buffer9end_frameEi($10,$clock_count);
 return;
}
function __ZN13Stereo_Buffer12read_samplesEPsl($this,$out,$count) {
 $this = $this|0;
 $out = $out|0;
 $count = $count|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $count & 1;
 $1 = ($0|0)==(0);
 if (!($1)) {
  ___assert_fail((41512|0),(41528|0),108,(41576|0));
  // unreachable;
 }
 $2 = $count >>> 1;
 $3 = (($this) + 20|0);
 $4 = (__ZNK11Blip_Buffer13samples_availEv($3)|0);
 $5 = ($2|0)>($4|0);
 $$ = $5 ? $4 : $2;
 $6 = ($$|0)==(0);
 if ($6) {
  $24 = $$ << 1;
  return ($24|0);
 }
 $7 = (($this) + 164|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($this) + 168|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 | $8;
 $12 = ($11|0)<(2);
 do {
  if ($12) {
   __ZN13Stereo_Buffer8mix_monoEPsi($this,$out,$$);
   __ZN11Blip_Buffer14remove_samplesEl($3,$$);
   $13 = (($this) + 64|0);
   __ZN11Blip_Buffer14remove_silenceEl($13,$$);
   $14 = (($this) + 108|0);
   __ZN11Blip_Buffer14remove_silenceEl($14,$$);
  } else {
   $15 = $11 & 1;
   $16 = ($15|0)==(0);
   if ($16) {
    __ZN13Stereo_Buffer20mix_stereo_no_centerEPsi($this,$out,$$);
    __ZN11Blip_Buffer14remove_silenceEl($3,$$);
    $19 = (($this) + 64|0);
    __ZN11Blip_Buffer14remove_samplesEl($19,$$);
    $20 = (($this) + 108|0);
    __ZN11Blip_Buffer14remove_samplesEl($20,$$);
    break;
   } else {
    __ZN13Stereo_Buffer10mix_stereoEPsi($this,$out,$$);
    __ZN11Blip_Buffer14remove_samplesEl($3,$$);
    $17 = (($this) + 64|0);
    __ZN11Blip_Buffer14remove_samplesEl($17,$$);
    $18 = (($this) + 108|0);
    __ZN11Blip_Buffer14remove_samplesEl($18,$$);
    break;
   }
  }
 } while(0);
 $21 = (__ZNK11Blip_Buffer13samples_availEv($3)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $24 = $$ << 1;
  return ($24|0);
 }
 $23 = HEAP32[$7>>2]|0;
 HEAP32[$9>>2] = $23;
 HEAP32[$7>>2] = 0;
 $24 = $$ << 1;
 return ($24|0);
}
function __ZN13Stereo_Buffer8mix_monoEPsi($this,$out_,$count) {
 $this = $this|0;
 $out_ = $out_|0;
 $count = $count|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $center_reader_accum$0$lcssa = 0, $center_reader_accum$04 = 0, $center_reader_buf$03 = 0, $out$01 = 0, $s$0 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($count|0)==(0);
 if ($4) {
  $center_reader_accum$0$lcssa = $3;
  HEAP32[$2>>2] = $center_reader_accum$0$lcssa;
  return;
 }
 $5 = (($this) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $$02 = $count;$center_reader_accum$04 = $3;$center_reader_buf$03 = $6;$out$01 = $out_;
 while(1) {
  $7 = $center_reader_accum$04 >> 14;
  $sext = $7 << 16;
  $8 = $sext >> 16;
  $9 = ($8|0)==($7|0);
  if ($9) {
   $s$0 = $7;
  } else {
   $10 = $center_reader_accum$04 >> 31;
   $11 = (32767 - ($10))|0;
   $s$0 = $11;
  }
  $12 = (($center_reader_buf$03) + 4|0);
  $13 = HEAP32[$center_reader_buf$03>>2]|0;
  $14 = $center_reader_accum$04 >> $1;
  $15 = (($center_reader_accum$04) - ($14))|0;
  $16 = (($15) + ($13))|0;
  $17 = $s$0&65535;
  HEAP16[$out$01>>1] = $17;
  $18 = (($out$01) + 2|0);
  HEAP16[$18>>1] = $17;
  $19 = (($out$01) + 4|0);
  $20 = (($$02) + -1)|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $center_reader_accum$0$lcssa = $16;
   break;
  } else {
   $$02 = $20;$center_reader_accum$04 = $16;$center_reader_buf$03 = $12;$out$01 = $19;
  }
 }
 HEAP32[$2>>2] = $center_reader_accum$0$lcssa;
 return;
}
function __ZN13Stereo_Buffer10mix_stereoEPsi($this,$out_,$count) {
 $this = $this|0;
 $out_ = $out_|0;
 $count = $count|0;
 var $$011 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $center_reader_accum$0$lcssa = 0, $center_reader_accum$010 = 0, $center_reader_buf$09 = 0, $l$0 = 0, $left_reader_accum$0$lcssa = 0, $left_reader_accum$06 = 0, $left_reader_buf$05 = 0, $out$04 = 0, $r$0 = 0, $right_reader_accum$0$lcssa = 0;
 var $right_reader_accum$08 = 0, $right_reader_buf$07 = 0, $sext = 0, $sext1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 124|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($count|0)==(0);
 if ($8) {
  $center_reader_accum$0$lcssa = $7;$left_reader_accum$0$lcssa = $3;$right_reader_accum$0$lcssa = $5;
  HEAP32[$6>>2] = $center_reader_accum$0$lcssa;
  HEAP32[$4>>2] = $right_reader_accum$0$lcssa;
  HEAP32[$2>>2] = $left_reader_accum$0$lcssa;
  return;
 }
 $9 = (($this) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($this) + 116|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($this) + 72|0);
 $14 = HEAP32[$13>>2]|0;
 $$011 = $count;$center_reader_accum$010 = $7;$center_reader_buf$09 = $10;$left_reader_accum$06 = $3;$left_reader_buf$05 = $14;$out$04 = $out_;$right_reader_accum$08 = $5;$right_reader_buf$07 = $12;
 while(1) {
  $15 = $center_reader_accum$010 >> 14;
  $16 = $left_reader_accum$06 >> 14;
  $17 = (($15) + ($16))|0;
  $18 = $right_reader_accum$08 >> 14;
  $19 = (($15) + ($18))|0;
  $sext = $17 << 16;
  $20 = $sext >> 16;
  $21 = ($20|0)==($17|0);
  if ($21) {
   $l$0 = $17;
  } else {
   $22 = $17 >> 24;
   $23 = (32767 - ($22))|0;
   $l$0 = $23;
  }
  $24 = (($center_reader_buf$09) + 4|0);
  $25 = HEAP32[$center_reader_buf$09>>2]|0;
  $26 = $center_reader_accum$010 >> $1;
  $27 = (($center_reader_accum$010) - ($26))|0;
  $28 = (($27) + ($25))|0;
  $sext1 = $19 << 16;
  $29 = $sext1 >> 16;
  $30 = ($29|0)==($19|0);
  if ($30) {
   $r$0 = $19;
  } else {
   $31 = $19 >> 24;
   $32 = (32767 - ($31))|0;
   $r$0 = $32;
  }
  $33 = (($left_reader_buf$05) + 4|0);
  $34 = HEAP32[$left_reader_buf$05>>2]|0;
  $35 = $left_reader_accum$06 >> $1;
  $36 = (($left_reader_accum$06) - ($35))|0;
  $37 = (($36) + ($34))|0;
  $38 = (($right_reader_buf$07) + 4|0);
  $39 = HEAP32[$right_reader_buf$07>>2]|0;
  $40 = $right_reader_accum$08 >> $1;
  $41 = (($right_reader_accum$08) - ($40))|0;
  $42 = (($41) + ($39))|0;
  $43 = $l$0&65535;
  HEAP16[$out$04>>1] = $43;
  $44 = $r$0&65535;
  $45 = (($out$04) + 2|0);
  HEAP16[$45>>1] = $44;
  $46 = (($out$04) + 4|0);
  $47 = (($$011) + -1)|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $center_reader_accum$0$lcssa = $28;$left_reader_accum$0$lcssa = $37;$right_reader_accum$0$lcssa = $42;
   break;
  } else {
   $$011 = $47;$center_reader_accum$010 = $28;$center_reader_buf$09 = $24;$left_reader_accum$06 = $37;$left_reader_buf$05 = $33;$out$04 = $46;$right_reader_accum$08 = $42;$right_reader_buf$07 = $38;
  }
 }
 HEAP32[$6>>2] = $center_reader_accum$0$lcssa;
 HEAP32[$4>>2] = $right_reader_accum$0$lcssa;
 HEAP32[$2>>2] = $left_reader_accum$0$lcssa;
 return;
}
function __ZN13Stereo_Buffer20mix_stereo_no_centerEPsi($this,$out_,$count) {
 $this = $this|0;
 $out_ = $out_|0;
 $count = $count|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, $left_reader_accum$0$lcssa = 0;
 var $left_reader_accum$06 = 0, $left_reader_buf$05 = 0, $out$03 = 0, $r$0 = 0, $right_reader_accum$0$lcssa = 0, $right_reader_accum$08 = 0, $right_reader_buf$07 = 0, $sext = 0, $sext1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 124|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($count|0)==(0);
 if ($6) {
  $left_reader_accum$0$lcssa = $3;$right_reader_accum$0$lcssa = $5;
  HEAP32[$4>>2] = $right_reader_accum$0$lcssa;
  HEAP32[$2>>2] = $left_reader_accum$0$lcssa;
  return;
 }
 $7 = (($this) + 116|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($this) + 72|0);
 $10 = HEAP32[$9>>2]|0;
 $$04 = $count;$left_reader_accum$06 = $3;$left_reader_buf$05 = $10;$out$03 = $out_;$right_reader_accum$08 = $5;$right_reader_buf$07 = $8;
 while(1) {
  $11 = $left_reader_accum$06 >> 14;
  $sext = $11 << 16;
  $12 = $sext >> 16;
  $13 = ($12|0)==($11|0);
  if ($13) {
   $l$0 = $11;
  } else {
   $14 = $left_reader_accum$06 >> 31;
   $15 = (32767 - ($14))|0;
   $l$0 = $15;
  }
  $16 = $right_reader_accum$08 >> 14;
  $sext1 = $16 << 16;
  $17 = $sext1 >> 16;
  $18 = ($17|0)==($16|0);
  if ($18) {
   $r$0 = $16;
  } else {
   $19 = $right_reader_accum$08 >> 31;
   $20 = (32767 - ($19))|0;
   $r$0 = $20;
  }
  $21 = (($left_reader_buf$05) + 4|0);
  $22 = HEAP32[$left_reader_buf$05>>2]|0;
  $23 = $left_reader_accum$06 >> $1;
  $24 = (($left_reader_accum$06) - ($23))|0;
  $25 = (($24) + ($22))|0;
  $26 = (($right_reader_buf$07) + 4|0);
  $27 = HEAP32[$right_reader_buf$07>>2]|0;
  $28 = $right_reader_accum$08 >> $1;
  $29 = (($right_reader_accum$08) - ($28))|0;
  $30 = (($29) + ($27))|0;
  $31 = $l$0&65535;
  HEAP16[$out$03>>1] = $31;
  $32 = $r$0&65535;
  $33 = (($out$03) + 2|0);
  HEAP16[$33>>1] = $32;
  $34 = (($out$03) + 4|0);
  $35 = (($$04) + -1)|0;
  $36 = ($35|0)==(0);
  if ($36) {
   $left_reader_accum$0$lcssa = $25;$right_reader_accum$0$lcssa = $30;
   break;
  } else {
   $$04 = $35;$left_reader_accum$06 = $25;$left_reader_buf$05 = $21;$out$03 = $34;$right_reader_accum$08 = $30;$right_reader_buf$07 = $26;
  }
 }
 HEAP32[$4>>2] = $right_reader_accum$0$lcssa;
 HEAP32[$2>>2] = $left_reader_accum$0$lcssa;
 return;
}
function __ZN12Multi_BufferD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12Multi_BufferD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12Multi_BufferdlEPv($this);
 return;
}
function __ZN13Stereo_Buffer7channelEii($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($this) + 152|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$2+8>>2]|0;
 return;
}
function __ZNK13Stereo_Buffer13samples_availEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = (__ZNK11Blip_Buffer13samples_availEv($0)|0);
 $2 = $1 << 1;
 return ($2|0);
}
function __ZN9Music_Emu16clear_track_varsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 196|0);
 HEAP32[$0>>2] = -1;
 $1 = (($this) + 200|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 204|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 208|0);
 HEAP8[$3>>0] = 1;
 $4 = (($this) + 209|0);
 HEAP8[$4>>0] = 1;
 $5 = (($this) + 212|0);
 HEAP32[$5>>2] = 1073741824;
 $6 = (($this) + 216|0);
 HEAP32[$6>>2] = 1;
 $7 = (($this) + 228|0);
 HEAP32[$7>>2] = 0;
 $8 = (($this) + 232|0);
 HEAP32[$8>>2] = 0;
 $9 = (($this) + 236|0);
 HEAP32[$9>>2] = 0;
 (__ZN8Gme_File7warningEv($this)|0);
 return;
}
function __ZN9Music_Emu6unloadEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 168|0);
 HEAP32[$0>>2] = 0;
 __ZN9Music_Emu16clear_track_varsEv($this);
 __ZN8Gme_File6unloadEv($this);
 return;
}
function __ZN9Music_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8Gme_FileC2Ev($this);
 HEAP32[$this>>2] = ((41648 + 8|0));
 $0 = (($this) + 240|0);
 __ZN13blargg_vectorIsEC2Ev($0);
 $1 = (($this) + 248|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 192|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 172|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 176|0);
 HEAPF64[$4>>3] = 1.0;
 $5 = (($this) + 184|0);
 HEAPF64[$5>>3] = 1.0;
 $6 = (($this) + 160|0);
 HEAP32[$6>>2] = 2;
 $7 = (($this) + 220|0);
 HEAP32[$7>>2] = 3;
 $8 = (($this) + 224|0);
 HEAP8[$8>>0] = 0;
 $9 = (($this) + 144|0);
 HEAPF64[$9>>3] = -1.0;
 $10 = (($this) + 152|0);
 HEAP32[$10>>2] = 60;
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,41728);
 __ZN9Music_Emu6unloadEv($this);
 return;
}
function __ZN9Music_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN9Music_Emu15set_sample_rateEl($this,$rate) {
 $this = $this|0;
 $rate = $rate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  ___assert_fail((41824|0),(41840|0),79,(41888|0));
  // unreachable;
 }
 $2 = HEAP32[$this>>2]|0;
 $3 = (($2) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$4 & 63]($this,$rate)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $$0 = $5;
  return ($$0|0);
 }
 $7 = (($this) + 240|0);
 $8 = (__ZN13blargg_vectorIsE6resizeEj($7,2048)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 $10 = (($this) + 192|0);
 HEAP32[$10>>2] = $rate;
 $$0 = 0;
 return ($$0|0);
}
function __ZN9Music_Emu8pre_loadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  ___assert_fail((41904|0),(41840|0),88,(41920|0));
  // unreachable;
 } else {
  __ZN8Gme_File8pre_loadEv($this);
  return;
 }
}
function __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 144|0);
 ;HEAP32[$0+0>>2]=HEAP32[$eq+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$eq+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$eq+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$eq+12>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$3 & 31]($this,$eq);
 return;
}
function __ZN9Music_Emu11mute_voicesEi($this,$mask) {
 $this = $this|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  ___assert_fail((41904|0),(41840|0),110,(41936|0));
  // unreachable;
 } else {
  $2 = (($this) + 172|0);
  HEAP32[$2>>2] = $mask;
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vii[$5 & 31]($this,$mask);
  return;
 }
}
function __ZN9Music_Emu9set_tempoEd($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  ___assert_fail((41904|0),(41840|0),117,(41952|0));
  // unreachable;
 } else {
  $2 = $t < 0.02;
  $$0 = $2 ? 0.02 : $t;
  $3 = $$0 > 4.0;
  $$1 = $3 ? 4.0 : $$0;
  $4 = (($this) + 176|0);
  HEAPF64[$4>>3] = $$1;
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vid[$7 & 15]($this,$$1);
  return;
 }
}
function __ZN9Music_Emu10post_load_Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 176|0);
 $1 = +HEAPF64[$0>>3];
 __ZN9Music_Emu9set_tempoEd($this,$1);
 __ZN9Music_Emu13remute_voicesEv($this);
 return;
}
function __ZN9Music_Emu11start_trackEi($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remapped = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $remapped = sp;
 __ZN9Music_Emu16clear_track_varsEv($this);
 HEAP32[$remapped>>2] = $track;
 $0 = (__ZNK8Gme_File12remap_track_EPi($this,$remapped)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($this) + 196|0);
 HEAP32[$2>>2] = $track;
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$remapped>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$5 & 63]($this,$6)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($this) + 208|0);
 HEAP8[$9>>0] = 0;
 $10 = (($this) + 209|0);
 HEAP8[$10>>0] = 0;
 $11 = (($this) + 224|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = (($this) + 160|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 << 1;
  $17 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
  $18 = Math_imul($16, $17)|0;
  $19 = (($this) + 204|0);
  $20 = (($this) + 236|0);
  while(1) {
   $21 = HEAP32[$19>>2]|0;
   $22 = ($21|0)<($18|0);
   if (!($22)) {
    break;
   }
   __ZN9Music_Emu8fill_bufEv($this);
   $23 = HEAP32[$20>>2]|0;
   $24 = HEAP8[$9>>0]|0;
   $25 = $24&255;
   $26 = $25 | $23;
   $27 = ($26|0)==(0);
   if (!($27)) {
    break;
   }
  }
  $28 = (($this) + 236|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$19>>2] = $29;
  $30 = (($this) + 200|0);
  HEAP32[$30>>2] = 0;
  $31 = (($this) + 228|0);
  HEAP32[$31>>2] = 0;
  $32 = (($this) + 232|0);
  HEAP32[$32>>2] = 0;
 }
 $33 = (__ZNK9Music_Emu11track_endedEv($this)|0);
 if (!($33)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (__ZN8Gme_File7warningEv($this)|0);
 $$0 = $34;
 STACKTOP = sp;return ($$0|0);
}
function __ZN9Music_Emu8fill_bufEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 236|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  ___assert_fail((42000|0),(41840|0),314,(42016|0));
  // unreachable;
 }
 $3 = (($this) + 208|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (($this) + 240|0);
  $7 = (__ZNK13blargg_vectorIsE5beginEv($6)|0);
  __ZN9Music_Emu8emu_playElPs($this,2048,$7);
  $8 = (__ZNK13blargg_vectorIsE5beginEv($6)|0);
  $9 = (__ZL13count_silencePsl($8,2048)|0);
  $10 = ($9|0)<(2048);
  if ($10) {
   $11 = (($this) + 204|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) - ($9))|0;
   $14 = (($this) + 228|0);
   HEAP32[$14>>2] = $13;
   HEAP32[$0>>2] = 2048;
   return;
  }
 }
 $15 = (($this) + 232|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 2048)|0;
 HEAP32[$15>>2] = $17;
 return;
}
function __ZN9Music_Emu18end_track_if_errorEPKc($this,$err) {
 $this = $this|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($err|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($this) + 208|0);
 HEAP8[$1>>0] = 1;
 __ZN8Gme_File11set_warningEPKc($this,$err);
 return;
}
function __ZNK9Music_Emu15msec_to_samplesEi($this,$msec) {
 $this = $this|0;
 $msec = $msec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($msec|0) / 1000)&-1;
 $1 = Math_imul($0, -1000)|0;
 $2 = (($1) + ($msec))|0;
 $3 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
 $4 = Math_imul($3, $0)|0;
 $5 = Math_imul($2, $3)|0;
 $6 = (($5|0) / 1000)&-1;
 $7 = (($4) + ($6))|0;
 $8 = $7 << 1;
 return ($8|0);
}
function __ZNK9Music_Emu4tellEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
 $1 = $0 << 1;
 $2 = (($this) + 200|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3|0) / ($1|0))&-1;
 $5 = ($4*1000)|0;
 $6 = Math_imul($4, $1)|0;
 $7 = (($3) - ($6))|0;
 $8 = ($7*1000)|0;
 $9 = (($8|0) / ($1|0))&-1;
 $10 = (($5) + ($9))|0;
 return ($10|0);
}
function __ZN9Music_Emu4seekEl($this,$msec) {
 $this = $this|0;
 $msec = $msec|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu15msec_to_samplesEi($this,$msec)|0);
 $1 = (($this) + 200|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)<($2|0);
 if ($3) {
  $4 = (($this) + 196|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (__ZN9Music_Emu11start_trackEi($this,$5)|0);
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = (($0) - ($8))|0;
 (__ZN9Music_Emu4skipEl($this,$9)|0);
 $$0 = 0;
 return ($$0|0);
}
function __ZN9Music_Emu4skipEl($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu13current_trackEv($this)|0);
 $1 = ($0|0)>(-1);
 if (!($1)) {
  ___assert_fail((41968|0),(41840|0),197,(41992|0));
  // unreachable;
 }
 $2 = (($this) + 200|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($count))|0;
 HEAP32[$2>>2] = $4;
 $5 = (($this) + 232|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__Z3minIlET_S0_S0_($count,$6)|0);
 $8 = (($6) - ($7))|0;
 HEAP32[$5>>2] = $8;
 $9 = (($count) - ($7))|0;
 $10 = (($this) + 236|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__Z3minIlET_S0_S0_($9,$11)|0);
 $13 = (($11) - ($12))|0;
 HEAP32[$10>>2] = $13;
 $14 = (($9) - ($12))|0;
 $15 = ($9|0)==($12|0);
 if (!($15)) {
  $16 = (($this) + 208|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $19 = (($this) + 204|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + ($14))|0;
   HEAP32[$19>>2] = $21;
   $22 = HEAP32[$this>>2]|0;
   $23 = (($22) + 64|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iii[$24 & 63]($this,$14)|0);
   __ZN9Music_Emu18end_track_if_errorEPKc($this,$25);
  }
 }
 $26 = HEAP32[$5>>2]|0;
 $27 = HEAP32[$10>>2]|0;
 $28 = $27 | $26;
 $29 = ($28|0)==(0);
 if (!($29)) {
  return (0|0);
 }
 $30 = (($this) + 208|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = (($this) + 209|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33 | $31;
 HEAP8[$32>>0] = $34;
 return (0|0);
}
function __ZN9Music_Emu5skip_El($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$0 = 0, $$02$lcssa = 0, $$025 = 0, $$1 = 0, $$1$ = 0, $$1$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)>(30000);
 do {
  if ($0) {
   $1 = (($this) + 172|0);
   $2 = HEAP32[$1>>2]|0;
   __ZN9Music_Emu11mute_voicesEi($this,-1);
   $3 = (($this) + 208|0);
   $4 = (($this) + 240|0);
   $$025 = $count;
   while(1) {
    $7 = HEAP8[$3>>0]|0;
    $8 = ($7<<24>>24)==(0);
    if (!($8)) {
     $$02$lcssa = $$025;
     label = 6;
     break;
    }
    $9 = HEAP32[$this>>2]|0;
    $10 = (($9) + 60|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (__ZNK13blargg_vectorIsE5beginEv($4)|0);
    $13 = (FUNCTION_TABLE_iiii[$11 & 63]($this,2048,$12)|0);
    $14 = ($13|0)==(0|0);
    $6 = (($$025) + -2048)|0;
    if (!($14)) {
     $$0 = $13;
     label = 11;
     break;
    }
    $5 = ($6|0)>(15000);
    if ($5) {
     $$025 = $6;
    } else {
     $$02$lcssa = $6;
     label = 6;
     break;
    }
   }
   if ((label|0) == 6) {
    __ZN9Music_Emu11mute_voicesEi($this,$2);
    $$1$ph = $$02$lcssa;
    break;
   }
   else if ((label|0) == 11) {
    return ($$0|0);
   }
  } else {
   $$1$ph = $count;
  }
 } while(0);
 $15 = (($this) + 208|0);
 $16 = (($this) + 240|0);
 $$1 = $$1$ph;
 while(1) {
  $17 = ($$1|0)==(0);
  if ($17) {
   $$0 = 0;
   label = 11;
   break;
  }
  $18 = HEAP8[$15>>0]|0;
  $19 = ($18<<24>>24)==(0);
  if (!($19)) {
   $$0 = 0;
   label = 11;
   break;
  }
  $20 = ($$1|0)<(2048);
  $$1$ = $20 ? $$1 : 2048;
  $21 = (($$1) - ($$1$))|0;
  $22 = HEAP32[$this>>2]|0;
  $23 = (($22) + 60|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (__ZNK13blargg_vectorIsE5beginEv($16)|0);
  $26 = (FUNCTION_TABLE_iiii[$24 & 63]($this,$$1$,$25)|0);
  $27 = ($26|0)==(0|0);
  if ($27) {
   $$1 = $21;
  } else {
   $$0 = $26;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN9Music_Emu11handle_fadeElPs($this,$out_count,$out) {
 $this = $this|0;
 $out_count = $out_count|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$02 = 0, $i$03 = 0, $io$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($out_count|0)>(0);
 if (!($0)) {
  return;
 }
 $1 = (($this) + 200|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($this) + 208|0);
 $8 = (($this) + 209|0);
 $i$03 = 0;
 while(1) {
  $9 = (($2) + ($i$03))|0;
  $10 = (($9) - ($4))|0;
  $11 = (($10|0) / 512)&-1;
  $12 = (__ZL7int_logiii($11,$6)|0);
  $13 = ($12|0)<(64);
  if ($13) {
   HEAP8[$7>>0] = 1;
   HEAP8[$8>>0] = 1;
  }
  $14 = (($out_count) - ($i$03))|0;
  $15 = (__Z3minIlET_S0_S0_(512,$14)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = (($out) + ($i$03<<1)|0);
   $count$02 = $15;$io$01 = $17;
   while(1) {
    $18 = HEAP16[$io$01>>1]|0;
    $19 = $18 << 16 >> 16;
    $20 = Math_imul($19, $12)|0;
    $21 = $20 >>> 14;
    $22 = $21&65535;
    HEAP16[$io$01>>1] = $22;
    $23 = (($io$01) + 2|0);
    $24 = (($count$02) + -1)|0;
    $25 = ($24|0)==(0);
    if ($25) {
     break;
    } else {
     $count$02 = $24;$io$01 = $23;
    }
   }
  }
  $26 = (($i$03) + 512)|0;
  $27 = ($26|0)<($out_count|0);
  if ($27) {
   $i$03 = $26;
  } else {
   break;
  }
 }
 return;
}
function __ZN9Music_Emu8emu_playElPs($this,$count,$out) {
 $this = $this|0;
 $count = $count|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 204|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($count))|0;
 HEAP32[$0>>2] = $2;
 $3 = (($this) + 196|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (($this) + 208|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $9 = HEAP32[$this>>2]|0;
   $10 = (($9) + 60|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (FUNCTION_TABLE_iiii[$11 & 63]($this,$count,$out)|0);
   __ZN9Music_Emu18end_track_if_errorEPKc($this,$12);
   return;
  }
 }
 $13 = $count << 1;
 _memset(($out|0),0,($13|0))|0;
 return;
}
function __ZN9Music_Emu4playElPs($this,$out_count,$out) {
 $this = $this|0;
 $out_count = $out_count|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $pos$0 = 0, $pos$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 209|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = $out_count << 1;
  _memset(($out|0),0,($3|0))|0;
  $90 = (($this) + 200|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($out_count))|0;
  HEAP32[$90>>2] = $92;
  return (0|0);
 }
 $4 = (__ZNK9Music_Emu13current_trackEv($this)|0);
 $5 = ($4|0)>(-1);
 if (!($5)) {
  ___assert_fail((41968|0),(41840|0),337,(46672|0));
  // unreachable;
 }
 $6 = $out_count & 1;
 $7 = ($6|0)==(0);
 if (!($7)) {
  ___assert_fail((42032|0),(41840|0),338,(46672|0));
  // unreachable;
 }
 $8 = (($this) + 204|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($this) + 200|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)<($11|0);
 if ($12) {
  ___assert_fail((42056|0),(41840|0),340,(46672|0));
  // unreachable;
 }
 $13 = (($this) + 232|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $pos$0 = 0;
 } else {
  $16 = (($this) + 220|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($11) + ($out_count))|0;
  $19 = (($this) + 228|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) - ($20))|0;
  $22 = Math_imul($21, $17)|0;
  $23 = (($22) + ($20))|0;
  $24 = (($this) + 236|0);
  $25 = HEAP32[$8>>2]|0;
  $26 = ($25|0)<($23|0);
  L16: do {
   if ($26) {
    $27 = (($this) + 208|0);
    while(1) {
     $28 = HEAP32[$24>>2]|0;
     $29 = HEAP8[$27>>0]|0;
     $30 = $29&255;
     $31 = $30 | $28;
     $32 = ($31|0)==(0);
     if (!($32)) {
      break L16;
     }
     __ZN9Music_Emu8fill_bufEv($this);
     $33 = HEAP32[$8>>2]|0;
     $34 = ($33|0)<($23|0);
     if (!($34)) {
      break;
     }
    }
   }
  } while(0);
  $35 = HEAP32[$13>>2]|0;
  $36 = (__Z3minIlET_S0_S0_($35,$out_count)|0);
  $37 = $36 << 1;
  _memset(($out|0),0,($37|0))|0;
  $38 = HEAP32[$13>>2]|0;
  $39 = (($38) - ($36))|0;
  HEAP32[$13>>2] = $39;
  $40 = HEAP32[$8>>2]|0;
  $41 = HEAP32[$19>>2]|0;
  $42 = (($40) - ($41))|0;
  $43 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
  $44 = ($43*12)|0;
  $45 = ($42|0)>($44|0);
  if ($45) {
   $46 = (($this) + 208|0);
   HEAP8[$46>>0] = 1;
   HEAP8[$0>>0] = 1;
   HEAP32[$13>>2] = 0;
   $47 = (($this) + 236|0);
   HEAP32[$47>>2] = 0;
   $pos$0 = $36;
  } else {
   $pos$0 = $36;
  }
 }
 $48 = (($this) + 236|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 if ($50) {
  $pos$1 = $pos$0;
 } else {
  $51 = (($out_count) - ($pos$0))|0;
  $52 = (__Z3minIlET_S0_S0_($49,$51)|0);
  $53 = (($out) + ($pos$0<<1)|0);
  $54 = (($this) + 240|0);
  $55 = (__ZNK13blargg_vectorIsE5beginEv($54)|0);
  $56 = (2048 - ($49))|0;
  $57 = (($55) + ($56<<1)|0);
  $58 = $52 << 1;
  _memcpy(($53|0),($57|0),($58|0))|0;
  $59 = HEAP32[$48>>2]|0;
  $60 = (($59) - ($52))|0;
  HEAP32[$48>>2] = $60;
  $61 = (($52) + ($pos$0))|0;
  $pos$1 = $61;
 }
 $62 = (($out_count) - ($pos$1))|0;
 $63 = ($pos$1|0)==($out_count|0);
 do {
  if (!($63)) {
   $64 = (($out) + ($pos$1<<1)|0);
   __ZN9Music_Emu8emu_playElPs($this,$62,$64);
   $65 = (($this) + 208|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = HEAP8[$0>>0]|0;
   $68 = $67 | $66;
   HEAP8[$0>>0] = $68;
   $69 = (($this) + 224|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    $72 = HEAP32[$10>>2]|0;
    $73 = (($this) + 212|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($72|0)>($74|0);
    if (!($75)) {
     break;
    }
   }
   $76 = (__ZL13count_silencePsl($64,$62)|0);
   $77 = ($76|0)<($62|0);
   if ($77) {
    $78 = HEAP32[$8>>2]|0;
    $79 = (($78) - ($76))|0;
    $80 = (($this) + 228|0);
    HEAP32[$80>>2] = $79;
   }
   $81 = HEAP32[$8>>2]|0;
   $82 = (($this) + 228|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) - ($83))|0;
   $85 = ($84|0)>(2047);
   if ($85) {
    __ZN9Music_Emu8fill_bufEv($this);
   }
  }
 } while(0);
 $86 = HEAP32[$10>>2]|0;
 $87 = (($this) + 212|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($86|0)>($88|0);
 if (!($89)) {
  $90 = (($this) + 200|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($out_count))|0;
  HEAP32[$90>>2] = $92;
  return (0|0);
 }
 __ZN9Music_Emu11handle_fadeElPs($this,$out_count,$out);
 $90 = (($this) + 200|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + ($out_count))|0;
 HEAP32[$90>>2] = $92;
 return (0|0);
}
function __ZN9Gme_Info_16set_sample_rate_El($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN9Gme_Info_8pre_loadEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8Gme_File8pre_loadEv($this);
 return;
}
function __ZN9Gme_Info_10post_load_Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN9Gme_Info_14set_equalizer_ERK15gme_equalizer_t($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN9Gme_Info_12mute_voices_Ei($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN9Gme_Info_10set_tempo_Ed($this,$0) {
 $this = $this|0;
 $0 = +$0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN9Gme_Info_12start_track_Ei($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (42080|0);
}
function __ZN9Gme_Info_5play_ElPs($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (42080|0);
}
function __ZN9Music_EmuD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((41648 + 8|0));
 $0 = (($this) + 248|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 127]($1);
 }
 $6 = (($this) + 240|0);
 __ZN13blargg_vectorIsED2Ev($6);
 __ZN8Gme_FileD2Ev($this);
 return;
}
function __ZN8Gme_File7warningEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 0;
 return ($1|0);
}
function __ZL13count_silencePsl($begin,$size) {
 $begin = $begin|0;
 $size = $size|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$begin>>1]|0;
 HEAP16[$begin>>1] = 16;
 $1 = (($begin) + ($size<<1)|0);
 $p$0 = $1;
 while(1) {
  $2 = (($p$0) + -2|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = $3 << 16 >> 16;
  $5 = (($4) + 8)|0;
  $6 = ($5>>>0)<(17);
  if ($6) {
   $p$0 = $2;
  } else {
   $$lcssa = $2;
   break;
  }
 }
 HEAP16[$begin>>1] = $0;
 $7 = $$lcssa;
 $8 = $begin;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 1;
 $11 = (($size) - ($10))|0;
 return ($11|0);
}
function __ZL7int_logiii($x,$step) {
 $x = $x|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($x|0) / ($step|0))&-1;
 $1 = Math_imul($0, $step)|0;
 $2 = (($x) - ($1))|0;
 $3 = $2 << 14;
 $4 = (($3|0) / ($step|0))&-1;
 $5 = (16384 - ($4))|0;
 $6 = $4 >> 1;
 $7 = (($5) + ($6))|0;
 $8 = $7 >> $0;
 return ($8|0);
}
function __ZN9Gme_Info_D0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN7Nes_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = (($this) + 1992|0);
 __ZN10Nes_SquareC2EPK10Blip_SynthILi12ELi1EE($0,$1);
 $2 = (($this) + 64|0);
 __ZN10Nes_SquareC2EPK10Blip_SynthILi12ELi1EE($2,$1);
 $3 = (($this) + 112|0);
 __ZN9Nes_NoiseC2Ev($3);
 $4 = (($this) + 712|0);
 __ZN12Nes_TriangleC2Ev($4);
 $5 = (($this) + 1304|0);
 __ZN7Nes_DmcC2Ev($5);
 __ZN10Blip_SynthILi12ELi1EEC2Ev($1);
 $6 = (($this) + 1936|0);
 HEAPF64[$6>>3] = 1.0;
 $7 = (($this) + 1372|0);
 HEAP32[$7>>2] = $this;
 $8 = (($this) + 1364|0);
 HEAP32[$8>>2] = 0;
 $9 = (($this) + 1984|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$this>>2] = $0;
 $10 = (($this) + 4|0);
 HEAP32[$10>>2] = $2;
 $11 = (($this) + 8|0);
 HEAP32[$11>>2] = $4;
 $12 = (($this) + 12|0);
 HEAP32[$12>>2] = $3;
 $13 = (($this) + 16|0);
 HEAP32[$13>>2] = $5;
 __ZN7Nes_Apu6outputEP11Blip_Buffer($this,0);
 __ZN7Nes_Apu6volumeEd($this,1.0);
 __ZN7Nes_Apu5resetEbi($this,0,0);
 return;
}
function __ZN7Nes_Apu6outputEP11Blip_Buffer($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,0,$buffer);
 __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,1,$buffer);
 __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,2,$buffer);
 __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,3,$buffer);
 __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,4,$buffer);
 return;
}
function __ZN7Nes_Apu6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1363|0);
 HEAP8[$0>>0] = 0;
 $1 = (($this) + 1992|0);
 $2 = $v * 0.0075199999999999998;
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($1,$2);
 $3 = (($this) + 744|0);
 $4 = $v * 0.0085100000000000002;
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($3,$4);
 $5 = (($this) + 152|0);
 $6 = $v * 0.0049399999999999999;
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($5,$6);
 $7 = (($this) + 1376|0);
 $8 = $v * 0.0033500000000000001;
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($7,$8);
 return;
}
function __ZN7Nes_Apu5resetEbi($this,$pal_mode,$initial_dmc_dac) {
 $this = $this|0;
 $pal_mode = $pal_mode|0;
 $initial_dmc_dac = $initial_dmc_dac|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr$01 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1304|0);
 $1 = (($this) + 1362|0);
 $2 = $pal_mode&1;
 HEAP8[$1>>0] = $2;
 $3 = (($this) + 1936|0);
 $4 = +HEAPF64[$3>>3];
 __ZN7Nes_Apu9set_tempoEd($this,$4);
 $5 = (($this) + 20|0);
 __ZN10Nes_Square5resetEv($5);
 $6 = (($this) + 64|0);
 __ZN10Nes_Square5resetEv($6);
 $7 = (($this) + 712|0);
 __ZN12Nes_Triangle5resetEv($7);
 $8 = (($this) + 112|0);
 __ZN9Nes_Noise5resetEv($8);
 __ZN7Nes_Dmc5resetEv($0);
 $9 = (($this) + 1944|0);
 HEAP32[$9>>2] = 0;
 $10 = (($this) + 1948|0);
 HEAP32[$10>>2] = 0;
 $11 = (($this) + 1972|0);
 HEAP32[$11>>2] = 0;
 $12 = (($this) + 1980|0);
 HEAP8[$12>>0] = 0;
 $13 = (($this) + 1952|0);
 HEAP32[$13>>2] = 1073741824;
 $14 = (($this) + 1964|0);
 HEAP32[$14>>2] = 1;
 __ZN7Nes_Apu14write_registerEiji($this,0,16407,0);
 __ZN7Nes_Apu14write_registerEiji($this,0,16405,0);
 $addr$01 = 16384;
 while(1) {
  $15 = $addr$01 & 3;
  $16 = ($15|0)!=(0);
  $17 = $16 ? 0 : 16;
  __ZN7Nes_Apu14write_registerEiji($this,0,$addr$01,$17);
  $18 = (($addr$01) + 1)|0;
  $exitcond = ($18|0)==(16404);
  if ($exitcond) {
   break;
  } else {
   $addr$01 = $18;
  }
 }
 $19 = (($this) + 1352|0);
 HEAP32[$19>>2] = $initial_dmc_dac;
 $20 = (($this) + 1363|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)==(0);
 if (!($22)) {
  return;
 }
 $23 = (($this) + 732|0);
 HEAP32[$23>>2] = 15;
 $$pr = HEAP8[$20>>0]|0;
 $24 = ($$pr<<24>>24)==(0);
 if (!($24)) {
  return;
 }
 $25 = (($this) + 1324|0);
 HEAP32[$25>>2] = $initial_dmc_dac;
 return;
}
function __ZN7Nes_Apu9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1992|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($0,$eq);
 $1 = (($this) + 744|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 $2 = (($this) + 152|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
 $3 = (($this) + 1376|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($3,$eq);
 return;
}
function __ZN7Nes_Apu9set_tempoEd($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1936|0);
 HEAPF64[$0>>3] = $t;
 $1 = (($this) + 1362|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = $3 ? 8314 : 7458;
 $5 = (($this) + 1960|0);
 $6 = $t != 1.0;
 if (!($6)) {
  $storemerge = $4;
  HEAP32[$5>>2] = $storemerge;
  return;
 }
 $7 = (+($4|0));
 $8 = $7 / $t;
 $9 = (~~(($8)));
 $10 = $9 & -2;
 $storemerge = $10;
 HEAP32[$5>>2] = $storemerge;
 return;
}
function __ZN7Nes_Apu14write_registerEiji($this,$time,$addr,$data) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $extract$t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($addr>>>0)>(32);
 if (!($0)) {
  ___assert_fail((42344|0),(42256|0),285,(42360|0));
  // unreachable;
 }
 $1 = ($data>>>0)<(256);
 if (!($1)) {
  ___assert_fail((49944|0),(42256|0),286,(42360|0));
  // unreachable;
 }
 $2 = (($addr) + -16384)|0;
 $3 = ($2>>>0)>(23);
 if ($3) {
  return;
 }
 __ZN7Nes_Apu10run_until_Ei($this,$time);
 $4 = ($addr>>>0)<(16404);
 if ($4) {
  $5 = $2 >>> 2;
  $6 = (($this) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $addr & 3;
  $9 = $data&255;
  $10 = (($7) + ($8)|0);
  HEAP8[$10>>0] = $9;
  $11 = ((($7) + ($8)|0) + 4|0);
  HEAP8[$11>>0] = 1;
  $12 = ($5|0)==(4);
  if ($12) {
   $13 = (($this) + 1304|0);
   __ZN7Nes_Dmc14write_registerEii($13,$8,$data);
   return;
  }
  $14 = ($8|0)==(3);
  if (!($14)) {
   return;
  }
  $15 = (($this) + 1972|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = 1 << $5;
  $18 = $16 & $17;
  $19 = ($18|0)==(0);
  if (!($19)) {
   $20 = $data >>> 3;
   $21 = $20 & 31;
   $22 = (42376 + ($21)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = (($7) + 12|0);
   HEAP32[$25>>2] = $24;
  }
  $26 = ($2>>>0)<(8);
  if (!($26)) {
   return;
  }
  $27 = (($7) + 32|0);
  HEAP32[$27>>2] = (7);
  return;
 }
 if ((($addr|0) == 16407)) {
  $41 = (($this) + 1976|0);
  HEAP32[$41>>2] = $data;
  $42 = $data & 64;
  $$lobit = $42 >>> 6;
  $43 = $$lobit ^ 1;
  $44 = (($this) + 1980|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $46 & $43;
  $48 = $47&255;
  HEAP8[$44>>0] = $48;
  $49 = (($this) + 1956|0);
  HEAP32[$49>>2] = 1073741824;
  $50 = (($this) + 1964|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 & 1;
  HEAP32[$50>>2] = $52;
  $53 = (($this) + 1968|0);
  HEAP32[$53>>2] = 0;
  $54 = $data & 128;
  $55 = ($54|0)==(0);
  if ($55) {
   $56 = ($42|0)==(0);
   HEAP32[$53>>2] = 1;
   $57 = (($this) + 1960|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[$50>>2]|0;
   $60 = (($59) + ($58))|0;
   HEAP32[$50>>2] = $60;
   if ($56) {
    $61 = HEAP32[$57>>2]|0;
    $62 = ($61*3)|0;
    $63 = (($time) + 1)|0;
    $64 = (($63) + ($60))|0;
    $65 = (($64) + ($62))|0;
    HEAP32[$49>>2] = $65;
   }
  }
  __ZN7Nes_Apu11irq_changedEv($this);
  return;
 } else if ((($addr|0) == 16405)) {
  $28 = $data & 16;
  $29 = ($28|0)==(0);
  if ($29) {
   $30 = (($this) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 12|0);
   HEAP32[$32>>2] = 0;
  }
  $33 = $data & 8;
  $34 = ($33|0)==(0);
  if ($34) {
   $66 = (($this) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + 12|0);
   HEAP32[$68>>2] = 0;
  }
  $69 = $data & 4;
  $70 = ($69|0)==(0);
  if ($70) {
   $71 = (($this) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + 12|0);
   HEAP32[$73>>2] = 0;
  }
  $74 = $data & 2;
  $75 = ($74|0)==(0);
  if ($75) {
   $76 = (($this) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + 12|0);
   HEAP32[$78>>2] = 0;
  }
  $79 = $data & 1;
  $80 = ($79|0)==(0);
  if ($80) {
   $81 = HEAP32[$this>>2]|0;
   $82 = (($81) + 12|0);
   HEAP32[$82>>2] = 0;
  }
  $40 = (($this) + 1304|0);
  $83 = (($this) + 1361|0);
  $39 = HEAP8[$83>>0]|0;
  HEAP8[$83>>0] = 0;
  $84 = (($this) + 1972|0);
  $37 = HEAP32[$84>>2]|0;
  HEAP32[$84>>2] = $data;
  $85 = $data & 16;
  $86 = ($85|0)==(0);
  if ($86) {
   $35 = (($this) + 1356|0);
   HEAP32[$35>>2] = 1073741824;
  } else {
   $36 = $37 & 16;
   $38 = ($36|0)==(0);
   $extract$t = ($39<<24>>24)==(0);
   if ($38) {
    __ZN7Nes_Dmc5startEv($40);
   }
   if ($extract$t) {
    return;
   }
  }
  __ZN7Nes_Apu11irq_changedEv($this);
  return;
 } else {
  return;
 }
}
function __ZN7Nes_Apu11irq_changedEv($this) {
 $this = $this|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $new_irq$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1356|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 1361|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($this) + 1980|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 | $3;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $8 = (($this) + 1956|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($1|0)>($9|0);
  $$ = $10 ? $9 : $1;
  $new_irq$0 = $$;
 } else {
  $new_irq$0 = 0;
 }
 $11 = (($this) + 1952|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($new_irq$0|0)==($12|0);
 if ($13) {
  return;
 }
 HEAP32[$11>>2] = $new_irq$0;
 $14 = (($this) + 1984|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  return;
 }
 $17 = (($this) + 1988|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vi[$15 & 127]($18);
 return;
}
function __ZN7Nes_Apu10run_until_Ei($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $end_time$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1944|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($end_time|0);
 if ($2) {
  ___assert_fail((46376|0),(42256|0),150,(46592|0));
  // unreachable;
 }
 $3 = ($1|0)==($end_time|0);
 if ($3) {
  return;
 }
 $4 = (($this) + 1948|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<($end_time|0);
 if ($6) {
  HEAP32[$4>>2] = $end_time;
  $7 = (($this) + 1304|0);
  __ZN7Nes_Dmc3runEii($7,$5,$end_time);
 }
 $8 = (($this) + 1964|0);
 $9 = (($this) + 20|0);
 $10 = (($this) + 64|0);
 $11 = (($this) + 712|0);
 $12 = (($this) + 112|0);
 $13 = (($this) + 1960|0);
 $14 = (($this) + 1968|0);
 $15 = (($this) + 1976|0);
 $16 = (($this) + 1956|0);
 $17 = (($this) + 1980|0);
 $18 = (($this) + 1362|0);
 $19 = (($this) + 1362|0);
 $20 = (($this) + 1976|0);
 $21 = (($this) + 1362|0);
 while(1) {
  $22 = HEAP32[$0>>2]|0;
  $23 = HEAP32[$8>>2]|0;
  $24 = (($23) + ($22))|0;
  $25 = ($24|0)>($end_time|0);
  $end_time$ = $25 ? $end_time : $24;
  $26 = (($23) + ($22))|0;
  $27 = (($26) - ($end_time$))|0;
  HEAP32[$8>>2] = $27;
  $28 = HEAP32[$0>>2]|0;
  __ZN10Nes_Square3runEii($9,$28,$end_time$);
  $29 = HEAP32[$0>>2]|0;
  __ZN10Nes_Square3runEii($10,$29,$end_time$);
  $30 = HEAP32[$0>>2]|0;
  __ZN12Nes_Triangle3runEii($11,$30,$end_time$);
  $31 = HEAP32[$0>>2]|0;
  __ZN9Nes_Noise3runEii($12,$31,$end_time$);
  HEAP32[$0>>2] = $end_time$;
  $32 = ($end_time$|0)==($end_time|0);
  if ($32) {
   break;
  }
  $33 = HEAP32[$13>>2]|0;
  HEAP32[$8>>2] = $33;
  $34 = HEAP32[$14>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$14>>2] = $35;
  if ((($34|0) == 1)) {
   $49 = HEAP8[$19>>0]|0;
   $50 = ($49<<24>>24)==(0);
   if ($50) {
    $51 = HEAP32[$8>>2]|0;
    $52 = (($51) + -2)|0;
    HEAP32[$8>>2] = $52;
   }
  } else if ((($34|0) == 3)) {
   HEAP32[$14>>2] = 0;
   $53 = HEAP32[$20>>2]|0;
   $54 = $53 & 128;
   $55 = ($54|0)==(0);
   if (!($55)) {
    $56 = HEAP32[$13>>2]|0;
    $57 = HEAP8[$21>>0]|0;
    $58 = ($57<<24>>24)!=(0);
    $$neg = $58 ? -2 : -6;
    $59 = HEAP32[$8>>2]|0;
    $60 = (($59) + ($56))|0;
    $61 = (($60) + ($$neg))|0;
    HEAP32[$8>>2] = $61;
   }
  } else if ((($34|0) == 0)) {
   $36 = HEAP32[$15>>2]|0;
   $37 = $36 & 192;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = HEAP32[$13>>2]|0;
    $40 = $39 << 2;
    $41 = (($end_time$) + 2)|0;
    $42 = (($41) + ($40))|0;
    HEAP32[$16>>2] = $42;
    HEAP8[$17>>0] = 1;
    label = 11;
   } else {
    label = 11;
   }
  } else if ((($34|0) == 2)) {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   __ZN7Nes_Osc12clock_lengthEi($9,32);
   __ZN7Nes_Osc12clock_lengthEi($10,32);
   __ZN7Nes_Osc12clock_lengthEi($12,32);
   __ZN7Nes_Osc12clock_lengthEi($11,128);
   __ZN10Nes_Square11clock_sweepEi($9,-1);
   __ZN10Nes_Square11clock_sweepEi($10,0);
   $43 = HEAP8[$18>>0]|0;
   $44 = ($43<<24>>24)==(0);
   if (!($44)) {
    $45 = HEAP32[$14>>2]|0;
    $46 = ($45|0)==(3);
    if ($46) {
     $47 = HEAP32[$8>>2]|0;
     $48 = (($47) + -2)|0;
     HEAP32[$8>>2] = $48;
    }
   }
  }
  __ZN12Nes_Triangle20clock_linear_counterEv($11);
  __ZN12Nes_Envelope14clock_envelopeEv($9);
  __ZN12Nes_Envelope14clock_envelopeEv($10);
  __ZN12Nes_Envelope14clock_envelopeEv($12);
 }
 return;
}
function __ZN7Nes_Apu9end_frameEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1944|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($end_time|0);
 if ($2) {
  __ZN7Nes_Apu10run_until_Ei($this,$end_time);
 }
 $3 = (($this) + 1363|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = (($this) + 1304|0);
  $7 = (($this) + 20|0);
  $8 = HEAP32[$0>>2]|0;
  __Z12zero_apu_oscI10Nes_SquareEvPT_i($7,$8);
  $9 = (($this) + 64|0);
  $10 = HEAP32[$0>>2]|0;
  __Z12zero_apu_oscI10Nes_SquareEvPT_i($9,$10);
  $11 = (($this) + 712|0);
  $12 = HEAP32[$0>>2]|0;
  __Z12zero_apu_oscI12Nes_TriangleEvPT_i($11,$12);
  $13 = (($this) + 112|0);
  $14 = HEAP32[$0>>2]|0;
  __Z12zero_apu_oscI9Nes_NoiseEvPT_i($13,$14);
  $15 = HEAP32[$0>>2]|0;
  __Z12zero_apu_oscI7Nes_DmcEvPT_i($6,$15);
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) - ($end_time))|0;
 HEAP32[$0>>2] = $17;
 $18 = ($17|0)>(-1);
 if (!($18)) {
  ___assert_fail((42304|0),(42256|0),254,(46440|0));
  // unreachable;
 }
 $19 = (($this) + 1948|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) - ($end_time))|0;
 HEAP32[$19>>2] = $21;
 $22 = ($21|0)>(-1);
 if (!($22)) {
  ___assert_fail((42320|0),(42256|0),257,(46440|0));
  // unreachable;
 }
 $23 = (($this) + 1956|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(1073741824);
 if (!($25)) {
  $26 = (($24) - ($end_time))|0;
  HEAP32[$23>>2] = $26;
 }
 $27 = (($this) + 1356|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(1073741824);
 if (!($29)) {
  $30 = (($28) - ($end_time))|0;
  HEAP32[$27>>2] = $30;
 }
 $31 = (($this) + 1952|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(1073741824);
 if ($33) {
  return;
 } else {
  $34 = (($32) - ($end_time))|0;
  $35 = ($34|0)<(0);
  $$ = $35 ? 0 : $34;
  HEAP32[$31>>2] = $$;
  return;
 }
}
function __ZN7Nes_Apu11read_statusEi($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, $result$1$1 = 0, $result$1$1$ = 0, $result$1$3 = 0, $result$1$3$ = 0, $result$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($time) + -1)|0;
 __ZN7Nes_Apu10run_until_Ei($this,$0);
 $1 = (($this) + 1361|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 7;
 $5 = (($this) + 1980|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 6;
 $9 = $8 | $4;
 $10 = HEAP32[$this>>2]|0;
 $11 = (($10) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $not$ = ($12|0)!=(0);
 $13 = $not$&1;
 $$ = $9 | $13;
 $14 = (($this) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 $19 = $$ | 2;
 $result$1$1 = $18 ? $$ : $19;
 $20 = (($this) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 $25 = $result$1$1 | 4;
 $result$1$1$ = $24 ? $result$1$1 : $25;
 $26 = (($this) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 $31 = $result$1$1$ | 8;
 $result$1$3 = $30 ? $result$1$1$ : $31;
 $32 = (($this) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 $37 = $result$1$3 | 16;
 $result$1$3$ = $36 ? $result$1$3 : $37;
 __ZN7Nes_Apu10run_until_Ei($this,$time);
 $38 = HEAP8[$5>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $result$2 = $result$1$3$;
  return ($result$2|0);
 }
 $40 = $result$1$3$ | 64;
 HEAP8[$5>>0] = 0;
 __ZN7Nes_Apu11irq_changedEv($this);
 $result$2 = $40;
 return ($result$2|0);
}
function __ZN10Nes_SquareC2EPK10Blip_SynthILi12ELi1EE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 HEAP32[$0>>2] = $s;
 return;
}
function __ZN9Nes_NoiseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 __ZN10Blip_SynthILi8ELi1EEC2Ev($0);
 return;
}
function __ZN12Nes_TriangleC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 __ZN10Blip_SynthILi8ELi1EEC2Ev($0);
 return;
}
function __ZN7Nes_DmcC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 72|0);
 __ZN10Blip_SynthILi8ELi1EEC2Ev($0);
 return;
}
function __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,$osc,$buf) {
 $this = $this|0;
 $osc = $osc|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($osc>>>0)<(5);
 if ($0) {
  $1 = (($this) + ($osc<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + 8|0);
  HEAP32[$3>>2] = $buf;
  return;
 } else {
  ___assert_fail((42408|0),(42440|0),143,(46296|0));
  // unreachable;
 }
}
function __ZN10Nes_Square5resetEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 36|0);
 HEAP32[$0>>2] = 0;
 __ZN12Nes_Envelope5resetEv($this);
 return;
}
function __ZN12Nes_Triangle5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 24|0);
 HEAP32[$1>>2] = 1;
 __ZN7Nes_Osc5resetEv($this);
 return;
}
function __ZN9Nes_Noise5resetEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 HEAP32[$0>>2] = 16384;
 __ZN12Nes_Envelope5resetEv($this);
 return;
}
function __Z12zero_apu_oscI10Nes_SquareEvPT_i($osc,$time) {
 $osc = $osc|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($osc) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($osc) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = ($1|0)!=(0|0);
 $5 = ($3|0)!=(0);
 $or$cond = $4 & $5;
 if (!($or$cond)) {
  return;
 }
 $6 = (($osc) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0 - ($3))|0;
 __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($7,$time,$8,$1);
 return;
}
function __Z12zero_apu_oscI12Nes_TriangleEvPT_i($osc,$time) {
 $osc = $osc|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($osc) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($osc) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = ($1|0)!=(0|0);
 $5 = ($3|0)!=(0);
 $or$cond = $4 & $5;
 if (!($or$cond)) {
  return;
 }
 $6 = (($osc) + 32|0);
 $7 = (0 - ($3))|0;
 __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($6,$time,$7,$1);
 return;
}
function __Z12zero_apu_oscI9Nes_NoiseEvPT_i($osc,$time) {
 $osc = $osc|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($osc) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($osc) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = ($1|0)!=(0|0);
 $5 = ($3|0)!=(0);
 $or$cond = $4 & $5;
 if (!($or$cond)) {
  return;
 }
 $6 = (($osc) + 40|0);
 $7 = (0 - ($3))|0;
 __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($6,$time,$7,$1);
 return;
}
function __Z12zero_apu_oscI7Nes_DmcEvPT_i($osc,$time) {
 $osc = $osc|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($osc) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($osc) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = ($1|0)!=(0|0);
 $5 = ($3|0)!=(0);
 $or$cond = $4 & $5;
 if (!($or$cond)) {
  return;
 }
 $6 = (($osc) + 72|0);
 $7 = (0 - ($3))|0;
 __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($6,$time,$7,$1);
 return;
}
function __ZN12Nes_Envelope5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 28|0);
 HEAP32[$1>>2] = 0;
 __ZN7Nes_Osc5resetEv($this);
 return;
}
function __ZN7Nes_Osc5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 20|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZN7Nsf_Emu8cpu_readEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr & 2047;
 $1 = (($this) + 272|0);
 $2 = ((($this) + ($0)|0) + 272|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $addr & 57344;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = $4;
  return ($$0|0);
 }
 $7 = (__ZN7Nes_Cpu8get_codeEj($1,$addr)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($addr>>>0)>(32767);
 if ($10) {
  $$0 = $9;
  return ($$0|0);
 }
 $11 = $addr & 8191;
 $12 = ((($this) + ($11)|0) + 5512|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($addr>>>0)>(24575);
 if ($15) {
  $$0 = $14;
  return ($$0|0);
 }
 if ((($addr|0) == 18432)) {
  label = 6;
 } else if ((($addr|0) == 16405)) {
  $16 = (($this) + 2576|0);
  $17 = (__ZNK7Nes_Cpu4timeEv($1)|0);
  $18 = (__ZN7Nes_Apu11read_statusEi($16,$17)|0);
  $$0 = $18;
  return ($$0|0);
 }
 if ((label|0) == 6) {
  $19 = (($this) + 2564|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   $22 = (__ZN13Nes_Namco_Apu9read_dataEv($20)|0);
   $$0 = $22;
   return ($$0|0);
  }
 }
 $23 = $addr >>> 8;
 $$0 = $23;
 return ($$0|0);
}
function __ZN7Nsf_Emu9cpu_writeEji($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr ^ 24576;
 $1 = ($0>>>0)<(8192);
 if ($1) {
  $2 = $data&255;
  $3 = ((($this) + ($0)|0) + 5512|0);
  HEAP8[$3>>0] = $2;
  return;
 }
 $4 = $addr & 57344;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $addr & 2047;
  $7 = $data&255;
  $8 = ((($this) + ($6)|0) + 272|0);
  HEAP8[$8>>0] = $7;
  return;
 }
 $9 = (($addr) + -16384)|0;
 $10 = ($9>>>0)<(24);
 if ($10) {
  $11 = (($this) + 2576|0);
  $12 = (($this) + 272|0);
  $13 = (__ZNK7Nes_Cpu4timeEv($12)|0);
  __ZN7Nes_Apu14write_registerEiji($11,$13,$addr,$data);
  return;
 }
 $14 = $addr & -8;
 $15 = ($14|0)==(24568);
 if (!($15)) {
  __ZN7Nsf_Emu14cpu_write_miscEji($this,$addr,$data);
  return;
 }
 $16 = (($this) + 2540|0);
 $17 = $data << 12;
 $18 = (__ZNK8Rom_DataILi4096EE9mask_addrEi($16,$17)|0);
 $19 = (__ZNK8Rom_DataILi4096EE4sizeEv($16)|0);
 $20 = ($18|0)<($19|0);
 if (!($20)) {
  __ZN8Gme_File11set_warningEPKc($this,42480);
 }
 $21 = (($this) + 272|0);
 $22 = $addr << 12;
 $23 = (($22) + -100597760)|0;
 $24 = (__ZN8Rom_DataILi4096EE7at_addrEi($16,$18)|0);
 __ZN7Nes_Cpu8map_codeEjjPKvb($21,$23,4096,$24,0);
 return;
}
function __ZN7Nes_Cpu8map_codeEjjPKvb($this,$start,$size,$data,$mirror) {
 $this = $this|0;
 $start = $start|0;
 $size = $size|0;
 $data = $data|0;
 $mirror = $mirror|0;
 var $$0$ = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$03 = 0, $page$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $start & 2047;
 $1 = ($0|0)==(0);
 if (!($1)) {
  ___assert_fail((42496|0),(42520|0),92,(42568|0));
  // unreachable;
 }
 $2 = $size & 2047;
 $3 = ($2|0)==(0);
 if (!($3)) {
  ___assert_fail((42584|0),(42520|0),93,(42568|0));
  // unreachable;
 }
 $4 = (($size) + ($start))|0;
 $5 = ($4>>>0)<(65537);
 if (!($5)) {
  ___assert_fail((42608|0),(42520|0),94,(42568|0));
  // unreachable;
 }
 $6 = $size >>> 11;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 }
 $8 = $start >>> 11;
 $$01 = $data;$n$03 = $6;$page$02 = $8;
 while(1) {
  $9 = (($page$02) + 1)|0;
  __ZN7Nes_Cpu13set_code_pageEiPKv($this,$page$02,$$01);
  $10 = (($$01) + 2048|0);
  $$0$ = $mirror ? $$01 : $10;
  $11 = (($n$03) + -1)|0;
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  } else {
   $$01 = $$0$;$n$03 = $11;$page$02 = $9;
  }
 }
 return;
}
function __ZN7Nes_Cpu5resetEPKv($this,$unmapped_page) {
 $this = $this|0;
 $unmapped_page = $unmapped_page|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2060|0);
 $1 = (($this) + 2056|0);
 HEAP32[$1>>2] = $0;
 $2 = (($this) + 2053|0);
 HEAP8[$2>>0] = 4;
 $3 = (($this) + 2054|0);
 HEAP8[$3>>0] = -1;
 $4 = (($this) + 2048|0);
 $5 = (($this) + 2196|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 2192|0);
 HEAP32[$6>>2] = 0;
 $7 = (($this) + 2200|0);
 ;HEAP16[$4+0>>1]=0|0;HEAP16[$4+2>>1]=0|0;HEAP8[$4+4>>0]=0|0;
 HEAP32[$7>>2] = 1073741824;
 $8 = (($this) + 2204|0);
 HEAP32[$8>>2] = 1073741824;
 $9 = (($this) + 2208|0);
 HEAP32[$9>>2] = 0;
 __ZN7Nes_Cpu13set_code_pageEiPKv($this,32,$unmapped_page);
 __ZN7Nes_Cpu8map_codeEjjPKvb($this,8192,57344,$unmapped_page,1);
 __ZN7Nes_Cpu8map_codeEjjPKvb($this,0,8192,$this,1);
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN7Nes_Cpu3runEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$ = 0, $$17 = 0, $$18 = 0, $$21 = 0, $$22 = 0, $$mask = 0, $$sum = 0, $$sum11 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$0$lcssa = 0, $a$0$phi = 0, $addr10$0 = 0, $addr13$0 = 0, $c$0 = 0, $c$0$lcssa = 0, $c$0$phi = 0;
 var $c$1 = 0, $c$10 = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$7 = 0, $c$8 = 0, $c$9 = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$17 = 0;
 var $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$20 = 0, $data$21 = 0, $data$22 = 0, $data$23 = 0, $data$24 = 0, $data$25 = 0, $data$26 = 0, $data$27 = 0, $data$28 = 0, $data$29 = 0, $data$3 = 0, $data$30 = 0, $data$31 = 0, $data$32 = 0, $data$33 = 0, $data$34 = 0, $data$35 = 0;
 var $data$36 = 0, $data$37 = 0, $data$38 = 0, $data$39 = 0, $data$4 = 0, $data$40 = 0, $data$41 = 0, $data$42 = 0, $data$43 = 0, $data$44 = 0, $data$45 = 0, $data$46 = 0, $data$47 = 0, $data$48 = 0, $data$49 = 0, $data$5 = 0, $data$51 = 0, $data$52 = 0, $data$53 = 0, $data$56 = 0;
 var $data$5723 = 0, $data$6 = 0, $data$7 = 0, $data$8 = 0, $data$9 = 0, $nz$0 = 0, $nz$0$lcssa = 0, $nz$0$phi = 0, $nz$1 = 0, $nz$2 = 0, $nz$3 = 0, $nz$4 = 0, $nz$5 = 0, $nz$6 = 0, $or$cond = 0, $or$cond20 = 0, $pc$0 = 0, $pc$1 = 0, $pc$1$phi = 0, $pc$10 = 0;
 var $pc$11 = 0, $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$19 = 0, $pc$2 = 0, $pc$21 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $s = 0, $s_time$0 = 0, $s_time$0$phi = 0;
 var $s_time$1 = 0, $s_time$10 = 0, $s_time$11 = 0, $s_time$12 = 0, $s_time$13 = 0, $s_time$14 = 0, $s_time$15 = 0, $s_time$16 = 0, $s_time$17 = 0, $s_time$18 = 0, $s_time$19 = 0, $s_time$2 = 0, $s_time$20 = 0, $s_time$21 = 0, $s_time$22 = 0, $s_time$23 = 0, $s_time$24 = 0, $s_time$25 = 0, $s_time$27 = 0, $s_time$3 = 0;
 var $s_time$4 = 0, $s_time$5 = 0, $s_time$6 = 0, $s_time$7 = 0, $s_time$8 = 0, $s_time$9 = 0, $sext = 0, $sp$0 = 0, $sp$0$lcssa = 0, $sp$0$phi = 0, $sp$1 = 0, $sp$2 = 0, $status$0 = 0, $status$0$lcssa = 0, $status$0$phi = 0, $status$1 = 0, $status$2 = 0, $temp25$0 = 0, $temp49$0 = 0, $x$0 = 0;
 var $x$0$lcssa = 0, $x$0$phi = 0, $x$0$pn = 0, $x$0$pn10 = 0, $x$0$pn12 = 0, $x$0$pn16 = 0, $x$0$pn6 = 0, $x$0$pn8 = 0, $y$0 = 0, $y$0$lcssa = 0, $y$0$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp;
 __ZN7Nes_Cpu12set_end_timeEi($this,$end_time);
 $0 = (($this) + 2060|0);
 _memcpy(($s|0),($0|0),140)|0;
 $1 = (($this) + 2056|0);
 HEAP32[$1>>2] = $s;
 $2 = (($s) + 136|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 2048|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($this) + 2050|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($this) + 2051|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($this) + 2052|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($this) + 2054|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (($18) + 1)|0;
 $20 = $19 | 256;
 $21 = (($this) + 2053|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 & 76;
 $25 = $23 << 8;
 $26 = $23 & 2;
 $27 = $26 | $25;
 $28 = $27 ^ 2;
 $29 = (($this) + 2208|0);
 $30 = (($this) + -272|0);
 $31 = (($this) + -272|0);
 $32 = (($this) + -272|0);
 $33 = (($this) + -272|0);
 $34 = (($this) + -272|0);
 $35 = (($this) + -272|0);
 $36 = (($this) + -272|0);
 $37 = (($this) + -272|0);
 $38 = (($this) + -272|0);
 $39 = (($this) + -272|0);
 $40 = (($this) + -272|0);
 $41 = (($this) + -272|0);
 $42 = (($this) + -272|0);
 $43 = (($this) + -272|0);
 $44 = (($this) + -272|0);
 $45 = (($this) + -272|0);
 $46 = (($this) + -272|0);
 $47 = (($this) + -272|0);
 $48 = (($this) + -272|0);
 $49 = (($s) + 132|0);
 $50 = (($this) + 2200|0);
 $51 = (($s) + 132|0);
 $52 = (($this) + 2200|0);
 $53 = (($s) + 132|0);
 $54 = (($this) + 2204|0);
 $55 = (($s) + 124|0);
 $56 = (($s) + 132|0);
 $57 = (($this) + 2204|0);
 $a$0 = $9;$c$0 = $25;$nz$0 = $28;$pc$1 = $6;$s_time$0 = $3;$sp$0 = $20;$status$0 = $24;$x$0 = $12;$y$0 = $15;
 L1: while(1) {
  $60 = $pc$1 >>> 11;
  $61 = (($s) + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $pc$1 & 2047;
  $64 = (($62) + ($63)|0);
  $$sum = (($63) + 1)|0;
  $65 = (($62) + ($$sum)|0);
  $66 = HEAP8[$64>>0]|0;
  $67 = $66&255;
  $68 = (($pc$1) + 1)|0;
  $69 = (42632 + ($67)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $59 = (($71) + ($s_time$0))|0;
  $72 = ($59|0)<(0);
  $73 = ($59|0)<($71|0);
  $or$cond = $72 | $73;
  if (!($or$cond)) {
   HEAP32[$2>>2] = $s_time$0;
   $76 = ($s_time$0|0)<(0);
   if ($76) {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $s_time$0;$pc$1$phi = $pc$1;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue;
   } else {
    $a$0$lcssa = $a$0;$c$0$lcssa = $c$0;$nz$0$lcssa = $nz$0;$pc$21 = $pc$1;$s_time$27 = $s_time$0;$sp$0$lcssa = $sp$0;$status$0$lcssa = $status$0;$x$0$lcssa = $x$0;$y$0$lcssa = $y$0;
    label = 201;
    break;
   }
  }
  $74 = HEAP8[$65>>0]|0;
  $75 = $74&255;
  do {
   switch ($67|0) {
   case 210: case 178: case 146: case 114: case 98: case 82: case 66: case 50: case 34: case 18: case 2:  {
    $a$0$lcssa = $a$0;$c$0$lcssa = $c$0;$nz$0$lcssa = $nz$0;$pc$21 = $68;$s_time$27 = $59;$sp$0$lcssa = $sp$0;$status$0$lcssa = $status$0;$x$0$lcssa = $x$0;$y$0$lcssa = $y$0;
    label = 201;
    break L1;
    break;
   }
   case 224:  {
    $data$14 = $75;$pc$6 = $68;$s_time$7 = $59;
    label = 78;
    break;
   }
   case 204:  {
    $430 = (__Z8get_le16PKv($65)|0);
    $431 = (($pc$1) + 2)|0;
    HEAP32[$2>>2] = $59;
    $432 = (__ZN7Nsf_Emu8cpu_readEj($38,$430)|0);
    $433 = HEAP32[$2>>2]|0;
    $data$15 = $432;$pc$7 = $431;$s_time$8 = $433;
    label = 81;
    break;
   }
   case 196:  {
    $434 = (($this) + ($75)|0);
    $435 = HEAP8[$434>>0]|0;
    $436 = $435&255;
    $data$15 = $436;$pc$7 = $68;$s_time$8 = $59;
    label = 81;
    break;
   }
   case 192:  {
    $data$15 = $75;$pc$7 = $68;$s_time$8 = $59;
    label = 81;
    break;
   }
   case 33:  {
    $441 = (($75) + ($x$0))|0;
    $442 = (($441) + 1)|0;
    $443 = $442 & 255;
    $444 = (($this) + ($443)|0);
    $445 = HEAP8[$444>>0]|0;
    $446 = $445&255;
    $447 = $446 << 8;
    $448 = $441 & 255;
    $449 = (($this) + ($448)|0);
    $450 = HEAP8[$449>>0]|0;
    $451 = $450&255;
    $452 = $447 | $451;
    $data$19 = $452;$pc$8 = $68;$s_time$10 = $59;
    label = 89;
    break;
   }
   case 250: case 218: case 122: case 90: case 58: case 26: case 234:  {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 165:  {
    $83 = (($this) + ($75)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = (($pc$1) + 2)|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $85;$nz$0 = $85;$pc$1 = $86;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 181:  {
    $77 = (($75) + ($x$0))|0;
    $78 = $77 & 255;
    $79 = (($this) + ($78)|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80&255;
    $82 = (($pc$1) + 2)|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $81;$nz$0 = $81;$pc$1 = $82;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 232:  {
    $110 = (($x$0) + 1)|0;
    $111 = $110 & 255;
    $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $110;$pc$1 = $68;$s_time$0 = $59;$x$0 = $111;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 16:  {
    $112 = $74 << 24 >> 24;
    $113 = (($pc$1) + 2)|0;
    $114 = $nz$0 & 32896;
    $115 = ($114|0)==(0);
    if ($115) {
     $116 = $113 & 255;
     $117 = (($112) + ($116))|0;
     $118 = (($112) + ($113))|0;
     $119 = $118 & 65535;
     $120 = $117 >>> 8;
     $121 = $120 & 1;
     $122 = (($121) + ($59))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $119;$s_time$0 = $122;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $pc$0 = $113;
     label = 2;
    }
    break;
   }
   case 49:  {
    $453 = (($this) + ($75)|0);
    $454 = HEAP8[$453>>0]|0;
    $455 = $454&255;
    $456 = (($455) + ($y$0))|0;
    $457 = (($75) + 1)|0;
    $458 = $457 & 255;
    $459 = (($this) + ($458)|0);
    $460 = HEAP8[$459>>0]|0;
    $461 = $460&255;
    $462 = $461 << 8;
    $463 = (($462) + ($456))|0;
    $464 = $456 >>> 8;
    $465 = (($464) + ($59))|0;
    $data$19 = $463;$pc$8 = $68;$s_time$10 = $465;
    label = 89;
    break;
   }
   case 53:  {
    $466 = (($75) + ($x$0))|0;
    $467 = $466 & 255;
    $data$16 = $467;
    label = 85;
    break;
   }
   case 37:  {
    $data$16 = $75;
    label = 85;
    break;
   }
   case 61:  {
    $x$0$pn12 = $x$0;
    label = 87;
    break;
   }
   case 57:  {
    $x$0$pn12 = $y$0;
    label = 87;
    break;
   }
   case 45:  {
    $data$18 = $75;$s_time$9 = $59;
    label = 88;
    break;
   }
   case 41:  {
    $data$20 = $75;$pc$9 = $68;$s_time$11 = $59;
    label = 90;
    break;
   }
   case 65:  {
    $483 = (($75) + ($x$0))|0;
    $484 = (($483) + 1)|0;
    $485 = $484 & 255;
    $486 = (($this) + ($485)|0);
    $487 = HEAP8[$486>>0]|0;
    $488 = $487&255;
    $489 = $488 << 8;
    $490 = $483 & 255;
    $491 = (($this) + ($490)|0);
    $492 = HEAP8[$491>>0]|0;
    $493 = $492&255;
    $494 = $489 | $493;
    $data$24 = $494;$pc$10 = $68;$s_time$13 = $59;
    label = 98;
    break;
   }
   case 81:  {
    $495 = (($this) + ($75)|0);
    $496 = HEAP8[$495>>0]|0;
    $497 = $496&255;
    $498 = (($497) + ($y$0))|0;
    $499 = (($75) + 1)|0;
    $500 = $499 & 255;
    $501 = (($this) + ($500)|0);
    $502 = HEAP8[$501>>0]|0;
    $503 = $502&255;
    $504 = $503 << 8;
    $505 = (($504) + ($498))|0;
    $506 = $498 >>> 8;
    $507 = (($506) + ($59))|0;
    $data$24 = $505;$pc$10 = $68;$s_time$13 = $507;
    label = 98;
    break;
   }
   case 85:  {
    $508 = (($75) + ($x$0))|0;
    $509 = $508 & 255;
    $data$21 = $509;
    label = 94;
    break;
   }
   case 69:  {
    $data$21 = $75;
    label = 94;
    break;
   }
   case 93:  {
    $x$0$pn10 = $x$0;
    label = 96;
    break;
   }
   case 89:  {
    $x$0$pn10 = $y$0;
    label = 96;
    break;
   }
   case 77:  {
    $data$23 = $75;$s_time$12 = $59;
    label = 97;
    break;
   }
   case 73:  {
    $data$25 = $75;$pc$11 = $68;$s_time$14 = $59;
    label = 99;
    break;
   }
   case 1:  {
    $525 = (($75) + ($x$0))|0;
    $526 = (($525) + 1)|0;
    $527 = $526 & 255;
    $528 = (($this) + ($527)|0);
    $529 = HEAP8[$528>>0]|0;
    $530 = $529&255;
    $531 = $530 << 8;
    $532 = $525 & 255;
    $533 = (($this) + ($532)|0);
    $534 = HEAP8[$533>>0]|0;
    $535 = $534&255;
    $536 = $531 | $535;
    $data$29 = $536;$pc$12 = $68;$s_time$16 = $59;
    label = 107;
    break;
   }
   case 17:  {
    $537 = (($this) + ($75)|0);
    $538 = HEAP8[$537>>0]|0;
    $539 = $538&255;
    $540 = (($539) + ($y$0))|0;
    $541 = (($75) + 1)|0;
    $542 = $541 & 255;
    $543 = (($this) + ($542)|0);
    $544 = HEAP8[$543>>0]|0;
    $545 = $544&255;
    $546 = $545 << 8;
    $547 = (($546) + ($540))|0;
    $548 = $540 >>> 8;
    $549 = (($548) + ($59))|0;
    $data$29 = $547;$pc$12 = $68;$s_time$16 = $549;
    label = 107;
    break;
   }
   case 21:  {
    $550 = (($75) + ($x$0))|0;
    $551 = $550 & 255;
    $data$26 = $551;
    label = 103;
    break;
   }
   case 5:  {
    $data$26 = $75;
    label = 103;
    break;
   }
   case 29:  {
    $x$0$pn8 = $x$0;
    label = 105;
    break;
   }
   case 25:  {
    $x$0$pn8 = $y$0;
    label = 105;
    break;
   }
   case 13:  {
    $data$28 = $75;$s_time$15 = $59;
    label = 106;
    break;
   }
   case 9:  {
    $data$30 = $75;$pc$13 = $68;$s_time$17 = $59;
    label = 108;
    break;
   }
   case 44:  {
    $567 = (__Z8get_le16PKv($65)|0);
    $568 = (($pc$1) + 3)|0;
    $569 = $status$0 & -65;
    HEAP32[$2>>2] = $59;
    $570 = (__ZN7Nsf_Emu8cpu_readEj($42,$567)|0);
    $571 = HEAP32[$2>>2]|0;
    $572 = $570 & 64;
    $573 = $572 | $569;
    $574 = $570 & $a$0;
    $575 = ($574|0)==(0);
    $576 = $570 << 8;
    $$17 = $575 ? $576 : $570;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$17;$pc$1 = $568;$s_time$0 = $571;$status$0 = $573;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 36:  {
    $577 = (($this) + ($75)|0);
    $578 = HEAP8[$577>>0]|0;
    $579 = $578&255;
    $580 = (($pc$1) + 2)|0;
    $581 = $status$0 & -65;
    $582 = $579 & 64;
    $583 = $582 | $581;
    $584 = $579 & $a$0;
    $585 = ($584|0)==(0);
    $586 = $579 << 8;
    $$18 = $585 ? $586 : $579;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$18;$pc$1 = $580;$s_time$0 = $59;$status$0 = $583;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 225:  {
    $587 = (($75) + ($x$0))|0;
    $588 = (($587) + 1)|0;
    $589 = $588 & 255;
    $590 = (($this) + ($589)|0);
    $591 = HEAP8[$590>>0]|0;
    $592 = $591&255;
    $593 = $592 << 8;
    $594 = $587 & 255;
    $595 = (($this) + ($594)|0);
    $596 = HEAP8[$595>>0]|0;
    $597 = $596&255;
    $598 = $593 | $597;
    $data$34 = $598;$pc$14 = $68;$s_time$19 = $59;
    label = 118;
    break;
   }
   case 241:  {
    $599 = (($this) + ($75)|0);
    $600 = HEAP8[$599>>0]|0;
    $601 = $600&255;
    $602 = (($601) + ($y$0))|0;
    $603 = (($75) + 1)|0;
    $604 = $603 & 255;
    $605 = (($this) + ($604)|0);
    $606 = HEAP8[$605>>0]|0;
    $607 = $606&255;
    $608 = $607 << 8;
    $609 = (($608) + ($602))|0;
    $610 = $602 >>> 8;
    $611 = (($610) + ($59))|0;
    $data$34 = $609;$pc$14 = $68;$s_time$19 = $611;
    label = 118;
    break;
   }
   case 245:  {
    $612 = (($75) + ($x$0))|0;
    $613 = $612 & 255;
    $data$31 = $613;
    label = 114;
    break;
   }
   case 229:  {
    $data$31 = $75;
    label = 114;
    break;
   }
   case 253:  {
    $x$0$pn6 = $x$0;
    label = 116;
    break;
   }
   case 249:  {
    $x$0$pn6 = $y$0;
    label = 116;
    break;
   }
   case 237:  {
    $data$33 = $75;$s_time$18 = $59;
    label = 117;
    break;
   }
   case 235: case 233:  {
    $data$35 = $75;$pc$15 = $68;$s_time$20 = $59;
    label = 119;
    break;
   }
   case 97:  {
    $628 = (($75) + ($x$0))|0;
    $629 = (($628) + 1)|0;
    $630 = $629 & 255;
    $631 = (($this) + ($630)|0);
    $632 = HEAP8[$631>>0]|0;
    $633 = $632&255;
    $634 = $633 << 8;
    $635 = $628 & 255;
    $636 = (($this) + ($635)|0);
    $637 = HEAP8[$636>>0]|0;
    $638 = $637&255;
    $639 = $634 | $638;
    $data$39 = $639;$pc$16 = $68;$s_time$22 = $59;
    label = 127;
    break;
   }
   case 113:  {
    $640 = (($this) + ($75)|0);
    $641 = HEAP8[$640>>0]|0;
    $642 = $641&255;
    $643 = (($642) + ($y$0))|0;
    $644 = (($75) + 1)|0;
    $645 = $644 & 255;
    $646 = (($this) + ($645)|0);
    $647 = HEAP8[$646>>0]|0;
    $648 = $647&255;
    $649 = $648 << 8;
    $650 = (($649) + ($643))|0;
    $651 = $643 >>> 8;
    $652 = (($651) + ($59))|0;
    $data$39 = $650;$pc$16 = $68;$s_time$22 = $652;
    label = 127;
    break;
   }
   case 117:  {
    $653 = (($75) + ($x$0))|0;
    $654 = $653 & 255;
    $data$36 = $654;
    label = 123;
    break;
   }
   case 101:  {
    $data$36 = $75;
    label = 123;
    break;
   }
   case 125:  {
    $x$0$pn = $x$0;
    label = 125;
    break;
   }
   case 121:  {
    $x$0$pn = $y$0;
    label = 125;
    break;
   }
   case 109:  {
    $data$38 = $75;$s_time$21 = $59;
    label = 126;
    break;
   }
   case 74:  {
    $c$1 = 0;
    label = 130;
    break;
   }
   case 105:  {
    $data$40 = $75;$pc$17 = $68;$s_time$23 = $59;
    break;
   }
   case 106:  {
    $c$1 = $c$0;
    label = 130;
    break;
   }
   case 10:  {
    $687 = $a$0 << 1;
    $688 = $687 & 254;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0 = $688;$c$0 = $687;$nz$0 = $687;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;
    continue L1;
    break;
   }
   case 42:  {
    $689 = $a$0 << 1;
    $690 = $c$0 >>> 8;
    $691 = $690 & 1;
    $692 = $689 | $691;
    $693 = $692 & 255;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0 = $693;$c$0 = $689;$nz$0 = $692;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;
    continue L1;
    break;
   }
   case 94:  {
    $694 = (($75) + ($x$0))|0;
    $data$41 = $694;
    label = 134;
    break;
   }
   case 78:  {
    $data$41 = $75;
    label = 134;
    break;
   }
   case 62:  {
    $706 = (($75) + ($x$0))|0;
    $c$3 = $c$0;$data$44 = $706;
    label = 139;
    break;
   }
   case 110:  {
    $c$2 = $c$0;$data$42 = $75;
    label = 135;
    break;
   }
   case 30:  {
    $707 = (($75) + ($x$0))|0;
    $data$43 = $707;
    label = 138;
    break;
   }
   case 14:  {
    $data$43 = $75;
    label = 138;
    break;
   }
   case 46:  {
    $c$3 = $c$0;$data$44 = $75;
    label = 139;
    break;
   }
   case 126:  {
    $721 = (($75) + ($x$0))|0;
    $c$2 = $c$0;$data$42 = $721;
    label = 135;
    break;
   }
   case 118:  {
    $722 = (($75) + ($x$0))|0;
    $723 = $722 & 255;
    $c$5 = $c$0;$data$47 = $723;
    label = 145;
    break;
   }
   case 86:  {
    $724 = (($75) + ($x$0))|0;
    $725 = $724 & 255;
    $data$46 = $725;
    label = 144;
    break;
   }
   case 70:  {
    $data$46 = $75;
    label = 144;
    break;
   }
   case 102:  {
    $c$5 = $c$0;$data$47 = $75;
    label = 145;
    break;
   }
   case 54:  {
    $734 = (($75) + ($x$0))|0;
    $735 = $734 & 255;
    $c$6 = $c$0;$data$49 = $735;
    label = 149;
    break;
   }
   case 22:  {
    $736 = (($75) + ($x$0))|0;
    $737 = $736 & 255;
    $data$48 = $737;
    label = 148;
    break;
   }
   case 6:  {
    $data$48 = $75;
    label = 148;
    break;
   }
   case 38:  {
    $c$6 = $c$0;$data$49 = $75;
    label = 149;
    break;
   }
   case 202:  {
    $745 = (($x$0) + -1)|0;
    $746 = $745 & 255;
    $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $745;$pc$1 = $68;$s_time$0 = $59;$x$0 = $746;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 136:  {
    $747 = (($y$0) + -1)|0;
    $748 = $747 & 255;
    $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $747;$pc$1 = $68;$s_time$0 = $59;$y$0 = $748;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 246:  {
    $749 = (($75) + ($x$0))|0;
    $750 = $749 & 255;
    $data$52 = $750;$nz$2 = 1;
    label = 155;
    break;
   }
   case 214:  {
    $751 = (($75) + ($x$0))|0;
    $752 = $751 & 255;
    $data$51 = $752;
    label = 154;
    break;
   }
   case 198:  {
    $data$51 = $75;
    label = 154;
    break;
   }
   case 230:  {
    $data$52 = $75;$nz$2 = 1;
    label = 155;
    break;
   }
   case 254:  {
    $760 = (__Z8get_le16PKv($65)|0);
    $761 = (($760) + ($x$0))|0;
    $data$56 = $761;$nz$4 = 1;
    label = 161;
    break;
   }
   case 238:  {
    $762 = (__Z8get_le16PKv($65)|0);
    $data$56 = $762;$nz$4 = 1;
    label = 161;
    break;
   }
   case 222:  {
    $763 = (__Z8get_le16PKv($65)|0);
    $764 = (($763) + ($x$0))|0;
    $data$56 = $764;$nz$4 = -1;
    label = 161;
    break;
   }
   case 206:  {
    $765 = (__Z8get_le16PKv($65)|0);
    $data$56 = $765;$nz$4 = -1;
    label = 161;
    break;
   }
   case 170:  {
    $y$0$phi = $y$0;$x$0$phi = $a$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $a$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 138:  {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $x$0;$c$0$phi = $c$0;$a$0$phi = $x$0;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 154:  {
    $771 = (($x$0) + 1)|0;
    $772 = $771 | 256;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$sp$0 = $772;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 186:  {
    $773 = (($sp$0) + 255)|0;
    $774 = $773 & 255;
    $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $774;$pc$1 = $68;$s_time$0 = $59;$x$0 = $774;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 72:  {
    $775 = (($sp$0) + -1)|0;
    $776 = $775 | 256;
    $777 = $a$0&255;
    $778 = (($this) + ($776)|0);
    HEAP8[$778>>0] = $777;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$sp$0 = $776;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 104:  {
    $779 = (($this) + ($sp$0)|0);
    $780 = HEAP8[$779>>0]|0;
    $781 = $780&255;
    $782 = (($sp$0) + -255)|0;
    $783 = $782 | 256;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$c$0$phi = $c$0;$a$0 = $781;$nz$0 = $781;$pc$1 = $68;$s_time$0 = $59;$sp$0 = $783;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 64:  {
    $784 = (($this) + ($sp$0)|0);
    $785 = HEAP8[$784>>0]|0;
    $786 = $785&255;
    $787 = (($sp$0) + -255)|0;
    $788 = $787 | 256;
    $789 = (($this) + ($788)|0);
    $790 = HEAP8[$789>>0]|0;
    $791 = $790&255;
    $792 = (($sp$0) + -254)|0;
    $793 = $792 | 256;
    $794 = (($this) + ($793)|0);
    $795 = HEAP8[$794>>0]|0;
    $796 = $795&255;
    $797 = $796 << 8;
    $798 = $797 | $791;
    $799 = (($sp$0) + -253)|0;
    $800 = $799 | 256;
    $801 = $786 & 76;
    $802 = $786 << 8;
    $803 = $786 & 2;
    $804 = $803 | $802;
    $805 = $804 ^ 2;
    $806 = $786 ^ $status$0;
    $807 = $806 & 4;
    $808 = ($807|0)==(0);
    if ($808) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $802;$nz$0 = $805;$pc$1 = $798;$s_time$0 = $59;$sp$0 = $800;$status$0 = $801;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $809 = $801&255;
    HEAP8[$21>>0] = $809;
    $810 = HEAP32[$49>>2]|0;
    $811 = HEAP32[$50>>2]|0;
    $812 = (($810) - ($811))|0;
    $813 = ($812|0)>(0);
    $814 = $786 & 4;
    $815 = ($814|0)==(0);
    $or$cond20 = $813 & $815;
    if (!($or$cond20)) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $802;$nz$0 = $805;$pc$1 = $798;$s_time$0 = $59;$sp$0 = $800;$status$0 = $801;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $816 = (($812) + ($59))|0;
    HEAP32[$49>>2] = $811;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $802;$nz$0 = $805;$pc$1 = $798;$s_time$0 = $816;$sp$0 = $800;$status$0 = $801;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 40:  {
    $817 = (($this) + ($sp$0)|0);
    $818 = HEAP8[$817>>0]|0;
    $819 = $818&255;
    $820 = (($sp$0) + -255)|0;
    $821 = $820 | 256;
    $822 = $819 ^ $status$0;
    $823 = $819 & 76;
    $824 = $819 << 8;
    $825 = $819 & 2;
    $826 = $825 | $824;
    $827 = $826 ^ 2;
    $828 = $822 & 4;
    $829 = ($828|0)==(0);
    if ($829) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $824;$nz$0 = $827;$pc$1 = $68;$s_time$0 = $59;$sp$0 = $821;$status$0 = $823;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $830 = $819 & 4;
    $831 = ($830|0)==(0);
    if ($831) {
     $c$8 = $824;$nz$5 = $827;$sp$1 = $821;$status$1 = $823;
     label = 182;
    } else {
     $c$9 = $824;$nz$6 = $827;$sp$2 = $821;$status$2 = $823;
     label = 188;
    }
    break;
   }
   case 8:  {
    $832 = $status$0 & 76;
    $833 = $nz$0 >>> 8;
    $834 = $833 | $nz$0;
    $835 = $834 & 128;
    $836 = $832 | $835;
    $837 = $c$0 >>> 8;
    $838 = $837 & 1;
    $839 = $836 | $838;
    $840 = $nz$0 & 255;
    $841 = ($840|0)==(0);
    $842 = $839 | 2;
    $$21 = $841 ? $842 : $839;
    $843 = (($sp$0) + -1)|0;
    $844 = $843 | 256;
    $845 = $$21 | 48;
    $846 = $845&255;
    $847 = (($this) + ($844)|0);
    HEAP8[$847>>0] = $846;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$sp$0 = $844;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 56:  {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = -1;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 24:  {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = 0;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 108:  {
    $848 = (__Z8get_le16PKv($65)|0);
    $849 = $848 >>> 11;
    $850 = (($s) + ($849<<2)|0);
    $851 = HEAP32[$850>>2]|0;
    $852 = $848 & 2047;
    $853 = (($851) + ($852)|0);
    $854 = HEAP8[$853>>0]|0;
    $855 = $854&255;
    $856 = $848 & 1792;
    $857 = (($848) + 1)|0;
    $858 = $857 & 255;
    $859 = $858 | $856;
    $860 = (($851) + ($859)|0);
    $861 = HEAP8[$860>>0]|0;
    $862 = $861&255;
    $863 = $862 << 8;
    $864 = $863 | $855;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $864;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 184:  {
    $865 = $status$0 & -65;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$status$0 = $865;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 216:  {
    $866 = $status$0 & -9;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$status$0 = $866;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 248:  {
    $867 = $status$0 | 8;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$status$0 = $867;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 88:  {
    $868 = $status$0 & 4;
    $869 = ($868|0)==(0);
    if ($869) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $870 = $status$0 & -5;
    $c$8 = $c$0;$nz$5 = $nz$0;$sp$1 = $sp$0;$status$1 = $870;
    label = 182;
    break;
   }
   case 120:  {
    $881 = $status$0 & 4;
    $882 = ($881|0)==(0);
    if (!($882)) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $883 = $status$0 | 4;
    $c$9 = $c$0;$nz$6 = $nz$0;$sp$2 = $sp$0;$status$2 = $883;
    label = 188;
    break;
   }
   case 252: case 220: case 124: case 92: case 60: case 28:  {
    $889 = (($75) + ($x$0))|0;
    $890 = $889 >>> 8;
    $891 = (($890) + ($59))|0;
    $s_time$24 = $891;
    label = 190;
    break;
   }
   case 12:  {
    $s_time$24 = $59;
    label = 190;
    break;
   }
   case 244: case 226: case 212: case 194: case 137: case 130: case 128: case 100: case 84: case 68: case 52: case 20: case 4: case 116:  {
    $pc$19 = $68;$s_time$25 = $59;
    label = 191;
    break;
   }
   case 242:  {
    $894 = ($pc$1>>>0)>(65535);
    if (!($894)) {
     $a$0$lcssa = $a$0;$c$0$lcssa = $c$0;$nz$0$lcssa = $nz$0;$pc$21 = $pc$1;$s_time$27 = $59;$sp$0$lcssa = $sp$0;$status$0$lcssa = $status$0;$x$0$lcssa = $x$0;$y$0$lcssa = $y$0;
     label = 201;
     break L1;
    }
    $895 = $pc$1 & 65535;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $895;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 255:  {
    $896 = $c$0 | 1;
    $c$10 = $896;
    label = 195;
    break;
   }
   case 0:  {
    $919 = (($pc$1) + 2)|0;
    $920 = (($59) + 7)|0;
    $921 = $919 >>> 8;
    $922 = $921&255;
    $923 = (($sp$0) + -1)|0;
    $924 = $923 | 256;
    $925 = (($this) + ($924)|0);
    HEAP8[$925>>0] = $922;
    $926 = $919&255;
    $927 = (($sp$0) + -2)|0;
    $928 = $927 | 256;
    $929 = (($this) + ($928)|0);
    HEAP8[$929>>0] = $926;
    $930 = HEAP32[$55>>2]|0;
    $931 = (($930) + 2046|0);
    $932 = (__Z8get_le16PKv($931)|0);
    $933 = (($sp$0) + -3)|0;
    $934 = $933 | 256;
    $935 = $status$0 & 76;
    $936 = $nz$0 >>> 8;
    $937 = $936 | $nz$0;
    $938 = $937 & 128;
    $939 = $935 | $938;
    $940 = $c$0 >>> 8;
    $941 = $940 & 1;
    $942 = $939 | $941;
    $943 = $nz$0 & 255;
    $944 = ($943|0)==(0);
    $945 = $942 | 2;
    $temp49$0 = $944 ? $945 : $942;
    $946 = $temp49$0 | 48;
    $947 = $946&255;
    $948 = (($this) + ($934)|0);
    HEAP8[$948>>0] = $947;
    $949 = $status$0 | 4;
    $950 = $949&255;
    HEAP8[$21>>0] = $950;
    $951 = HEAP32[$56>>2]|0;
    $952 = HEAP32[$57>>2]|0;
    $953 = (($951) - ($952))|0;
    $954 = ($953|0)>(-1);
    if ($954) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $932;$s_time$0 = $920;$sp$0 = $934;$status$0 = $949;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $955 = (($953) + ($920))|0;
    HEAP32[$56>>2] = $952;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $932;$s_time$0 = $955;$sp$0 = $934;$status$0 = $949;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 208:  {
    $87 = $74 << 24 >> 24;
    $88 = (($pc$1) + 2)|0;
    $89 = $nz$0&255;
    $90 = ($89<<24>>24)==(0);
    if ($90) {
     $pc$0 = $88;
     label = 2;
    } else {
     $91 = $88 & 255;
     $92 = (($87) + ($91))|0;
     $93 = (($87) + ($88))|0;
     $94 = $93 & 65535;
     $95 = $92 >>> 8;
     $96 = $95 & 1;
     $97 = (($96) + ($59))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $94;$s_time$0 = $97;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    break;
   }
   case 32:  {
    $98 = (($pc$1) + 2)|0;
    $99 = (__Z8get_le16PKv($65)|0);
    $100 = $98 >>> 8;
    $101 = $100&255;
    $102 = (($sp$0) + -1)|0;
    $103 = $102 | 256;
    $104 = (($this) + ($103)|0);
    HEAP8[$104>>0] = $101;
    $105 = (($sp$0) + -2)|0;
    $106 = $105 | 256;
    $107 = $98&255;
    $108 = (($this) + ($106)|0);
    HEAP8[$108>>0] = $107;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $99;$s_time$0 = $59;$sp$0 = $106;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 76:  {
    $109 = (__Z8get_le16PKv($65)|0);
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $109;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 193:  {
    $123 = (($75) + ($x$0))|0;
    $124 = (($123) + 1)|0;
    $125 = $124 & 255;
    $126 = (($this) + ($125)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&255;
    $129 = $128 << 8;
    $130 = $123 & 255;
    $131 = (($this) + ($130)|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = $132&255;
    $134 = $129 | $133;
    $data$3 = $134;$pc$2 = $68;$s_time$2 = $59;
    label = 22;
    break;
   }
   case 209:  {
    $135 = (($this) + ($75)|0);
    $136 = HEAP8[$135>>0]|0;
    $137 = $136&255;
    $138 = (($137) + ($y$0))|0;
    $139 = (($75) + 1)|0;
    $140 = $139 & 255;
    $141 = (($this) + ($140)|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = $142&255;
    $144 = $143 << 8;
    $145 = (($144) + ($138))|0;
    $146 = $138 >>> 8;
    $147 = (($146) + ($59))|0;
    $data$3 = $145;$pc$2 = $68;$s_time$2 = $147;
    label = 22;
    break;
   }
   case 213:  {
    $148 = (($75) + ($x$0))|0;
    $149 = $148 & 255;
    $data$0 = $149;
    label = 18;
    break;
   }
   case 197:  {
    $data$0 = $75;
    label = 18;
    break;
   }
   case 221:  {
    $x$0$pn16 = $x$0;
    label = 20;
    break;
   }
   case 217:  {
    $x$0$pn16 = $y$0;
    label = 20;
    break;
   }
   case 205:  {
    $data$2 = $75;$s_time$1 = $59;
    label = 21;
    break;
   }
   case 201:  {
    $data$4 = $75;$pc$3 = $68;$s_time$3 = $59;
    label = 23;
    break;
   }
   case 48:  {
    $167 = $74 << 24 >> 24;
    $168 = (($pc$1) + 2)|0;
    $169 = $nz$0 & 32896;
    $170 = ($169|0)==(0);
    if ($170) {
     $pc$0 = $168;
     label = 2;
    } else {
     $171 = $168 & 255;
     $172 = (($167) + ($171))|0;
     $173 = (($167) + ($168))|0;
     $174 = $173 & 65535;
     $175 = $172 >>> 8;
     $176 = $175 & 1;
     $177 = (($176) + ($59))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $174;$s_time$0 = $177;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    break;
   }
   case 240:  {
    $178 = $74 << 24 >> 24;
    $179 = (($pc$1) + 2)|0;
    $180 = $nz$0&255;
    $181 = ($180<<24>>24)==(0);
    if ($181) {
     $182 = $179 & 255;
     $183 = (($178) + ($182))|0;
     $184 = (($178) + ($179))|0;
     $185 = $184 & 65535;
     $186 = $183 >>> 8;
     $187 = $186 & 1;
     $188 = (($187) + ($59))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $185;$s_time$0 = $188;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $pc$0 = $179;
     label = 2;
    }
    break;
   }
   case 149:  {
    $189 = (($75) + ($x$0))|0;
    $190 = $189 & 255;
    $data$5 = $190;
    label = 29;
    break;
   }
   case 133:  {
    $data$5 = $75;
    label = 29;
    break;
   }
   case 200:  {
    $194 = (($y$0) + 1)|0;
    $195 = $194 & 255;
    $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $194;$pc$1 = $68;$s_time$0 = $59;$y$0 = $195;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 168:  {
    $y$0$phi = $a$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $a$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 152:  {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $y$0;$c$0$phi = $c$0;$a$0$phi = $y$0;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 173:  {
    $196 = (__Z8get_le16PKv($65)|0);
    $197 = (($pc$1) + 3)|0;
    HEAP32[$2>>2] = $59;
    $198 = (__ZN7Nsf_Emu8cpu_readEj($31,$196)|0);
    $199 = HEAP32[$2>>2]|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $198;$nz$0 = $198;$pc$1 = $197;$s_time$0 = $199;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 96:  {
    $200 = (($this) + ($sp$0)|0);
    $201 = HEAP8[$200>>0]|0;
    $202 = $201&255;
    $203 = (($202) + 1)|0;
    $204 = (($sp$0) + -255)|0;
    $205 = $204 | 256;
    $206 = (($this) + ($205)|0);
    $207 = HEAP8[$206>>0]|0;
    $208 = $207&255;
    $209 = $208 << 8;
    $210 = (($203) + ($209))|0;
    $211 = (($sp$0) + -254)|0;
    $212 = $211 | 256;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $210;$s_time$0 = $59;$sp$0 = $212;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 153:  {
    $213 = (__Z8get_le16PKv($65)|0);
    $214 = (($213) + ($y$0))|0;
    $215 = (($pc$1) + 3)|0;
    $216 = ($214>>>0)<(2048);
    if ($216) {
     $217 = $a$0&255;
     $218 = (($this) + ($214)|0);
     HEAP8[$218>>0] = $217;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $215;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $addr10$0 = $214;$pc$4 = $215;
     label = 41;
    }
    break;
   }
   case 141:  {
    $219 = (__Z8get_le16PKv($65)|0);
    $220 = (($pc$1) + 3)|0;
    $221 = ($219>>>0)<(2048);
    if ($221) {
     $222 = $a$0&255;
     $223 = (($this) + ($219)|0);
     HEAP8[$223>>0] = $222;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $220;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $addr10$0 = $219;$pc$4 = $220;
     label = 41;
    }
    break;
   }
   case 157:  {
    $224 = (__Z8get_le16PKv($65)|0);
    $225 = (($224) + ($x$0))|0;
    $226 = (($pc$1) + 3)|0;
    $227 = ($225>>>0)<(2048);
    if ($227) {
     $228 = $a$0&255;
     $229 = (($this) + ($225)|0);
     HEAP8[$229>>0] = $228;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $226;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $addr10$0 = $225;$pc$4 = $226;
     label = 41;
    }
    break;
   }
   case 145:  {
    $231 = (($this) + ($75)|0);
    $232 = HEAP8[$231>>0]|0;
    $233 = $232&255;
    $234 = (($233) + ($y$0))|0;
    $235 = (($75) + 1)|0;
    $236 = $235 & 255;
    $237 = (($this) + ($236)|0);
    $238 = HEAP8[$237>>0]|0;
    $239 = $238&255;
    $240 = $239 << 8;
    $241 = (($234) + ($240))|0;
    $242 = (($pc$1) + 2)|0;
    $addr10$0 = $241;$pc$4 = $242;
    label = 41;
    break;
   }
   case 129:  {
    $243 = (($75) + ($x$0))|0;
    $244 = (($243) + 1)|0;
    $245 = $244 & 255;
    $246 = (($this) + ($245)|0);
    $247 = HEAP8[$246>>0]|0;
    $248 = $247&255;
    $249 = $248 << 8;
    $250 = $243 & 255;
    $251 = (($this) + ($250)|0);
    $252 = HEAP8[$251>>0]|0;
    $253 = $252&255;
    $254 = $249 | $253;
    $255 = (($pc$1) + 2)|0;
    $addr10$0 = $254;$pc$4 = $255;
    label = 41;
    break;
   }
   case 169:  {
    $256 = (($pc$1) + 2)|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $75;$nz$0 = $75;$pc$1 = $256;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 161:  {
    $257 = (($75) + ($x$0))|0;
    $258 = (($257) + 1)|0;
    $259 = $258 & 255;
    $260 = (($this) + ($259)|0);
    $261 = HEAP8[$260>>0]|0;
    $262 = $261&255;
    $263 = $262 << 8;
    $264 = $257 & 255;
    $265 = (($this) + ($264)|0);
    $266 = HEAP8[$265>>0]|0;
    $267 = $266&255;
    $268 = $263 | $267;
    $269 = (($pc$1) + 2)|0;
    $addr13$0 = $268;$pc$5 = $269;$s_time$4 = $59;
    label = 49;
    break;
   }
   case 177:  {
    $270 = (($this) + ($75)|0);
    $271 = HEAP8[$270>>0]|0;
    $272 = $271&255;
    $273 = (($272) + ($y$0))|0;
    $274 = $273 >>> 8;
    $275 = (($274) + ($59))|0;
    $276 = (($75) + 1)|0;
    $277 = $276 & 255;
    $278 = (($this) + ($277)|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = $279&255;
    $281 = $280 << 8;
    $282 = (($281) + ($273))|0;
    $283 = (($pc$1) + 2)|0;
    $284 = $282 & 2047;
    $285 = $282 >>> 11;
    $286 = (($s) + ($285<<2)|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = (($287) + ($284)|0);
    $289 = HEAP8[$288>>0]|0;
    $290 = $289&255;
    $291 = $282 ^ 32768;
    $292 = ($291>>>0)<(40960);
    if ($292) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $290;$nz$0 = $290;$pc$1 = $283;$s_time$0 = $275;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
     continue L1;
    } else {
     $addr13$0 = $282;$pc$5 = $283;$s_time$4 = $275;
     label = 49;
    }
    break;
   }
   case 185:  {
    $293 = (($75) + ($y$0))|0;
    $294 = $293 >>> 8;
    $295 = (($294) + ($59))|0;
    $296 = (__Z8get_le16PKv($65)|0);
    $297 = (($296) + ($y$0))|0;
    $298 = (($pc$1) + 3)|0;
    $299 = $297 & 2047;
    $300 = $297 >>> 11;
    $301 = (($s) + ($300<<2)|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = (($302) + ($299)|0);
    $304 = HEAP8[$303>>0]|0;
    $305 = $304&255;
    $306 = $297 ^ 32768;
    $307 = ($306>>>0)<(40960);
    if ($307) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $305;$nz$0 = $305;$pc$1 = $298;$s_time$0 = $295;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
     continue L1;
    } else {
     $addr13$0 = $297;$pc$5 = $298;$s_time$4 = $295;
     label = 49;
    }
    break;
   }
   case 189:  {
    $308 = (($75) + ($x$0))|0;
    $309 = $308 >>> 8;
    $310 = (($309) + ($59))|0;
    $311 = (__Z8get_le16PKv($65)|0);
    $312 = (($311) + ($x$0))|0;
    $313 = (($pc$1) + 3)|0;
    $314 = $312 & 2047;
    $315 = $312 >>> 11;
    $316 = (($s) + ($315<<2)|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = (($317) + ($314)|0);
    $319 = HEAP8[$318>>0]|0;
    $320 = $319&255;
    $321 = $312 ^ 32768;
    $322 = ($321>>>0)<(40960);
    if ($322) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $320;$nz$0 = $320;$pc$1 = $313;$s_time$0 = $310;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
     continue L1;
    } else {
     $addr13$0 = $312;$pc$5 = $313;$s_time$4 = $310;
     label = 49;
    }
    break;
   }
   case 80:  {
    $325 = $74 << 24 >> 24;
    $326 = (($pc$1) + 2)|0;
    $327 = $status$0 & 64;
    $328 = ($327|0)==(0);
    if ($328) {
     $329 = $326 & 255;
     $330 = (($325) + ($329))|0;
     $331 = (($325) + ($326))|0;
     $332 = $331 & 65535;
     $333 = $330 >>> 8;
     $334 = $333 & 1;
     $335 = (($334) + ($59))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $332;$s_time$0 = $335;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $pc$0 = $326;
     label = 2;
    }
    break;
   }
   case 112:  {
    $336 = $74 << 24 >> 24;
    $337 = (($pc$1) + 2)|0;
    $338 = $status$0 & 64;
    $339 = ($338|0)==(0);
    if ($339) {
     $pc$0 = $337;
     label = 2;
    } else {
     $340 = $337 & 255;
     $341 = (($336) + ($340))|0;
     $342 = (($336) + ($337))|0;
     $343 = $342 & 65535;
     $344 = $341 >>> 8;
     $345 = $344 & 1;
     $346 = (($345) + ($59))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $343;$s_time$0 = $346;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    break;
   }
   case 176:  {
    $347 = $74 << 24 >> 24;
    $348 = (($pc$1) + 2)|0;
    $349 = $c$0 & 256;
    $350 = ($349|0)==(0);
    if ($350) {
     $pc$0 = $348;
     label = 2;
    } else {
     $351 = $348 & 255;
     $352 = (($347) + ($351))|0;
     $353 = (($347) + ($348))|0;
     $354 = $353 & 65535;
     $355 = $352 >>> 8;
     $356 = $355 & 1;
     $357 = (($356) + ($59))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $354;$s_time$0 = $357;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    break;
   }
   case 144:  {
    $358 = $74 << 24 >> 24;
    $359 = (($pc$1) + 2)|0;
    $360 = $c$0 & 256;
    $361 = ($360|0)==(0);
    if ($361) {
     $362 = $359 & 255;
     $363 = (($358) + ($362))|0;
     $364 = (($358) + ($359))|0;
     $365 = $364 & 65535;
     $366 = $363 >>> 8;
     $367 = $366 & 1;
     $368 = (($367) + ($59))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $365;$s_time$0 = $368;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $pc$0 = $359;
     label = 2;
    }
    break;
   }
   case 148:  {
    $369 = (($75) + ($x$0))|0;
    $370 = $369 & 255;
    $data$6 = $370;
    label = 59;
    break;
   }
   case 132:  {
    $data$6 = $75;
    label = 59;
    break;
   }
   case 150:  {
    $374 = (($75) + ($y$0))|0;
    $375 = $374 & 255;
    $data$7 = $375;
    label = 61;
    break;
   }
   case 134:  {
    $data$7 = $75;
    label = 61;
    break;
   }
   case 182:  {
    $379 = (($75) + ($y$0))|0;
    $380 = $379 & 255;
    $data$8 = $380;
    label = 63;
    break;
   }
   case 166:  {
    $data$8 = $75;
    label = 63;
    break;
   }
   case 162:  {
    $data$9 = $75;
    label = 64;
    break;
   }
   case 180:  {
    $385 = (($75) + ($x$0))|0;
    $386 = $385 & 255;
    $data$10 = $386;
    label = 66;
    break;
   }
   case 164:  {
    $data$10 = $75;
    label = 66;
    break;
   }
   case 160:  {
    $data$11 = $75;
    label = 67;
    break;
   }
   case 188:  {
    $391 = (($75) + ($x$0))|0;
    $392 = $391 >>> 8;
    $393 = (($392) + ($59))|0;
    $data$12 = $391;$s_time$5 = $393;
    label = 69;
    break;
   }
   case 172:  {
    $data$12 = $75;$s_time$5 = $59;
    label = 69;
    break;
   }
   case 190:  {
    $402 = (($75) + ($y$0))|0;
    $403 = $402 >>> 8;
    $404 = (($403) + ($59))|0;
    $data$13 = $402;$s_time$6 = $404;
    label = 71;
    break;
   }
   case 142:  {
    $temp25$0 = $x$0;
    label = 73;
    break;
   }
   case 174:  {
    $data$13 = $75;$s_time$6 = $59;
    label = 71;
    break;
   }
   case 140:  {
    $temp25$0 = $y$0;
    label = 73;
    break;
   }
   case 236:  {
    $419 = (__Z8get_le16PKv($65)|0);
    $420 = (($pc$1) + 2)|0;
    HEAP32[$2>>2] = $59;
    $421 = (__ZN7Nsf_Emu8cpu_readEj($37,$419)|0);
    $422 = HEAP32[$2>>2]|0;
    $data$14 = $421;$pc$6 = $420;$s_time$7 = $422;
    label = 78;
    break;
   }
   case 228:  {
    $423 = (($this) + ($75)|0);
    $424 = HEAP8[$423>>0]|0;
    $425 = $424&255;
    $data$14 = $425;$pc$6 = $68;$s_time$7 = $59;
    label = 78;
    break;
   }
   default: {
    $c$10 = $c$0;
    label = 195;
   }
   }
  } while(0);
  switch (label|0) {
   case 2: {
    label = 0;
    $58 = (($59) + -1)|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$0;$s_time$0 = $58;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 18: {
    label = 0;
    $150 = (($this) + ($data$0)|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = $151&255;
    $data$4 = $152;$pc$3 = $68;$s_time$3 = $59;
    label = 23;
    break;
   }
   case 20: {
    label = 0;
    $data$1 = (($x$0$pn16) + ($75))|0;
    $153 = $data$1 >>> 8;
    $154 = (($153) + ($59))|0;
    $data$2 = $data$1;$s_time$1 = $154;
    label = 21;
    break;
   }
   case 29: {
    label = 0;
    $191 = (($pc$1) + 2)|0;
    $192 = $a$0&255;
    $193 = (($this) + ($data$5)|0);
    HEAP8[$193>>0] = $192;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $191;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 41: {
    label = 0;
    HEAP32[$2>>2] = $59;
    __ZN7Nsf_Emu9cpu_writeEji($32,$addr10$0,$a$0);
    $230 = HEAP32[$2>>2]|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$4;$s_time$0 = $230;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 49: {
    label = 0;
    HEAP32[$2>>2] = $s_time$4;
    $323 = (__ZN7Nsf_Emu8cpu_readEj($33,$addr13$0)|0);
    $324 = HEAP32[$2>>2]|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $323;$nz$0 = $323;$pc$1 = $pc$5;$s_time$0 = $324;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 59: {
    label = 0;
    $371 = (($pc$1) + 2)|0;
    $372 = $y$0&255;
    $373 = (($this) + ($data$6)|0);
    HEAP8[$373>>0] = $372;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $371;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 61: {
    label = 0;
    $376 = (($pc$1) + 2)|0;
    $377 = $x$0&255;
    $378 = (($this) + ($data$7)|0);
    HEAP8[$378>>0] = $377;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $376;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 63: {
    label = 0;
    $381 = (($this) + ($data$8)|0);
    $382 = HEAP8[$381>>0]|0;
    $383 = $382&255;
    $data$9 = $383;
    label = 64;
    break;
   }
   case 66: {
    label = 0;
    $387 = (($this) + ($data$10)|0);
    $388 = HEAP8[$387>>0]|0;
    $389 = $388&255;
    $data$11 = $389;
    label = 67;
    break;
   }
   case 69: {
    label = 0;
    $$sum14 = (($63) + 2)|0;
    $394 = (($62) + ($$sum14)|0);
    $395 = HEAP8[$394>>0]|0;
    $396 = $395&255;
    $397 = $396 << 8;
    $398 = (($397) + ($data$12))|0;
    $399 = (($pc$1) + 3)|0;
    HEAP32[$2>>2] = $s_time$5;
    $400 = (__ZN7Nsf_Emu8cpu_readEj($34,$398)|0);
    $401 = HEAP32[$2>>2]|0;
    $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $400;$pc$1 = $399;$s_time$0 = $401;$y$0 = $400;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 71: {
    label = 0;
    $$sum13 = (($63) + 2)|0;
    $405 = (($62) + ($$sum13)|0);
    $406 = HEAP8[$405>>0]|0;
    $407 = $406&255;
    $408 = $407 << 8;
    $409 = (($408) + ($data$13))|0;
    $410 = (($pc$1) + 3)|0;
    HEAP32[$2>>2] = $s_time$6;
    $411 = (__ZN7Nsf_Emu8cpu_readEj($35,$409)|0);
    $412 = HEAP32[$2>>2]|0;
    $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $411;$pc$1 = $410;$s_time$0 = $412;$x$0 = $411;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 73: {
    label = 0;
    $413 = (__Z8get_le16PKv($65)|0);
    $414 = (($pc$1) + 3)|0;
    $415 = ($413>>>0)<(2048);
    if ($415) {
     $416 = $temp25$0&255;
     $417 = (($this) + ($413)|0);
     HEAP8[$417>>0] = $416;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $414;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     HEAP32[$2>>2] = $59;
     __ZN7Nsf_Emu9cpu_writeEji($36,$413,$temp25$0);
     $418 = HEAP32[$2>>2]|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $414;$s_time$0 = $418;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    break;
   }
   case 78: {
    label = 0;
    $426 = (($x$0) - ($data$14))|0;
    $427 = (($pc$6) + 1)|0;
    $428 = $426 ^ -1;
    $429 = $426 & 255;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $428;$nz$0 = $429;$pc$1 = $427;$s_time$0 = $s_time$7;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 81: {
    label = 0;
    $437 = (($y$0) - ($data$15))|0;
    $438 = (($pc$7) + 1)|0;
    $439 = $437 ^ -1;
    $440 = $437 & 255;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $439;$nz$0 = $440;$pc$1 = $438;$s_time$0 = $s_time$8;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 85: {
    label = 0;
    $468 = (($this) + ($data$16)|0);
    $469 = HEAP8[$468>>0]|0;
    $470 = $469&255;
    $data$20 = $470;$pc$9 = $68;$s_time$11 = $59;
    label = 90;
    break;
   }
   case 87: {
    label = 0;
    $data$17 = (($x$0$pn12) + ($75))|0;
    $471 = $data$17 >>> 8;
    $472 = (($471) + ($59))|0;
    $data$18 = $data$17;$s_time$9 = $472;
    label = 88;
    break;
   }
   case 94: {
    label = 0;
    $510 = (($this) + ($data$21)|0);
    $511 = HEAP8[$510>>0]|0;
    $512 = $511&255;
    $data$25 = $512;$pc$11 = $68;$s_time$14 = $59;
    label = 99;
    break;
   }
   case 96: {
    label = 0;
    $data$22 = (($x$0$pn10) + ($75))|0;
    $513 = $data$22 >>> 8;
    $514 = (($513) + ($59))|0;
    $data$23 = $data$22;$s_time$12 = $514;
    label = 97;
    break;
   }
   case 103: {
    label = 0;
    $552 = (($this) + ($data$26)|0);
    $553 = HEAP8[$552>>0]|0;
    $554 = $553&255;
    $data$30 = $554;$pc$13 = $68;$s_time$17 = $59;
    label = 108;
    break;
   }
   case 105: {
    label = 0;
    $data$27 = (($x$0$pn8) + ($75))|0;
    $555 = $data$27 >>> 8;
    $556 = (($555) + ($59))|0;
    $data$28 = $data$27;$s_time$15 = $556;
    label = 106;
    break;
   }
   case 114: {
    label = 0;
    $614 = (($this) + ($data$31)|0);
    $615 = HEAP8[$614>>0]|0;
    $616 = $615&255;
    $data$35 = $616;$pc$15 = $68;$s_time$20 = $59;
    label = 119;
    break;
   }
   case 116: {
    label = 0;
    $data$32 = (($x$0$pn6) + ($75))|0;
    $617 = $data$32 >>> 8;
    $618 = (($617) + ($59))|0;
    $data$33 = $data$32;$s_time$18 = $618;
    label = 117;
    break;
   }
   case 123: {
    label = 0;
    $655 = (($this) + ($data$36)|0);
    $656 = HEAP8[$655>>0]|0;
    $657 = $656&255;
    $data$40 = $657;$pc$17 = $68;$s_time$23 = $59;
    break;
   }
   case 125: {
    label = 0;
    $data$37 = (($x$0$pn) + ($75))|0;
    $658 = $data$37 >>> 8;
    $659 = (($658) + ($59))|0;
    $data$38 = $data$37;$s_time$21 = $659;
    label = 126;
    break;
   }
   case 130: {
    label = 0;
    $682 = $c$1 >>> 1;
    $683 = $682 & 128;
    $684 = $a$0 << 8;
    $685 = $a$0 >>> 1;
    $686 = $683 | $685;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0 = $686;$c$0 = $684;$nz$0 = $686;$pc$1 = $68;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;
    continue L1;
    break;
   }
   case 134: {
    label = 0;
    $c$2 = 0;$data$42 = $data$41;
    label = 135;
    break;
   }
   case 138: {
    label = 0;
    $c$3 = 0;$data$44 = $data$43;
    label = 139;
    break;
   }
   case 144: {
    label = 0;
    $c$5 = 0;$data$47 = $data$46;
    label = 145;
    break;
   }
   case 148: {
    label = 0;
    $c$6 = 0;$data$49 = $data$48;
    label = 149;
    break;
   }
   case 154: {
    label = 0;
    $data$52 = $data$51;$nz$2 = -1;
    label = 155;
    break;
   }
   case 161: {
    label = 0;
    HEAP32[$2>>2] = $59;
    $766 = (__ZN7Nsf_Emu8cpu_readEj($48,$data$56)|0);
    $767 = (($766) + ($nz$4))|0;
    $768 = (($pc$1) + 3)|0;
    $769 = $767 & 255;
    __ZN7Nsf_Emu9cpu_writeEji($48,$data$56,$769);
    $770 = HEAP32[$2>>2]|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $767;$pc$1 = $768;$s_time$0 = $770;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 182: {
    label = 0;
    $871 = $status$1&255;
    HEAP8[$21>>0] = $871;
    $872 = HEAP32[$51>>2]|0;
    $873 = HEAP32[$52>>2]|0;
    $874 = (($872) - ($873))|0;
    $875 = ($874|0)<(1);
    if ($875) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$pc$1 = $68;$s_time$0 = $59;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    HEAP32[$51>>2] = $873;
    $876 = (($874) + ($59))|0;
    $877 = ($876|0)<(0);
    if ($877) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$pc$1 = $68;$s_time$0 = $876;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $878 = (($876) + 1)|0;
    $879 = ($874|0)<($878|0);
    if ($879) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$pc$1 = $68;$s_time$0 = $876;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $880 = (($878) + ($873))|0;
    HEAP32[$51>>2] = $880;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$pc$1 = $68;$s_time$0 = -1;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 188: {
    label = 0;
    $884 = $status$2&255;
    HEAP8[$21>>0] = $884;
    $885 = HEAP32[$53>>2]|0;
    $886 = HEAP32[$54>>2]|0;
    HEAP32[$53>>2] = $886;
    $887 = (($885) + ($59))|0;
    $888 = (($887) - ($886))|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $c$9;$nz$0 = $nz$6;$pc$1 = $68;$s_time$0 = $888;$sp$0 = $sp$2;$status$0 = $status$2;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 190: {
    label = 0;
    $892 = (($pc$1) + 2)|0;
    $pc$19 = $892;$s_time$25 = $s_time$24;
    label = 191;
    break;
   }
   case 195: {
    label = 0;
    $897 = HEAP8[$64>>0]|0;
    $898 = $897&255;
    $899 = $898 >>> 2;
    $900 = $899 & 7;
    $901 = (42888 + ($900)|0);
    $902 = HEAP8[$901>>0]|0;
    $903 = $902&255;
    $904 = $898 << 1;
    $905 = $904 & 6;
    $906 = $903 >>> $905;
    $907 = $906 & 3;
    $908 = ($897<<24>>24)==(-100);
    $$ = $908 ? 2 : $907;
    $909 = (($$) + ($68))|0;
    $910 = HEAP32[$29>>2]|0;
    $911 = (($910) + 1)|0;
    HEAP32[$29>>2] = $911;
    $$mask = $898 & 240;
    $912 = ($$mask|0)==(176);
    if (!($912)) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = $c$10;$pc$1 = $909;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    if ((($897<<24>>24) == -73)) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = $c$10;$pc$1 = $909;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else if ((($897<<24>>24) == -77)) {
     $913 = (($this) + ($75)|0);
     $914 = HEAP8[$913>>0]|0;
     $915 = $914&255;
     $data$5723 = $915;
    } else {
     $data$5723 = $75;
    }
    $916 = (($data$5723) + ($y$0))|0;
    $917 = $916 >>> 8;
    $918 = (($917) + ($59))|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = $c$10;$pc$1 = $909;$s_time$0 = $918;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
  }
  switch (label|0) {
   case 21: {
    label = 0;
    $155 = (($pc$1) + 2)|0;
    $$sum15 = (($63) + 2)|0;
    $156 = (($62) + ($$sum15)|0);
    $157 = HEAP8[$156>>0]|0;
    $158 = $157&255;
    $159 = $158 << 8;
    $160 = (($159) + ($data$2))|0;
    $data$3 = $160;$pc$2 = $155;$s_time$2 = $s_time$1;
    label = 22;
    break;
   }
   case 64: {
    label = 0;
    $384 = (($pc$1) + 2)|0;
    $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$9;$pc$1 = $384;$s_time$0 = $59;$x$0 = $data$9;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 67: {
    label = 0;
    $390 = (($pc$1) + 2)|0;
    $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$11;$pc$1 = $390;$s_time$0 = $59;$y$0 = $data$11;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 88: {
    label = 0;
    $473 = (($pc$1) + 2)|0;
    $$sum11 = (($63) + 2)|0;
    $474 = (($62) + ($$sum11)|0);
    $475 = HEAP8[$474>>0]|0;
    $476 = $475&255;
    $477 = $476 << 8;
    $478 = (($477) + ($data$18))|0;
    $data$19 = $478;$pc$8 = $473;$s_time$10 = $s_time$9;
    label = 89;
    break;
   }
   case 97: {
    label = 0;
    $515 = (($pc$1) + 2)|0;
    $$sum9 = (($63) + 2)|0;
    $516 = (($62) + ($$sum9)|0);
    $517 = HEAP8[$516>>0]|0;
    $518 = $517&255;
    $519 = $518 << 8;
    $520 = (($519) + ($data$23))|0;
    $data$24 = $520;$pc$10 = $515;$s_time$13 = $s_time$12;
    label = 98;
    break;
   }
   case 106: {
    label = 0;
    $557 = (($pc$1) + 2)|0;
    $$sum7 = (($63) + 2)|0;
    $558 = (($62) + ($$sum7)|0);
    $559 = HEAP8[$558>>0]|0;
    $560 = $559&255;
    $561 = $560 << 8;
    $562 = (($561) + ($data$28))|0;
    $data$29 = $562;$pc$12 = $557;$s_time$16 = $s_time$15;
    label = 107;
    break;
   }
   case 117: {
    label = 0;
    $619 = (($pc$1) + 2)|0;
    $$sum5 = (($63) + 2)|0;
    $620 = (($62) + ($$sum5)|0);
    $621 = HEAP8[$620>>0]|0;
    $622 = $621&255;
    $623 = $622 << 8;
    $624 = (($623) + ($data$33))|0;
    $data$34 = $624;$pc$14 = $619;$s_time$19 = $s_time$18;
    label = 118;
    break;
   }
   case 126: {
    label = 0;
    $660 = (($pc$1) + 2)|0;
    $$sum4 = (($63) + 2)|0;
    $661 = (($62) + ($$sum4)|0);
    $662 = HEAP8[$661>>0]|0;
    $663 = $662&255;
    $664 = $663 << 8;
    $665 = (($664) + ($data$38))|0;
    $data$39 = $665;$pc$16 = $660;$s_time$22 = $s_time$21;
    label = 127;
    break;
   }
   case 135: {
    label = 0;
    $$sum2 = (($63) + 2)|0;
    $695 = (($62) + ($$sum2)|0);
    $696 = HEAP8[$695>>0]|0;
    $697 = $696&255;
    $698 = $697 << 8;
    $699 = (($698) + ($data$42))|0;
    HEAP32[$2>>2] = $59;
    $700 = (__ZN7Nsf_Emu8cpu_readEj($45,$699)|0);
    $701 = $c$2 >>> 1;
    $702 = $701 & 128;
    $703 = $700 >> 1;
    $704 = $703 | $702;
    $705 = $700 << 8;
    $c$4 = $705;$data$45 = $699;$nz$1 = $704;
    label = 140;
    break;
   }
   case 139: {
    label = 0;
    $$sum3 = (($63) + 2)|0;
    $708 = (($62) + ($$sum3)|0);
    $709 = HEAP8[$708>>0]|0;
    $710 = $709&255;
    $711 = $710 << 8;
    $712 = (($711) + ($data$44))|0;
    $713 = $c$3 >>> 8;
    $714 = $713 & 1;
    HEAP32[$2>>2] = $59;
    $715 = (__ZN7Nsf_Emu8cpu_readEj($47,$712)|0);
    $716 = $715 << 1;
    $717 = $716 | $714;
    $c$4 = $716;$data$45 = $712;$nz$1 = $717;
    label = 140;
    break;
   }
   case 145: {
    label = 0;
    $726 = (($this) + ($data$47)|0);
    $727 = HEAP8[$726>>0]|0;
    $728 = $727&255;
    $729 = $c$5 >>> 1;
    $730 = $729 & 128;
    $731 = $728 >>> 1;
    $732 = $731 | $730;
    $733 = $728 << 8;
    $c$7 = $733;$data$53 = $data$47;$nz$3 = $732;
    label = 156;
    break;
   }
   case 149: {
    label = 0;
    $738 = $c$6 >>> 8;
    $739 = $738 & 1;
    $740 = (($this) + ($data$49)|0);
    $741 = HEAP8[$740>>0]|0;
    $742 = $741&255;
    $743 = $742 << 1;
    $744 = $743 | $739;
    $c$7 = $743;$data$53 = $data$49;$nz$3 = $744;
    label = 156;
    break;
   }
   case 155: {
    label = 0;
    $753 = (($this) + ($data$52)|0);
    $754 = HEAP8[$753>>0]|0;
    $755 = $754&255;
    $756 = (($755) + ($nz$2))|0;
    $c$7 = $c$0;$data$53 = $data$52;$nz$3 = $756;
    label = 156;
    break;
   }
   case 191: {
    label = 0;
    $893 = (($pc$19) + 1)|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $893;$s_time$0 = $s_time$25;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
  }
  if ((label|0) == 22) {
   label = 0;
   HEAP32[$2>>2] = $s_time$2;
   $161 = (__ZN7Nsf_Emu8cpu_readEj($30,$data$3)|0);
   $162 = HEAP32[$2>>2]|0;
   $data$4 = $161;$pc$3 = $pc$2;$s_time$3 = $162;
   label = 23;
  }
  else if ((label|0) == 89) {
   label = 0;
   HEAP32[$2>>2] = $s_time$10;
   $479 = (__ZN7Nsf_Emu8cpu_readEj($39,$data$19)|0);
   $480 = HEAP32[$2>>2]|0;
   $data$20 = $479;$pc$9 = $pc$8;$s_time$11 = $480;
   label = 90;
  }
  else if ((label|0) == 98) {
   label = 0;
   HEAP32[$2>>2] = $s_time$13;
   $521 = (__ZN7Nsf_Emu8cpu_readEj($40,$data$24)|0);
   $522 = HEAP32[$2>>2]|0;
   $data$25 = $521;$pc$11 = $pc$10;$s_time$14 = $522;
   label = 99;
  }
  else if ((label|0) == 107) {
   label = 0;
   HEAP32[$2>>2] = $s_time$16;
   $563 = (__ZN7Nsf_Emu8cpu_readEj($41,$data$29)|0);
   $564 = HEAP32[$2>>2]|0;
   $data$30 = $563;$pc$13 = $pc$12;$s_time$17 = $564;
   label = 108;
  }
  else if ((label|0) == 118) {
   label = 0;
   HEAP32[$2>>2] = $s_time$19;
   $625 = (__ZN7Nsf_Emu8cpu_readEj($43,$data$34)|0);
   $626 = HEAP32[$2>>2]|0;
   $data$35 = $625;$pc$15 = $pc$14;$s_time$20 = $626;
   label = 119;
  }
  else if ((label|0) == 127) {
   label = 0;
   HEAP32[$2>>2] = $s_time$22;
   $666 = (__ZN7Nsf_Emu8cpu_readEj($44,$data$39)|0);
   $667 = HEAP32[$2>>2]|0;
   $data$40 = $666;$pc$17 = $pc$16;$s_time$23 = $667;
  }
  else if ((label|0) == 140) {
   label = 0;
   $718 = (($pc$1) + 3)|0;
   $719 = $nz$1 & 255;
   __ZN7Nsf_Emu9cpu_writeEji($46,$data$45,$719);
   $720 = HEAP32[$2>>2]|0;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $c$4;$nz$0 = $nz$1;$pc$1 = $718;$s_time$0 = $720;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
   continue;
  }
  else if ((label|0) == 156) {
   label = 0;
   $757 = (($pc$1) + 2)|0;
   $758 = $nz$3&255;
   $759 = (($this) + ($data$53)|0);
   HEAP8[$759>>0] = $758;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $c$7;$nz$0 = $nz$3;$pc$1 = $757;$s_time$0 = $59;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
   continue;
  }
  if ((label|0) == 23) {
   label = 0;
   $163 = (($a$0) - ($data$4))|0;
   $164 = (($pc$3) + 1)|0;
   $165 = $163 ^ -1;
   $166 = $163 & 255;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $165;$nz$0 = $166;$pc$1 = $164;$s_time$0 = $s_time$3;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
   continue;
  }
  else if ((label|0) == 90) {
   label = 0;
   $481 = $data$20 & $a$0;
   $482 = (($pc$9) + 1)|0;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $481;$nz$0 = $481;$pc$1 = $482;$s_time$0 = $s_time$11;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
   continue;
  }
  else if ((label|0) == 99) {
   label = 0;
   $523 = $data$25 ^ $a$0;
   $524 = (($pc$11) + 1)|0;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $523;$nz$0 = $523;$pc$1 = $524;$s_time$0 = $s_time$14;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
   continue;
  }
  else if ((label|0) == 108) {
   label = 0;
   $565 = $data$30 | $a$0;
   $566 = (($pc$13) + 1)|0;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $565;$nz$0 = $565;$pc$1 = $566;$s_time$0 = $s_time$17;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
   continue;
  }
  else if ((label|0) == 119) {
   label = 0;
   $627 = $data$35 ^ 255;
   $data$40 = $627;$pc$17 = $pc$15;$s_time$23 = $s_time$20;
  }
  $668 = $c$0 >>> 8;
  $669 = $668 & 1;
  $670 = $a$0 ^ 128;
  $671 = (($670) + ($669))|0;
  $sext = $data$40 << 24;
  $672 = $sext >> 24;
  $673 = (($671) + ($672))|0;
  $674 = $status$0 & -65;
  $675 = $673 >>> 2;
  $676 = $675 & 64;
  $677 = $676 | $674;
  $678 = (($a$0) + ($669))|0;
  $679 = (($678) + ($data$40))|0;
  $680 = (($pc$17) + 1)|0;
  $681 = $679 & 255;
  $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$a$0 = $681;$c$0 = $679;$nz$0 = $679;$pc$1 = $680;$s_time$0 = $s_time$23;$status$0 = $677;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;
 }
 if ((label|0) == 201) {
  HEAP32[$2>>2] = $s_time$27;
  $956 = $pc$21&65535;
  HEAP16[$4>>1] = $956;
  $957 = (($sp$0$lcssa) + 255)|0;
  $958 = $957&255;
  HEAP8[$16>>0] = $958;
  $959 = $a$0$lcssa&255;
  HEAP8[$7>>0] = $959;
  $960 = $x$0$lcssa&255;
  HEAP8[$10>>0] = $960;
  $961 = $y$0$lcssa&255;
  HEAP8[$13>>0] = $961;
  $962 = $status$0$lcssa & 76;
  $963 = $nz$0$lcssa >>> 8;
  $964 = $963 | $nz$0$lcssa;
  $965 = $964 & 128;
  $966 = $962 | $965;
  $967 = $c$0$lcssa >>> 8;
  $968 = $967 & 1;
  $969 = $966 | $968;
  $970 = $nz$0$lcssa & 255;
  $971 = ($970|0)==(0);
  $972 = $969 | 2;
  $$22 = $971 ? $972 : $969;
  $973 = $$22&255;
  HEAP8[$21>>0] = $973;
  _memcpy(($0|0),($s|0),140)|0;
  HEAP32[$1>>2] = $0;
  $974 = ($s_time$27|0)<(0);
  STACKTOP = sp;return ($974|0);
 }
 return (0)|0;
}
function __ZN7Nes_Cpu8get_codeEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr >>> 11;
 $1 = (($this) + 2056|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $addr & 2047;
 $6 = (($4) + ($5)|0);
 return ($6|0);
}
function __ZNK7Nes_Cpu4timeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2056|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 136|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 132|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 return ($6|0);
}
function __ZN13Nes_Namco_Apu9read_dataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN13Nes_Namco_Apu6accessEv($this)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 return ($2|0);
}
function __ZNK8Rom_DataILi4096EE9mask_addrEi($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & $addr;
 return ($2|0);
}
function __ZNK8Rom_DataILi4096EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN8Rom_DataILi4096EE7at_addrEi($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK8Rom_DataILi4096EE9mask_addrEi($this,$addr)|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) - ($2))|0;
 $4 = (__ZNK13blargg_vectorIhE4sizeEv($this)|0);
 $5 = (($4) + -4104)|0;
 $6 = ($3>>>0)>($5>>>0);
 $$ = $6 ? 0 : $3;
 $7 = (__ZNK13blargg_vectorIhEixEj($this,$$)|0);
 return ($7|0);
}
function __ZN7Nes_Cpu13set_code_pageEiPKv($this,$i,$p) {
 $this = $this|0;
 $i = $i|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2056|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i<<2)|0);
 HEAP32[$2>>2] = $p;
 return;
}
function __ZN7Nes_Cpu12set_end_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2204|0);
 HEAP32[$0>>2] = $t;
 $1 = (($this) + 2200|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN7Nes_Cpu15update_end_timeEii($this,$t,$2)|0);
 $4 = (($this) + 2056|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 136|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($3))|0;
 HEAP32[$6>>2] = $8;
 return;
}
function __ZN13Nes_Namco_Apu6accessEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 127;
 $3 = $1 & 128;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (($2) + 1)|0;
  $6 = $5 | 128;
  HEAP32[$0>>2] = $6;
 }
 $7 = ((($this) + ($2)|0) + 104|0);
 return ($7|0);
}
function __ZN7Nes_Cpu15update_end_timeEii($this,$t,$irq) {
 $this = $this|0;
 $t = $t|0;
 $irq = $irq|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq$t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($irq|0)<($t|0);
 if ($0) {
  $1 = (($this) + 2053|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2 & 4;
  $4 = ($3<<24>>24)==(0);
  $irq$t = $4 ? $irq : $t;
  $$0 = $irq$t;
 } else {
  $$0 = $t;
 }
 $5 = (($this) + 2056|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 132|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$0))|0;
 HEAP32[$7>>2] = $$0;
 return ($9|0);
}
function __ZN12Nes_Fme7_Apu5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 28|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 36|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 44|0);
 HEAP32[$3>>2] = 0;
 dest=$this+0|0; stop=dest+24|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN12Nes_Fme7_Apu9run_untilEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $delta1$0 = 0;
 var $delta1$0$lcssa = 0, $delta1$0$lobit = 0, $exitcond = 0, $index$04 = 0, $period$0 = 0, $time$0 = 0, $time$1 = 0, $volume$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($end_time|0);
 if ($2) {
  ___assert_fail((46376|0),(42912|0),43,(46400|0));
  // unreachable;
 }
 $3 = (($this) + 7|0);
 $4 = (($end_time) + -1)|0;
 $5 = (($this) + 56|0);
 $6 = (($this) + 56|0);
 $index$04 = 0;
 while(1) {
  $7 = (($index$04) + 8)|0;
  $8 = (($this) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ((($this) + ($index$04<<3)|0) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = $10 & 15;
   $15 = (42896 + ($14)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = HEAP8[$3>>0]|0;
   $19 = $18&255;
   $20 = $19 >>> $index$04;
   __ZN11Blip_Buffer12set_modifiedEv($12);
   $21 = $20 & 1;
   $22 = $10 & 16;
   $23 = $21 | $22;
   $24 = ($23|0)==(0);
   $$1 = $24 ? $17 : 0;
   $25 = $index$04 << 1;
   $26 = $25 | 1;
   $27 = (($this) + ($26)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $29 << 12;
   $31 = $30 & 61440;
   $32 = (($this) + ($25)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $34 << 4;
   $36 = $31 | $35;
   $37 = ($36>>>0)<(50);
   if ($37) {
    $38 = ($36|0)==(0);
    $$2 = $38 ? 16 : $36;
    $period$0 = $$2;$volume$1 = 0;
   } else {
    $period$0 = $36;$volume$1 = $$1;
   }
   $39 = ((($this) + ($index$04)|0) + 14|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)!=(0);
   $$ = $41 ? $volume$1 : 0;
   $42 = ((($this) + ($index$04<<3)|0) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($$|0)==($43|0);
   if (!($44)) {
    $45 = (($$) - ($43))|0;
    HEAP32[$42>>2] = $$;
    $46 = HEAP32[$0>>2]|0;
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($6,$46,$45,$12);
   }
   $47 = HEAP32[$0>>2]|0;
   $48 = ((($this) + ($index$04<<1)|0) + 18|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   $51 = (($50) + ($47))|0;
   $52 = ($51|0)<($end_time|0);
   do {
    if ($52) {
     $53 = ($volume$1|0)==(0);
     if ($53) {
      $62 = (($4) + ($period$0))|0;
      $63 = (($62) - ($51))|0;
      $64 = (($63>>>0) / ($period$0>>>0))&-1;
      $65 = $64 & 1;
      $66 = HEAP8[$39>>0]|0;
      $67 = $66&255;
      $68 = $67 ^ $65;
      $69 = $68&255;
      HEAP8[$39>>0] = $69;
      $70 = Math_imul($64, $period$0)|0;
      $71 = (($70) + ($51))|0;
      $time$1 = $71;
      break;
     }
     $54 = $$ << 1;
     $55 = (($54) - ($volume$1))|0;
     $delta1$0 = $55;$time$0 = $51;
     while(1) {
      $56 = (0 - ($delta1$0))|0;
      __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($5,$time$0,$56,$12);
      $57 = (($time$0) + ($period$0))|0;
      $58 = ($57|0)<($end_time|0);
      if ($58) {
       $delta1$0 = $56;$time$0 = $57;
      } else {
       $$lcssa = $57;$delta1$0$lcssa = $delta1$0;
       break;
      }
     }
     $59 = (($volume$1) - ($delta1$0$lcssa))|0;
     $60 = $59 >> 1;
     HEAP32[$42>>2] = $60;
     $delta1$0$lobit = $delta1$0$lcssa >>> 31;
     $61 = $delta1$0$lobit&255;
     HEAP8[$39>>0] = $61;
     $time$1 = $$lcssa;
    } else {
     $time$1 = $51;
    }
   } while(0);
   $72 = (($time$1) - ($end_time))|0;
   $73 = $72&65535;
   HEAP16[$48>>1] = $73;
  }
  $74 = (($index$04) + 1)|0;
  $exitcond = ($74|0)==(3);
  if ($exitcond) {
   break;
  } else {
   $index$04 = $74;
  }
 }
 HEAP32[$0>>2] = $end_time;
 return;
}
function __ZN13Nes_Namco_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 232|0);
 __ZN10Blip_SynthILi12ELi15EEC2Ev($0);
 __ZN13Nes_Namco_Apu6outputEP11Blip_Buffer($this,0);
 __ZN13Nes_Namco_Apu6volumeEd($this,1.0);
 __ZN13Nes_Namco_Apu5resetEv($this);
 return;
}
function __ZN13Nes_Namco_Apu6outputEP11Blip_Buffer($this,$buf) {
 $this = $this|0;
 $buf = $buf|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,3,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,4,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,5,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,6,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,7,$buf);
 return;
}
function __ZN13Nes_Namco_Apu5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 96|0);
 _memset(($0|0),0,136)|0;
 HEAP32[$this>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP16[$1>>1] = 0;
 $2 = (($this) + 10|0);
 HEAP16[$2>>1] = 0;
 $3 = (($this) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 20|0);
 HEAP16[$4>>1] = 0;
 $5 = (($this) + 22|0);
 HEAP16[$5>>1] = 0;
 $6 = (($this) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = (($this) + 32|0);
 HEAP16[$7>>1] = 0;
 $8 = (($this) + 34|0);
 HEAP16[$8>>1] = 0;
 $9 = (($this) + 36|0);
 HEAP32[$9>>2] = 0;
 $10 = (($this) + 44|0);
 HEAP16[$10>>1] = 0;
 $11 = (($this) + 46|0);
 HEAP16[$11>>1] = 0;
 $12 = (($this) + 48|0);
 HEAP32[$12>>2] = 0;
 $13 = (($this) + 56|0);
 HEAP16[$13>>1] = 0;
 $14 = (($this) + 58|0);
 HEAP16[$14>>1] = 0;
 $15 = (($this) + 60|0);
 HEAP32[$15>>2] = 0;
 $16 = (($this) + 68|0);
 HEAP16[$16>>1] = 0;
 $17 = (($this) + 70|0);
 HEAP16[$17>>1] = 0;
 $18 = (($this) + 72|0);
 HEAP32[$18>>2] = 0;
 $19 = (($this) + 80|0);
 HEAP16[$19>>1] = 0;
 $20 = (($this) + 82|0);
 HEAP16[$20>>1] = 0;
 $21 = (($this) + 84|0);
 HEAP32[$21>>2] = 0;
 $22 = (($this) + 92|0);
 HEAP16[$22>>1] = 0;
 $23 = (($this) + 94|0);
 HEAP16[$23>>1] = 0;
 return;
}
function __ZN13Nes_Namco_Apu9end_frameEi($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($time|0);
 if ($2) {
  __ZN13Nes_Namco_Apu9run_untilEi($this,$time);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)<($time|0);
 if ($4) {
  ___assert_fail((44376|0),(42960|0),72,(46440|0));
  // unreachable;
 } else {
  $5 = (($3) - ($time))|0;
  HEAP32[$0>>2] = $5;
  return;
 }
}
function __ZN13Nes_Namco_Apu9run_untilEi($this,$nes_end_time) {
 $this = $this|0;
 $nes_end_time = $nes_end_time|0;
 var $$ = 0, $$$lcssa = 0, $$lcssa = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$04 = 0, $last_amp$0 = 0, $last_amp$1 = 0, $last_amp$1$lcssa = 0, $time$0 = 0, $time$1 = 0, $wave_pos$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 231|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 >>> 4;
 $4 = $3 & 7;
 $5 = (($4) + 1)|0;
 $6 = $4 ^ 7;
 $7 = (($this) + 96|0);
 $8 = $5 << 6;
 $9 = (($this) + 232|0);
 $i$04 = $6;
 while(1) {
  $10 = ((($this) + (($i$04*12)|0)|0) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  do {
   if (!($12)) {
    __ZN11Blip_Buffer12set_modifiedEv($11);
    $13 = HEAP32[$7>>2]|0;
    $14 = (__ZNK11Blip_Buffer14resampled_timeEi($11,$13)|0);
    $15 = (($this) + (($i$04*12)|0)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + ($14))|0;
    $18 = (__ZNK11Blip_Buffer14resampled_timeEi($11,$nes_end_time)|0);
    HEAP32[$15>>2] = 0;
    $19 = ($17>>>0)<($18>>>0);
    if ($19) {
     $20 = $i$04 << 3;
     $21 = (($20) + 64)|0;
     $22 = ((($this) + ($21)|0) + 104|0);
     $$sum = (($20) + 68)|0;
     $23 = ((($this) + ($$sum)|0) + 104|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = $25 & 224;
     $27 = ($26|0)==(0);
     if ($27) {
      break;
     }
     $$sum1 = (($20) + 71)|0;
     $28 = ((($this) + ($$sum1)|0) + 104|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&255;
     $31 = $30 & 15;
     $32 = ($31|0)==(0);
     if ($32) {
      break;
     }
     $33 = $25 << 16;
     $34 = $33 & 196608;
     $$sum2 = (($20) + 66)|0;
     $35 = ((($this) + ($$sum2)|0) + 104|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = $37 << 8;
     $39 = $38 | $34;
     $40 = HEAP8[$22>>0]|0;
     $41 = $40&255;
     $42 = $39 | $41;
     $43 = ($42|0)<($8|0);
     if ($43) {
      break;
     }
     $44 = (__ZNK11Blip_Buffer18resampled_durationEi($11,983040)|0);
     $45 = (($44>>>0) / ($42>>>0))&-1;
     $46 = Math_imul($45, $5)|0;
     $47 = $25 & 28;
     $48 = (32 - ($47))|0;
     $49 = ((($this) + (($i$04*12)|0)|0) + 8|0);
     $50 = HEAP16[$49>>1]|0;
     $51 = $50 << 16 >> 16;
     $52 = ((($this) + (($i$04*12)|0)|0) + 10|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = $53 << 16 >> 16;
     $$sum3 = (($20) + 70)|0;
     $55 = ((($this) + ($$sum3)|0) + 104|0);
     $last_amp$0 = $51;$time$0 = $17;$wave_pos$0 = $54;
     while(1) {
      $56 = HEAP8[$55>>0]|0;
      $57 = $56&255;
      $58 = (($57) + ($wave_pos$0))|0;
      $59 = $58 >> 1;
      $60 = ((($this) + ($59)|0) + 104|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61&255;
      $63 = $58 << 2;
      $64 = $63 & 4;
      $65 = $62 >>> $64;
      $66 = (($wave_pos$0) + 1)|0;
      $67 = $65 & 15;
      $68 = Math_imul($67, $31)|0;
      $69 = ($68|0)==($last_amp$0|0);
      if ($69) {
       $last_amp$1 = $last_amp$0;
      } else {
       $70 = (($68) - ($last_amp$0))|0;
       __ZNK10Blip_SynthILi12ELi15EE16offset_resampledEjiP11Blip_Buffer($9,$time$0,$70,$11);
       $last_amp$1 = $68;
      }
      $71 = (($time$0) + ($46))|0;
      $72 = ($66|0)<($48|0);
      $$ = $72 ? $66 : 0;
      $73 = ($71>>>0)<($18>>>0);
      if ($73) {
       $last_amp$0 = $last_amp$1;$time$0 = $71;$wave_pos$0 = $$;
      } else {
       $$$lcssa = $$;$$lcssa = $71;$last_amp$1$lcssa = $last_amp$1;
       break;
      }
     }
     $74 = $$$lcssa&65535;
     HEAP16[$52>>1] = $74;
     $75 = $last_amp$1$lcssa&65535;
     HEAP16[$49>>1] = $75;
     $time$1 = $$lcssa;
    } else {
     $time$1 = $17;
    }
    $76 = (($time$1) - ($18))|0;
    HEAP32[$15>>2] = $76;
   }
  } while(0);
  $77 = (($i$04) + 1)|0;
  $exitcond = ($77|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $i$04 = $77;
  }
 }
 $78 = (($this) + 96|0);
 HEAP32[$78>>2] = $nes_end_time;
 return;
}
function __ZN10Blip_SynthILi12ELi15EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 __ZN11Blip_Synth_C2EPsi($this,$0,12);
 return;
}
function __ZN13Nes_Namco_Apu6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 232|0);
 $1 = $v * 0.012500000000000001;
 __ZN10Blip_SynthILi12ELi15EE6volumeEd($0,$1);
 return;
}
function __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf) {
 $this = $this|0;
 $i = $i|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i>>>0)<(8);
 if ($0) {
  $1 = ((($this) + (($i*12)|0)|0) + 4|0);
  HEAP32[$1>>2] = $buf;
  return;
 } else {
  ___assert_fail((45096|0),(43152|0),92,(46296|0));
  // unreachable;
 }
}
function __ZNK10Blip_SynthILi12ELi15EE16offset_resampledEjiP11Blip_Buffer($this,$time,$delta,$blip_buf) {
 $this = $this|0;
 $time = $time|0;
 $delta = $delta|0;
 $blip_buf = $blip_buf|0;
 var $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1415 = 0, $$sum16 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum2021 = 0, $$sum22 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum2627 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum45 = 0, $$sum6 = 0;
 var $$sum7 = 0, $$sum8 = 0, $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $time >>> 16;
 $1 = (($blip_buf) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)<($2|0);
 if ($3) {
  $4 = (($this) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = Math_imul($5, $delta)|0;
  $7 = (($blip_buf) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $time >>> 10;
  $10 = $9 & 63;
  $$sum = (64 - ($10))|0;
  $11 = ((($this) + ($$sum<<1)|0) + 40|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = Math_imul($13, $6)|0;
  $$sum1 = (($0) + 2)|0;
  $15 = (($8) + ($$sum1<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + ($16))|0;
  $$sum2 = (($$sum) + 64)|0;
  $18 = ((($this) + ($$sum2<<1)|0) + 40|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = Math_imul($20, $6)|0;
  $$sum3 = (($0) + 3)|0;
  $22 = (($8) + ($$sum3<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23))|0;
  $$sum45 = $$sum | 128;
  $25 = ((($this) + ($$sum45<<1)|0) + 40|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  HEAP32[$15>>2] = $17;
  HEAP32[$22>>2] = $24;
  $28 = Math_imul($27, $6)|0;
  $$sum6 = (($0) + 4)|0;
  $29 = (($8) + ($$sum6<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + ($30))|0;
  $$sum7 = (($$sum) + 192)|0;
  $32 = ((($this) + ($$sum7<<1)|0) + 40|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = Math_imul($34, $6)|0;
  $$sum8 = (($0) + 5)|0;
  $36 = (($8) + ($$sum8<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + ($37))|0;
  $$sum910 = $$sum | 256;
  $39 = ((($this) + ($$sum910<<1)|0) + 40|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  HEAP32[$29>>2] = $31;
  HEAP32[$36>>2] = $38;
  $42 = Math_imul($41, $6)|0;
  $$sum11 = (($0) + 6)|0;
  $43 = (($8) + ($$sum11<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($42) + ($44))|0;
  $$sum12 = (($$sum) + 320)|0;
  $46 = ((($this) + ($$sum12<<1)|0) + 40|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = Math_imul($48, $6)|0;
  $$sum13 = (($0) + 7)|0;
  $50 = (($8) + ($$sum13<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51))|0;
  $53 = ((($this) + ($10<<1)|0) + 40|0);
  $$sum1415 = $10 | 320;
  $54 = ((($this) + ($$sum1415<<1)|0) + 40|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  HEAP32[$43>>2] = $45;
  HEAP32[$50>>2] = $52;
  $57 = Math_imul($56, $6)|0;
  $$sum16 = (($0) + 8)|0;
  $58 = (($8) + ($$sum16<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + ($59))|0;
  $$sum1718 = $10 | 256;
  $61 = ((($this) + ($$sum1718<<1)|0) + 40|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 << 16 >> 16;
  $64 = Math_imul($63, $6)|0;
  $$sum19 = (($0) + 9)|0;
  $65 = (($8) + ($$sum19<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + ($66))|0;
  $$sum2021 = $10 | 192;
  $68 = ((($this) + ($$sum2021<<1)|0) + 40|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  HEAP32[$58>>2] = $60;
  HEAP32[$65>>2] = $67;
  $71 = Math_imul($70, $6)|0;
  $$sum22 = (($0) + 10)|0;
  $72 = (($8) + ($$sum22<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + ($73))|0;
  $$sum2324 = $10 | 128;
  $75 = ((($this) + ($$sum2324<<1)|0) + 40|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = Math_imul($77, $6)|0;
  $$sum25 = (($0) + 11)|0;
  $79 = (($8) + ($$sum25<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + ($80))|0;
  $$sum2627 = $10 | 64;
  $82 = ((($this) + ($$sum2627<<1)|0) + 40|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  HEAP32[$72>>2] = $74;
  HEAP32[$79>>2] = $81;
  $85 = Math_imul($84, $6)|0;
  $$sum28 = (($0) + 12)|0;
  $86 = (($8) + ($$sum28<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) + ($87))|0;
  $89 = HEAP16[$53>>1]|0;
  $90 = $89 << 16 >> 16;
  $91 = Math_imul($90, $6)|0;
  $$sum29 = (($0) + 13)|0;
  $92 = (($8) + ($$sum29<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + ($93))|0;
  HEAP32[$86>>2] = $88;
  HEAP32[$92>>2] = $94;
  return;
 } else {
  ___assert_fail((43008|0),(43080|0),343,(43128|0));
  // unreachable;
 }
}
function __ZN10Blip_SynthILi12ELi15EE6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $v * 0.066666666666666666;
 __ZN11Blip_Synth_11volume_unitEd($this,$0);
 return;
}
function __ZN7Nes_Osc12clock_lengthEi($this,$halt_mask) {
 $this = $this|0;
 $halt_mask = $halt_mask|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = HEAP8[$this>>0]|0;
 $4 = $3&255;
 $5 = $4 & $halt_mask;
 $6 = ($5|0)==(0);
 if (!($6)) {
  return;
 }
 $7 = (($1) + -1)|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZN12Nes_Envelope14clock_envelopeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0&255;
 $2 = $1 & 15;
 $3 = (($this) + 7|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  HEAP8[$3>>0] = 0;
  $6 = (($this) + 28|0);
  HEAP32[$6>>2] = $2;
  $7 = (($this) + 24|0);
  HEAP32[$7>>2] = 15;
  return;
 }
 $8 = (($this) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[$8>>2] = $10;
 $11 = ($9|0)<(1);
 if (!($11)) {
  return;
 }
 HEAP32[$8>>2] = $2;
 $12 = (($this) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP8[$this>>0]|0;
 $15 = $14&255;
 $16 = $15 & 32;
 $17 = $16 | $13;
 $18 = ($17|0)==(0);
 if ($18) {
  return;
 }
 $19 = (($13) + 15)|0;
 $20 = $19 & 15;
 HEAP32[$12>>2] = $20;
 return;
}
function __ZNK12Nes_Envelope6volumeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $10 = 0;
  return ($10|0);
 }
 $3 = HEAP8[$this>>0]|0;
 $4 = $3&255;
 $5 = $4 & 16;
 $6 = ($5|0)==(0);
 if ($6) {
  $8 = (($this) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
  return ($10|0);
 } else {
  $7 = $4 & 15;
  $10 = $7;
  return ($10|0);
 }
 return (0)|0;
}
function __ZN10Nes_Square11clock_sweepEi($this,$negative_adjust) {
 $this = $this|0;
 $negative_adjust = $negative_adjust|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($this) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = ($4|0)<(1);
 if ($6) {
  $7 = (($this) + 5|0);
  HEAP8[$7>>0] = 1;
  $8 = (__ZNK7Nes_Osc6periodEv($this)|0);
  $9 = $2 & 7;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = $2 & 128;
   $12 = ($11|0)!=(0);
   $13 = ($8|0)>(7);
   $or$cond = $12 & $13;
   if ($or$cond) {
    $14 = $8 >> $9;
    $15 = $2 & 8;
    $16 = ($15|0)==(0);
    $17 = (($negative_adjust) - ($14))|0;
    $$ = $16 ? $14 : $17;
    $18 = (($$) + ($8))|0;
    $19 = ($18|0)<(2048);
    if ($19) {
     $20 = $18&255;
     $21 = (($this) + 2|0);
     HEAP8[$21>>0] = $20;
     $22 = (($this) + 3|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23&255;
     $25 = $24 & 248;
     $26 = $18 >>> 8;
     $27 = $26 & 7;
     $28 = $25 | $27;
     $29 = $28&255;
     HEAP8[$22>>0] = $29;
    }
   }
  }
 }
 $30 = (($this) + 5|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)==(0);
 if ($32) {
  return;
 }
 HEAP8[$30>>0] = 0;
 $33 = $2 >>> 4;
 $34 = $33 & 7;
 HEAP32[$3>>2] = $34;
 return;
}
function __ZN10Nes_Square3runEii($this,$time,$end_time) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $amp$1 = 0, $delta1$0 = 0, $delta1$1 = 0;
 var $delta1$1$lcssa = 0, $or$cond = 0, $or$cond4 = 0, $phase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK7Nes_Osc6periodEv($this)|0);
 $1 = $0 << 1;
 $2 = (($1) + 2)|0;
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (($this) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($time))|0;
  $9 = (__ZN10Nes_Square14maintain_phaseEiii($this,$8,$end_time,$2)|0);
  $10 = (($9) - ($end_time))|0;
  HEAP32[$6>>2] = $10;
  return;
 }
 __ZN11Blip_Buffer12set_modifiedEv($4);
 $11 = (($this) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (__ZNK12Nes_Envelope6volumeEv($this)|0);
 $15 = ($14|0)==(0);
 $16 = ($0|0)<(8);
 $or$cond = $15 | $16;
 if ($or$cond) {
  label = 5;
 } else {
  $17 = $13 & 8;
  $18 = ($17|0)!=(0);
  $19 = $13 & 7;
  $20 = $0 >> $19;
  $$ = $18 ? 0 : $20;
  $21 = (($$) + ($0))|0;
  $22 = ($21|0)>(2047);
  if ($22) {
   label = 5;
  } else {
   $34 = HEAP8[$this>>0]|0;
   $35 = $34&255;
   $36 = $35 >>> 6;
   $37 = 1 << $36;
   $38 = ($36|0)==(3);
   $$2 = $38 ? $14 : 0;
   $$3 = $38 ? 2 : $37;
   $39 = (($this) + 32|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)<($$3|0);
   $42 = $41 ? $14 : 0;
   $amp$1 = $42 ^ $$2;
   $43 = (__ZN7Nes_Osc10update_ampEi($this,$amp$1)|0);
   $44 = ($43|0)==(0);
   if (!($44)) {
    $45 = (($this) + 40|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[$3>>2]|0;
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($46,$time,$43,$47);
   }
   $48 = (($this) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($time))|0;
   $51 = ($50|0)<($end_time|0);
   if ($51) {
    $52 = HEAP32[$3>>2]|0;
    $53 = (($this) + 40|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $amp$1 << 1;
    $56 = (($55) - ($14))|0;
    $57 = HEAP32[$39>>2]|0;
    $$0 = $50;$delta1$0 = $56;$phase$0 = $57;
    while(1) {
     $58 = (($phase$0) + 1)|0;
     $59 = $58 & 7;
     $60 = ($59|0)==(0);
     $61 = ($59|0)==($$3|0);
     $or$cond4 = $60 | $61;
     if ($or$cond4) {
      $62 = (0 - ($delta1$0))|0;
      __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($54,$$0,$62,$52);
      $delta1$1 = $62;
     } else {
      $delta1$1 = $delta1$0;
     }
     $63 = (($$0) + ($2))|0;
     $64 = ($63|0)<($end_time|0);
     if ($64) {
      $$0 = $63;$delta1$0 = $delta1$1;$phase$0 = $59;
     } else {
      $$lcssa = $59;$$lcssa7 = $63;$delta1$1$lcssa = $delta1$1;
      break;
     }
    }
    $65 = (($delta1$1$lcssa) + ($14))|0;
    $66 = $65 >> 1;
    $67 = (($this) + 20|0);
    HEAP32[$67>>2] = $66;
    HEAP32[$39>>2] = $$lcssa;
    $$1 = $$lcssa7;
   } else {
    $$1 = $50;
   }
  }
 }
 if ((label|0) == 5) {
  $23 = (($this) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if (!($25)) {
   $26 = (($this) + 40|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (0 - ($24))|0;
   $29 = HEAP32[$3>>2]|0;
   __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($27,$time,$28,$29);
   HEAP32[$23>>2] = 0;
  }
  $30 = (($this) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($time))|0;
  $33 = (__ZN10Nes_Square14maintain_phaseEiii($this,$32,$end_time,$2)|0);
  $$1 = $33;
 }
 $68 = (($$1) - ($end_time))|0;
 $69 = (($this) + 16|0);
 HEAP32[$69>>2] = $68;
 return;
}
function __ZN12Nes_Triangle20clock_linear_counterEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 7|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($this) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = (($8) + -1)|0;
   HEAP32[$7>>2] = $10;
  }
 } else {
  $3 = HEAP8[$this>>0]|0;
  $4 = $3&255;
  $5 = $4 & 127;
  $6 = (($this) + 28|0);
  HEAP32[$6>>2] = $5;
 }
 $11 = HEAP8[$this>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  return;
 }
 HEAP8[$0>>0] = 0;
 return;
}
function __ZN12Nes_Triangle3runEii($this,$time,$end_time) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$4 = 0, $$lcssa = 0, $$phase$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $phase$0 = 0, $phase$1 = 0, $phase$1$lcssa = 0;
 var $volume$0 = 0, $volume$1 = 0, $volume$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK7Nes_Osc6periodEv($this)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (($this) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($time))|0;
  HEAP32[$5>>2] = 0;
  $8 = (($this) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   return;
  }
  $11 = (($this) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0);
  $14 = ($0|0)>(1);
  $or$cond = $13 & $14;
  if (!($or$cond)) {
   return;
  }
  $15 = (__ZN12Nes_Triangle14maintain_phaseEiii($this,$7,$end_time,$1)|0);
  $16 = (($15) - ($end_time))|0;
  HEAP32[$5>>2] = $16;
  return;
 }
 __ZN11Blip_Buffer12set_modifiedEv($3);
 $17 = (__ZNK12Nes_Triangle8calc_ampEv($this)|0);
 $18 = (__ZN7Nes_Osc10update_ampEi($this,$17)|0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  $20 = (($this) + 32|0);
  $21 = HEAP32[$2>>2]|0;
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($20,$time,$18,$21);
 }
 $22 = (($this) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($time))|0;
 $25 = (($this) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  $$1 = $end_time;
 } else {
  $28 = (($this) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  $31 = ($1|0)<(3);
  $or$cond3 = $30 | $31;
  if ($or$cond3) {
   $$1 = $end_time;
  } else {
   $32 = ($24|0)<($end_time|0);
   if ($32) {
    $33 = HEAP32[$2>>2]|0;
    $34 = (($this) + 24|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)>(16);
    $37 = (($35) + -16)|0;
    $$ = $36 ? $37 : $35;
    $$4 = $36 ? -1 : 1;
    $38 = (($this) + 32|0);
    $$0 = $24;$phase$0 = $$;$volume$0 = $$4;
    while(1) {
     $39 = (($phase$0) + -1)|0;
     $40 = ($39|0)==(0);
     if ($40) {
      $41 = (0 - ($volume$0))|0;
      $phase$1 = 16;$volume$1 = $41;
     } else {
      __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($38,$$0,$volume$0,$33);
      $phase$1 = $39;$volume$1 = $volume$0;
     }
     $42 = (($$0) + ($1))|0;
     $43 = ($42|0)<($end_time|0);
     if ($43) {
      $$0 = $42;$phase$0 = $phase$1;$volume$0 = $volume$1;
     } else {
      $$lcssa = $42;$phase$1$lcssa = $phase$1;$volume$1$lcssa = $volume$1;
      break;
     }
    }
    $44 = ($volume$1$lcssa|0)<(0);
    $45 = (($phase$1$lcssa) + 16)|0;
    $$phase$1 = $44 ? $45 : $phase$1$lcssa;
    HEAP32[$34>>2] = $$phase$1;
    $46 = (__ZNK12Nes_Triangle8calc_ampEv($this)|0);
    $47 = (($this) + 20|0);
    HEAP32[$47>>2] = $46;
    $$1 = $$lcssa;
   } else {
    $$1 = $24;
   }
  }
 }
 $48 = (($$1) - ($end_time))|0;
 HEAP32[$22>>2] = $48;
 return;
}
function __ZN7Nes_Dmc5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 48|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 32|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 36|0);
 HEAP32[$3>>2] = 1;
 $4 = (($this) + 40|0);
 HEAP32[$4>>2] = 0;
 $5 = (($this) + 44|0);
 HEAP8[$5>>0] = 0;
 $6 = (($this) + 45|0);
 HEAP8[$6>>0] = 1;
 $7 = (($this) + 52|0);
 HEAP32[$7>>2] = 1073741824;
 $8 = (($this) + 57|0);
 HEAP8[$8>>0] = 0;
 $9 = (($this) + 56|0);
 HEAP8[$9>>0] = 0;
 __ZN7Nes_Osc5resetEv($this);
 $10 = (($this) + 28|0);
 HEAP32[$10>>2] = 428;
 return;
}
function __ZN7Nes_Dmc10recalc_irqEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 56|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $irq$0 = 1073741824;
 } else {
  $3 = (($this) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $irq$0 = 1073741824;
  } else {
   $6 = (($this) + 68|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + 1948|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($this) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $4 << 3;
   $13 = (($this) + 36|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + -9)|0;
   $16 = (($15) + ($14))|0;
   $17 = (($this) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = Math_imul($16, $18)|0;
   $20 = (($9) + 1)|0;
   $21 = (($20) + ($11))|0;
   $22 = (($21) + ($19))|0;
   $irq$0 = $22;
  }
 }
 $23 = (($this) + 52|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($irq$0|0)==($24|0);
 if ($25) {
  return;
 }
 HEAP32[$23>>2] = $irq$0;
 $26 = (($this) + 68|0);
 $27 = HEAP32[$26>>2]|0;
 __ZN7Nes_Apu11irq_changedEv($27);
 return;
}
function __ZN7Nes_Dmc14write_registerEii($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($addr|0) == 1)) {
  $18 = (($this) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $data & 127;
  HEAP32[$18>>2] = $20;
  $21 = (($this) + 59|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if (!($23)) {
   return;
  }
  $24 = (43264 + ($20)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (43264 + ($19)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (($20) - ($26))|0;
  $31 = (($30) + ($29))|0;
  $32 = (($this) + 20|0);
  HEAP32[$32>>2] = $31;
  return;
 } else if ((($addr|0) == 0)) {
  $0 = $data & 15;
  $1 = (($this) + 58|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ((43200 + ($3<<5)|0) + ($0<<1)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  $7 = (($this) + 28|0);
  HEAP32[$7>>2] = $6;
  $8 = $data & 192;
  $9 = ($8|0)==(128);
  $10 = (($this) + 56|0);
  $11 = $9&1;
  HEAP8[$10>>0] = $11;
  $12 = $9&1;
  $13 = (($this) + 57|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15 & $12;
  $17 = $16&255;
  HEAP8[$13>>0] = $17;
  __ZN7Nes_Dmc10recalc_irqEv($this);
  return;
 } else {
  return;
 }
}
function __ZN7Nes_Dmc5startEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Nes_Dmc13reload_sampleEv($this);
 __ZN7Nes_Dmc11fill_bufferEv($this);
 __ZN7Nes_Dmc10recalc_irqEv($this);
 return;
}
function __ZN7Nes_Dmc11fill_bufferEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  return;
 }
 $3 = (($this) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $6 = (($this) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  ___assert_fail((43392|0),(43408|0),380,(43456|0));
  // unreachable;
 }
 $9 = (($this) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($this) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 32768)|0;
 $14 = (FUNCTION_TABLE_iii[$7 & 63]($10,$13)|0);
 $15 = (($this) + 32|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$11>>2]|0;
 $17 = (($16) + 1)|0;
 $18 = $17 & 32767;
 HEAP32[$11>>2] = $18;
 HEAP8[$0>>0] = 1;
 $19 = HEAP32[$3>>2]|0;
 $20 = (($19) + -1)|0;
 HEAP32[$3>>2] = $20;
 $21 = ($20|0)==(0);
 if (!($21)) {
  return;
 }
 $22 = HEAP8[$this>>0]|0;
 $23 = $22 & 64;
 $24 = ($23<<24>>24)==(0);
 if ($24) {
  $25 = (($this) + 68|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1972|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & -17;
  HEAP32[$27>>2] = $29;
  $30 = (($this) + 56|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = (($this) + 57|0);
  HEAP8[$32>>0] = $31;
  $33 = (($this) + 52|0);
  HEAP32[$33>>2] = 1073741824;
  $34 = HEAP32[$25>>2]|0;
  __ZN7Nes_Apu11irq_changedEv($34);
  return;
 } else {
  __ZN7Nes_Dmc13reload_sampleEv($this);
  return;
 }
}
function __ZN7Nes_Dmc3runEii($this,$time,$end_time) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $bits$0 = 0, $bits$1 = 0, $bits$2 = 0, $bits$2$lcssa = 0, $bits_remain$0 = 0, $bits_remain$1 = 0, $bits_remain$1$lcssa = 0, $bits_remain$2 = 0, $dac$0 = 0, $dac$1 = 0, $dac$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN7Nes_Osc10update_ampEi($this,$1)|0);
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (($this) + 45|0);
  HEAP8[$6>>0] = 1;
 } else {
  __ZN11Blip_Buffer12set_modifiedEv($4);
  $7 = ($2|0)==(0);
  if (!($7)) {
   $8 = (($this) + 72|0);
   $9 = HEAP32[$3>>2]|0;
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($8,$time,$2,$9);
  }
 }
 $10 = (($this) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($time))|0;
 $13 = ($12|0)<($end_time|0);
 if (!($13)) {
  $$2 = $12;
  $61 = (($$2) - ($end_time))|0;
  HEAP32[$10>>2] = $61;
  return;
 }
 $14 = (($this) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($this) + 45|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  label = 9;
 } else {
  $19 = (($this) + 44|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20<<24>>24)==(0);
  if ($21) {
   $22 = (($this) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($end_time) + -1)|0;
   $25 = (($24) - ($12))|0;
   $26 = (($25) + ($23))|0;
   $27 = (($26|0) / ($23|0))&-1;
   $28 = (($15) + 7)|0;
   $29 = (($27|0) % 8)&-1;
   $30 = (($28) - ($29))|0;
   $31 = (($30|0) % 8)&-1;
   $32 = (($31) + 1)|0;
   $33 = Math_imul($27, $23)|0;
   $34 = (($33) + ($12))|0;
   $$1 = $34;$bits_remain$2 = $32;
  } else {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $35 = HEAP32[$3>>2]|0;
  $36 = (($this) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($this) + 40|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$0>>2]|0;
  $41 = (($this) + 72|0);
  $42 = (($this) + 44|0);
  $43 = (($this) + 32|0);
  $44 = ($35|0)==(0|0);
  $$0 = $12;$bits$0 = $39;$bits_remain$0 = $15;$dac$0 = $40;
  while(1) {
   $45 = HEAP8[$16>>0]|0;
   $46 = ($45<<24>>24)==(0);
   if ($46) {
    $47 = $bits$0 << 2;
    $48 = $47 & 4;
    $49 = (($48) + -2)|0;
    $50 = $bits$0 >> 1;
    $51 = (($49) + ($dac$0))|0;
    $52 = ($51>>>0)<(128);
    if ($52) {
     __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($41,$$0,$49,$35);
     $bits$1 = $50;$dac$1 = $51;
    } else {
     $bits$1 = $50;$dac$1 = $dac$0;
    }
   } else {
    $bits$1 = $bits$0;$dac$1 = $dac$0;
   }
   $53 = (($$0) + ($37))|0;
   $54 = (($bits_remain$0) + -1)|0;
   $55 = ($54|0)==(0);
   do {
    if ($55) {
     $56 = HEAP8[$42>>0]|0;
     $57 = ($56<<24>>24)==(0);
     if ($57) {
      HEAP8[$16>>0] = 1;
      $bits$2 = $bits$1;$bits_remain$1 = 8;
      break;
     }
     HEAP8[$16>>0] = 0;
     $58 = HEAP32[$43>>2]|0;
     HEAP8[$42>>0] = 0;
     if ($44) {
      HEAP8[$16>>0] = 1;
     }
     __ZN7Nes_Dmc11fill_bufferEv($this);
     $bits$2 = $58;$bits_remain$1 = 8;
    } else {
     $bits$2 = $bits$1;$bits_remain$1 = $54;
    }
   } while(0);
   $59 = ($53|0)<($end_time|0);
   if ($59) {
    $$0 = $53;$bits$0 = $bits$2;$bits_remain$0 = $bits_remain$1;$dac$0 = $dac$1;
   } else {
    $$lcssa = $53;$bits$2$lcssa = $bits$2;$bits_remain$1$lcssa = $bits_remain$1;$dac$1$lcssa = $dac$1;
    break;
   }
  }
  HEAP32[$0>>2] = $dac$1$lcssa;
  $60 = (($this) + 20|0);
  HEAP32[$60>>2] = $dac$1$lcssa;
  HEAP32[$38>>2] = $bits$2$lcssa;
  $$1 = $$lcssa;$bits_remain$2 = $bits_remain$1$lcssa;
 }
 HEAP32[$14>>2] = $bits_remain$2;
 $$2 = $$1;
 $61 = (($$2) - ($end_time))|0;
 HEAP32[$10>>2] = $61;
 return;
}
function __ZN9Nes_Noise3runEii($this,$time,$end_time) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 var $$0 = 0, $$1 = 0, $$lcssa = 0, $$lcssa5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $delta1$0 = 0, $delta1$1 = 0, $delta1$1$lcssa = 0, $noise$0 = 0, $rtime$0 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 15;
 $4 = (43472 + ($3<<1)|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = (($this) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (($this) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($time))|0;
  $13 = (($end_time) + -1)|0;
  $14 = (($13) + ($6))|0;
  $15 = (($14) - ($12))|0;
  $16 = (($15|0) % ($6|0))&-1;
  $sum = (($16) + ($end_time))|0;
  $17 = (($12) - ($sum))|0;
  $18 = (($17) + ($15))|0;
  HEAP32[$10>>2] = $18;
  return;
 }
 __ZN11Blip_Buffer12set_modifiedEv($8);
 $19 = (__ZNK12Nes_Envelope6volumeEv($this)|0);
 $20 = (($this) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 1;
 $23 = ($22|0)!=(0);
 $24 = $23 ? $19 : 0;
 $25 = (__ZN7Nes_Osc10update_ampEi($this,$24)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($this) + 40|0);
  $28 = HEAP32[$7>>2]|0;
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($27,$time,$25,$28);
 }
 $29 = (($this) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($time))|0;
 $32 = ($31|0)<($end_time|0);
 do {
  if ($32) {
   $33 = ($19|0)==(0);
   if ($33) {
    $34 = (($end_time) + -1)|0;
    $35 = (($34) + ($6))|0;
    $36 = (($35) - ($31))|0;
    $37 = (($36|0) % ($6|0))&-1;
    $38 = (($36) - ($37))|0;
    $39 = (($38) + ($31))|0;
    $40 = HEAP8[$0>>0]|0;
    $41 = ($40<<24>>24)<(0);
    if ($41) {
     $$1 = $39;
     break;
    }
    $42 = HEAP32[$20>>2]|0;
    $43 = $42 << 13;
    $44 = $42 << 14;
    $45 = $43 ^ $44;
    $46 = $45 & 16384;
    $47 = $42 >> 1;
    $48 = $46 | $47;
    HEAP32[$20>>2] = $48;
    $$1 = $39;
    break;
   }
   $49 = HEAP32[$7>>2]|0;
   $50 = (__ZNK11Blip_Buffer18resampled_durationEi($49,$6)|0);
   $51 = (__ZNK11Blip_Buffer14resampled_timeEi($49,$31)|0);
   $52 = HEAP32[$20>>2]|0;
   $53 = $24 << 1;
   $54 = (($53) - ($19))|0;
   $55 = HEAP8[$0>>0]|0;
   $56 = ($55<<24>>24)<(0);
   $57 = $56 ? 8 : 13;
   $58 = (($this) + 40|0);
   $$0 = $31;$delta1$0 = $54;$noise$0 = $52;$rtime$0 = $51;
   while(1) {
    $59 = $noise$0 << $57;
    $60 = $noise$0 << 14;
    $61 = $59 ^ $60;
    $62 = (($$0) + ($6))|0;
    $63 = (($noise$0) + 1)|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $delta1$1 = $delta1$0;
    } else {
     $66 = (0 - ($delta1$0))|0;
     __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($58,$rtime$0,$66,$49);
     $delta1$1 = $66;
    }
    $67 = (($rtime$0) + ($50))|0;
    $68 = $61 & 16384;
    $69 = $noise$0 >> 1;
    $70 = $68 | $69;
    $71 = ($62|0)<($end_time|0);
    if ($71) {
     $$0 = $62;$delta1$0 = $delta1$1;$noise$0 = $70;$rtime$0 = $67;
    } else {
     $$lcssa = $62;$$lcssa5 = $70;$delta1$1$lcssa = $delta1$1;
     break;
    }
   }
   $72 = (($delta1$1$lcssa) + ($19))|0;
   $73 = $72 >> 1;
   $74 = (($this) + 20|0);
   HEAP32[$74>>2] = $73;
   HEAP32[$20>>2] = $$lcssa5;
   $$1 = $$lcssa;
  } else {
   $$1 = $31;
  }
 } while(0);
 $75 = (($$1) - ($end_time))|0;
 HEAP32[$29>>2] = $75;
 return;
}
function __ZNK7Nes_Osc6periodEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 3|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = $3 & 1792;
 $5 = (($this) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 return ($8|0);
}
function __ZN10Nes_Square14maintain_phaseEiii($this,$time,$end_time,$timer_period) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 $timer_period = $timer_period|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($end_time) - ($time))|0;
 $1 = ($0|0)>(0);
 if (!($1)) {
  $$0 = $time;
  return ($$0|0);
 }
 $2 = (($timer_period) + -1)|0;
 $3 = (($2) + ($0))|0;
 $4 = (($3|0) / ($timer_period|0))&-1;
 $5 = (($this) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 $8 = $7 & 7;
 HEAP32[$5>>2] = $8;
 $9 = Math_imul($4, $timer_period)|0;
 $10 = (($9) + ($time))|0;
 $$0 = $10;
 return ($$0|0);
}
function __ZN7Nes_Osc10update_ampEi($this,$amp) {
 $this = $this|0;
 $amp = $amp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($amp) - ($1))|0;
 HEAP32[$0>>2] = $amp;
 return ($2|0);
}
function __ZN12Nes_Triangle14maintain_phaseEiii($this,$time,$end_time,$timer_period) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 $timer_period = $timer_period|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($end_time) - ($time))|0;
 $1 = ($0|0)>(0);
 if (!($1)) {
  $$0 = $time;
  return ($$0|0);
 }
 $2 = (($timer_period) + -1)|0;
 $3 = (($2) + ($0))|0;
 $4 = (($3|0) / ($timer_period|0))&-1;
 $5 = (($this) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (1 - ($4))|0;
 $8 = (($7) + ($6))|0;
 $9 = $8 & 31;
 $10 = (($9) + 1)|0;
 HEAP32[$5>>2] = $10;
 $11 = Math_imul($4, $timer_period)|0;
 $12 = (($11) + ($time))|0;
 $$0 = $12;
 return ($$0|0);
}
function __ZNK12Nes_Triangle8calc_ampEv($this) {
 $this = $this|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (16 - ($1))|0;
 $3 = ($2|0)<(0);
 $4 = (($1) + -17)|0;
 $$ = $3 ? $4 : $2;
 return ($$|0);
}
function __ZN7Nes_Dmc13reload_sampleEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 6;
 $4 = $3 | 16384;
 $5 = (($this) + 24|0);
 HEAP32[$5>>2] = $4;
 $6 = (($this) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 4;
 $10 = $9 | 1;
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZN12Nes_Vrc6_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 80|0);
 __ZN10Blip_SynthILi8ELi1EEC2Ev($0);
 $1 = (($this) + 640|0);
 __ZN10Blip_SynthILi12ELi1EEC2Ev($1);
 __ZN12Nes_Vrc6_Apu6outputEP11Blip_Buffer($this,0);
 __ZN12Nes_Vrc6_Apu6volumeEd($this,1.0);
 __ZN12Nes_Vrc6_Apu5resetEv($this);
 return;
}
function __ZN12Nes_Vrc6_Apu6outputEP11Blip_Buffer($this,$buf) {
 $this = $this|0;
 $buf = $buf|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
 __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
 __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
 return;
}
function __ZN12Nes_Vrc6_Apu5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 72|0);
 HEAP32[$0>>2] = 0;
 ;HEAP8[$this+0>>0]=0|0;HEAP8[$this+1>>0]=0|0;HEAP8[$this+2>>0]=0|0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 16|0);
 HEAP32[$3>>2] = 1;
 $4 = (($this) + 20|0);
 ;HEAP32[$4+0>>2]=0|0;HEAP16[$4+4>>1]=0|0;HEAP8[$4+6>>0]=0|0;
 $5 = (($this) + 32|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 36|0);
 HEAP32[$6>>2] = 0;
 $7 = (($this) + 40|0);
 HEAP32[$7>>2] = 1;
 $8 = (($this) + 44|0);
 ;HEAP32[$8+0>>2]=0|0;HEAP16[$8+4>>1]=0|0;HEAP8[$8+6>>0]=0|0;
 $9 = (($this) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = (($this) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = (($this) + 64|0);
 HEAP32[$11>>2] = 1;
 $12 = (($this) + 68|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZN12Nes_Vrc6_Apu9run_untilEi($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($time|0);
 if ($2) {
  ___assert_fail((43504|0),(43528|0),48,(46400|0));
  // unreachable;
 } else {
  __ZN12Nes_Vrc6_Apu10run_squareERNS_8Vrc6_OscEi($this,$this,$time);
  $3 = (($this) + 24|0);
  __ZN12Nes_Vrc6_Apu10run_squareERNS_8Vrc6_OscEi($this,$3,$time);
  __ZN12Nes_Vrc6_Apu7run_sawEi($this,$time);
  HEAP32[$0>>2] = $time;
  return;
 }
}
function __ZN12Nes_Vrc6_Apu10run_squareERNS_8Vrc6_OscEi($this,$osc,$end_time) {
 $this = $this|0;
 $osc = $osc|0;
 $end_time = $end_time|0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $phase$0 = 0, $phase$14 = 0, $phase$14$lcssa = 0, $time$0 = 0, $time$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($osc) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 __ZN11Blip_Buffer12set_modifiedEv($1);
 $3 = HEAP8[$osc>>0]|0;
 $4 = $3&255;
 $5 = $4 & 15;
 $6 = (($osc) + 2|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 $$ = $8 ? $5 : 0;
 $9 = $4 & 128;
 $10 = $4 >>> 4;
 $11 = $10 & 7;
 $12 = (($11) + 1)|0;
 $13 = ($9|0)!=(0);
 if ($13) {
  label = 4;
 } else {
  $14 = (($osc) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)<($12|0);
  if ($16) {
   label = 4;
  } else {
   $22 = 0;
  }
 }
 if ((label|0) == 4) {
  $22 = $$;
 }
 $17 = (($osc) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($this) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($22|0)==($18|0);
 if (!($21)) {
  $23 = (($22) - ($18))|0;
  HEAP32[$17>>2] = $22;
  $24 = (($this) + 640|0);
  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($24,$20,$23,$1);
 }
 $25 = (($osc) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($20))|0;
 HEAP32[$25>>2] = 0;
 $28 = (__ZNK12Nes_Vrc6_Apu8Vrc6_Osc6periodEv($osc)|0);
 $29 = ($$|0)==(0);
 $or$cond = $29 | $13;
 $or$cond$not = $or$cond ^ 1;
 $30 = ($28|0)>(4);
 $or$cond3 = $30 & $or$cond$not;
 if (!($or$cond3)) {
  return;
 }
 $31 = ($27|0)<($end_time|0);
 if ($31) {
  $32 = (($osc) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($this) + 640|0);
  $35 = (($this) + 640|0);
  $36 = (0 - ($$))|0;
  $phase$0 = $33;$time$0 = $27;
  while(1) {
   $37 = (($phase$0) + 1)|0;
   $38 = ($37|0)==(16);
   if ($38) {
    HEAP32[$17>>2] = $$;
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($34,$time$0,$$,$1);
    $phase$14 = 0;
   } else {
    $39 = ($37|0)==($12|0);
    if ($39) {
     HEAP32[$17>>2] = 0;
     __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($35,$time$0,$36,$1);
     $phase$14 = $37;
    } else {
     $phase$14 = $37;
    }
   }
   $40 = (($time$0) + ($28))|0;
   $41 = ($40|0)<($end_time|0);
   if ($41) {
    $phase$0 = $phase$14;$time$0 = $40;
   } else {
    $$lcssa = $40;$phase$14$lcssa = $phase$14;
    break;
   }
  }
  HEAP32[$32>>2] = $phase$14$lcssa;
  $time$1 = $$lcssa;
 } else {
  $time$1 = $27;
 }
 $42 = (($time$1) - ($end_time))|0;
 HEAP32[$25>>2] = $42;
 return;
}
function __ZN12Nes_Vrc6_Apu7run_sawEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$ = 0, $$$lcssa = 0, $$amp$0 = 0, $$lcssa = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $amp$0 = 0, $last_amp$0 = 0, $last_amp$1 = 0, $last_amp$1$lcssa = 0, $last_amp$2 = 0, $last_amp$3 = 0, $or$cond = 0, $phase$0 = 0, $time$0 = 0, $time$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = (($this) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 __ZN11Blip_Buffer12set_modifiedEv($2);
 $4 = (($this) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP8[$0>>0]|0;
 $7 = $6&255;
 $8 = $7 & 63;
 $9 = (($this) + 72|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($this) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($this) + 50|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)>(-1);
 $16 = $8 | $5;
 $17 = ($16|0)==(0);
 $or$cond = $15 | $17;
 $18 = (($this) + 56|0);
 if ($or$cond) {
  HEAP32[$18>>2] = 0;
  $19 = $5 >> 3;
  $20 = (($19) - ($12))|0;
  $21 = (($this) + 80|0);
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($21,$10,$20,$2);
  $last_amp$3 = $19;
 } else {
  $22 = HEAP32[$18>>2]|0;
  $23 = (($22) + ($10))|0;
  $24 = ($23|0)<($end_time|0);
  if ($24) {
   $25 = (__ZNK12Nes_Vrc6_Apu8Vrc6_Osc6periodEv($0)|0);
   $26 = $25 << 1;
   $27 = (($this) + 64|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($this) + 80|0);
   $amp$0 = $5;$last_amp$0 = $12;$phase$0 = $28;$time$0 = $23;
   while(1) {
    $30 = (($phase$0) + -1)|0;
    $31 = ($30|0)==(0);
    $$ = $31 ? 7 : $30;
    $$amp$0 = $31 ? 0 : $amp$0;
    $32 = $$amp$0 >> 3;
    $33 = ($32|0)==($last_amp$0|0);
    if ($33) {
     $last_amp$1 = $last_amp$0;
    } else {
     $34 = (($32) - ($last_amp$0))|0;
     __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($29,$time$0,$34,$2);
     $last_amp$1 = $32;
    }
    $35 = (($time$0) + ($26))|0;
    $36 = (($$amp$0) + ($8))|0;
    $37 = $36 & 255;
    $38 = ($35|0)<($end_time|0);
    if ($38) {
     $amp$0 = $37;$last_amp$0 = $last_amp$1;$phase$0 = $$;$time$0 = $35;
    } else {
     $$$lcssa = $$;$$lcssa = $35;$$lcssa4 = $37;$last_amp$1$lcssa = $last_amp$1;
     break;
    }
   }
   HEAP32[$27>>2] = $$$lcssa;
   HEAP32[$4>>2] = $$lcssa4;
   $last_amp$2 = $last_amp$1$lcssa;$time$1 = $$lcssa;
  } else {
   $last_amp$2 = $12;$time$1 = $23;
  }
  $39 = (($time$1) - ($end_time))|0;
  HEAP32[$18>>2] = $39;
  $last_amp$3 = $last_amp$2;
 }
 HEAP32[$11>>2] = $last_amp$3;
 return;
}
function __ZN12Nes_Vrc6_Apu9write_oscEiiii($this,$time,$osc_index,$reg,$data) {
 $this = $this|0;
 $time = $time|0;
 $osc_index = $osc_index|0;
 $reg = $reg|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($osc_index>>>0)<(3);
 if (!($0)) {
  ___assert_fail((43576|0),(43528|0),57,(43616|0));
  // unreachable;
 }
 $1 = ($reg>>>0)<(3);
 if ($1) {
  __ZN12Nes_Vrc6_Apu9run_untilEi($this,$time);
  $2 = $data&255;
  $3 = ((($this) + (($osc_index*24)|0)|0) + ($reg)|0);
  HEAP8[$3>>0] = $2;
  return;
 } else {
  ___assert_fail((43632|0),(43528|0),58,(43616|0));
  // unreachable;
 }
}
function __ZN12Nes_Vrc6_Apu9end_frameEi($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($time|0);
 if ($2) {
  __ZN12Nes_Vrc6_Apu9run_untilEi($this,$time);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)<($time|0);
 if ($4) {
  ___assert_fail((44376|0),(43528|0),69,(46440|0));
  // unreachable;
 } else {
  $5 = (($3) - ($time))|0;
  HEAP32[$0>>2] = $5;
  return;
 }
}
function __ZN12Nes_Vrc6_Apu6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 80|0);
 $1 = $v * 0.0062387096774193544;
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($0,$1);
 $2 = (($this) + 640|0);
 $3 = $v * 0.0064466666666666665;
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($2,$3);
 return;
}
function __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf) {
 $this = $this|0;
 $i = $i|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i>>>0)<(3);
 if ($0) {
  $1 = ((($this) + (($i*24)|0)|0) + 4|0);
  HEAP32[$1>>2] = $buf;
  return;
 } else {
  ___assert_fail((45096|0),(43664|0),78,(46296|0));
  // unreachable;
 }
}
function __ZNK12Nes_Vrc6_Apu8Vrc6_Osc6periodEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = $3 & 3840;
 $5 = (($this) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 $9 = (($8) + 1)|0;
 return ($9|0);
}
function __ZN7Nsf_Emu8pcm_readEPvj($emu,$addr) {
 $emu = $emu|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($emu) + 272|0);
 $1 = (__ZN7Nes_Cpu8get_codeEj($0,$addr)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 return ($3|0);
}
function __ZN7Nsf_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 272|0);
 __ZN7Nes_CpuC2Ev($0);
 __ZN11Classic_EmuC2Ev($this);
 HEAP32[$this>>2] = ((43728 + 8|0));
 $1 = (($this) + 2540|0);
 __ZN8Rom_DataILi4096EEC2Ev($1);
 $2 = (($this) + 2576|0);
 __ZN7Nes_ApuC2Ev($2);
 $3 = (($this) + 2568|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 2564|0);
 HEAP32[$4>>2] = 0;
 $5 = (($this) + 2572|0);
 HEAP32[$5>>2] = 0;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,43816);
 __ZN9Music_Emu21set_silence_lookaheadEi($this,6);
 __ZN7Nes_Apu10dmc_readerEPFiPvjES0_($2,37,$this);
 __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($this,43712);
 __ZN9Music_Emu8set_gainEd($this,1.3999999999999999);
 $6 = (($this) + 13704|0);
 _memset(($6|0),-14,2056)|0;
 return;
}
function __ZN7Nsf_EmuD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((43728 + 8|0));
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$2 & 127]($this);
 $3 = (($this) + 2540|0);
 __ZN9Rom_Data_D2Ev($3);
 __ZN11Classic_EmuD2Ev($this);
 return;
}
function __ZN7Nsf_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Nsf_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN7Nsf_Emu6unloadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2568|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZN12Nes_Vrc6_ApudlEPv($1);
 }
 HEAP32[$0>>2] = 0;
 $3 = (($this) + 2564|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  __ZN13Nes_Namco_ApudlEPv($4);
 }
 HEAP32[$3>>2] = 0;
 $6 = (($this) + 2572|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  __ZN12Nes_Fme7_ApudlEPv($7);
 }
 HEAP32[$6>>2] = 0;
 $9 = (($this) + 2540|0);
 __ZN8Rom_DataILi4096EE5clearEv($9);
 __ZN9Music_Emu6unloadEv($this);
 return;
}
function __ZNK7Nsf_Emu11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 5384|0);
 __ZL15copy_nsf_fieldsRKN7Nsf_Emu8header_tEP12track_info_t($1,$out);
 return (0|0);
}
function __ZN7Nsf_Emu10set_tempo_Ed($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $playback_rate$0 = 0, $standard_rate$0 = 0, $standard_rate$0$playback_rate$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 5494|0);
 $1 = (__Z8get_le16PKv($0)|0);
 $2 = (($this) + 2504|0);
 HEAPF64[$2>>3] = 1789772.7272699999;
 $3 = (($this) + 2528|0);
 HEAP32[$3>>2] = 357366;
 $4 = (($this) + 2512|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $playback_rate$0 = $1;$standard_rate$0 = 16666;
 } else {
  HEAP32[$3>>2] = 398964;
  HEAPF64[$2>>3] = 1662607.125;
  $7 = (($this) + 5504|0);
  $8 = (__Z8get_le16PKv($7)|0);
  $playback_rate$0 = $8;$standard_rate$0 = 20000;
 }
 $9 = ($playback_rate$0|0)==(0);
 $standard_rate$0$playback_rate$0 = $9 ? $standard_rate$0 : $playback_rate$0;
 $10 = ($standard_rate$0$playback_rate$0|0)!=($standard_rate$0|0);
 $11 = $t != 1.0;
 $or$cond = $10 | $11;
 if (!($or$cond)) {
  $18 = (($this) + 2576|0);
  __ZN7Nes_Apu9set_tempoEd($18,$t);
  return;
 }
 $12 = (+($standard_rate$0$playback_rate$0>>>0));
 $13 = +HEAPF64[$2>>3];
 $14 = $12 * $13;
 $15 = $t * 83333.333333333328;
 $16 = $14 / $15;
 $17 = (~~(($16)));
 HEAP32[$3>>2] = $17;
 $18 = (($this) + 2576|0);
 __ZN7Nes_Apu9set_tempoEd($18,$t);
 return;
}
function __ZN7Nsf_Emu10init_soundEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adjusted_gain$0 = 0.0, $adjusted_gain$1 = 0.0, $adjusted_gain$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 5507|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & -50;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  __ZN8Gme_File11set_warningEPKc($this,43840);
 }
 __ZN9Music_Emu15set_voice_countEi($this,5);
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,43888);
 __ZN11Classic_Emu15set_voice_typesEPKi($this,43936);
 $4 = (+__ZNK9Music_Emu4gainEv($this));
 $5 = HEAP8[$0>>0]|0;
 $6 = $5 & 49;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  __ZN9Music_Emu15set_voice_countEi($this,8);
 }
 $8 = HEAP8[$0>>0]|0;
 $9 = $8 & 16;
 $10 = ($9<<24>>24)==(0);
 do {
  if ($10) {
   $adjusted_gain$0 = $4;
  } else {
   $11 = (__ZN13Nes_Namco_ApunwEj(1048)|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    __ZN13Nes_Namco_ApuC2Ev($11);
    $14 = (($this) + 2564|0);
    HEAP32[$14>>2] = $11;
    $15 = $4 * 0.75;
    __ZN9Music_Emu15set_voice_countEi($this,13);
    __ZN9Music_Emu15set_voice_namesEPKPKc($this,44000);
    $adjusted_gain$0 = $15;
    break;
   }
   $13 = (($this) + 2564|0);
   HEAP32[$13>>2] = 0;
   $$0 = 50160;
   return ($$0|0);
  }
 } while(0);
 $16 = HEAP8[$0>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 do {
  if ($18) {
   $adjusted_gain$1 = $adjusted_gain$0;
  } else {
   $19 = (__ZN12Nes_Vrc6_ApunwEj(1456)|0);
   $20 = ($19|0)==(0|0);
   if ($20) {
    $21 = (($this) + 2568|0);
    HEAP32[$21>>2] = 0;
    $$0 = 50160;
    return ($$0|0);
   } else {
    __ZN12Nes_Vrc6_ApuC2Ev($19);
    $22 = (($this) + 2568|0);
    HEAP32[$22>>2] = $19;
    $23 = $adjusted_gain$0 * 0.75;
    __ZN9Music_Emu15set_voice_countEi($this,8);
    __ZN9Music_Emu15set_voice_namesEPKPKc($this,44056);
    $24 = HEAP8[$0>>0]|0;
    $25 = $24 & 16;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     $adjusted_gain$1 = $23;
     break;
    }
    __ZN9Music_Emu15set_voice_countEi($this,16);
    __ZN9Music_Emu15set_voice_namesEPKPKc($this,44120);
    $adjusted_gain$1 = $23;
    break;
   }
  }
 } while(0);
 $27 = HEAP8[$0>>0]|0;
 $28 = $27 & 32;
 $29 = ($28<<24>>24)==(0);
 do {
  if ($29) {
   $adjusted_gain$2 = $adjusted_gain$1;
  } else {
   $30 = (__ZN12Nes_Fme7_ApunwEj(872)|0);
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    __ZN12Nes_Fme7_ApuC2Ev($30);
    $33 = (($this) + 2572|0);
    HEAP32[$33>>2] = $30;
    $34 = $adjusted_gain$1 * 0.75;
    __ZN9Music_Emu15set_voice_countEi($this,8);
    __ZN9Music_Emu15set_voice_namesEPKPKc($this,44184);
    $adjusted_gain$2 = $34;
    break;
   }
   $32 = (($this) + 2572|0);
   HEAP32[$32>>2] = 0;
   $$0 = 50160;
   return ($$0|0);
  }
 } while(0);
 $35 = (($this) + 2564|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  __ZN13Nes_Namco_Apu6volumeEd($36,$adjusted_gain$2);
 }
 $38 = (($this) + 2568|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  __ZN12Nes_Vrc6_Apu6volumeEd($39,$adjusted_gain$2);
 }
 $41 = (($this) + 2572|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  __ZN12Nes_Fme7_Apu6volumeEd($42,$adjusted_gain$2);
 }
 $44 = (($this) + 2576|0);
 __ZN7Nes_Apu6volumeEd($44,$adjusted_gain$2);
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Nsf_Emu5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2540|0);
 $1 = (($this) + 5384|0);
 $2 = (__ZN8Rom_DataILi4096EE4loadER11Data_ReaderiPvi($0,$in,128,$1,0)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = (($this) + 5390|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 __ZN8Gme_File15set_track_countEi($this,$6);
 $7 = (__ZL16check_nsf_headerPKv($1)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$0 = $7;
  return ($$0|0);
 }
 $9 = (($this) + 5389|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(1);
 if (!($11)) {
  __ZN8Gme_File11set_warningEPKc($this,44232);
 }
 $12 = (__ZN7Nsf_Emu10init_soundEv($this)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $$0 = $12;
  return ($$0|0);
 }
 $14 = (($this) + 5392|0);
 $15 = (__Z8get_le16PKv($14)|0);
 $16 = (($this) + 5394|0);
 $17 = (__Z8get_le16PKv($16)|0);
 $18 = (($this) + 2492|0);
 HEAP32[$18>>2] = $17;
 $19 = (($this) + 5396|0);
 $20 = (__Z8get_le16PKv($19)|0);
 $21 = (($this) + 2496|0);
 HEAP32[$21>>2] = $20;
 $22 = ($15|0)==(0);
 $$2 = $22 ? 32768 : $15;
 $23 = HEAP32[$18>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  HEAP32[$18>>2] = 32768;
  $$pr = HEAP32[$21>>2]|0;
  $26 = $$pr;
 } else {
  $26 = $20;
 }
 $25 = ($26|0)==(0);
 if ($25) {
  HEAP32[$21>>2] = 32768;
 }
 $27 = ($$2>>>0)<(32768);
 if (!($27)) {
  $28 = HEAP32[$18>>2]|0;
  $29 = ($28>>>0)<(32768);
  if (!($29)) {
   $32 = $$2 & 4095;
   __ZN8Rom_DataILi4096EE8set_addrEl($0,$32);
   $33 = (__ZNK8Rom_DataILi4096EE4sizeEv($0)|0);
   $34 = (($33|0) / 4096)&-1;
   $35 = (($$2) + -32768)|0;
   $36 = $35 >>> 12;
   $i$03 = 0;
   while(1) {
    $39 = (($i$03) - ($36))|0;
    $40 = ($39>>>0)>=($34>>>0);
    $41 = $39&255;
    $42 = $40 ? 0 : $41;
    $43 = ((($this) + ($i$03)|0) + 2484|0);
    HEAP8[$43>>0] = $42;
    $44 = ((($this) + ($i$03)|0) + 5496|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = ($45<<24>>24)==(0);
    $38 = (($i$03) + 1)|0;
    if (!($46)) {
     label = 16;
     break;
    }
    $37 = ($38|0)<(8);
    if ($37) {
     $i$03 = $38;
    } else {
     break;
    }
   }
   if ((label|0) == 16) {
    $47 = (($this) + 2484|0);
    $48 = (($this) + 5496|0);
    $49 = $48;
    $50 = $49;
    $51 = HEAPU8[$50>>0]|(HEAPU8[$50+1>>0]<<8)|(HEAPU8[$50+2>>0]<<16)|(HEAPU8[$50+3>>0]<<24);
    $52 = (($49) + 4)|0;
    $53 = $52;
    $54 = HEAPU8[$53>>0]|(HEAPU8[$53+1>>0]<<8)|(HEAPU8[$53+2>>0]<<16)|(HEAPU8[$53+3>>0]<<24);
    $55 = $47;
    $56 = $55;
    HEAP8[$56>>0]=$51&255;HEAP8[$56+1>>0]=($51>>8)&255;HEAP8[$56+2>>0]=($51>>16)&255;HEAP8[$56+3>>0]=$51>>24;
    $57 = (($55) + 4)|0;
    $58 = $57;
    HEAP8[$58>>0]=$54&255;HEAP8[$58+1>>0]=($54>>8)&255;HEAP8[$58+2>>0]=($54>>16)&255;HEAP8[$58+3>>0]=$54>>24;
   }
   $59 = (($this) + 5506|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60 & 3;
   $62 = ($61<<24>>24)==(1);
   $63 = (($this) + 2512|0);
   $64 = $62&1;
   HEAP8[$63>>0] = $64;
   HEAP8[$59>>0] = 0;
   $65 = (+__ZNK9Music_Emu5tempoEv($this));
   __ZN9Music_Emu9set_tempoEd($this,$65);
   $66 = (($this) + 2504|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $67 + 0.5;
   $69 = (~~(($68)));
   $70 = (__ZN11Classic_Emu12setup_bufferEl($this,$69)|0);
   $$0 = $70;
   return ($$0|0);
  }
 }
 $30 = (__ZN8Gme_File7warningEv($this)|0);
 $31 = ($30|0)!=(0|0);
 $$ = $31 ? $30 : 44256;
 $$0 = $$;
 return ($$0|0);
}
function __ZN7Nsf_Emu9update_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2576|0);
 __ZN7Nes_Apu9treble_eqERK9blip_eq_t($0,$eq);
 $1 = (($this) + 2564|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZN13Nes_Namco_Apu9treble_eqERK9blip_eq_t($2,$eq);
 }
 $4 = (($this) + 2568|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  __ZN12Nes_Vrc6_Apu9treble_eqERK9blip_eq_t($5,$eq);
 }
 $7 = (($this) + 2572|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  return;
 }
 __ZN12Nes_Fme7_Apu9treble_eqERK9blip_eq_t($8,$eq);
 return;
}
function __ZN7Nsf_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$buf,$0,$1) {
 $this = $this|0;
 $i = $i|0;
 $buf = $buf|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($i|0)<(5);
 if ($2) {
  $3 = (($this) + 2576|0);
  __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($3,$i,$buf);
  return;
 }
 $4 = (($i) + -5)|0;
 $5 = (($this) + 2572|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = ($4|0)<(3);
 $or$cond = $7 & $8;
 if ($or$cond) {
  __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($6,$4,$buf);
  return;
 }
 $9 = (($this) + 2568|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 do {
  if ($11) {
   $$0 = $4;
  } else {
   if (!($8)) {
    $14 = (($i) + -8)|0;
    $$0 = $14;
    break;
   }
   $12 = (($i) + -6)|0;
   $13 = ($12|0)<(0);
   $$ = $13 ? 2 : $12;
   __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($10,$$,$buf);
   return;
  }
 } while(0);
 $15 = (($this) + 2564|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 $18 = ($$0|0)<(8);
 $or$cond3 = $17 & $18;
 if (!($or$cond3)) {
  return;
 }
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($16,$$0,$buf);
 return;
}
function __ZN7Nsf_Emu14cpu_write_miscEji($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2564|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   if ((($addr|0) == 18432)) {
    $3 = (($this) + 272|0);
    $4 = (__ZNK7Nes_Cpu4timeEv($3)|0);
    __ZN13Nes_Namco_Apu10write_dataEii($1,$4,$data);
    return;
   } else if ((($addr|0) == 63488)) {
    __ZN13Nes_Namco_Apu10write_addrEi($1,$data);
    return;
   } else {
    break;
   }
  }
 } while(0);
 $5 = ($addr>>>0)>(49151);
 do {
  if ($5) {
   $6 = (($this) + 2572|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = $addr & 57344;
    if ((($9|0) == 57344)) {
     $10 = (($this) + 272|0);
     $11 = (__ZNK7Nes_Cpu4timeEv($10)|0);
     __ZN12Nes_Fme7_Apu10write_dataEii($7,$11,$data);
     return;
    } else if ((($9|0) == 49152)) {
     __ZN12Nes_Fme7_Apu11write_latchEi($7,$data);
     return;
    } else {
     break;
    }
   }
  }
 } while(0);
 $12 = (($this) + 2568|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  return;
 }
 $15 = $addr & 4095;
 $16 = (($addr) + -36864)|0;
 $17 = ($16>>>0)<(12288);
 $18 = ($15>>>0)<(3);
 $or$cond = $17 & $18;
 if (!($or$cond)) {
  return;
 }
 $19 = $16 >>> 12;
 $20 = (($this) + 272|0);
 $21 = (__ZNK7Nes_Cpu4timeEv($20)|0);
 __ZN12Nes_Vrc6_Apu9write_oscEiiii($13,$21,$19,$15,$data);
 return;
}
function __ZN7Nsf_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN11Classic_Emu12start_track_Ei($this,$track)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (($this) + 272|0);
 _memset(($2|0),0,2048)|0;
 $3 = (($this) + 5512|0);
 _memset(($3|0),0,8192)|0;
 $4 = (($this) + 13704|0);
 __ZN7Nes_Cpu5resetEPKv($2,$4);
 __ZN7Nes_Cpu8map_codeEjjPKvb($2,24576,8192,$3,0);
 $5 = (($this) + 2484|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 __ZN7Nsf_Emu9cpu_writeEji($this,24568,$7);
 $8 = (($this) + 2485|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 __ZN7Nsf_Emu9cpu_writeEji($this,24569,$10);
 $11 = (($this) + 2486|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 __ZN7Nsf_Emu9cpu_writeEji($this,24570,$13);
 $14 = (($this) + 2487|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 __ZN7Nsf_Emu9cpu_writeEji($this,24571,$16);
 $17 = (($this) + 2488|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 __ZN7Nsf_Emu9cpu_writeEji($this,24572,$19);
 $20 = (($this) + 2489|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 __ZN7Nsf_Emu9cpu_writeEji($this,24573,$22);
 $23 = (($this) + 2490|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 __ZN7Nsf_Emu9cpu_writeEji($this,24574,$25);
 $26 = (($this) + 2491|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 __ZN7Nsf_Emu9cpu_writeEji($this,24575,$28);
 $29 = (($this) + 2576|0);
 $30 = (($this) + 2512|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)!=(0);
 $33 = (($this) + 5506|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34 & 32;
 $36 = ($35<<24>>24)!=(0);
 $37 = $36 ? 63 : 0;
 __ZN7Nes_Apu5resetEbi($29,$32,$37);
 __ZN7Nes_Apu14write_registerEiji($29,0,16405,15);
 $38 = HEAP8[$33>>0]|0;
 $39 = $38 & 16;
 $40 = $39&255;
 $41 = $40 << 3;
 __ZN7Nes_Apu14write_registerEiji($29,0,16407,$41);
 $42 = (($this) + 2564|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  __ZN13Nes_Namco_Apu5resetEv($43);
 }
 $45 = (($this) + 2568|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 if (!($47)) {
  __ZN12Nes_Vrc6_Apu5resetEv($46);
 }
 $48 = (($this) + 2572|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if (!($50)) {
  __ZN12Nes_Fme7_Apu5resetEv($49);
 }
 $51 = (($this) + 2536|0);
 HEAP32[$51>>2] = 4;
 $52 = (($this) + 2532|0);
 HEAP32[$52>>2] = 0;
 $53 = (($this) + 2528|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54|0) / 12)&-1;
 $56 = (($this) + 2524|0);
 HEAP32[$56>>2] = $55;
 $57 = (($this) + 2514|0);
 HEAP16[$57>>1] = 24568;
 $58 = (($this) + 783|0);
 HEAP8[$58>>0] = 95;
 $59 = (($this) + 782|0);
 HEAP8[$59>>0] = -9;
 $60 = (($this) + 2320|0);
 $61 = (($this) + 2326|0);
 HEAP8[$61>>0] = -3;
 $62 = (($this) + 2492|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $63&65535;
 HEAP16[$60>>1] = $64;
 $65 = $track&255;
 $66 = (($this) + 2322|0);
 HEAP8[$66>>0] = $65;
 $67 = HEAP8[$30>>0]|0;
 $68 = (($this) + 2323|0);
 HEAP8[$68>>0] = $67;
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Nsf_Emu10run_clocksERii($this,$duration,$0) {
 $this = $this|0;
 $duration = $duration|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 272|0);
 __ZN7Nes_Cpu8set_timeEi($1,0);
 $2 = (__ZNK7Nes_Cpu4timeEv($1)|0);
 $3 = HEAP32[$duration>>2]|0;
 $4 = ($2|0)<($3|0);
 if ($4) {
  $5 = (($this) + 2524|0);
  $6 = (($this) + 2320|0);
  $7 = (($this) + 2536|0);
  $8 = (($this) + 2514|0);
  $9 = (($this) + 2528|0);
  $10 = (($this) + 2532|0);
  $11 = (($this) + 2536|0);
  $12 = (($this) + 2320|0);
  $13 = (($this) + 2496|0);
  $14 = (($this) + 2326|0);
  $15 = (($this) + 2514|0);
  $17 = $3;$20 = $2;
  while(1) {
   $16 = HEAP32[$5>>2]|0;
   $18 = (__Z3minIiET_S0_S0_($16,$17)|0);
   $19 = (($20) + 32767)|0;
   $21 = (__Z3minIiET_S0_S0_($18,$19)|0);
   $22 = (__ZN7Nes_Cpu3runEi($1,$21)|0);
   do {
    if ($22) {
     $23 = HEAP16[$6>>1]|0;
     $24 = ($23<<16>>16)==(24568);
     if (!($24)) {
      __ZN8Gme_File11set_warningEPKc($this,45704);
      $25 = HEAP16[$6>>1]|0;
      $26 = (($25) + 1)<<16>>16;
      HEAP16[$6>>1] = $26;
      break;
     }
     HEAP32[$7>>2] = 1;
     $27 = HEAP16[$8>>1]|0;
     $28 = ($27<<16>>16)==(24568);
     if ($28) {
      __ZN7Nes_Cpu8set_timeEi($1,$21);
      break;
     } else {
      $29 = $8;
      $30 = $29;
      $31 = HEAPU16[$30>>1]|(HEAPU16[$30+2>>1]<<16);
      $32 = (($29) + 4)|0;
      $33 = $32;
      $34 = HEAPU16[$33>>1]|(HEAPU16[$33+2>>1]<<16);
      $35 = $6;
      $36 = $35;
      HEAP16[$36>>1]=$31&65535;HEAP16[$36+2>>1]=$31>>>16;
      $37 = (($35) + 4)|0;
      $38 = $37;
      HEAP16[$38>>1]=$34&65535;HEAP16[$38+2>>1]=$34>>>16;
      HEAP16[$8>>1] = 24568;
      break;
     }
    }
   } while(0);
   $39 = (__ZNK7Nes_Cpu4timeEv($1)|0);
   $40 = HEAP32[$5>>2]|0;
   $41 = ($39|0)<($40|0);
   if (!($41)) {
    $42 = HEAP32[$9>>2]|0;
    $43 = HEAP32[$10>>2]|0;
    $44 = (($43) + ($42))|0;
    $45 = (($44|0) / 12)&-1;
    $46 = Math_imul($45, -12)|0;
    $47 = (($46) + ($42))|0;
    HEAP32[$10>>2] = $47;
    $48 = HEAP32[$5>>2]|0;
    $49 = (($48) + ($45))|0;
    HEAP32[$5>>2] = $49;
    $50 = HEAP32[$11>>2]|0;
    $51 = ($50|0)==(0);
    if (!($51)) {
     $52 = (($50) + -1)|0;
     HEAP32[$11>>2] = $52;
     $53 = ($52|0)==(0);
     if ($53) {
      $54 = HEAP16[$12>>1]|0;
      $55 = ($54<<16>>16)==(24568);
      if (!($55)) {
       $56 = $12;
       $57 = $56;
       $58 = HEAPU16[$57>>1]|(HEAPU16[$57+2>>1]<<16);
       $59 = (($56) + 4)|0;
       $60 = $59;
       $61 = HEAPU16[$60>>1]|(HEAPU16[$60+2>>1]<<16);
       $62 = $15;
       $63 = $62;
       HEAP16[$63>>1]=$58&65535;HEAP16[$63+2>>1]=$58>>>16;
       $64 = (($62) + 4)|0;
       $65 = $64;
       HEAP16[$65>>1]=$61&65535;HEAP16[$65+2>>1]=$61>>>16;
      }
      $66 = HEAP32[$13>>2]|0;
      $67 = $66&65535;
      HEAP16[$12>>1] = $67;
      $68 = HEAP8[$14>>0]|0;
      $69 = (($68) + -1)<<24>>24;
      HEAP8[$14>>0] = $69;
      $70 = $68&255;
      $71 = $70 | 256;
      $72 = ((($this) + ($71)|0) + 272|0);
      HEAP8[$72>>0] = 95;
      $73 = HEAP8[$14>>0]|0;
      $74 = (($73) + -1)<<24>>24;
      HEAP8[$14>>0] = $74;
      $75 = $73&255;
      $76 = $75 | 256;
      $77 = ((($this) + ($76)|0) + 272|0);
      HEAP8[$77>>0] = -9;
     }
    }
   }
   $78 = (__ZNK7Nes_Cpu4timeEv($1)|0);
   $79 = HEAP32[$duration>>2]|0;
   $80 = ($78|0)<($79|0);
   if ($80) {
    $17 = $79;$20 = $78;
   } else {
    break;
   }
  }
 }
 $81 = (__ZNK7Nes_Cpu11error_countEv($1)|0);
 $82 = ($81|0)==(0);
 if (!($82)) {
  __ZN7Nes_Cpu17clear_error_countEv($1);
  __ZN8Gme_File11set_warningEPKc($this,45704);
 }
 $83 = (__ZNK7Nes_Cpu4timeEv($1)|0);
 HEAP32[$duration>>2] = $83;
 $84 = (($this) + 2524|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) - ($83))|0;
 $87 = ($86|0)<(0);
 $$ = $87 ? 0 : $86;
 HEAP32[$84>>2] = $$;
 $88 = (($this) + 2576|0);
 $89 = HEAP32[$duration>>2]|0;
 __ZN7Nes_Apu9end_frameEi($88,$89);
 $90 = (($this) + 2564|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if (!($92)) {
  $93 = HEAP32[$duration>>2]|0;
  __ZN13Nes_Namco_Apu9end_frameEi($91,$93);
 }
 $94 = (($this) + 2568|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)==(0|0);
 if (!($96)) {
  $97 = HEAP32[$duration>>2]|0;
  __ZN12Nes_Vrc6_Apu9end_frameEi($95,$97);
 }
 $98 = (($this) + 2572|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)==(0|0);
 if ($100) {
  return (0|0);
 }
 $101 = HEAP32[$duration>>2]|0;
 __ZN12Nes_Fme7_Apu9end_frameEi($99,$101);
 return (0|0);
}
function __ZN7Nes_CpuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2060|0);
 $1 = (($this) + 2056|0);
 HEAP32[$1>>2] = $0;
 return;
}
function __ZN8Rom_DataILi4096EEC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Rom_Data_C2Ev($this);
 return;
}
function __ZN7Nes_Apu10dmc_readerEPFiPvjES0_($this,$func,$user_data) {
 $this = $this|0;
 $func = $func|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1368|0);
 HEAP32[$0>>2] = $user_data;
 $1 = (($this) + 1364|0);
 HEAP32[$1>>2] = $func;
 return;
}
function __ZN12Nes_Vrc6_ApudlEPv($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($p);
 return;
}
function __ZN13Nes_Namco_ApudlEPv($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($p);
 return;
}
function __ZN12Nes_Fme7_ApudlEPv($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($p);
 return;
}
function __ZN8Rom_DataILi4096EE5clearEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13blargg_vectorIhE5clearEv($this);
 return;
}
function __ZL15copy_nsf_fieldsRKN7Nsf_Emu8header_tEP12track_info_t($h,$out) {
 $h = $h|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($out) + 272|0);
 $1 = (($h) + 14|0);
 __ZN8Gme_File11copy_field_EPcPKci($0,$1,32);
 $2 = (($out) + 784|0);
 $3 = (($h) + 46|0);
 __ZN8Gme_File11copy_field_EPcPKci($2,$3,32);
 $4 = (($out) + 1040|0);
 $5 = (($h) + 78|0);
 __ZN8Gme_File11copy_field_EPcPKci($4,$5,32);
 $6 = (($h) + 123|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  return;
 }
 $9 = (($out) + 16|0);
 __ZN8Gme_File11copy_field_EPcPKc($9,44568);
 return;
}
function __ZN13Nes_Namco_ApunwEj($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($s)|0);
 return ($0|0);
}
function __ZN12Nes_Vrc6_ApunwEj($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($s)|0);
 return ($0|0);
}
function __ZN12Nes_Fme7_ApunwEj($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($s)|0);
 return ($0|0);
}
function __ZN12Nes_Fme7_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 56|0);
 __ZN10Blip_SynthILi12ELi1EEC2Ev($0);
 __ZN12Nes_Fme7_Apu6outputEP11Blip_Buffer($this,0);
 __ZN12Nes_Fme7_Apu6volumeEd($this,1.0);
 __ZN12Nes_Fme7_Apu5resetEv($this);
 return;
}
function __ZN12Nes_Fme7_Apu6volumeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 56|0);
 $1 = $v * 0.0019791666666666668;
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($0,$1);
 return;
}
function __ZN8Rom_DataILi4096EE4loadER11Data_ReaderiPvi($this,$in,$header_size,$header_out,$fill) {
 $this = $this|0;
 $in = $in|0;
 $header_size = $header_size|0;
 $header_out = $header_out|0;
 $fill = $fill|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($this,$in,$header_size,$header_out,$fill,4104)|0);
 return ($0|0);
}
function __ZL16check_nsf_headerPKv($header) {
 $header = $header|0;
 var $$ = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($header,44448,5)|0);
 $1 = ($0|0)==(0);
 $$ = $1 ? 0 : 38248;
 return ($$|0);
}
function __ZN8Rom_DataILi4096EE8set_addrEl($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Rom_Data_9set_addr_Eli($this,$addr,4096);
 return;
}
function __ZN13Nes_Namco_Apu9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 232|0);
 __ZN10Blip_SynthILi12ELi15EE9treble_eqERK9blip_eq_t($0,$eq);
 return;
}
function __ZN12Nes_Vrc6_Apu9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 80|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($0,$eq);
 $1 = (($this) + 640|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN12Nes_Fme7_Apu9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 56|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($0,$eq);
 return;
}
function __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf) {
 $this = $this|0;
 $i = $i|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i>>>0)<(3);
 if ($0) {
  $1 = ((($this) + ($i<<3)|0) + 24|0);
  HEAP32[$1>>2] = $buf;
  return;
 } else {
  ___assert_fail((45096|0),(44400|0),77,(46296|0));
  // unreachable;
 }
}
function __ZN13Nes_Namco_Apu10write_dataEii($this,$time,$data) {
 $this = $this|0;
 $time = $time|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13Nes_Namco_Apu9run_untilEi($this,$time);
 $0 = $data&255;
 $1 = (__ZN13Nes_Namco_Apu6accessEv($this)|0);
 HEAP8[$1>>0] = $0;
 return;
}
function __ZN13Nes_Namco_Apu10write_addrEi($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 100|0);
 HEAP32[$0>>2] = $v;
 return;
}
function __ZN12Nes_Fme7_Apu11write_latchEi($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $data&255;
 $1 = (($this) + 17|0);
 HEAP8[$1>>0] = $0;
 return;
}
function __ZN12Nes_Fme7_Apu10write_dataEii($this,$time,$data) {
 $this = $this|0;
 $time = $time|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 17|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1&255)>(13);
 if ($2) {
  return;
 }
 __ZN12Nes_Fme7_Apu9run_untilEi($this,$time);
 $3 = $data&255;
 $4 = HEAP8[$0>>0]|0;
 $5 = $4&255;
 $6 = (($this) + ($5)|0);
 HEAP8[$6>>0] = $3;
 return;
}
function __ZN7Nes_Cpu8set_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2056|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($t) - ($3))|0;
 $5 = (($1) + 136|0);
 HEAP32[$5>>2] = $4;
 return;
}
function __ZNK7Nes_Cpu11error_countEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2208|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN7Nes_Cpu17clear_error_countEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 2208|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN12Nes_Fme7_Apu9end_frameEi($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($time|0);
 if ($2) {
  __ZN12Nes_Fme7_Apu9run_untilEi($this,$time);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)<($time|0);
 if ($4) {
  ___assert_fail((44376|0),(44400|0),115,(46440|0));
  // unreachable;
 } else {
  $5 = (($3) - ($time))|0;
  HEAP32[$0>>2] = $5;
  return;
 }
}
function __ZL11new_nsf_emuv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(15760)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN7Nsf_EmuC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZL12new_nsf_filev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(384)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN8Nsf_FileC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZN8Nsf_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN8Nsf_File5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 252|0);
 $4 = (FUNCTION_TABLE_iiii[$2 & 63]($in,$3,128)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ($4|0)==(36224|0);
  $7 = $6 ? 38248 : $4;
  $$0 = $7;
  return ($$0|0);
 }
 $8 = (($this) + 375|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & -50;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  __ZN8Gme_File11set_warningEPKc($this,43840);
 }
 $12 = (($this) + 258|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 __ZN8Gme_File15set_track_countEi($this,$14);
 $15 = (__ZL16check_nsf_headerPKv($3)|0);
 $$0 = $15;
 return ($$0|0);
}
function __ZNK8Nsf_File11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 252|0);
 __ZL15copy_nsf_fieldsRKN7Nsf_Emu8header_tEP12track_info_t($1,$out);
 return (0|0);
}
function __ZN12Nes_Fme7_Apu6outputEP11Blip_Buffer($this,$buf) {
 $this = $this|0;
 $buf = $buf|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
 __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
 __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
 return;
}
function __ZN10Blip_SynthILi12ELi15EE9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$eq);
 return;
}
function __ZN8Nsf_FileC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Gme_Info_C2Ev($this);
 HEAP32[$this>>2] = ((44456 + 8|0));
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,43816);
 return;
}
function __ZN9Nsfe_InfoC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1152|0);
 __ZN13blargg_vectorIcEC2Ev($0);
 $1 = (($this) + 1160|0);
 __ZN13blargg_vectorIPKcEC2Ev($1);
 $2 = (($this) + 1168|0);
 __ZN13blargg_vectorIhEC2Ev($2);
 $3 = (($this) + 1176|0);
 __ZN13blargg_vectorIA4_cEC2Ev($3);
 $4 = (($this) + 1188|0);
 HEAP8[$4>>0] = 0;
 return;
}
function __ZN9Nsfe_InfoD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1176|0);
 __ZN13blargg_vectorIA4_cED2Ev($0);
 $1 = (($this) + 1168|0);
 __ZN13blargg_vectorIhED2Ev($1);
 $2 = (($this) + 1160|0);
 __ZN13blargg_vectorIPKcED2Ev($2);
 $3 = (($this) + 1152|0);
 __ZN13blargg_vectorIcED2Ev($3);
 return;
}
function __ZN9Nsfe_Info16disable_playlistEb($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1188|0);
 $1 = $b&1;
 HEAP8[$0>>0] = $1;
 $2 = (($this) + 1168|0);
 $3 = (__ZNK13blargg_vectorIhE4sizeEv($2)|0);
 $4 = $3&255;
 $5 = (($this) + 6|0);
 HEAP8[$5>>0] = $4;
 $6 = ($4<<24>>24)==(0);
 if (!($6)) {
  $7 = HEAP8[$0>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   return;
  }
 }
 $9 = (($this) + 1184|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10&255;
 HEAP8[$5>>0] = $11;
 return;
}
function __ZNK9Nsfe_Info11remap_trackEi($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1188|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $$0 = $track;
  return ($$0|0);
 }
 $3 = (($this) + 1168|0);
 $4 = (__ZNK13blargg_vectorIhE4sizeEv($3)|0);
 $5 = ($4>>>0)>($track>>>0);
 if (!($5)) {
  $$0 = $track;
  return ($$0|0);
 }
 $6 = (__ZNK13blargg_vectorIhEixEj($3,$track)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $$0 = $8;
 return ($$0|0);
}
function __ZN9Nsfe_Info4loadER11Data_ReaderP7Nsf_Emu($this,$in,$nsf_emu) {
 $this = $this|0;
 $in = $in|0;
 $nsf_emu = $nsf_emu|0;
 var $$0$ = 0, $$011 = 0, $$011$phi = 0, $$08 = 0, $$1 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block_header = 0, $chars = 0, $finfo = 0;
 var $rem = 0, $signature = 0, $strs = 0, $sub = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $signature = sp + 72|0;
 $block_header = sp + 48|0;
 $finfo = sp + 56|0;
 $chars = sp + 40|0;
 $strs = sp + 32|0;
 $sub = sp;
 $rem = sp + 16|0;
 $0 = HEAP32[$in>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiii[$2 & 63]($in,$signature,4)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ($3|0)==(36224|0);
  $6 = $5 ? 38248 : $3;
  $$3 = $6;
  STACKTOP = sp;return ($$3|0);
 }
 $7 = (_memcmp($signature,50080,4)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$3 = 38248;
  STACKTOP = sp;return ($$3|0);
 }
 $9 = (($this) + 1152|0);
 __ZN13blargg_vectorIcE5clearEv($9);
 $10 = (($this) + 1160|0);
 __ZN13blargg_vectorIPKcE5clearEv($10);
 $11 = (($this) + 1168|0);
 __ZN13blargg_vectorIhE5clearEv($11);
 $12 = (($this) + 1176|0);
 __ZN13blargg_vectorIA4_cE5clearEv($12);
 dest=$this+0|0; src=44576+0|0; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $13 = (($block_header) + 4|0);
 $14 = (($finfo) + 8|0);
 $15 = (($finfo) + 9|0);
 $16 = (($finfo) + 6|0);
 $17 = (($this) + 122|0);
 $18 = (($finfo) + 7|0);
 $19 = (($this) + 123|0);
 $20 = (($this) + 6|0);
 $21 = (($this) + 1184|0);
 $22 = (($this) + 7|0);
 $23 = (($this) + 8|0);
 $24 = (($this) + 112|0);
 $25 = (($this) + 896|0);
 $26 = (($this) + 640|0);
 $27 = (($this) + 384|0);
 $28 = (($this) + 128|0);
 $29 = ($nsf_emu|0)==(0|0);
 $$011 = 0;
 while(1) {
  $30 = HEAP32[$in>>2]|0;
  $31 = (($30) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (FUNCTION_TABLE_iiii[$32 & 63]($in,$block_header,8)|0);
  $34 = ($33|0)==(0|0);
  if (!($34)) {
   $$3 = $33;
   label = 33;
   break;
  }
  $35 = (__Z8get_le32PKv($block_header)|0);
  $36 = (__Z8get_le32PKv($13)|0);
  if ((($36|0) == 1263419714)) {
   $57 = ($35|0)>(8);
   if ($57) {
    $$3 = 44704;
    label = 33;
    break;
   }
   $58 = HEAP32[$in>>2]|0;
   $59 = (($58) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (FUNCTION_TABLE_iiii[$60 & 63]($in,$24,$35)|0);
   $62 = ($61|0)==(0|0);
   if ($62) {
    $$011$phi = $$011;$$011 = $$011$phi;
    continue;
   } else {
    $$3 = $61;
    label = 33;
    break;
   }
  } else if ((($36|0) == 1330007625)) {
   $37 = ($35|0)<(8);
   if ($37) {
    $$3 = 44704;
    label = 33;
    break;
   }
   HEAP8[$14>>0] = 1;
   HEAP8[$15>>0] = 0;
   $38 = HEAP32[$in>>2]|0;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (__Z3minIiET_S0_S0_($35,16)|0);
   $42 = (FUNCTION_TABLE_iiii[$40 & 63]($in,$finfo,$41)|0);
   $43 = ($42|0)==(0|0);
   if (!($43)) {
    $$3 = $42;
    label = 33;
    break;
   }
   $44 = ($35|0)>(16);
   if ($44) {
    $45 = HEAP32[$in>>2]|0;
    $46 = (($45) + 20|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($35) + -16)|0;
    $49 = (FUNCTION_TABLE_iii[$47 & 63]($in,$48)|0);
    $50 = ($49|0)==(0|0);
    if (!($50)) {
     $$3 = $49;
     label = 33;
     break;
    }
   }
   $51 = HEAP8[$16>>0]|0;
   HEAP8[$17>>0] = $51;
   $52 = HEAP8[$18>>0]|0;
   HEAP8[$19>>0] = $52;
   $53 = HEAP8[$14>>0]|0;
   HEAP8[$20>>0] = $53;
   $54 = HEAP8[$14>>0]|0;
   $55 = $54&255;
   HEAP32[$21>>2] = $55;
   $56 = HEAP8[$15>>0]|0;
   HEAP8[$22>>0] = $56;
   ;HEAP8[$23+0>>0]=HEAP8[$finfo+0>>0]|0;HEAP8[$23+1>>0]=HEAP8[$finfo+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$finfo+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$finfo+3>>0]|0;HEAP8[$23+4>>0]=HEAP8[$finfo+4>>0]|0;HEAP8[$23+5>>0]=HEAP8[$finfo+5>>0]|0;
   $$011$phi = $$011;$$011 = $$011$phi;
   continue;
  } else if ((($36|0) == 1701669236)) {
   $78 = (($35|0) / 4)&-1;
   $79 = (__ZN13blargg_vectorIA4_cE6resizeEj($12,$78)|0);
   $80 = ($79|0)==(0|0);
   if (!($80)) {
    $$3 = $79;
    label = 33;
    break;
   }
   $81 = HEAP32[$in>>2]|0;
   $82 = (($81) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (__ZNK13blargg_vectorIA4_cE5beginEv($12)|0);
   $85 = (__ZNK13blargg_vectorIA4_cE4sizeEv($12)|0);
   $86 = $85 << 2;
   $87 = (FUNCTION_TABLE_iiii[$83 & 63]($in,$84,$86)|0);
   $88 = ($87|0)==(0|0);
   if ($88) {
    $$011$phi = $$011;$$011 = $$011$phi;
    continue;
   } else {
    $$3 = $87;
    label = 33;
    break;
   }
  } else if ((($36|0) == 1818389620)) {
   $89 = (__ZL9read_strsR11Data_ReaderlR13blargg_vectorIcERS1_IPKcE($in,$35,$9,$10)|0);
   $90 = ($89|0)==(0|0);
   if ($90) {
    $$011$phi = $$011;$$011 = $$011$phi;
    continue;
   } else {
    $$3 = $89;
    label = 33;
    break;
   }
  } else if ((($36|0) == 1953721456)) {
   $91 = (__ZN13blargg_vectorIhE6resizeEj($11,$35)|0);
   $92 = ($91|0)==(0|0);
   if (!($92)) {
    $$3 = $91;
    label = 33;
    break;
   }
   $93 = HEAP32[$in>>2]|0;
   $94 = (($93) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (__ZNK13blargg_vectorIhEixEj($11,0)|0);
   $97 = (FUNCTION_TABLE_iiii[$95 & 63]($in,$96,$35)|0);
   $98 = ($97|0)==(0|0);
   if ($98) {
    $$011$phi = $$011;$$011 = $$011$phi;
    continue;
   } else {
    $$3 = $97;
    label = 33;
    break;
   }
  } else if ((($36|0) == 1096040772)) {
   if ($29) {
    $99 = HEAP32[$in>>2]|0;
    $100 = (($99) + 20|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (FUNCTION_TABLE_iii[$101 & 63]($in,$35)|0);
    $103 = ($102|0)==(0|0);
    if ($103) {
     $$011$phi = $$011;$$011 = $$011$phi;
     continue;
    } else {
     $$3 = $102;
     label = 33;
     break;
    }
   } else {
    __ZN13Subset_ReaderC2EP11Data_Readerl($sub,$in,$35);
    __ZN16Remaining_ReaderC2EPKvlP11Data_Reader($rem,$this,128,$sub);
    $104 = (__ZN8Gme_File4loadER11Data_Reader($nsf_emu,$rem)|0);
    $105 = ($104|0)==(0|0);
    $$0$ = $105 ? $$011 : $104;
    if ($105) {
     $$011 = $$0$;
     continue;
    } else {
     $$3 = $$0$;
     label = 33;
     break;
    }
   }
  } else if ((($36|0) == 1145980238)) {
   $$3 = 0;
   label = 33;
   break;
  } else if ((($36|0) == 1752462689)) {
   __ZN13blargg_vectorIcEC2Ev($chars);
   __ZN13blargg_vectorIPKcEC2Ev($strs);
   $63 = (__ZL9read_strsR11Data_ReaderlR13blargg_vectorIcERS1_IPKcE($in,$35,$chars,$strs)|0);
   $64 = ($63|0)==(0|0);
   if ($64) {
    $65 = (__ZNK13blargg_vectorIPKcE4sizeEv($strs)|0);
    $66 = ($65|0)>(3);
    if ($66) {
     $67 = (__ZNK13blargg_vectorIPKcEixEj($strs,3)|0);
     $68 = HEAP32[$67>>2]|0;
     __ZL8copy_strPKcPci($68,$25);
    }
    $69 = ($65|0)>(2);
    if ($69) {
     $70 = (__ZNK13blargg_vectorIPKcEixEj($strs,2)|0);
     $71 = HEAP32[$70>>2]|0;
     __ZL8copy_strPKcPci($71,$26);
    }
    $72 = ($65|0)>(1);
    if ($72) {
     $73 = (__ZNK13blargg_vectorIPKcEixEj($strs,1)|0);
     $74 = HEAP32[$73>>2]|0;
     __ZL8copy_strPKcPci($74,$27);
    }
    $75 = ($65|0)>(0);
    if ($75) {
     $76 = (__ZNK13blargg_vectorIPKcEixEj($strs,0)|0);
     $77 = HEAP32[$76>>2]|0;
     __ZL8copy_strPKcPci($77,$28);
     $$08 = 1;$$1 = $$011;
    } else {
     $$08 = 1;$$1 = $$011;
    }
   } else {
    $$08 = 0;$$1 = $63;
   }
   __ZN13blargg_vectorIPKcED2Ev($strs);
   __ZN13blargg_vectorIcED2Ev($chars);
   if ($$08) {
    $$011 = $$1;
    continue;
   } else {
    $$3 = $$1;
    label = 33;
    break;
   }
  } else {
   $106 = HEAP32[$in>>2]|0;
   $107 = (($106) + 20|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (FUNCTION_TABLE_iii[$108 & 63]($in,$35)|0);
   $110 = ($109|0)==(0|0);
   if ($110) {
    $$011$phi = $$011;$$011 = $$011$phi;
    continue;
   } else {
    $$3 = $109;
    label = 33;
    break;
   }
  }
 }
 if ((label|0) == 33) {
  STACKTOP = sp;return ($$3|0);
 }
 return (0)|0;
}
function __ZNK9Nsfe_Info11track_info_EP12track_info_ti($this,$out,$track) {
 $this = $this|0;
 $out = $out|0;
 $track = $track|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Nsfe_Info11remap_trackEi($this,$track)|0);
 $1 = (($this) + 1176|0);
 $2 = (__ZNK13blargg_vectorIA4_cE4sizeEv($1)|0);
 $3 = ($0>>>0)<($2>>>0);
 if ($3) {
  $4 = (__ZNK13blargg_vectorIA4_cEixEj($1,$0)|0);
  $5 = (__Z8get_le32PKv($4)|0);
  $6 = ($5|0)>(0);
  if ($6) {
   $7 = (($out) + 4|0);
   HEAP32[$7>>2] = $5;
  }
 }
 $8 = (($this) + 1160|0);
 $9 = (__ZNK13blargg_vectorIPKcE4sizeEv($8)|0);
 $10 = ($0>>>0)<($9>>>0);
 if ($10) {
  $11 = (($out) + 528|0);
  $12 = (__ZNK13blargg_vectorIPKcEixEj($8,$0)|0);
  $13 = HEAP32[$12>>2]|0;
  __ZN8Gme_File11copy_field_EPcPKc($11,$13);
 }
 $14 = (($out) + 272|0);
 $15 = (($this) + 128|0);
 __ZN8Gme_File11copy_field_EPcPKci($14,$15,256);
 $16 = (($out) + 784|0);
 $17 = (($this) + 384|0);
 __ZN8Gme_File11copy_field_EPcPKci($16,$17,256);
 $18 = (($out) + 1040|0);
 $19 = (($this) + 640|0);
 __ZN8Gme_File11copy_field_EPcPKci($18,$19,256);
 $20 = (($out) + 1552|0);
 $21 = (($this) + 896|0);
 __ZN8Gme_File11copy_field_EPcPKci($20,$21,256);
 return (0|0);
}
function __ZN8Nsfe_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Nsf_EmuC2Ev($this);
 HEAP32[$this>>2] = ((44720 + 8|0));
 $0 = (($this) + 15760|0);
 __ZN9Nsfe_InfoC2Ev($0);
 $1 = (($this) + 16952|0);
 HEAP8[$1>>0] = 0;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,44824);
 return;
}
function __ZN8Nsfe_EmuD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((44720 + 8|0));
 $0 = (($this) + 15760|0);
 __ZN9Nsfe_InfoD2Ev($0);
 __ZN7Nsf_EmuD2Ev($this);
 return;
}
function __ZN8Nsfe_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8Nsfe_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN8Nsfe_Emu6unloadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16952|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (($this) + 15760|0);
  __ZN9Nsfe_Info6unloadEv($3);
 }
 __ZN7Nsf_Emu6unloadEv($this);
 return;
}
function __ZNK8Nsfe_Emu11track_info_EP12track_info_ti($this,$out,$track) {
 $this = $this|0;
 $out = $out|0;
 $track = $track|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 15760|0);
 (__ZNK9Nsfe_Info11track_info_EP12track_info_ti($0,$out,$track)|0);
 return (0|0);
}
function __ZN8Nsfe_Emu5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16952|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  HEAP8[$0>>0] = 1;
  $4 = (($this) + 15760|0);
  $5 = (__ZN9Nsfe_Info4loadER11Data_ReaderP7Nsf_Emu($4,$in,$this)|0);
  HEAP8[$0>>0] = 0;
  __ZN8Nsfe_Emu16disable_playlistEb($this,0);
  $$0 = $5;
  return ($$0|0);
 } else {
  $3 = (__ZN7Nsf_Emu5load_ER11Data_Reader($this,$in)|0);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN8Nsfe_Emu16disable_playlistEb($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 15760|0);
 __ZN9Nsfe_Info16disable_playlistEb($0,$b);
 $1 = (($this) + 15766|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 __ZN8Gme_File15set_track_countEi($this,$3);
 return;
}
function __ZN8Nsfe_Emu15clear_playlist_Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8Nsfe_Emu16disable_playlistEb($this,1);
 return;
}
function __ZN8Nsfe_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 15760|0);
 $1 = (__ZNK9Nsfe_Info11remap_trackEi($0,$track)|0);
 $2 = (__ZN7Nsf_Emu12start_track_Ei($this,$1)|0);
 return ($2|0);
}
function __ZN13blargg_vectorIPKcEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN13blargg_vectorIA4_cEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN13blargg_vectorIA4_cED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 _free($0);
 return;
}
function __ZN13blargg_vectorIPKcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 _free($0);
 return;
}
function __ZN13blargg_vectorIPKcE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 HEAP32[$this>>2] = 0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = 0;
 _free($0);
 return;
}
function __ZN13blargg_vectorIA4_cE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 HEAP32[$this>>2] = 0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = 0;
 _free($0);
 return;
}
function __ZL9read_strsR11Data_ReaderlR13blargg_vectorIcERS1_IPKcE($in,$size,$chars,$strs) {
 $in = $in|0;
 $size = $size|0;
 $chars = $chars|0;
 $strs = $strs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0$lcssa = 0, $count$05 = 0, $i$06 = 0, $i$1$lcssa = 0, $i$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($size) + 1)|0;
 $1 = (__ZN13blargg_vectorIcE6resizeEj($chars,$0)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = (__ZNK13blargg_vectorIcEixEj($chars,$size)|0);
 HEAP8[$3>>0] = 0;
 $4 = HEAP32[$in>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZNK13blargg_vectorIcEixEj($chars,0)|0);
 $8 = (FUNCTION_TABLE_iiii[$6 & 63]($in,$7,$size)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 $10 = (__ZN13blargg_vectorIPKcE6resizeEj($strs,128)|0);
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $$0 = $10;
  return ($$0|0);
 }
 $12 = ($size|0)>(0);
 L10: do {
  if ($12) {
   $count$05 = 0;$i$06 = 0;
   while(1) {
    $13 = (__ZNK13blargg_vectorIPKcE4sizeEv($strs)|0);
    $14 = ($13|0)>($count$05|0);
    if (!($14)) {
     $15 = $count$05 << 1;
     $16 = (__ZN13blargg_vectorIPKcE6resizeEj($strs,$15)|0);
     $17 = ($16|0)==(0|0);
     if (!($17)) {
      $$0 = $16;
      break;
     }
    }
    $18 = (__ZNK13blargg_vectorIcEixEj($chars,$i$06)|0);
    $19 = (($count$05) + 1)|0;
    $20 = (__ZNK13blargg_vectorIPKcEixEj($strs,$count$05)|0);
    HEAP32[$20>>2] = $18;
    $21 = ($i$06|0)<($size|0);
    L16: do {
     if ($21) {
      $i$12 = $i$06;
      while(1) {
       $24 = (__ZNK13blargg_vectorIcEixEj($chars,$i$12)|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(0);
       $23 = (($i$12) + 1)|0;
       if ($26) {
        $i$1$lcssa = $i$12;
        break L16;
       }
       $22 = ($23|0)<($size|0);
       if ($22) {
        $i$12 = $23;
       } else {
        $i$1$lcssa = $23;
        break;
       }
      }
     } else {
      $i$1$lcssa = $i$06;
     }
    } while(0);
    $27 = (($i$1$lcssa) + 1)|0;
    $28 = ($27|0)<($size|0);
    if ($28) {
     $count$05 = $19;$i$06 = $27;
    } else {
     $count$0$lcssa = $19;
     break L10;
    }
   }
   return ($$0|0);
  } else {
   $count$0$lcssa = 0;
  }
 } while(0);
 $29 = (__ZN13blargg_vectorIPKcE6resizeEj($strs,$count$0$lcssa)|0);
 $$0 = $29;
 return ($$0|0);
}
function __ZNK13blargg_vectorIPKcE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK13blargg_vectorIPKcEixEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 if ($2) {
  ___assert_fail((44880|0),(44896|0),51,(44944|0));
  // unreachable;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + ($n<<2)|0);
  return ($4|0);
 }
 return (0)|0;
}
function __ZL8copy_strPKcPci($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($out) + 255|0);
 HEAP8[$0>>0] = 0;
 (_strncpy(($out|0),($in|0),255)|0);
 return;
}
function __ZN13blargg_vectorIA4_cE6resizeEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = $n << 2;
 $2 = (_realloc($0,$1)|0);
 $3 = ($2|0)==(0|0);
 $4 = ($n|0)!=(0);
 $or$cond = $3 & $4;
 if ($or$cond) {
  $$0 = 50160;
  return ($$0|0);
 }
 HEAP32[$this>>2] = $2;
 $5 = (($this) + 4|0);
 HEAP32[$5>>2] = $n;
 $$0 = 0;
 return ($$0|0);
}
function __ZNK13blargg_vectorIA4_cE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZNK13blargg_vectorIA4_cE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK13blargg_vectorIA4_cEixEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 if ($2) {
  ___assert_fail((44880|0),(44896|0),51,(44944|0));
  // unreachable;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + ($n<<2)|0);
  return ($4|0);
 }
 return (0)|0;
}
function __ZN9Nsfe_Info6unloadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1152|0);
 __ZN13blargg_vectorIcE5clearEv($0);
 $1 = (($this) + 1160|0);
 __ZN13blargg_vectorIPKcE5clearEv($1);
 $2 = (($this) + 1168|0);
 __ZN13blargg_vectorIhE5clearEv($2);
 $3 = (($this) + 1176|0);
 __ZN13blargg_vectorIA4_cE5clearEv($3);
 return;
}
function __ZL12new_nsfe_emuv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(16960)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN8Nsfe_EmuC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZL13new_nsfe_filev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(1448)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN9Nsfe_FileC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZN9Nsfe_FileD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((44960 + 8|0));
 $0 = (($this) + 252|0);
 __ZN9Nsfe_InfoD2Ev($0);
 __ZN9Music_EmuD2Ev($this);
 return;
}
function __ZN9Nsfe_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Nsfe_FileD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN9Nsfe_File5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 $1 = (__ZN9Nsfe_Info4loadER11Data_ReaderP7Nsf_Emu($0,$in,0)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 __ZN9Nsfe_Info16disable_playlistEb($0,0);
 $3 = (($this) + 258|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 __ZN8Gme_File15set_track_countEi($this,$5);
 $$0 = 0;
 return ($$0|0);
}
function __ZNK9Nsfe_File11track_info_EP12track_info_ti($this,$out,$track) {
 $this = $this|0;
 $out = $out|0;
 $track = $track|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 (__ZNK9Nsfe_Info11track_info_EP12track_info_ti($0,$out,$track)|0);
 return (0|0);
}
function __ZNK13blargg_vectorIcEixEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 if ($2) {
  ___assert_fail((44880|0),(44896|0),51,(44944|0));
  // unreachable;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + ($n)|0);
  return ($4|0);
 }
 return (0)|0;
}
function __ZN13blargg_vectorIPKcE6resizeEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = $n << 2;
 $2 = (_realloc($0,$1)|0);
 $3 = ($2|0)==(0|0);
 $4 = ($n|0)!=(0);
 $or$cond = $3 & $4;
 if ($or$cond) {
  $$0 = 50160;
  return ($$0|0);
 }
 HEAP32[$this>>2] = $2;
 $5 = (($this) + 4|0);
 HEAP32[$5>>2] = $n;
 $$0 = 0;
 return ($$0|0);
}
function __ZN9Nsfe_FileC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Gme_Info_C2Ev($this);
 HEAP32[$this>>2] = ((44960 + 8|0));
 $0 = (($this) + 252|0);
 __ZN9Nsfe_InfoC2Ev($0);
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,44824);
 return;
}
function __ZN12Sap_Apu_ImplC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10Blip_SynthILi12ELi1EEC2Ev($this);
 $0 = (($this) + 816|0);
 __ZL8gen_polyjiPh(12,2,$0);
 $1 = (($this) + 818|0);
 __ZL8gen_polyjiPh(264,64,$1);
 $2 = (($this) + 882|0);
 __ZL8gen_polyjiPh(67584,16384,$2);
 return;
}
function __ZN7Sap_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 80|0);
 HEAP32[$0>>2] = 0;
 __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,0,0);
 __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,1,0);
 __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,2,0);
 __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,3,0);
 return;
}
function __ZN7Sap_Apu5resetEP12Sap_Apu_Impl($this,$new_impl) {
 $this = $this|0;
 $new_impl = $new_impl|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 80|0);
 HEAP32[$0>>2] = $new_impl;
 $1 = (($this) + 84|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;
 ;HEAP32[$this+0>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;HEAP32[$this+12>>2]=0|0;
 $2 = (($this) + 20|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $3 = (($this) + 40|0);
 ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 $4 = (($this) + 60|0);
 ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 return;
}
function __ZN7Sap_Apu9run_untilEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$ = 0, $$$ = 0, $$2 = 0, $$2$ = 0, $$21 = 0, $$5 = 0, $$7 = 0, $$lcssa23 = 0, $$lobit = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $delta1$0 = 0;
 var $exitcond = 0, $i$016 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, $osc_last_amp$0 = 0, $osc_last_amp$1$ph = 0, $osc_last_amp$2$lcssa = 0, $osc_last_amp$211 = 0, $osc_last_amp$3 = 0, $period2$0 = 0, $poly$1 = 0, $poly5_inc$0 = 0, $poly_inc$0 = 0, $poly_len$1 = 0, $poly_pos$0 = 0, $poly_pos$1 = 0, $poly_pos$2 = 0, $poly_pos$3$lcssa = 0, $poly_pos$39 = 0;
 var $poly_pos$5 = 0, $time$0 = 0, $time$1$lcssa = 0, $time$112 = 0, $time$2 = 0, $time$3 = 0, $time$4 = 0, $time2$0 = 0, $time2$1 = 0, $time2$2 = 0, $time2$2$end_time = 0, $time2$2$lcssa = 0, $volume$1 = 0, $volume$2 = 0, $volume$2$ = 0, $volume$3$ph = 0, $volume$4 = 0, $wave$0 = 0, $wave$1 = 0, $wave$2$lcssa = 0;
 var $wave$210 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Sap_Apu12calc_periodsEv($this);
 $0 = (($this) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 882|0);
 $3 = (($this) + 100|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 128;
 $6 = ($5|0)==(0);
 $7 = (($1) + 818|0);
 $$ = $6 ? 131071 : 511;
 $$2 = $6 ? $2 : $7;
 $8 = (($this) + 96|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9|0) % ($$|0))&-1;
 HEAP32[$8>>2] = $10;
 $11 = (($this) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($1) + 816|0);
 $14 = (($this) + 92|0);
 $15 = (($this) + 88|0);
 $19 = $12;$i$016 = 0;
 while(1) {
  $16 = ((($this) + (($i$016*20)|0)|0) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($19))|0;
  $20 = ((($this) + (($i$016*20)|0)|0) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($this) + (($i$016*20)|0)|0) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    $time$3 = $18;
   } else {
    __ZN11Blip_Buffer12set_modifiedEv($23);
    $25 = ((($this) + (($i$016*20)|0)|0) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = $27 << 1;
    $29 = $28 & 30;
    $30 = ($29|0)!=(0);
    $31 = $27 & 16;
    $32 = ($31|0)==(0);
    $or$cond4 = $30 & $32;
    if ($or$cond4) {
     $33 = $27 & 160;
     $34 = ($33|0)==(160);
     $35 = ($21|0)<(74);
     $or$cond = $34 & $35;
     if (!($or$cond)) {
      $42 = HEAP32[$3>>2]|0;
      $43 = (45072 + ($i$016)|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = $44&255;
      $46 = $45 & $42;
      $47 = ($46|0)==(0);
      if ($47) {
       $period2$0 = 0;$time2$0 = $end_time;$volume$1 = $29;
      } else {
       $$sum = (($i$016) + 2)|0;
       $48 = ((($this) + (($$sum*20)|0)|0) + 12|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = HEAP32[$11>>2]|0;
       $51 = ((($this) + (($$sum*20)|0)|0) + 8|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($52) + ($50))|0;
       $54 = ((($this) + (($i$016*20)|0)|0) + 3|0);
       $55 = HEAP8[$54>>0]|0;
       $56 = ($55<<24>>24)==(0);
       if ($56) {
        $period2$0 = $49;$time2$0 = $53;$volume$1 = $29;
       } else {
        $57 = ((($this) + (($i$016*20)|0)|0) + 4|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = (($58) - ($29))|0;
        HEAP32[$57>>2] = $59;
        $60 = (0 - ($29))|0;
        $period2$0 = $49;$time2$0 = $53;$volume$1 = $60;
       }
      }
      $61 = ($18|0)<($end_time|0);
      $62 = ($time2$0|0)<($end_time|0);
      $or$cond6 = $61 | $62;
      if ($or$cond6) {
       $63 = ((($this) + (($i$016*20)|0)|0) + 2|0);
       $64 = HEAP8[$63>>0]|0;
       $65 = $64&255;
       $66 = $65 & 1;
       $67 = $27 & 32;
       $68 = ($67|0)==(0);
       if ($68) {
        $69 = $27 & 64;
        $70 = ($69|0)==(0);
        $$2$ = $70 ? $$2 : $13;
        $$$ = $70 ? $$ : 15;
        $$21 = $70 ? $8 : $14;
        $poly_pos$0 = HEAP32[$$21>>2]|0;
        $71 = (($21|0) % ($$$|0))&-1;
        $72 = HEAP32[$16>>2]|0;
        $73 = (($72) + ($poly_pos$0))|0;
        $74 = (($73|0) % ($$$|0))&-1;
        $poly$1 = $$2$;$poly_inc$0 = $71;$poly_len$1 = $$$;$poly_pos$1 = $74;
       } else {
        $poly$1 = 45080;$poly_inc$0 = 1;$poly_len$1 = 16;$poly_pos$1 = $66;
       }
       $75 = (($poly_inc$0) - ($poly_len$1))|0;
       $76 = $27 & 128;
       $77 = ($76|0)==(0);
       if ($77) {
        $78 = HEAP32[$16>>2]|0;
        $79 = HEAP32[$15>>2]|0;
        $80 = (($79) + ($78))|0;
        $81 = (($80|0) % 31)&-1;
        $82 = (__Z9run_poly5ji(377253537,$81)|0);
        $83 = (($21|0) % 31)&-1;
        $poly5_inc$0 = $83;$wave$0 = $82;
       } else {
        $poly5_inc$0 = 0;$wave$0 = 377253537;
       }
       $84 = ((($this) + (($i$016*20)|0)|0) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $osc_last_amp$0 = $85;$poly_pos$2 = $poly_pos$1;$time$0 = $18;$time2$1 = $time2$0;$volume$2 = $volume$1;$wave$1 = $wave$0;
       while(1) {
        $86 = (0 - ($volume$2))|0;
        $87 = ($time2$1|0)<($time$0|0);
        if ($87) {
         $88 = ($volume$2|0)<(0);
         $volume$2$ = $88 ? $volume$2 : 0;
         $delta1$0 = (($volume$2$) - ($osc_last_amp$0))|0;
         $89 = ($volume$2$|0)==($osc_last_amp$0|0);
         if ($89) {
          $osc_last_amp$1$ph = $osc_last_amp$0;$volume$3$ph = $volume$2;
         } else {
          $90 = (($osc_last_amp$0) - ($volume$2))|0;
          $91 = (($90) + ($delta1$0))|0;
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($1,$time2$1,$delta1$0,$23);
          $osc_last_amp$1$ph = $91;$volume$3$ph = $86;
         }
        } else {
         $osc_last_amp$1$ph = $osc_last_amp$0;$volume$3$ph = $volume$2;
        }
        $time2$2 = $time2$1;
        while(1) {
         $92 = ($time2$2|0)>($time$0|0);
         $93 = (($time2$2) + ($period2$0))|0;
         if ($92) {
          $time2$2$lcssa = $time2$2;
          break;
         } else {
          $time2$2 = $93;
         }
        }
        $94 = ($time2$2$lcssa|0)<($end_time|0);
        $time2$2$end_time = $94 ? $time2$2$lcssa : $end_time;
        $95 = ($time$0|0)<($time2$2$end_time|0);
        if ($95) {
         $osc_last_amp$211 = $osc_last_amp$1$ph;$poly_pos$39 = $poly_pos$2;$time$112 = $time$0;$wave$210 = $wave$1;
         while(1) {
          $96 = $wave$210 & 1;
          $97 = ($96|0)==(0);
          if ($97) {
           $osc_last_amp$3 = $osc_last_amp$211;$poly_pos$5 = $poly_pos$39;
          } else {
           $98 = $poly_pos$39 >> 3;
           $99 = (($poly$1) + ($98)|0);
           $100 = HEAP8[$99>>0]|0;
           $101 = $100&255;
           $102 = $poly_pos$39 & 7;
           $103 = $101 >>> $102;
           $104 = $103 & 1;
           $105 = (0 - ($104))|0;
           $106 = $volume$3$ph & $105;
           $107 = (($poly_pos$39) + ($75))|0;
           $108 = ($107|0)<(0);
           $109 = (($poly_pos$39) + ($poly_inc$0))|0;
           $$7 = $108 ? $109 : $107;
           $110 = ($106|0)==($osc_last_amp$211|0);
           if ($110) {
            $osc_last_amp$3 = $osc_last_amp$211;$poly_pos$5 = $$7;
           } else {
            $111 = (($106) - ($osc_last_amp$211))|0;
            __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($1,$time$112,$111,$23);
            $osc_last_amp$3 = $106;$poly_pos$5 = $$7;
           }
          }
          $112 = (__Z9run_poly5ji($wave$210,$poly5_inc$0)|0);
          $113 = (($time$112) + ($21))|0;
          $114 = ($113|0)<($time2$2$end_time|0);
          if ($114) {
           $osc_last_amp$211 = $osc_last_amp$3;$poly_pos$39 = $poly_pos$5;$time$112 = $113;$wave$210 = $112;
          } else {
           $osc_last_amp$2$lcssa = $osc_last_amp$3;$poly_pos$3$lcssa = $poly_pos$5;$time$1$lcssa = $113;$wave$2$lcssa = $112;
           break;
          }
         }
        } else {
         $osc_last_amp$2$lcssa = $osc_last_amp$1$ph;$poly_pos$3$lcssa = $poly_pos$2;$time$1$lcssa = $time$0;$wave$2$lcssa = $wave$1;
        }
        $115 = ($time$1$lcssa|0)<($end_time|0);
        $brmerge = $115 | $94;
        if ($brmerge) {
         $osc_last_amp$0 = $osc_last_amp$2$lcssa;$poly_pos$2 = $poly_pos$3$lcssa;$time$0 = $time$1$lcssa;$time2$1 = $time2$2$lcssa;$volume$2 = $volume$3$ph;$wave$1 = $wave$2$lcssa;
        } else {
         break;
        }
       }
       $116 = $poly_pos$3$lcssa&255;
       HEAP8[$63>>0] = $116;
       HEAP32[$84>>2] = $osc_last_amp$2$lcssa;
       $time$2 = $time$1$lcssa;$volume$4 = $volume$3$ph;
      } else {
       $time$2 = $18;$volume$4 = $volume$1;
      }
      $117 = ((($this) + (($i$016*20)|0)|0) + 3|0);
      HEAP8[$117>>0] = 0;
      $118 = ($volume$4|0)<(0);
      if (!($118)) {
       $time$3 = $time$2;
       break;
      }
      $119 = ((($this) + (($i$016*20)|0)|0) + 4|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (($120) - ($volume$4))|0;
      HEAP32[$119>>2] = $121;
      HEAP8[$117>>0] = 1;
      $time$3 = $time$2;
      break;
     }
    }
    $$lobit = $31 >>> 4;
    $36 = $$lobit ^ 1;
    $$5 = $29 >>> $36;
    $37 = ((($this) + (($i$016*20)|0)|0) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($$5|0)==($38|0);
    if ($39) {
     $time$3 = $18;
    } else {
     $40 = (($$5) - ($38))|0;
     HEAP32[$37>>2] = $$5;
     $41 = HEAP32[$11>>2]|0;
     __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($1,$41,$40,$23);
     $time$3 = $18;
    }
   }
  } while(0);
  $122 = (($end_time) - ($time$3))|0;
  $123 = ($122|0)>(0);
  if ($123) {
   $124 = (($21) + -1)|0;
   $125 = (($124) + ($122))|0;
   $126 = (($125|0) / ($21|0))&-1;
   $127 = ((($this) + (($i$016*20)|0)|0) + 2|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128&255;
   $130 = $129 ^ $126;
   $131 = $130&255;
   HEAP8[$127>>0] = $131;
   $132 = Math_imul($126, $21)|0;
   $133 = (($132) + ($time$3))|0;
   $time$4 = $133;
  } else {
   $time$4 = $time$3;
  }
  $134 = (($time$4) - ($end_time))|0;
  HEAP32[$16>>2] = $134;
  $135 = (($i$016) + 1)|0;
  $136 = HEAP32[$11>>2]|0;
  $exitcond = ($135|0)==(4);
  if ($exitcond) {
   $$lcssa23 = $136;
   break;
  } else {
   $19 = $136;$i$016 = $135;
  }
 }
 $137 = (($end_time) - ($$lcssa23))|0;
 HEAP32[$11>>2] = $end_time;
 $138 = (($this) + 92|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (($139) + ($137))|0;
 $141 = (($140|0) % 15)&-1;
 HEAP32[$138>>2] = $141;
 $142 = (($this) + 88|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (($143) + ($137))|0;
 $145 = (($144|0) % 31)&-1;
 HEAP32[$142>>2] = $145;
 $146 = HEAP32[$8>>2]|0;
 $147 = (($146) + ($137))|0;
 HEAP32[$8>>2] = $147;
 return;
}
function __ZN7Sap_Apu10write_dataEiji($this,$time,$addr,$data) {
 $this = $this|0;
 $time = $time|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Sap_Apu9run_untilEi($this,$time);
 $0 = $addr >>> 1;
 $1 = $0 ^ 26880;
 $2 = ($1>>>0)<(4);
 if ($2) {
  $3 = $data&255;
  $4 = $addr & 1;
  $5 = ((($this) + (($1*20)|0)|0) + ($4)|0);
  HEAP8[$5>>0] = $3;
  return;
 }
 if ((($addr|0) == 53768)) {
  $6 = (($this) + 100|0);
  HEAP32[$6>>2] = $data;
  return;
 } else if ((($addr|0) == 53769)) {
  $7 = (($this) + 8|0);
  HEAP32[$7>>2] = 0;
  $8 = (($this) + 28|0);
  HEAP32[$8>>2] = 0;
  $9 = (($this) + 48|0);
  HEAP32[$9>>2] = 0;
  $10 = (($this) + 68|0);
  HEAP32[$10>>2] = 0;
  return;
 } else {
  return;
 }
}
function __ZN7Sap_Apu9end_frameEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($end_time|0);
 if ($2) {
  __ZN7Sap_Apu9run_untilEi($this,$end_time);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) - ($end_time))|0;
 HEAP32[$0>>2] = $4;
 return;
}
function __ZL8gen_polyjiPh($mask,$count,$out) {
 $mask = $mask|0;
 $count = $count|0;
 $out = $out|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $n$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $out;$$01 = $count;$n$0 = 1;
 while(1) {
  $0 = $n$0 & 1;
  $1 = $n$0 >>> 1;
  $2 = (0 - ($0))|0;
  $3 = $2 & $mask;
  $4 = $3 ^ $1;
  $5 = $4 & 1;
  $6 = $5 << 1;
  $7 = $6 | $0;
  $8 = $4 >>> 1;
  $9 = (0 - ($5))|0;
  $10 = $9 & $mask;
  $11 = $10 ^ $8;
  $12 = $11 & 1;
  $13 = $12 << 2;
  $14 = $13 | $7;
  $15 = $11 >>> 1;
  $16 = (0 - ($12))|0;
  $17 = $16 & $mask;
  $18 = $17 ^ $15;
  $19 = $18 & 1;
  $20 = $19 << 3;
  $21 = $20 | $14;
  $22 = $18 >>> 1;
  $23 = (0 - ($19))|0;
  $24 = $23 & $mask;
  $25 = $24 ^ $22;
  $26 = $25 & 1;
  $27 = $26 << 4;
  $28 = $27 | $21;
  $29 = $25 >>> 1;
  $30 = (0 - ($26))|0;
  $31 = $30 & $mask;
  $32 = $31 ^ $29;
  $33 = $32 & 1;
  $34 = $33 << 5;
  $35 = $34 | $28;
  $36 = $32 >>> 1;
  $37 = (0 - ($33))|0;
  $38 = $37 & $mask;
  $39 = $38 ^ $36;
  $40 = $39 & 1;
  $41 = $40 << 6;
  $42 = $41 | $35;
  $43 = $39 >>> 1;
  $44 = (0 - ($40))|0;
  $45 = $44 & $mask;
  $46 = $45 ^ $43;
  $47 = $46 & 1;
  $48 = $47 << 7;
  $49 = $48 | $42;
  $50 = $46 >>> 1;
  $51 = (0 - ($47))|0;
  $52 = $51 & $mask;
  $53 = $52 ^ $50;
  $54 = $49&255;
  $55 = (($$0) + 1|0);
  HEAP8[$$0>>0] = $54;
  $56 = (($$01) + -1)|0;
  $57 = ($56|0)==(0);
  if ($57) {
   break;
  } else {
   $$0 = $55;$$01 = $56;$n$0 = $53;
  }
 }
 return;
}
function __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,$i,$b) {
 $this = $this|0;
 $i = $i|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i>>>0)<(4);
 if ($0) {
  $1 = ((($this) + (($i*20)|0)|0) + 16|0);
  HEAP32[$1>>2] = $b;
  return;
 } else {
  ___assert_fail((45096|0),(45128|0),73,(46296|0));
  // unreachable;
 }
}
function __ZN7Sap_Apu12calc_periodsEv($this) {
 $this = $this|0;
 var $$ = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $period$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)!=(0);
 $$ = $3 ? 114 : 28;
 $i$01 = 0;
 while(1) {
  $4 = (($this) + (($i$01*20)|0)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = (($6) + 1)|0;
  $8 = Math_imul($7, $$)|0;
  $9 = HEAP32[$0>>2]|0;
  $10 = (45088 + ($i$01)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 & $9;
  $14 = ($13|0)==(0);
  if ($14) {
   $period$1 = $8;
  } else {
   $15 = (($6) + 4)|0;
   $16 = $i$01 & 1;
   $17 = ($16|0)==(0);
   if ($17) {
    $period$1 = $15;
   } else {
    $18 = $6 << 8;
    $$sum = (($i$01) + -1)|0;
    $19 = (($this) + (($$sum*20)|0)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = $21 | $18;
    $23 = (($22) + 7)|0;
    $24 = (($i$01) + -1)|0;
    $25 = (45088 + ($24)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = $27 & $9;
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = (($22) + 1)|0;
     $31 = Math_imul($30, $$)|0;
     $period$1 = $31;
    } else {
     $period$1 = $23;
    }
   }
  }
  $32 = ((($this) + (($i$01*20)|0)|0) + 12|0);
  HEAP32[$32>>2] = $period$1;
  $33 = (($i$01) + 1)|0;
  $exitcond = ($33|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $33;
  }
 }
 return;
}
function __Z9run_poly5ji($in,$shift) {
 $in = $in|0;
 $shift = $shift|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $in << $shift;
 $1 = $0 & 2147483647;
 $2 = (31 - ($shift))|0;
 $3 = $in >>> $2;
 $4 = $1 | $3;
 return ($4|0);
}
function __ZN7Sap_Emu9cpu_writeEji($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $$mask = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $data&255;
 $1 = ((($this) + ($addr)|0) + 1364|0);
 HEAP8[$1>>0] = $0;
 $$mask = $addr & -256;
 $2 = ($$mask|0)==(53760);
 if (!($2)) {
  return;
 }
 __ZN7Sap_Emu10cpu_write_Eji($this,$addr,$data);
 return;
}
function __ZN7Sap_Emu8cpu_readEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this) + ($addr)|0) + 1364|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 return ($2|0);
}
function __ZN7Sap_Cpu5resetEPv($this,$new_mem) {
 $this = $this|0;
 $new_mem = $new_mem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = $0;
 $2 = (($this) + 28|0);
 HEAP32[$2>>2] = $new_mem;
 $3 = (($this) + 5|0);
 HEAP8[$3>>0] = 4;
 $4 = (($this) + 6|0);
 HEAP8[$4>>0] = -1;
 $5 = (($this) + 16|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$0>>2] = 0;
 $6 = (($this) + 20|0);
 ;HEAP16[$this+0>>1]=0|0;HEAP16[$this+2>>1]=0|0;HEAP8[$this+4>>0]=0|0;
 HEAP32[$6>>2] = 1073741824;
 $7 = (($this) + 24|0);
 HEAP32[$7>>2] = 1073741824;
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN7Sap_Cpu3runEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$ = 0, $$15 = 0, $$16 = 0, $$17 = 0, $$18 = 0, $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$0$lcssa = 0, $a$0$phi = 0, $addr10$0 = 0, $addr13$0 = 0, $c$0 = 0, $c$0$lcssa = 0, $c$0$phi = 0, $c$1 = 0, $c$2 = 0;
 var $c$3 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$7 = 0, $c$8 = 0, $c$9 = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$17 = 0, $data$18 = 0, $data$19 = 0, $data$2 = 0;
 var $data$20 = 0, $data$21 = 0, $data$22 = 0, $data$23 = 0, $data$24 = 0, $data$25 = 0, $data$26 = 0, $data$27 = 0, $data$28 = 0, $data$29 = 0, $data$3 = 0, $data$30 = 0, $data$31 = 0, $data$32 = 0, $data$33 = 0, $data$34 = 0, $data$35 = 0, $data$36 = 0, $data$37 = 0, $data$38 = 0;
 var $data$39 = 0, $data$4 = 0, $data$40 = 0, $data$41 = 0, $data$42 = 0, $data$43 = 0, $data$44 = 0, $data$45 = 0, $data$46 = 0, $data$47 = 0, $data$48 = 0, $data$49 = 0, $data$5 = 0, $data$51 = 0, $data$52 = 0, $data$53 = 0, $data$56 = 0, $data$6 = 0, $data$7 = 0, $data$8 = 0;
 var $data$9 = 0, $illegal_encountered$0$off0 = 0, $new_time$0 = 0, $nz$0 = 0, $nz$0$lcssa = 0, $nz$0$phi = 0, $nz$1 = 0, $nz$2 = 0, $nz$3 = 0, $nz$4 = 0, $nz$5 = 0, $nz$6 = 0, $or$cond = 0, $pc$0 = 0, $pc$1 = 0, $pc$1$lcssa = 0, $pc$1$phi = 0, $pc$10 = 0, $pc$11 = 0, $pc$12 = 0;
 var $pc$13 = 0, $pc$14 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$19 = 0, $pc$2 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $s = 0, $s_time$0 = 0, $s_time$0$phi = 0, $s_time$1 = 0, $s_time$10 = 0, $s_time$11 = 0;
 var $s_time$12 = 0, $s_time$13 = 0, $s_time$14 = 0, $s_time$15 = 0, $s_time$16 = 0, $s_time$17 = 0, $s_time$18 = 0, $s_time$19 = 0, $s_time$2 = 0, $s_time$20 = 0, $s_time$21 = 0, $s_time$22 = 0, $s_time$23 = 0, $s_time$24 = 0, $s_time$25 = 0, $s_time$27 = 0, $s_time$3 = 0, $s_time$4 = 0, $s_time$5 = 0, $s_time$6 = 0;
 var $s_time$9 = 0, $sext = 0, $sp$0 = 0, $sp$0$lcssa = 0, $sp$0$phi = 0, $sp$1 = 0, $sp$2 = 0, $status$0 = 0, $status$0$lcssa = 0, $status$0$phi = 0, $status$1 = 0, $status$2 = 0, $temp25$0 = 0, $temp48$0 = 0, $x$0 = 0, $x$0$lcssa = 0, $x$0$phi = 0, $x$0$pn = 0, $x$0$pn10 = 0, $x$0$pn14 = 0;
 var $x$0$pn4 = 0, $x$0$pn6 = 0, $x$0$pn8 = 0, $y$0 = 0, $y$0$lcssa = 0, $y$0$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp;
 __ZN7Sap_Cpu12set_end_timeEi($this,$end_time);
 $0 = (($this) + 12|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $s;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = (($this) + 8|0);
 HEAP32[$11>>2] = $s;
 $12 = (($s) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($this) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP16[$this>>1]|0;
 $17 = $16&65535;
 $18 = (($this) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($this) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = (($this) + 4|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = (($this) + 6|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (($29) + 1)|0;
 $31 = $30 | 256;
 $32 = (($this) + 5|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 & 76;
 $36 = $34 << 8;
 $37 = $34 & 2;
 $38 = $37 | $36;
 $39 = $38 ^ 2;
 $40 = (($this) + 24|0);
 $41 = (($this) + -272|0);
 $42 = (($this) + -272|0);
 $43 = (($this) + -272|0);
 $44 = (($this) + -272|0);
 $45 = (($this) + -272|0);
 $46 = (($this) + -272|0);
 $47 = (($this) + -272|0);
 $48 = (($this) + -272|0);
 $49 = (($this) + -272|0);
 $50 = (($this) + -272|0);
 $51 = (($this) + -272|0);
 $52 = (($this) + -272|0);
 $53 = (($this) + -272|0);
 $54 = (($this) + -272|0);
 $55 = (($this) + -272|0);
 $56 = (($this) + -272|0);
 $57 = (($this) + -272|0);
 $58 = (($this) + -272|0);
 $59 = (($this) + -272|0);
 $60 = (($this) + 20|0);
 $61 = (($this) + 20|0);
 $62 = (($15) + 65534|0);
 $a$0 = $20;$c$0 = $36;$nz$0 = $39;$pc$1 = $17;$s_time$0 = $13;$sp$0 = $31;$status$0 = $35;$x$0 = $23;$y$0 = $26;
 L1: while(1) {
  $65 = $status$0 & 4;
  $66 = ($65|0)!=(0);
  $67 = (($15) + ($pc$1)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($pc$1) + 1)|0;
  $71 = (($15) + ($70)|0);
  $72 = (45168 + ($69)|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $64 = (($74) + ($s_time$0))|0;
  $75 = ($64|0)<(0);
  $76 = ($64|0)<($74|0);
  $or$cond = $75 | $76;
  if (!($or$cond)) {
   HEAP32[$12>>2] = $s_time$0;
   $79 = ($s_time$0|0)<(0);
   if ($79) {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $s_time$0;$pc$1$phi = $pc$1;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue;
   } else {
    $a$0$lcssa = $a$0;$c$0$lcssa = $c$0;$illegal_encountered$0$off0 = 0;$nz$0$lcssa = $nz$0;$pc$1$lcssa = $pc$1;$s_time$27 = $s_time$0;$sp$0$lcssa = $sp$0;$status$0$lcssa = $status$0;$x$0$lcssa = $x$0;$y$0$lcssa = $y$0;
    label = 195;
    break;
   }
  }
  $77 = HEAP8[$71>>0]|0;
  $78 = $77&255;
  do {
   switch ($69|0) {
   case 154:  {
    $741 = (($x$0) + 1)|0;
    $742 = $741 | 256;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$sp$0 = $742;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 186:  {
    $743 = (($sp$0) + 255)|0;
    $744 = $743 & 255;
    $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $744;$pc$1 = $70;$s_time$0 = $64;$x$0 = $744;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 72:  {
    $745 = (($sp$0) + -1)|0;
    $746 = $745 | 256;
    $747 = $a$0&255;
    $748 = (($15) + ($746)|0);
    HEAP8[$748>>0] = $747;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$sp$0 = $746;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 104:  {
    $749 = (($15) + ($sp$0)|0);
    $750 = HEAP8[$749>>0]|0;
    $751 = $750&255;
    $752 = (($sp$0) + -255)|0;
    $753 = $752 | 256;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$c$0$phi = $c$0;$a$0 = $751;$nz$0 = $751;$pc$1 = $70;$s_time$0 = $64;$sp$0 = $753;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 170:  {
    $y$0$phi = $y$0;$x$0$phi = $a$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $a$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 138:  {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $x$0;$c$0$phi = $c$0;$a$0$phi = $x$0;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 222:  {
    $733 = (__Z8get_le16PKv($71)|0);
    $734 = (($733) + ($x$0))|0;
    $data$56 = $734;$nz$4 = -1;
    label = 161;
    break;
   }
   case 206:  {
    $735 = (__Z8get_le16PKv($71)|0);
    $data$56 = $735;$nz$4 = -1;
    label = 161;
    break;
   }
   case 16:  {
    $114 = $77 << 24 >> 24;
    $115 = (($pc$1) + 2)|0;
    $116 = $nz$0 & 32896;
    $117 = ($116|0)==(0);
    if ($117) {
     $118 = $115 & 255;
     $119 = (($114) + ($118))|0;
     $120 = (($114) + ($115))|0;
     $121 = $119 >>> 8;
     $122 = $121 & 1;
     $123 = (($122) + ($64))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $120;$s_time$0 = $123;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $pc$0 = $115;
     label = 2;
    }
    break;
   }
   case 141:  {
    $216 = (__Z8get_le16PKv($71)|0);
    $217 = (($pc$1) + 3)|0;
    $218 = ($216>>>0)<(2048);
    if ($218) {
     $219 = $a$0&255;
     $220 = (($15) + ($216)|0);
     HEAP8[$220>>0] = $219;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $217;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $addr10$0 = $216;$pc$4 = $217;
     label = 41;
    }
    break;
   }
   case 157:  {
    $221 = (__Z8get_le16PKv($71)|0);
    $222 = (($221) + ($x$0))|0;
    $223 = (($pc$1) + 3)|0;
    $224 = ($222>>>0)<(2048);
    if ($224) {
     $225 = $a$0&255;
     $226 = (($15) + ($222)|0);
     HEAP8[$226>>0] = $225;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $223;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $addr10$0 = $222;$pc$4 = $223;
     label = 41;
    }
    break;
   }
   case 145:  {
    $228 = (($15) + ($78)|0);
    $229 = HEAP8[$228>>0]|0;
    $230 = $229&255;
    $231 = (($230) + ($y$0))|0;
    $232 = (($78) + 1)|0;
    $233 = $232 & 255;
    $234 = (($15) + ($233)|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = $235&255;
    $237 = $236 << 8;
    $238 = (($231) + ($237))|0;
    $239 = (($pc$1) + 2)|0;
    $addr10$0 = $238;$pc$4 = $239;
    label = 41;
    break;
   }
   case 129:  {
    $240 = (($78) + ($x$0))|0;
    $241 = (($240) + 1)|0;
    $242 = $241 & 255;
    $243 = (($15) + ($242)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = $245 << 8;
    $247 = $240 & 255;
    $248 = (($15) + ($247)|0);
    $249 = HEAP8[$248>>0]|0;
    $250 = $249&255;
    $251 = $246 | $250;
    $252 = (($pc$1) + 2)|0;
    $addr10$0 = $251;$pc$4 = $252;
    label = 41;
    break;
   }
   case 169:  {
    $253 = (($pc$1) + 2)|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $78;$nz$0 = $78;$pc$1 = $253;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 161:  {
    $254 = (($78) + ($x$0))|0;
    $255 = (($254) + 1)|0;
    $256 = $255 & 255;
    $257 = (($15) + ($256)|0);
    $258 = HEAP8[$257>>0]|0;
    $259 = $258&255;
    $260 = $259 << 8;
    $261 = $254 & 255;
    $262 = (($15) + ($261)|0);
    $263 = HEAP8[$262>>0]|0;
    $264 = $263&255;
    $265 = $260 | $264;
    $266 = (($pc$1) + 2)|0;
    $addr13$0 = $265;$pc$5 = $266;$s_time$4 = $64;
    label = 49;
    break;
   }
   case 177:  {
    $267 = (($15) + ($78)|0);
    $268 = HEAP8[$267>>0]|0;
    $269 = $268&255;
    $270 = (($269) + ($y$0))|0;
    $271 = $270 >>> 8;
    $272 = (($271) + ($64))|0;
    $273 = (($78) + 1)|0;
    $274 = $273 & 255;
    $275 = (($15) + ($274)|0);
    $276 = HEAP8[$275>>0]|0;
    $277 = $276&255;
    $278 = $277 << 8;
    $279 = (($278) + ($270))|0;
    $280 = (($pc$1) + 2)|0;
    $281 = (($15) + ($279)|0);
    $282 = HEAP8[$281>>0]|0;
    $283 = $282&255;
    $284 = $279 ^ 32768;
    $285 = ($284>>>0)<(40960);
    if ($285) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $283;$nz$0 = $283;$pc$1 = $280;$s_time$0 = $272;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
     continue L1;
    } else {
     $addr13$0 = $279;$pc$5 = $280;$s_time$4 = $272;
     label = 49;
    }
    break;
   }
   case 185:  {
    $286 = (($78) + ($y$0))|0;
    $287 = $286 >>> 8;
    $288 = (($287) + ($64))|0;
    $289 = (__Z8get_le16PKv($71)|0);
    $290 = (($289) + ($y$0))|0;
    $291 = (($pc$1) + 3)|0;
    $292 = (($15) + ($290)|0);
    $293 = HEAP8[$292>>0]|0;
    $294 = $293&255;
    $295 = $290 ^ 32768;
    $296 = ($295>>>0)<(40960);
    if ($296) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $294;$nz$0 = $294;$pc$1 = $291;$s_time$0 = $288;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
     continue L1;
    } else {
     $addr13$0 = $290;$pc$5 = $291;$s_time$4 = $288;
     label = 49;
    }
    break;
   }
   case 189:  {
    $297 = (($78) + ($x$0))|0;
    $298 = $297 >>> 8;
    $299 = (($298) + ($64))|0;
    $300 = (__Z8get_le16PKv($71)|0);
    $301 = (($300) + ($x$0))|0;
    $302 = (($pc$1) + 3)|0;
    $303 = (($15) + ($301)|0);
    $304 = HEAP8[$303>>0]|0;
    $305 = $304&255;
    $306 = $301 ^ 32768;
    $307 = ($306>>>0)<(40960);
    if ($307) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $305;$nz$0 = $305;$pc$1 = $302;$s_time$0 = $299;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
     continue L1;
    } else {
     $addr13$0 = $301;$pc$5 = $302;$s_time$4 = $299;
     label = 49;
    }
    break;
   }
   case 80:  {
    $309 = $77 << 24 >> 24;
    $310 = (($pc$1) + 2)|0;
    $311 = $status$0 & 64;
    $312 = ($311|0)==(0);
    if ($312) {
     $313 = $310 & 255;
     $314 = (($309) + ($313))|0;
     $315 = (($309) + ($310))|0;
     $316 = $314 >>> 8;
     $317 = $316 & 1;
     $318 = (($317) + ($64))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $315;$s_time$0 = $318;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $pc$0 = $310;
     label = 2;
    }
    break;
   }
   case 112:  {
    $319 = $77 << 24 >> 24;
    $320 = (($pc$1) + 2)|0;
    $321 = $status$0 & 64;
    $322 = ($321|0)==(0);
    if ($322) {
     $pc$0 = $320;
     label = 2;
    } else {
     $323 = $320 & 255;
     $324 = (($319) + ($323))|0;
     $325 = (($319) + ($320))|0;
     $326 = $324 >>> 8;
     $327 = $326 & 1;
     $328 = (($327) + ($64))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $325;$s_time$0 = $328;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    break;
   }
   case 176:  {
    $329 = $77 << 24 >> 24;
    $330 = (($pc$1) + 2)|0;
    $331 = $c$0 & 256;
    $332 = ($331|0)==(0);
    if ($332) {
     $pc$0 = $330;
     label = 2;
    } else {
     $333 = $330 & 255;
     $334 = (($329) + ($333))|0;
     $335 = (($329) + ($330))|0;
     $336 = $334 >>> 8;
     $337 = $336 & 1;
     $338 = (($337) + ($64))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $335;$s_time$0 = $338;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    break;
   }
   case 144:  {
    $339 = $77 << 24 >> 24;
    $340 = (($pc$1) + 2)|0;
    $341 = $c$0 & 256;
    $342 = ($341|0)==(0);
    if ($342) {
     $343 = $340 & 255;
     $344 = (($339) + ($343))|0;
     $345 = (($339) + ($340))|0;
     $346 = $344 >>> 8;
     $347 = $346 & 1;
     $348 = (($347) + ($64))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $345;$s_time$0 = $348;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $pc$0 = $340;
     label = 2;
    }
    break;
   }
   case 148:  {
    $349 = (($78) + ($x$0))|0;
    $350 = $349 & 255;
    $data$6 = $350;
    label = 59;
    break;
   }
   case 132:  {
    $data$6 = $78;
    label = 59;
    break;
   }
   case 150:  {
    $354 = (($78) + ($y$0))|0;
    $355 = $354 & 255;
    $data$7 = $355;
    label = 61;
    break;
   }
   case 134:  {
    $data$7 = $78;
    label = 61;
    break;
   }
   case 182:  {
    $359 = (($78) + ($y$0))|0;
    $360 = $359 & 255;
    $data$8 = $360;
    label = 63;
    break;
   }
   case 166:  {
    $data$8 = $78;
    label = 63;
    break;
   }
   case 162:  {
    $data$9 = $78;
    label = 64;
    break;
   }
   case 180:  {
    $365 = (($78) + ($x$0))|0;
    $366 = $365 & 255;
    $data$10 = $366;
    label = 66;
    break;
   }
   case 164:  {
    $data$10 = $78;
    label = 66;
    break;
   }
   case 160:  {
    $data$11 = $78;
    label = 67;
    break;
   }
   case 188:  {
    $371 = (($78) + ($x$0))|0;
    $372 = $371 >>> 8;
    $373 = (($372) + ($64))|0;
    $data$12 = $371;$s_time$5 = $373;
    label = 69;
    break;
   }
   case 172:  {
    $data$12 = $78;$s_time$5 = $64;
    label = 69;
    break;
   }
   case 190:  {
    $381 = (($78) + ($y$0))|0;
    $382 = $381 >>> 8;
    $383 = (($382) + ($64))|0;
    $data$13 = $381;$s_time$6 = $383;
    label = 71;
    break;
   }
   case 142:  {
    $temp25$0 = $x$0;
    label = 73;
    break;
   }
   case 174:  {
    $data$13 = $78;$s_time$6 = $64;
    label = 71;
    break;
   }
   case 140:  {
    $temp25$0 = $y$0;
    label = 73;
    break;
   }
   case 236:  {
    $397 = (__Z8get_le16PKv($71)|0);
    $398 = (($pc$1) + 2)|0;
    HEAP32[$12>>2] = $64;
    $399 = (__ZN7Sap_Emu8cpu_readEj($48,$397)|0);
    $data$14 = $399;$pc$6 = $398;
    label = 78;
    break;
   }
   case 228:  {
    $400 = (($15) + ($78)|0);
    $401 = HEAP8[$400>>0]|0;
    $402 = $401&255;
    $data$14 = $402;$pc$6 = $70;
    label = 78;
    break;
   }
   case 224:  {
    $data$14 = $78;$pc$6 = $70;
    label = 78;
    break;
   }
   case 204:  {
    $407 = (__Z8get_le16PKv($71)|0);
    $408 = (($pc$1) + 2)|0;
    HEAP32[$12>>2] = $64;
    $409 = (__ZN7Sap_Emu8cpu_readEj($49,$407)|0);
    $data$15 = $409;$pc$7 = $408;
    label = 81;
    break;
   }
   case 196:  {
    $410 = (($15) + ($78)|0);
    $411 = HEAP8[$410>>0]|0;
    $412 = $411&255;
    $data$15 = $412;$pc$7 = $70;
    label = 81;
    break;
   }
   case 192:  {
    $data$15 = $78;$pc$7 = $70;
    label = 81;
    break;
   }
   case 33:  {
    $417 = (($78) + ($x$0))|0;
    $418 = (($417) + 1)|0;
    $419 = $418 & 255;
    $420 = (($15) + ($419)|0);
    $421 = HEAP8[$420>>0]|0;
    $422 = $421&255;
    $423 = $422 << 8;
    $424 = $417 & 255;
    $425 = (($15) + ($424)|0);
    $426 = HEAP8[$425>>0]|0;
    $427 = $426&255;
    $428 = $423 | $427;
    $data$19 = $428;$pc$8 = $70;$s_time$10 = $64;
    label = 89;
    break;
   }
   case 49:  {
    $429 = (($15) + ($78)|0);
    $430 = HEAP8[$429>>0]|0;
    $431 = $430&255;
    $432 = (($431) + ($y$0))|0;
    $433 = (($78) + 1)|0;
    $434 = $433 & 255;
    $435 = (($15) + ($434)|0);
    $436 = HEAP8[$435>>0]|0;
    $437 = $436&255;
    $438 = $437 << 8;
    $439 = (($438) + ($432))|0;
    $440 = $432 >>> 8;
    $441 = (($440) + ($64))|0;
    $data$19 = $439;$pc$8 = $70;$s_time$10 = $441;
    label = 89;
    break;
   }
   case 53:  {
    $442 = (($78) + ($x$0))|0;
    $443 = $442 & 255;
    $data$16 = $443;
    label = 85;
    break;
   }
   case 37:  {
    $data$16 = $78;
    label = 85;
    break;
   }
   case 61:  {
    $x$0$pn10 = $x$0;
    label = 87;
    break;
   }
   case 57:  {
    $x$0$pn10 = $y$0;
    label = 87;
    break;
   }
   case 45:  {
    $data$18 = $78;$s_time$9 = $64;
    label = 88;
    break;
   }
   case 41:  {
    $data$20 = $78;$pc$9 = $70;$s_time$11 = $64;
    label = 90;
    break;
   }
   case 65:  {
    $458 = (($78) + ($x$0))|0;
    $459 = (($458) + 1)|0;
    $460 = $459 & 255;
    $461 = (($15) + ($460)|0);
    $462 = HEAP8[$461>>0]|0;
    $463 = $462&255;
    $464 = $463 << 8;
    $465 = $458 & 255;
    $466 = (($15) + ($465)|0);
    $467 = HEAP8[$466>>0]|0;
    $468 = $467&255;
    $469 = $464 | $468;
    $data$24 = $469;$pc$10 = $70;$s_time$13 = $64;
    label = 98;
    break;
   }
   case 81:  {
    $470 = (($15) + ($78)|0);
    $471 = HEAP8[$470>>0]|0;
    $472 = $471&255;
    $473 = (($472) + ($y$0))|0;
    $474 = (($78) + 1)|0;
    $475 = $474 & 255;
    $476 = (($15) + ($475)|0);
    $477 = HEAP8[$476>>0]|0;
    $478 = $477&255;
    $479 = $478 << 8;
    $480 = (($479) + ($473))|0;
    $481 = $473 >>> 8;
    $482 = (($481) + ($64))|0;
    $data$24 = $480;$pc$10 = $70;$s_time$13 = $482;
    label = 98;
    break;
   }
   case 85:  {
    $483 = (($78) + ($x$0))|0;
    $484 = $483 & 255;
    $data$21 = $484;
    label = 94;
    break;
   }
   case 69:  {
    $data$21 = $78;
    label = 94;
    break;
   }
   case 93:  {
    $x$0$pn8 = $x$0;
    label = 96;
    break;
   }
   case 89:  {
    $x$0$pn8 = $y$0;
    label = 96;
    break;
   }
   case 77:  {
    $data$23 = $78;$s_time$12 = $64;
    label = 97;
    break;
   }
   case 73:  {
    $data$25 = $78;$pc$11 = $70;$s_time$14 = $64;
    label = 99;
    break;
   }
   case 1:  {
    $499 = (($78) + ($x$0))|0;
    $500 = (($499) + 1)|0;
    $501 = $500 & 255;
    $502 = (($15) + ($501)|0);
    $503 = HEAP8[$502>>0]|0;
    $504 = $503&255;
    $505 = $504 << 8;
    $506 = $499 & 255;
    $507 = (($15) + ($506)|0);
    $508 = HEAP8[$507>>0]|0;
    $509 = $508&255;
    $510 = $505 | $509;
    $data$29 = $510;$pc$12 = $70;$s_time$16 = $64;
    label = 107;
    break;
   }
   case 17:  {
    $511 = (($15) + ($78)|0);
    $512 = HEAP8[$511>>0]|0;
    $513 = $512&255;
    $514 = (($513) + ($y$0))|0;
    $515 = (($78) + 1)|0;
    $516 = $515 & 255;
    $517 = (($15) + ($516)|0);
    $518 = HEAP8[$517>>0]|0;
    $519 = $518&255;
    $520 = $519 << 8;
    $521 = (($520) + ($514))|0;
    $522 = $514 >>> 8;
    $523 = (($522) + ($64))|0;
    $data$29 = $521;$pc$12 = $70;$s_time$16 = $523;
    label = 107;
    break;
   }
   case 21:  {
    $524 = (($78) + ($x$0))|0;
    $525 = $524 & 255;
    $data$26 = $525;
    label = 103;
    break;
   }
   case 5:  {
    $data$26 = $78;
    label = 103;
    break;
   }
   case 29:  {
    $x$0$pn6 = $x$0;
    label = 105;
    break;
   }
   case 25:  {
    $x$0$pn6 = $y$0;
    label = 105;
    break;
   }
   case 13:  {
    $data$28 = $78;$s_time$15 = $64;
    label = 106;
    break;
   }
   case 9:  {
    $data$30 = $78;$pc$13 = $70;$s_time$17 = $64;
    label = 108;
    break;
   }
   case 44:  {
    $540 = (__Z8get_le16PKv($71)|0);
    $541 = (($pc$1) + 3)|0;
    $542 = $status$0 & -65;
    $543 = (__ZN7Sap_Emu8cpu_readEj($53,$540)|0);
    $544 = $543 & 64;
    $545 = $544 | $542;
    $546 = $543 & $a$0;
    $547 = ($546|0)==(0);
    $548 = $543 << 8;
    $$ = $547 ? $548 : $543;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$;$pc$1 = $541;$s_time$0 = $64;$status$0 = $545;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 36:  {
    $549 = (($15) + ($78)|0);
    $550 = HEAP8[$549>>0]|0;
    $551 = $550&255;
    $552 = (($pc$1) + 2)|0;
    $553 = $status$0 & -65;
    $554 = $551 & 64;
    $555 = $554 | $553;
    $556 = $551 & $a$0;
    $557 = ($556|0)==(0);
    $558 = $551 << 8;
    $$15 = $557 ? $558 : $551;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$15;$pc$1 = $552;$s_time$0 = $64;$status$0 = $555;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 225:  {
    $559 = (($78) + ($x$0))|0;
    $560 = (($559) + 1)|0;
    $561 = $560 & 255;
    $562 = (($15) + ($561)|0);
    $563 = HEAP8[$562>>0]|0;
    $564 = $563&255;
    $565 = $564 << 8;
    $566 = $559 & 255;
    $567 = (($15) + ($566)|0);
    $568 = HEAP8[$567>>0]|0;
    $569 = $568&255;
    $570 = $565 | $569;
    $data$34 = $570;$pc$14 = $70;$s_time$19 = $64;
    label = 118;
    break;
   }
   case 241:  {
    $571 = (($15) + ($78)|0);
    $572 = HEAP8[$571>>0]|0;
    $573 = $572&255;
    $574 = (($573) + ($y$0))|0;
    $575 = (($78) + 1)|0;
    $576 = $575 & 255;
    $577 = (($15) + ($576)|0);
    $578 = HEAP8[$577>>0]|0;
    $579 = $578&255;
    $580 = $579 << 8;
    $581 = (($580) + ($574))|0;
    $582 = $574 >>> 8;
    $583 = (($582) + ($64))|0;
    $data$34 = $581;$pc$14 = $70;$s_time$19 = $583;
    label = 118;
    break;
   }
   case 245:  {
    $584 = (($78) + ($x$0))|0;
    $585 = $584 & 255;
    $data$31 = $585;
    label = 114;
    break;
   }
   case 229:  {
    $data$31 = $78;
    label = 114;
    break;
   }
   case 253:  {
    $x$0$pn4 = $x$0;
    label = 116;
    break;
   }
   case 249:  {
    $x$0$pn4 = $y$0;
    label = 116;
    break;
   }
   case 237:  {
    $data$33 = $78;$s_time$18 = $64;
    label = 117;
    break;
   }
   case 235: case 233:  {
    $data$35 = $78;$pc$15 = $70;$s_time$20 = $64;
    label = 119;
    break;
   }
   case 97:  {
    $599 = (($78) + ($x$0))|0;
    $600 = (($599) + 1)|0;
    $601 = $600 & 255;
    $602 = (($15) + ($601)|0);
    $603 = HEAP8[$602>>0]|0;
    $604 = $603&255;
    $605 = $604 << 8;
    $606 = $599 & 255;
    $607 = (($15) + ($606)|0);
    $608 = HEAP8[$607>>0]|0;
    $609 = $608&255;
    $610 = $605 | $609;
    $data$39 = $610;$pc$16 = $70;$s_time$22 = $64;
    label = 127;
    break;
   }
   case 113:  {
    $611 = (($15) + ($78)|0);
    $612 = HEAP8[$611>>0]|0;
    $613 = $612&255;
    $614 = (($613) + ($y$0))|0;
    $615 = (($78) + 1)|0;
    $616 = $615 & 255;
    $617 = (($15) + ($616)|0);
    $618 = HEAP8[$617>>0]|0;
    $619 = $618&255;
    $620 = $619 << 8;
    $621 = (($620) + ($614))|0;
    $622 = $614 >>> 8;
    $623 = (($622) + ($64))|0;
    $data$39 = $621;$pc$16 = $70;$s_time$22 = $623;
    label = 127;
    break;
   }
   case 117:  {
    $624 = (($78) + ($x$0))|0;
    $625 = $624 & 255;
    $data$36 = $625;
    label = 123;
    break;
   }
   case 101:  {
    $data$36 = $78;
    label = 123;
    break;
   }
   case 125:  {
    $x$0$pn = $x$0;
    label = 125;
    break;
   }
   case 121:  {
    $x$0$pn = $y$0;
    label = 125;
    break;
   }
   case 109:  {
    $data$38 = $78;$s_time$21 = $64;
    label = 126;
    break;
   }
   case 74:  {
    $c$1 = 0;
    label = 130;
    break;
   }
   case 105:  {
    $data$40 = $78;$pc$17 = $70;$s_time$23 = $64;
    break;
   }
   case 106:  {
    $c$1 = $c$0;
    label = 130;
    break;
   }
   case 10:  {
    $657 = $a$0 << 1;
    $658 = $657 & 254;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0 = $658;$c$0 = $657;$nz$0 = $657;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;
    continue L1;
    break;
   }
   case 42:  {
    $659 = $a$0 << 1;
    $660 = $c$0 >>> 8;
    $661 = $660 & 1;
    $662 = $659 | $661;
    $663 = $662 & 255;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0 = $663;$c$0 = $659;$nz$0 = $662;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;
    continue L1;
    break;
   }
   case 94:  {
    $664 = (($78) + ($x$0))|0;
    $data$41 = $664;
    label = 134;
    break;
   }
   case 78:  {
    $data$41 = $78;
    label = 134;
    break;
   }
   case 62:  {
    $676 = (($78) + ($x$0))|0;
    $c$3 = $c$0;$data$44 = $676;
    label = 139;
    break;
   }
   case 110:  {
    $c$2 = $c$0;$data$42 = $78;
    label = 135;
    break;
   }
   case 30:  {
    $677 = (($78) + ($x$0))|0;
    $data$43 = $677;
    label = 138;
    break;
   }
   case 14:  {
    $data$43 = $78;
    label = 138;
    break;
   }
   case 46:  {
    $c$3 = $c$0;$data$44 = $78;
    label = 139;
    break;
   }
   case 126:  {
    $691 = (($78) + ($x$0))|0;
    $c$2 = $c$0;$data$42 = $691;
    label = 135;
    break;
   }
   case 118:  {
    $692 = (($78) + ($x$0))|0;
    $693 = $692 & 255;
    $c$5 = $c$0;$data$47 = $693;
    label = 145;
    break;
   }
   case 86:  {
    $694 = (($78) + ($x$0))|0;
    $695 = $694 & 255;
    $data$46 = $695;
    label = 144;
    break;
   }
   case 70:  {
    $data$46 = $78;
    label = 144;
    break;
   }
   case 102:  {
    $c$5 = $c$0;$data$47 = $78;
    label = 145;
    break;
   }
   case 54:  {
    $704 = (($78) + ($x$0))|0;
    $705 = $704 & 255;
    $c$6 = $c$0;$data$49 = $705;
    label = 149;
    break;
   }
   case 22:  {
    $706 = (($78) + ($x$0))|0;
    $707 = $706 & 255;
    $data$48 = $707;
    label = 148;
    break;
   }
   case 6:  {
    $data$48 = $78;
    label = 148;
    break;
   }
   case 38:  {
    $c$6 = $c$0;$data$49 = $78;
    label = 149;
    break;
   }
   case 202:  {
    $715 = (($x$0) + -1)|0;
    $716 = $715 & 255;
    $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $715;$pc$1 = $70;$s_time$0 = $64;$x$0 = $716;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 136:  {
    $717 = (($y$0) + -1)|0;
    $718 = $717 & 255;
    $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $717;$pc$1 = $70;$s_time$0 = $64;$y$0 = $718;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 246:  {
    $719 = (($78) + ($x$0))|0;
    $720 = $719 & 255;
    $data$52 = $720;$nz$2 = 1;
    label = 155;
    break;
   }
   case 214:  {
    $721 = (($78) + ($x$0))|0;
    $722 = $721 & 255;
    $data$51 = $722;
    label = 154;
    break;
   }
   case 198:  {
    $data$51 = $78;
    label = 154;
    break;
   }
   case 230:  {
    $data$52 = $78;$nz$2 = 1;
    label = 155;
    break;
   }
   case 254:  {
    $730 = (__Z8get_le16PKv($71)|0);
    $731 = (($730) + ($x$0))|0;
    $data$56 = $731;$nz$4 = 1;
    label = 161;
    break;
   }
   case 238:  {
    $732 = (__Z8get_le16PKv($71)|0);
    $data$56 = $732;$nz$4 = 1;
    label = 161;
    break;
   }
   case 32:  {
    $100 = (($pc$1) + 2)|0;
    $101 = (__Z8get_le16PKv($71)|0);
    $102 = $100 >>> 8;
    $103 = $102&255;
    $104 = (($sp$0) + -1)|0;
    $105 = $104 | 256;
    $106 = (($15) + ($105)|0);
    HEAP8[$106>>0] = $103;
    $107 = (($sp$0) + -2)|0;
    $108 = $107 | 256;
    $109 = $100&255;
    $110 = (($15) + ($108)|0);
    HEAP8[$110>>0] = $109;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $101;$s_time$0 = $64;$sp$0 = $108;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 76:  {
    $111 = (__Z8get_le16PKv($71)|0);
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $111;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 201:  {
    $data$4 = $78;$pc$3 = $70;$s_time$3 = $64;
    label = 23;
    break;
   }
   case 48:  {
    $167 = $77 << 24 >> 24;
    $168 = (($pc$1) + 2)|0;
    $169 = $nz$0 & 32896;
    $170 = ($169|0)==(0);
    if ($170) {
     $pc$0 = $168;
     label = 2;
    } else {
     $171 = $168 & 255;
     $172 = (($167) + ($171))|0;
     $173 = (($167) + ($168))|0;
     $174 = $172 >>> 8;
     $175 = $174 & 1;
     $176 = (($175) + ($64))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $173;$s_time$0 = $176;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    break;
   }
   case 240:  {
    $177 = $77 << 24 >> 24;
    $178 = (($pc$1) + 2)|0;
    $179 = $nz$0&255;
    $180 = ($179<<24>>24)==(0);
    if ($180) {
     $181 = $178 & 255;
     $182 = (($177) + ($181))|0;
     $183 = (($177) + ($178))|0;
     $184 = $182 >>> 8;
     $185 = $184 & 1;
     $186 = (($185) + ($64))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $183;$s_time$0 = $186;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $pc$0 = $178;
     label = 2;
    }
    break;
   }
   case 250: case 218: case 122: case 90: case 58: case 26: case 234:  {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 133:  {
    $data$5 = $78;
    label = 29;
    break;
   }
   case 200:  {
    $192 = (($y$0) + 1)|0;
    $193 = $192 & 255;
    $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $192;$pc$1 = $70;$s_time$0 = $64;$y$0 = $193;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 168:  {
    $y$0$phi = $a$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $a$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 152:  {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $y$0;$c$0$phi = $c$0;$a$0$phi = $y$0;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 173:  {
    $194 = (__Z8get_le16PKv($71)|0);
    $195 = (($pc$1) + 3)|0;
    $196 = (__ZN7Sap_Emu8cpu_readEj($42,$194)|0);
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $196;$nz$0 = $196;$pc$1 = $195;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 96:  {
    $197 = (($15) + ($sp$0)|0);
    $198 = HEAP8[$197>>0]|0;
    $199 = $198&255;
    $200 = (($199) + 1)|0;
    $201 = (($sp$0) + -255)|0;
    $202 = $201 | 256;
    $203 = (($15) + ($202)|0);
    $204 = HEAP8[$203>>0]|0;
    $205 = $204&255;
    $206 = $205 << 8;
    $207 = (($200) + ($206))|0;
    $208 = (($sp$0) + -254)|0;
    $209 = $208 | 256;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $207;$s_time$0 = $64;$sp$0 = $209;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 153:  {
    $210 = (__Z8get_le16PKv($71)|0);
    $211 = (($210) + ($y$0))|0;
    $212 = (($pc$1) + 3)|0;
    $213 = ($211>>>0)<(2048);
    if ($213) {
     $214 = $a$0&255;
     $215 = (($15) + ($211)|0);
     HEAP8[$215>>0] = $214;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $212;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     $addr10$0 = $211;$pc$4 = $212;
     label = 41;
    }
    break;
   }
   case 232:  {
    $112 = (($x$0) + 1)|0;
    $113 = $112 & 255;
    $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $112;$pc$1 = $70;$s_time$0 = $64;$x$0 = $113;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 208:  {
    $90 = $77 << 24 >> 24;
    $91 = (($pc$1) + 2)|0;
    $92 = $nz$0&255;
    $93 = ($92<<24>>24)==(0);
    if ($93) {
     $pc$0 = $91;
     label = 2;
    } else {
     $94 = $91 & 255;
     $95 = (($90) + ($94))|0;
     $96 = (($90) + ($91))|0;
     $97 = $95 >>> 8;
     $98 = $97 & 1;
     $99 = (($98) + ($64))|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $96;$s_time$0 = $99;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    break;
   }
   case 205:  {
    $data$2 = $78;$s_time$1 = $64;
    label = 21;
    break;
   }
   case 193:  {
    $124 = (($78) + ($x$0))|0;
    $125 = (($124) + 1)|0;
    $126 = $125 & 255;
    $127 = (($15) + ($126)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = $129 << 8;
    $131 = $124 & 255;
    $132 = (($15) + ($131)|0);
    $133 = HEAP8[$132>>0]|0;
    $134 = $133&255;
    $135 = $130 | $134;
    $data$3 = $135;$pc$2 = $70;$s_time$2 = $64;
    label = 22;
    break;
   }
   case 209:  {
    $136 = (($15) + ($78)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $139 = (($138) + ($y$0))|0;
    $140 = (($78) + 1)|0;
    $141 = $140 & 255;
    $142 = (($15) + ($141)|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = $143&255;
    $145 = $144 << 8;
    $146 = (($145) + ($139))|0;
    $147 = $139 >>> 8;
    $148 = (($147) + ($64))|0;
    $data$3 = $146;$pc$2 = $70;$s_time$2 = $148;
    label = 22;
    break;
   }
   case 213:  {
    $149 = (($78) + ($x$0))|0;
    $150 = $149 & 255;
    $data$0 = $150;
    label = 18;
    break;
   }
   case 197:  {
    $data$0 = $78;
    label = 18;
    break;
   }
   case 221:  {
    $x$0$pn14 = $x$0;
    label = 20;
    break;
   }
   case 217:  {
    $x$0$pn14 = $y$0;
    label = 20;
    break;
   }
   case 165:  {
    $86 = (($15) + ($78)|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&255;
    $89 = (($pc$1) + 2)|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $88;$nz$0 = $88;$pc$1 = $89;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 181:  {
    $80 = (($78) + ($x$0))|0;
    $81 = $80 & 255;
    $82 = (($15) + ($81)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = (($pc$1) + 2)|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $84;$nz$0 = $84;$pc$1 = $85;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 149:  {
    $187 = (($78) + ($x$0))|0;
    $188 = $187 & 255;
    $data$5 = $188;
    label = 29;
    break;
   }
   case 64:  {
    $754 = (($15) + ($sp$0)|0);
    $755 = HEAP8[$754>>0]|0;
    $756 = $755&255;
    $757 = (($sp$0) + -255)|0;
    $758 = $757 | 256;
    $759 = (($15) + ($758)|0);
    $760 = HEAP8[$759>>0]|0;
    $761 = $760&255;
    $762 = (($sp$0) + -254)|0;
    $763 = $762 | 256;
    $764 = (($15) + ($763)|0);
    $765 = HEAP8[$764>>0]|0;
    $766 = $765&255;
    $767 = $766 << 8;
    $768 = $767 | $761;
    $769 = (($sp$0) + -253)|0;
    $770 = $769 | 256;
    $771 = $756 & 76;
    $772 = $756 << 8;
    $773 = $756 & 2;
    $774 = $773 | $772;
    $775 = $774 ^ 2;
    $776 = $771&255;
    HEAP8[$32>>0] = $776;
    $777 = $756 ^ $status$0;
    $778 = $777 & 4;
    $779 = ($778|0)==(0);
    if ($779) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $772;$nz$0 = $775;$pc$1 = $768;$s_time$0 = $64;$sp$0 = $770;$status$0 = $771;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $780 = HEAP32[$40>>2]|0;
    $781 = $756 & 4;
    $782 = ($781|0)==(0);
    if ($782) {
     $783 = HEAP32[$60>>2]|0;
     $784 = ($780|0)>($783|0);
     $$16 = $784 ? $783 : $780;
     $new_time$0 = $$16;
    } else {
     $new_time$0 = $780;
    }
    $785 = HEAP32[$s>>2]|0;
    HEAP32[$s>>2] = $new_time$0;
    $786 = (($64) - ($new_time$0))|0;
    $787 = (($786) + ($785))|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $772;$nz$0 = $775;$pc$1 = $768;$s_time$0 = $787;$sp$0 = $770;$status$0 = $771;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 40:  {
    $788 = (($15) + ($sp$0)|0);
    $789 = HEAP8[$788>>0]|0;
    $790 = $789&255;
    $791 = (($sp$0) + -255)|0;
    $792 = $791 | 256;
    $793 = $790 ^ $status$0;
    $794 = $790 & 76;
    $795 = $790 << 8;
    $796 = $790 & 2;
    $797 = $796 | $795;
    $798 = $797 ^ 2;
    $799 = $793 & 4;
    $800 = ($799|0)==(0);
    if ($800) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $795;$nz$0 = $798;$pc$1 = $70;$s_time$0 = $64;$sp$0 = $792;$status$0 = $794;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $801 = $790 & 4;
    $802 = ($801|0)==(0);
    if ($802) {
     $c$8 = $795;$nz$5 = $798;$sp$1 = $792;$status$1 = $794;
     label = 183;
    } else {
     $c$9 = $795;$nz$6 = $798;$sp$2 = $792;$status$2 = $794;
     label = 189;
    }
    break;
   }
   case 8:  {
    $803 = $status$0 & 76;
    $804 = $nz$0 >>> 8;
    $805 = $804 | $nz$0;
    $806 = $805 & 128;
    $807 = $803 | $806;
    $808 = $c$0 >>> 8;
    $809 = $808 & 1;
    $810 = $807 | $809;
    $811 = $nz$0 & 255;
    $812 = ($811|0)==(0);
    $813 = $810 | 2;
    $$17 = $812 ? $813 : $810;
    $814 = (($sp$0) + -1)|0;
    $815 = $814 | 256;
    $816 = $$17 | 48;
    $817 = $816&255;
    $818 = (($15) + ($815)|0);
    HEAP8[$818>>0] = $817;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$sp$0 = $815;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 56:  {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = -1;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 108:  {
    $819 = (__Z8get_le16PKv($71)|0);
    $820 = (($15) + ($819)|0);
    $821 = HEAP8[$820>>0]|0;
    $822 = $821&255;
    $823 = $819 & 65280;
    $824 = (($819) + 1)|0;
    $825 = $824 & 255;
    $826 = $825 | $823;
    $827 = (($15) + ($826)|0);
    $828 = HEAP8[$827>>0]|0;
    $829 = $828&255;
    $830 = $829 << 8;
    $831 = $830 | $822;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $831;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 24:  {
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = 0;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 184:  {
    $832 = $status$0 & -65;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$status$0 = $832;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 216:  {
    $833 = $status$0 & -9;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$status$0 = $833;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 248:  {
    $834 = $status$0 | 8;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$status$0 = $834;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 88:  {
    if (!($66)) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $835 = $status$0 & -5;
    $c$8 = $c$0;$nz$5 = $nz$0;$sp$1 = $sp$0;$status$1 = $835;
    label = 183;
    break;
   }
   case 120:  {
    if ($66) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $846 = $status$0 | 4;
    $c$9 = $c$0;$nz$6 = $nz$0;$sp$2 = $sp$0;$status$2 = $846;
    label = 189;
    break;
   }
   case 252: case 220: case 124: case 92: case 60: case 28:  {
    $852 = (($78) + ($x$0))|0;
    $853 = $852 >>> 8;
    $854 = (($853) + ($64))|0;
    $s_time$24 = $854;
    label = 191;
    break;
   }
   case 12:  {
    $s_time$24 = $64;
    label = 191;
    break;
   }
   case 244: case 226: case 212: case 194: case 137: case 130: case 128: case 100: case 84: case 68: case 52: case 20: case 4: case 116:  {
    $pc$19 = $70;$s_time$25 = $64;
    label = 192;
    break;
   }
   case 0:  {
    $857 = ($pc$1>>>0)>(65278);
    if ($857) {
     $a$0$lcssa = $a$0;$c$0$lcssa = $c$0;$illegal_encountered$0$off0 = 0;$nz$0$lcssa = $nz$0;$pc$1$lcssa = $pc$1;$s_time$27 = $64;$sp$0$lcssa = $sp$0;$status$0$lcssa = $status$0;$x$0$lcssa = $x$0;$y$0$lcssa = $y$0;
     label = 195;
     break L1;
    }
    $858 = (($pc$1) + 2)|0;
    $859 = $858 >>> 8;
    $860 = $859&255;
    $861 = (($sp$0) + -1)|0;
    $862 = $861 | 256;
    $863 = (($15) + ($862)|0);
    HEAP8[$863>>0] = $860;
    $864 = $858&255;
    $865 = (($sp$0) + -2)|0;
    $866 = $865 | 256;
    $867 = (($15) + ($866)|0);
    HEAP8[$867>>0] = $864;
    $868 = (__Z8get_le16PKv($62)|0);
    $869 = (($sp$0) + -3)|0;
    $870 = $869 | 256;
    $871 = $status$0 & 76;
    $872 = $nz$0 >>> 8;
    $873 = $872 | $nz$0;
    $874 = $873 & 128;
    $875 = $871 | $874;
    $876 = $c$0 >>> 8;
    $877 = $876 & 1;
    $878 = $875 | $877;
    $879 = $nz$0 & 255;
    $880 = ($879|0)==(0);
    $881 = $878 | 2;
    $temp48$0 = $880 ? $881 : $878;
    $882 = $temp48$0 | 48;
    $883 = $882&255;
    $884 = (($15) + ($870)|0);
    HEAP8[$884>>0] = $883;
    $885 = $status$0 & -13;
    $886 = $885 | 4;
    $887 = $886&255;
    HEAP8[$32>>0] = $887;
    $888 = HEAP32[$s>>2]|0;
    $889 = HEAP32[$40>>2]|0;
    HEAP32[$s>>2] = $889;
    $890 = (($64) + 7)|0;
    $891 = (($890) + ($888))|0;
    $892 = (($891) - ($889))|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $868;$s_time$0 = $892;$sp$0 = $870;$status$0 = $886;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   default: {
    $a$0$lcssa = $a$0;$c$0$lcssa = $c$0;$illegal_encountered$0$off0 = 1;$nz$0$lcssa = $nz$0;$pc$1$lcssa = $pc$1;$s_time$27 = $64;$sp$0$lcssa = $sp$0;$status$0$lcssa = $status$0;$x$0$lcssa = $x$0;$y$0$lcssa = $y$0;
    label = 195;
    break L1;
   }
   }
  } while(0);
  switch (label|0) {
   case 2: {
    label = 0;
    $63 = (($64) + -1)|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$0;$s_time$0 = $63;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 18: {
    label = 0;
    $151 = (($15) + ($data$0)|0);
    $152 = HEAP8[$151>>0]|0;
    $153 = $152&255;
    $data$4 = $153;$pc$3 = $70;$s_time$3 = $64;
    label = 23;
    break;
   }
   case 20: {
    label = 0;
    $data$1 = (($x$0$pn14) + ($78))|0;
    $154 = $data$1 >>> 8;
    $155 = (($154) + ($64))|0;
    $data$2 = $data$1;$s_time$1 = $155;
    label = 21;
    break;
   }
   case 29: {
    label = 0;
    $189 = (($pc$1) + 2)|0;
    $190 = $a$0&255;
    $191 = (($15) + ($data$5)|0);
    HEAP8[$191>>0] = $190;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $189;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 41: {
    label = 0;
    HEAP32[$12>>2] = $64;
    __ZN7Sap_Emu9cpu_writeEji($43,$addr10$0,$a$0);
    $227 = HEAP32[$12>>2]|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$4;$s_time$0 = $227;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 49: {
    label = 0;
    HEAP32[$12>>2] = $s_time$4;
    $308 = (__ZN7Sap_Emu8cpu_readEj($44,$addr13$0)|0);
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $308;$nz$0 = $308;$pc$1 = $pc$5;$s_time$0 = $s_time$4;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
    continue L1;
    break;
   }
   case 59: {
    label = 0;
    $351 = (($pc$1) + 2)|0;
    $352 = $y$0&255;
    $353 = (($15) + ($data$6)|0);
    HEAP8[$353>>0] = $352;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $351;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 61: {
    label = 0;
    $356 = (($pc$1) + 2)|0;
    $357 = $x$0&255;
    $358 = (($15) + ($data$7)|0);
    HEAP8[$358>>0] = $357;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $356;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 63: {
    label = 0;
    $361 = (($15) + ($data$8)|0);
    $362 = HEAP8[$361>>0]|0;
    $363 = $362&255;
    $data$9 = $363;
    label = 64;
    break;
   }
   case 66: {
    label = 0;
    $367 = (($15) + ($data$10)|0);
    $368 = HEAP8[$367>>0]|0;
    $369 = $368&255;
    $data$11 = $369;
    label = 67;
    break;
   }
   case 69: {
    label = 0;
    $$sum12 = (($pc$1) + 2)|0;
    $374 = (($15) + ($$sum12)|0);
    $375 = HEAP8[$374>>0]|0;
    $376 = $375&255;
    $377 = $376 << 8;
    $378 = (($377) + ($data$12))|0;
    $379 = (($pc$1) + 3)|0;
    HEAP32[$12>>2] = $s_time$5;
    $380 = (__ZN7Sap_Emu8cpu_readEj($45,$378)|0);
    $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $380;$pc$1 = $379;$s_time$0 = $s_time$5;$y$0 = $380;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 71: {
    label = 0;
    $$sum11 = (($pc$1) + 2)|0;
    $384 = (($15) + ($$sum11)|0);
    $385 = HEAP8[$384>>0]|0;
    $386 = $385&255;
    $387 = $386 << 8;
    $388 = (($387) + ($data$13))|0;
    $389 = (($pc$1) + 3)|0;
    HEAP32[$12>>2] = $s_time$6;
    $390 = (__ZN7Sap_Emu8cpu_readEj($46,$388)|0);
    $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $390;$pc$1 = $389;$s_time$0 = $s_time$6;$x$0 = $390;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 73: {
    label = 0;
    $391 = (__Z8get_le16PKv($71)|0);
    $392 = (($pc$1) + 3)|0;
    $393 = ($391>>>0)<(2048);
    if ($393) {
     $394 = $temp25$0&255;
     $395 = (($15) + ($391)|0);
     HEAP8[$395>>0] = $394;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $392;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    } else {
     HEAP32[$12>>2] = $64;
     __ZN7Sap_Emu9cpu_writeEji($47,$391,$temp25$0);
     $396 = HEAP32[$12>>2]|0;
     $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $392;$s_time$0 = $396;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    break;
   }
   case 78: {
    label = 0;
    $403 = (($x$0) - ($data$14))|0;
    $404 = (($pc$6) + 1)|0;
    $405 = $403 ^ -1;
    $406 = $403 & 255;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $405;$nz$0 = $406;$pc$1 = $404;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 81: {
    label = 0;
    $413 = (($y$0) - ($data$15))|0;
    $414 = (($pc$7) + 1)|0;
    $415 = $413 ^ -1;
    $416 = $413 & 255;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $415;$nz$0 = $416;$pc$1 = $414;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 85: {
    label = 0;
    $444 = (($15) + ($data$16)|0);
    $445 = HEAP8[$444>>0]|0;
    $446 = $445&255;
    $data$20 = $446;$pc$9 = $70;$s_time$11 = $64;
    label = 90;
    break;
   }
   case 87: {
    label = 0;
    $data$17 = (($x$0$pn10) + ($78))|0;
    $447 = $data$17 >>> 8;
    $448 = (($447) + ($64))|0;
    $data$18 = $data$17;$s_time$9 = $448;
    label = 88;
    break;
   }
   case 94: {
    label = 0;
    $485 = (($15) + ($data$21)|0);
    $486 = HEAP8[$485>>0]|0;
    $487 = $486&255;
    $data$25 = $487;$pc$11 = $70;$s_time$14 = $64;
    label = 99;
    break;
   }
   case 96: {
    label = 0;
    $data$22 = (($x$0$pn8) + ($78))|0;
    $488 = $data$22 >>> 8;
    $489 = (($488) + ($64))|0;
    $data$23 = $data$22;$s_time$12 = $489;
    label = 97;
    break;
   }
   case 103: {
    label = 0;
    $526 = (($15) + ($data$26)|0);
    $527 = HEAP8[$526>>0]|0;
    $528 = $527&255;
    $data$30 = $528;$pc$13 = $70;$s_time$17 = $64;
    label = 108;
    break;
   }
   case 105: {
    label = 0;
    $data$27 = (($x$0$pn6) + ($78))|0;
    $529 = $data$27 >>> 8;
    $530 = (($529) + ($64))|0;
    $data$28 = $data$27;$s_time$15 = $530;
    label = 106;
    break;
   }
   case 114: {
    label = 0;
    $586 = (($15) + ($data$31)|0);
    $587 = HEAP8[$586>>0]|0;
    $588 = $587&255;
    $data$35 = $588;$pc$15 = $70;$s_time$20 = $64;
    label = 119;
    break;
   }
   case 116: {
    label = 0;
    $data$32 = (($x$0$pn4) + ($78))|0;
    $589 = $data$32 >>> 8;
    $590 = (($589) + ($64))|0;
    $data$33 = $data$32;$s_time$18 = $590;
    label = 117;
    break;
   }
   case 123: {
    label = 0;
    $626 = (($15) + ($data$36)|0);
    $627 = HEAP8[$626>>0]|0;
    $628 = $627&255;
    $data$40 = $628;$pc$17 = $70;$s_time$23 = $64;
    break;
   }
   case 125: {
    label = 0;
    $data$37 = (($x$0$pn) + ($78))|0;
    $629 = $data$37 >>> 8;
    $630 = (($629) + ($64))|0;
    $data$38 = $data$37;$s_time$21 = $630;
    label = 126;
    break;
   }
   case 130: {
    label = 0;
    $652 = $c$1 >>> 1;
    $653 = $652 & 128;
    $654 = $a$0 << 8;
    $655 = $a$0 >>> 1;
    $656 = $653 | $655;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0 = $656;$c$0 = $654;$nz$0 = $656;$pc$1 = $70;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;
    continue L1;
    break;
   }
   case 134: {
    label = 0;
    $c$2 = 0;$data$42 = $data$41;
    label = 135;
    break;
   }
   case 138: {
    label = 0;
    $c$3 = 0;$data$44 = $data$43;
    label = 139;
    break;
   }
   case 144: {
    label = 0;
    $c$5 = 0;$data$47 = $data$46;
    label = 145;
    break;
   }
   case 148: {
    label = 0;
    $c$6 = 0;$data$49 = $data$48;
    label = 149;
    break;
   }
   case 154: {
    label = 0;
    $data$52 = $data$51;$nz$2 = -1;
    label = 155;
    break;
   }
   case 161: {
    label = 0;
    HEAP32[$12>>2] = $64;
    $736 = (__ZN7Sap_Emu8cpu_readEj($59,$data$56)|0);
    $737 = (($736) + ($nz$4))|0;
    $738 = (($pc$1) + 3)|0;
    $739 = $737 & 255;
    __ZN7Sap_Emu9cpu_writeEji($59,$data$56,$739);
    $740 = HEAP32[$12>>2]|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $737;$pc$1 = $738;$s_time$0 = $740;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 183: {
    label = 0;
    $836 = $status$1&255;
    HEAP8[$32>>0] = $836;
    $837 = HEAP32[$s>>2]|0;
    $838 = HEAP32[$61>>2]|0;
    $839 = (($837) - ($838))|0;
    $840 = ($839|0)<(1);
    if ($840) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$pc$1 = $70;$s_time$0 = $64;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    HEAP32[$s>>2] = $838;
    $841 = (($839) + ($64))|0;
    $842 = ($841|0)<(0);
    if ($842) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$pc$1 = $70;$s_time$0 = $841;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $843 = (($841) + 1)|0;
    $844 = ($839|0)<($843|0);
    if ($844) {
     $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$pc$1 = $70;$s_time$0 = $841;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
     continue L1;
    }
    $845 = (($843) + ($838))|0;
    HEAP32[$s>>2] = $845;
    HEAP32[$61>>2] = $845;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$pc$1 = $70;$s_time$0 = -1;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 189: {
    label = 0;
    $847 = $status$2&255;
    HEAP8[$32>>0] = $847;
    $848 = HEAP32[$s>>2]|0;
    $849 = HEAP32[$40>>2]|0;
    HEAP32[$s>>2] = $849;
    $850 = (($848) + ($64))|0;
    $851 = (($850) - ($849))|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $c$9;$nz$0 = $nz$6;$pc$1 = $70;$s_time$0 = $851;$sp$0 = $sp$2;$status$0 = $status$2;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 191: {
    label = 0;
    $855 = (($pc$1) + 2)|0;
    $pc$19 = $855;$s_time$25 = $s_time$24;
    label = 192;
    break;
   }
  }
  switch (label|0) {
   case 21: {
    label = 0;
    $156 = (($pc$1) + 2)|0;
    $157 = (($15) + ($156)|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $158&255;
    $160 = $159 << 8;
    $161 = (($160) + ($data$2))|0;
    $data$3 = $161;$pc$2 = $156;$s_time$2 = $s_time$1;
    label = 22;
    break;
   }
   case 64: {
    label = 0;
    $364 = (($pc$1) + 2)|0;
    $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$9;$pc$1 = $364;$s_time$0 = $64;$x$0 = $data$9;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 67: {
    label = 0;
    $370 = (($pc$1) + 2)|0;
    $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$11;$pc$1 = $370;$s_time$0 = $64;$y$0 = $data$11;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
   case 88: {
    label = 0;
    $449 = (($pc$1) + 2)|0;
    $450 = (($15) + ($449)|0);
    $451 = HEAP8[$450>>0]|0;
    $452 = $451&255;
    $453 = $452 << 8;
    $454 = (($453) + ($data$18))|0;
    $data$19 = $454;$pc$8 = $449;$s_time$10 = $s_time$9;
    label = 89;
    break;
   }
   case 97: {
    label = 0;
    $490 = (($pc$1) + 2)|0;
    $491 = (($15) + ($490)|0);
    $492 = HEAP8[$491>>0]|0;
    $493 = $492&255;
    $494 = $493 << 8;
    $495 = (($494) + ($data$23))|0;
    $data$24 = $495;$pc$10 = $490;$s_time$13 = $s_time$12;
    label = 98;
    break;
   }
   case 106: {
    label = 0;
    $531 = (($pc$1) + 2)|0;
    $532 = (($15) + ($531)|0);
    $533 = HEAP8[$532>>0]|0;
    $534 = $533&255;
    $535 = $534 << 8;
    $536 = (($535) + ($data$28))|0;
    $data$29 = $536;$pc$12 = $531;$s_time$16 = $s_time$15;
    label = 107;
    break;
   }
   case 117: {
    label = 0;
    $591 = (($pc$1) + 2)|0;
    $592 = (($15) + ($591)|0);
    $593 = HEAP8[$592>>0]|0;
    $594 = $593&255;
    $595 = $594 << 8;
    $596 = (($595) + ($data$33))|0;
    $data$34 = $596;$pc$14 = $591;$s_time$19 = $s_time$18;
    label = 118;
    break;
   }
   case 126: {
    label = 0;
    $631 = (($pc$1) + 2)|0;
    $632 = (($15) + ($631)|0);
    $633 = HEAP8[$632>>0]|0;
    $634 = $633&255;
    $635 = $634 << 8;
    $636 = (($635) + ($data$38))|0;
    $data$39 = $636;$pc$16 = $631;$s_time$22 = $s_time$21;
    label = 127;
    break;
   }
   case 135: {
    label = 0;
    $$sum = (($pc$1) + 2)|0;
    $665 = (($15) + ($$sum)|0);
    $666 = HEAP8[$665>>0]|0;
    $667 = $666&255;
    $668 = $667 << 8;
    $669 = (($668) + ($data$42))|0;
    HEAP32[$12>>2] = $64;
    $670 = (__ZN7Sap_Emu8cpu_readEj($56,$669)|0);
    $671 = $c$2 >>> 1;
    $672 = $671 & 128;
    $673 = $670 >> 1;
    $674 = $673 | $672;
    $675 = $670 << 8;
    $c$4 = $675;$data$45 = $669;$nz$1 = $674;
    label = 140;
    break;
   }
   case 139: {
    label = 0;
    $$sum1 = (($pc$1) + 2)|0;
    $678 = (($15) + ($$sum1)|0);
    $679 = HEAP8[$678>>0]|0;
    $680 = $679&255;
    $681 = $680 << 8;
    $682 = (($681) + ($data$44))|0;
    $683 = $c$3 >>> 8;
    $684 = $683 & 1;
    HEAP32[$12>>2] = $64;
    $685 = (__ZN7Sap_Emu8cpu_readEj($58,$682)|0);
    $686 = $685 << 1;
    $687 = $686 | $684;
    $c$4 = $686;$data$45 = $682;$nz$1 = $687;
    label = 140;
    break;
   }
   case 145: {
    label = 0;
    $696 = (($15) + ($data$47)|0);
    $697 = HEAP8[$696>>0]|0;
    $698 = $697&255;
    $699 = $c$5 >>> 1;
    $700 = $699 & 128;
    $701 = $698 >>> 1;
    $702 = $701 | $700;
    $703 = $698 << 8;
    $c$7 = $703;$data$53 = $data$47;$nz$3 = $702;
    label = 156;
    break;
   }
   case 149: {
    label = 0;
    $708 = $c$6 >>> 8;
    $709 = $708 & 1;
    $710 = (($15) + ($data$49)|0);
    $711 = HEAP8[$710>>0]|0;
    $712 = $711&255;
    $713 = $712 << 1;
    $714 = $713 | $709;
    $c$7 = $713;$data$53 = $data$49;$nz$3 = $714;
    label = 156;
    break;
   }
   case 155: {
    label = 0;
    $723 = (($15) + ($data$52)|0);
    $724 = HEAP8[$723>>0]|0;
    $725 = $724&255;
    $726 = (($725) + ($nz$2))|0;
    $c$7 = $c$0;$data$53 = $data$52;$nz$3 = $726;
    label = 156;
    break;
   }
   case 192: {
    label = 0;
    $856 = (($pc$19) + 1)|0;
    $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $856;$s_time$0 = $s_time$25;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
    continue L1;
    break;
   }
  }
  if ((label|0) == 22) {
   label = 0;
   HEAP32[$12>>2] = $s_time$2;
   $162 = (__ZN7Sap_Emu8cpu_readEj($41,$data$3)|0);
   $data$4 = $162;$pc$3 = $pc$2;$s_time$3 = $s_time$2;
   label = 23;
  }
  else if ((label|0) == 89) {
   label = 0;
   HEAP32[$12>>2] = $s_time$10;
   $455 = (__ZN7Sap_Emu8cpu_readEj($50,$data$19)|0);
   $data$20 = $455;$pc$9 = $pc$8;$s_time$11 = $s_time$10;
   label = 90;
  }
  else if ((label|0) == 98) {
   label = 0;
   HEAP32[$12>>2] = $s_time$13;
   $496 = (__ZN7Sap_Emu8cpu_readEj($51,$data$24)|0);
   $data$25 = $496;$pc$11 = $pc$10;$s_time$14 = $s_time$13;
   label = 99;
  }
  else if ((label|0) == 107) {
   label = 0;
   HEAP32[$12>>2] = $s_time$16;
   $537 = (__ZN7Sap_Emu8cpu_readEj($52,$data$29)|0);
   $data$30 = $537;$pc$13 = $pc$12;$s_time$17 = $s_time$16;
   label = 108;
  }
  else if ((label|0) == 118) {
   label = 0;
   HEAP32[$12>>2] = $s_time$19;
   $597 = (__ZN7Sap_Emu8cpu_readEj($54,$data$34)|0);
   $data$35 = $597;$pc$15 = $pc$14;$s_time$20 = $s_time$19;
   label = 119;
  }
  else if ((label|0) == 127) {
   label = 0;
   HEAP32[$12>>2] = $s_time$22;
   $637 = (__ZN7Sap_Emu8cpu_readEj($55,$data$39)|0);
   $data$40 = $637;$pc$17 = $pc$16;$s_time$23 = $s_time$22;
  }
  else if ((label|0) == 140) {
   label = 0;
   $688 = (($pc$1) + 3)|0;
   $689 = $nz$1 & 255;
   __ZN7Sap_Emu9cpu_writeEji($57,$data$45,$689);
   $690 = HEAP32[$12>>2]|0;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $c$4;$nz$0 = $nz$1;$pc$1 = $688;$s_time$0 = $690;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
   continue;
  }
  else if ((label|0) == 156) {
   label = 0;
   $727 = (($pc$1) + 2)|0;
   $728 = $nz$3&255;
   $729 = (($15) + ($data$53)|0);
   HEAP8[$729>>0] = $728;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $c$7;$nz$0 = $nz$3;$pc$1 = $727;$s_time$0 = $64;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
   continue;
  }
  if ((label|0) == 23) {
   label = 0;
   $163 = (($a$0) - ($data$4))|0;
   $164 = (($pc$3) + 1)|0;
   $165 = $163 ^ -1;
   $166 = $163 & 255;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $165;$nz$0 = $166;$pc$1 = $164;$s_time$0 = $s_time$3;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
   continue;
  }
  else if ((label|0) == 90) {
   label = 0;
   $456 = $data$20 & $a$0;
   $457 = (($pc$9) + 1)|0;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $456;$nz$0 = $456;$pc$1 = $457;$s_time$0 = $s_time$11;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
   continue;
  }
  else if ((label|0) == 99) {
   label = 0;
   $497 = $data$25 ^ $a$0;
   $498 = (($pc$11) + 1)|0;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $497;$nz$0 = $497;$pc$1 = $498;$s_time$0 = $s_time$14;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
   continue;
  }
  else if ((label|0) == 108) {
   label = 0;
   $538 = $data$30 | $a$0;
   $539 = (($pc$13) + 1)|0;
   $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $538;$nz$0 = $538;$pc$1 = $539;$s_time$0 = $s_time$17;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
   continue;
  }
  else if ((label|0) == 119) {
   label = 0;
   $598 = $data$35 ^ 255;
   $data$40 = $598;$pc$17 = $pc$15;$s_time$23 = $s_time$20;
  }
  $638 = $c$0 >>> 8;
  $639 = $638 & 1;
  $640 = $a$0 ^ 128;
  $641 = (($640) + ($639))|0;
  $sext = $data$40 << 24;
  $642 = $sext >> 24;
  $643 = (($641) + ($642))|0;
  $644 = $status$0 & -65;
  $645 = $643 >>> 2;
  $646 = $645 & 64;
  $647 = $646 | $644;
  $648 = (($a$0) + ($639))|0;
  $649 = (($648) + ($data$40))|0;
  $650 = (($pc$17) + 1)|0;
  $651 = $649 & 255;
  $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$a$0 = $651;$c$0 = $649;$nz$0 = $649;$pc$1 = $650;$s_time$0 = $s_time$23;$status$0 = $647;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;
 }
 if ((label|0) == 195) {
  HEAP32[$12>>2] = $s_time$27;
  $893 = $pc$1$lcssa&65535;
  HEAP16[$this>>1] = $893;
  $894 = (($sp$0$lcssa) + 255)|0;
  $895 = $894&255;
  HEAP8[$27>>0] = $895;
  $896 = $a$0$lcssa&255;
  HEAP8[$18>>0] = $896;
  $897 = $x$0$lcssa&255;
  HEAP8[$21>>0] = $897;
  $898 = $y$0$lcssa&255;
  HEAP8[$24>>0] = $898;
  $899 = $status$0$lcssa & 76;
  $900 = $nz$0$lcssa >>> 8;
  $901 = $900 | $nz$0$lcssa;
  $902 = $901 & 128;
  $903 = $899 | $902;
  $904 = $c$0$lcssa >>> 8;
  $905 = $904 & 1;
  $906 = $903 | $905;
  $907 = $nz$0$lcssa & 255;
  $908 = ($907|0)==(0);
  $909 = $906 | 2;
  $$18 = $908 ? $909 : $906;
  $910 = $$18&255;
  HEAP8[$32>>0] = $910;
  $911 = $s;
  $912 = $911;
  $913 = HEAP32[$912>>2]|0;
  $914 = (($911) + 4)|0;
  $915 = $914;
  $916 = HEAP32[$915>>2]|0;
  $917 = $0;
  $918 = $917;
  HEAP32[$918>>2] = $913;
  $919 = (($917) + 4)|0;
  $920 = $919;
  HEAP32[$920>>2] = $916;
  HEAP32[$11>>2] = $0;
  STACKTOP = sp;return ($illegal_encountered$0$off0|0);
 }
 return (0)|0;
}
function __ZN7Sap_Cpu12set_end_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $t;
 $1 = (($this) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN7Sap_Cpu15update_end_timeEii($this,$t,$2)|0);
 $4 = (($this) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($3))|0;
 HEAP32[$6>>2] = $8;
 return;
}
function __ZN7Sap_Cpu15update_end_timeEii($this,$t,$irq) {
 $this = $this|0;
 $t = $t|0;
 $irq = $irq|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $irq$t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($irq|0)<($t|0);
 if ($0) {
  $1 = (($this) + 5|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2 & 4;
  $4 = ($3<<24>>24)==(0);
  $irq$t = $4 ? $irq : $t;
  $$0 = $irq$t;
 } else {
  $$0 = $t;
 }
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) - ($$0))|0;
 HEAP32[$6>>2] = $$0;
 return ($8|0);
}
function __ZN7Sap_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 272|0);
 __ZN7Sap_CpuC2Ev($0);
 __ZN11Classic_EmuC2Ev($this);
 HEAP32[$this>>2] = ((45424 + 8|0));
 $1 = (($this) + 900|0);
 __ZN7Sap_ApuC2Ev($1);
 $2 = (($this) + 1004|0);
 __ZN7Sap_ApuC2Ev($2);
 $3 = (($this) + 67160|0);
 __ZN12Sap_Apu_ImplC2Ev($3);
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,45656);
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,45512);
 __ZN11Classic_Emu15set_voice_typesEPKi($this,45608);
 __ZN9Music_Emu21set_silence_lookaheadEi($this,6);
 return;
}
function __ZN7Sap_EmuD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Classic_EmuD2Ev($this);
 return;
}
function __ZN7Sap_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Sap_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZNK7Sap_Emu11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 304|0);
 __ZL15copy_sap_fieldsRKN7Sap_Emu6info_tEP12track_info_t($1,$out);
 return (0|0);
}
function __ZN7Sap_Emu9load_mem_EPKhl($this,$in,$size) {
 $this = $this|0;
 $in = $in|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($in) + ($size)|0);
 $1 = (($this) + 884|0);
 HEAP32[$1>>2] = $0;
 $2 = (($this) + 304|0);
 $3 = (($this) + 308|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 324|0);
 HEAP32[$4>>2] = 66;
 $5 = (($this) + 336|0);
 HEAP8[$5>>0] = 0;
 $6 = (($this) + 312|0);
 HEAP32[$6>>2] = -1;
 $7 = (($this) + 316|0);
 HEAP32[$7>>2] = -1;
 $8 = (($this) + 320|0);
 HEAP32[$8>>2] = -1;
 $9 = (($this) + 332|0);
 HEAP32[$9>>2] = 312;
 $10 = (__ZL10parse_infoPKhlPN7Sap_Emu6info_tE($in,$size,$2)|0);
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $$0 = $10;
  return ($$0|0);
 }
 $12 = HEAP32[$3>>2]|0;
 __ZN8Gme_File11set_warningEPKc($this,$12);
 $13 = (($this) + 328|0);
 $14 = HEAP32[$13>>2]|0;
 __ZN8Gme_File15set_track_countEi($this,$14);
 $15 = HEAP8[$5>>0]|0;
 $16 = $15&255;
 $17 = 4 << $16;
 __ZN9Music_Emu15set_voice_countEi($this,$17);
 $18 = (($this) + 67160|0);
 $19 = (+__ZNK9Music_Emu4gainEv($this));
 __ZN12Sap_Apu_Impl6volumeEd($18,$19);
 $20 = (__ZN11Classic_Emu12setup_bufferEl($this,1773447)|0);
 $$0 = $20;
 return ($$0|0);
}
function __ZN7Sap_Emu9update_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 67160|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($0,$eq);
 return;
}
function __ZN7Sap_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$left,$right) {
 $this = $this|0;
 $i = $i|0;
 $center = $center|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($i) + -4)|0;
 $1 = ($0|0)>(-1);
 if ($1) {
  $2 = (($this) + 1004|0);
  __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($2,$0,$right);
  return;
 } else {
  $3 = (($this) + 900|0);
  $4 = (($this) + 336|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  $7 = $6 ? $left : $center;
  __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($3,$i,$7);
  return;
 }
}
function __ZN7Sap_Emu10set_tempo_Ed($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 114.0 / $t;
 $1 = (~~(($0)));
 $2 = (($this) + 888|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN7Sap_Emu7cpu_jsrEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr&65535;
 $1 = (($this) + 272|0);
 HEAP16[$1>>1] = $0;
 $2 = (($this) + 278|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(-2);
 if ($4) {
  $5 = (($this) + 1875|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(-2);
  if ($7) {
   HEAP8[$2>>0] = -1;
  }
 }
 $8 = HEAP8[$2>>0]|0;
 $9 = (($8) + -1)<<24>>24;
 HEAP8[$2>>0] = $9;
 $10 = $8&255;
 $11 = $10 | 256;
 $12 = ((($this) + ($11)|0) + 1364|0);
 HEAP8[$12>>0] = -2;
 $13 = HEAP8[$2>>0]|0;
 $14 = (($13) + -1)<<24>>24;
 HEAP8[$2>>0] = $14;
 $15 = $13&255;
 $16 = $15 | 256;
 $17 = ((($this) + ($16)|0) + 1364|0);
 HEAP8[$17>>0] = -2;
 $18 = HEAP8[$2>>0]|0;
 $19 = (($18) + -1)<<24>>24;
 HEAP8[$2>>0] = $19;
 $20 = $18&255;
 $21 = $20 | 256;
 $22 = ((($this) + ($21)|0) + 1364|0);
 HEAP8[$22>>0] = -2;
 return;
}
function __ZN7Sap_Emu11run_routineEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Sap_Emu7cpu_jsrEj($this,$addr);
 $0 = (($this) + 272|0);
 (__ZN7Sap_Cpu3runEi($0,2134080)|0);
 return;
}
function __ZN7Sap_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $in$0$be = 0, $in$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN11Classic_Emu12start_track_Ei($this,$track)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (($this) + 1108|0);
 _memset(($2|0),0,66048)|0;
 $3 = (($this) + 304|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + 884|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = $4;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(4);
 L4: do {
  if ($10) {
   $20 = $7;$in$03 = $4;
   while(1) {
    $11 = (__Z8get_le16PKv($in$03)|0);
    $12 = (($in$03) + 2|0);
    $13 = (__Z8get_le16PKv($12)|0);
    $14 = (($in$03) + 4|0);
    $15 = ($13>>>0)<($11>>>0);
    if ($15) {
     label = 4;
     break;
    }
    $16 = (($13) - ($11))|0;
    $17 = (($16) + 1)|0;
    $18 = $14;
    $19 = (($20) - ($18))|0;
    $21 = ($17|0)>($19|0);
    if ($21) {
     label = 6;
     break;
    }
    $22 = ((($this) + ($11)|0) + 1364|0);
    _memcpy(($22|0),($14|0),($17|0))|0;
    $$sum = (($16) + 5)|0;
    $23 = (($in$03) + ($$sum)|0);
    $24 = HEAP32[$5>>2]|0;
    $25 = $24;
    $26 = $23;
    $27 = (($25) - ($26))|0;
    $28 = ($27|0)>(1);
    if ($28) {
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(-1);
     if ($30) {
      $$sum1 = (($16) + 6)|0;
      $31 = (($in$03) + ($$sum1)|0);
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(-1);
      if ($33) {
       $$sum2 = (($16) + 7)|0;
       $34 = (($in$03) + ($$sum2)|0);
       $in$0$be = $34;
      } else {
       $in$0$be = $23;
      }
     } else {
      $in$0$be = $23;
     }
    } else {
     $in$0$be = $23;
    }
    $35 = HEAP32[$5>>2]|0;
    $36 = $35;
    $37 = $in$0$be;
    $38 = (($36) - ($37))|0;
    $39 = ($38|0)>(4);
    if ($39) {
     $20 = $36;$in$03 = $in$0$be;
    } else {
     break L4;
    }
   }
   if ((label|0) == 4) {
    __ZN8Gme_File11set_warningEPKc($this,45680);
    break;
   }
   else if ((label|0) == 6) {
    __ZN8Gme_File11set_warningEPKc($this,45680);
    break;
   }
  }
 } while(0);
 $40 = (($this) + 900|0);
 $41 = (($this) + 67160|0);
 __ZN7Sap_Apu5resetEP12Sap_Apu_Impl($40,$41);
 $42 = (($this) + 1004|0);
 __ZN7Sap_Apu5resetEP12Sap_Apu_Impl($42,$41);
 $43 = (($this) + 272|0);
 $44 = (($this) + 1364|0);
 __ZN7Sap_Cpu5resetEPv($43,$44);
 $45 = (($this) + 896|0);
 HEAP32[$45>>2] = 0;
 __ZN7Sap_Emu9call_initEi($this,$track);
 HEAP32[$45>>2] = -1;
 $46 = (__ZNK7Sap_Emu11play_periodEv($this)|0);
 $47 = (($this) + 892|0);
 HEAP32[$47>>2] = $46;
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Sap_Emu10cpu_write_Eji($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr ^ 53760;
 $1 = ($0>>>0)<(10);
 if ($1) {
  $2 = (($this) + 900|0);
  $3 = (($this) + 272|0);
  $4 = (__ZNK7Sap_Cpu4timeEv($3)|0);
  $5 = (($this) + 896|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & $4;
  __ZN7Sap_Apu10write_dataEiji($2,$7,$addr,$data);
  return;
 }
 $8 = $addr ^ 53776;
 $9 = ($8>>>0)<(10);
 if (!($9)) {
  return;
 }
 $10 = (($this) + 336|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  return;
 }
 $13 = (($this) + 1004|0);
 $14 = (($this) + 272|0);
 $15 = (__ZNK7Sap_Cpu4timeEv($14)|0);
 $16 = (($this) + 896|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & $15;
 $19 = $addr ^ 16;
 __ZN7Sap_Apu10write_dataEiji($13,$18,$19,$data);
 return;
}
function __ZN7Sap_Emu10run_clocksERii($this,$duration,$0) {
 $this = $this|0;
 $duration = $duration|0;
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 272|0);
 __ZN7Sap_Cpu8set_timeEi($1,0);
 $2 = (__ZNK7Sap_Cpu4timeEv($1)|0);
 $3 = HEAP32[$duration>>2]|0;
 $4 = ($2|0)<($3|0);
 L1: do {
  if ($4) {
   $5 = (($this) + 892|0);
   $6 = $3;
   while(1) {
    $7 = (__ZN7Sap_Cpu3runEi($1,$6)|0);
    if ($7) {
     $$0 = 45704;
     label = 12;
     break;
    }
    $8 = HEAP16[$1>>1]|0;
    $9 = ($8&65535)>(65279);
    if ($9) {
     $$0 = 45704;
     label = 12;
     break;
    }
    $10 = ($8<<16>>16)==(-257);
    do {
     if ($10) {
      $11 = HEAP32[$5>>2]|0;
      $12 = HEAP32[$duration>>2]|0;
      $13 = ($11|0)>($12|0);
      if ($13) {
       __ZN7Sap_Cpu8set_timeEi($1,$12);
       break;
      } else {
       __ZN7Sap_Cpu8set_timeEi($1,$11);
       $14 = (__ZNK7Sap_Emu11play_periodEv($this)|0);
       $15 = HEAP32[$5>>2]|0;
       $16 = (($15) + ($14))|0;
       HEAP32[$5>>2] = $16;
       __ZN7Sap_Emu9call_playEv($this);
       break;
      }
     }
    } while(0);
    $17 = (__ZNK7Sap_Cpu4timeEv($1)|0);
    $18 = HEAP32[$duration>>2]|0;
    $19 = ($17|0)<($18|0);
    if ($19) {
     $6 = $18;
    } else {
     $$lcssa = $17;
     break L1;
    }
   }
   if ((label|0) == 12) {
    return ($$0|0);
   }
  } else {
   $$lcssa = $2;
  }
 } while(0);
 HEAP32[$duration>>2] = $$lcssa;
 $20 = (($this) + 892|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) - ($$lcssa))|0;
 $23 = ($22|0)<(0);
 $$ = $23 ? 0 : $22;
 HEAP32[$20>>2] = $$;
 $24 = (($this) + 900|0);
 $25 = HEAP32[$duration>>2]|0;
 __ZN7Sap_Apu9end_frameEi($24,$25);
 $26 = (($this) + 336|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $$0 = 0;
  return ($$0|0);
 }
 $29 = (($this) + 1004|0);
 $30 = HEAP32[$duration>>2]|0;
 __ZN7Sap_Apu9end_frameEi($29,$30);
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Sap_CpuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = $0;
 return;
}
function __ZL15copy_sap_fieldsRKN7Sap_Emu6info_tEP12track_info_t($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($out) + 272|0);
 $1 = (($in) + 289|0);
 __ZN8Gme_File11copy_field_EPcPKc($0,$1);
 $2 = (($out) + 784|0);
 $3 = (($in) + 33|0);
 __ZN8Gme_File11copy_field_EPcPKc($2,$3);
 $4 = (($out) + 1040|0);
 $5 = (($in) + 545|0);
 __ZN8Gme_File11copy_field_EPcPKc($4,$5);
 return;
}
function __ZL10parse_infoPKhlPN7Sap_Emu6info_tE($in,$size,$out) {
 $in = $in|0;
 $size = $size|0;
 $out = $out|0;
 var $$0 = 0, $$02$lcssa = 0, $$0219 = 0, $$1$lcssa = 0, $$110 = 0, $$2$lcssa = 0, $$214 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $line_end$0$lcssa = 0, $line_end$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($out) + 24|0);
 HEAP32[$0>>2] = 1;
 $1 = (($out) + 33|0);
 HEAP8[$1>>0] = 0;
 $2 = (($out) + 289|0);
 HEAP8[$2>>0] = 0;
 $3 = (($out) + 545|0);
 HEAP8[$3>>0] = 0;
 $4 = ($size|0)<(16);
 if ($4) {
  $$0 = 38248;
  return ($$0|0);
 }
 $5 = (_memcmp($in,45816,5)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = 38248;
  return ($$0|0);
 }
 $$sum = (($size) + -5)|0;
 $7 = (($in) + ($$sum)|0);
 $8 = (($in) + 5|0);
 $9 = ($$sum|0)>(5);
 L7: do {
  if ($9) {
   $10 = (($out) + 8|0);
   $11 = (($out) + 12|0);
   $12 = (($out) + 16|0);
   $13 = (($out) + 20|0);
   $14 = (($out) + 32|0);
   $15 = (($out) + 28|0);
   $$0219 = $8;
   L9: while(1) {
    $16 = HEAP8[$$0219>>0]|0;
    $17 = ($16<<24>>24)==(-1);
    if ($17) {
     $18 = (($$0219) + 1|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = ($19<<24>>24)==(-1);
     if ($20) {
      $$02$lcssa = $$0219;
      break L7;
     }
    }
    $21 = ($$0219>>>0)<($7>>>0);
    L14: do {
     if ($21) {
      $line_end$08 = $$0219;
      while(1) {
       $25 = HEAP8[$line_end$08>>0]|0;
       $26 = ($25<<24>>24)==(13);
       $23 = (($line_end$08) + 1|0);
       if ($26) {
        $line_end$0$lcssa = $line_end$08;
        break L14;
       }
       $22 = ($23>>>0)<($7>>>0);
       if ($22) {
        $line_end$08 = $23;
       } else {
        $line_end$0$lcssa = $23;
        break;
       }
      }
     } else {
      $line_end$0$lcssa = $$0219;
     }
    } while(0);
    $24 = ($$0219>>>0)<($line_end$0$lcssa>>>0);
    L19: do {
     if ($24) {
      $$110 = $$0219;
      while(1) {
       $29 = HEAP8[$$110>>0]|0;
       $30 = ($29&255)>(32);
       $28 = (($$110) + 1|0);
       if (!($30)) {
        $$1$lcssa = $$110;
        break L19;
       }
       $27 = ($28>>>0)<($line_end$0$lcssa>>>0);
       if ($27) {
        $$110 = $28;
       } else {
        $$1$lcssa = $28;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0219;
     }
    } while(0);
    $31 = $$1$lcssa;
    $32 = $$0219;
    $33 = (($31) - ($32))|0;
    $34 = ($$1$lcssa>>>0)<($line_end$0$lcssa>>>0);
    L24: do {
     if ($34) {
      $$214 = $$1$lcssa;
      while(1) {
       $37 = HEAP8[$$214>>0]|0;
       $38 = ($37&255)<(33);
       $36 = (($$214) + 1|0);
       if (!($38)) {
        $$2$lcssa = $$214;
        break L24;
       }
       $35 = ($36>>>0)<($line_end$0$lcssa>>>0);
       if ($35) {
        $$214 = $36;
       } else {
        $$2$lcssa = $36;
        break;
       }
      }
     } else {
      $$2$lcssa = $$1$lcssa;
     }
    } while(0);
    $39 = ($33|0)<(1);
    do {
     if (!($39)) {
      $40 = (_strncmp(45824,$$0219,$33)|0);
      $41 = ($40|0)==(0);
      if ($41) {
       $42 = (__ZL8from_hexPKh($$2$lcssa)|0);
       HEAP32[$10>>2] = $42;
       $43 = ($42>>>0)>(65535);
       if ($43) {
        $$0 = 45832;
        label = 42;
        break L9;
       } else {
        break;
       }
      }
      $44 = (_strncmp(45856,$$0219,$33)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       $46 = (__ZL8from_hexPKh($$2$lcssa)|0);
       HEAP32[$11>>2] = $46;
       $47 = ($46>>>0)>(65535);
       if ($47) {
        $$0 = 45864;
        label = 42;
        break L9;
       } else {
        break;
       }
      }
      $48 = (_strncmp(45888,$$0219,$33)|0);
      $49 = ($48|0)==(0);
      if ($49) {
       $50 = (__ZL8from_hexPKh($$2$lcssa)|0);
       HEAP32[$12>>2] = $50;
       $51 = ($50>>>0)>(65535);
       if ($51) {
        $$0 = 45896;
        label = 42;
        break L9;
       } else {
        break;
       }
      }
      $52 = (_strncmp(45920,$$0219,$33)|0);
      $53 = ($52|0)==(0);
      if ($53) {
       $54 = (__ZL8from_decPKhS0_($$2$lcssa,$line_end$0$lcssa)|0);
       HEAP32[$0>>2] = $54;
       $55 = ($54|0)<(1);
       if ($55) {
        $$0 = 45928;
        label = 42;
        break L9;
       } else {
        break;
       }
      }
      $56 = (_strncmp(45952,$$0219,$33)|0);
      $57 = ($56|0)==(0);
      if ($57) {
       $58 = HEAP8[$$2$lcssa>>0]|0;
       $59 = $58&255;
       HEAP32[$13>>2] = $59;
       if ((($59|0) == 68)) {
        $$0 = 45960;
        label = 42;
        break L9;
       } else if ((($59|0) == 66) | (($59|0) == 67)) {
        break;
       } else {
        label = 41;
        break L9;
       }
      }
      $60 = (_strncmp(46008,$$0219,$33)|0);
      $61 = ($60|0)==(0);
      if ($61) {
       HEAP8[$14>>0] = 1;
       break;
      }
      $62 = (_strncmp(46016,$$0219,$33)|0);
      $63 = ($62|0)==(0);
      if ($63) {
       $64 = (__ZL8from_decPKhS0_($$2$lcssa,$line_end$0$lcssa)|0);
       HEAP32[$15>>2] = $64;
       $65 = ($64|0)<(1);
       if ($65) {
        $$0 = 46032;
        label = 42;
        break L9;
       } else {
        break;
       }
      }
      $66 = (_strncmp(46056,$$0219,$33)|0);
      $67 = ($66|0)==(0);
      if ($67) {
       __ZL12parse_stringPKhS0_iPc($$2$lcssa,$line_end$0$lcssa,256,$1);
       break;
      }
      $68 = (_strncmp(46064,$$0219,$33)|0);
      $69 = ($68|0)==(0);
      if ($69) {
       __ZL12parse_stringPKhS0_iPc($$2$lcssa,$line_end$0$lcssa,256,$2);
       break;
      }
      $70 = (_strncmp(46072,$$0219,$33)|0);
      $71 = ($70|0)==(0);
      if (!($71)) {
       break;
      }
      __ZL12parse_stringPKhS0_iPc($$2$lcssa,$line_end$0$lcssa,32,$3);
     }
    } while(0);
    $72 = (($line_end$0$lcssa) + 2|0);
    $73 = ($72>>>0)<($7>>>0);
    if ($73) {
     $$0219 = $72;
    } else {
     $$02$lcssa = $72;
     break L7;
    }
   }
   if ((label|0) == 41) {
    $$0 = 45984;
    return ($$0|0);
   }
   else if ((label|0) == 42) {
    return ($$0|0);
   }
  } else {
   $$02$lcssa = $8;
  }
 } while(0);
 $74 = HEAP8[$$02$lcssa>>0]|0;
 $75 = ($74<<24>>24)==(-1);
 if (!($75)) {
  $$0 = 46080;
  return ($$0|0);
 }
 $76 = (($$02$lcssa) + 1|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = ($77<<24>>24)==(-1);
 if (!($78)) {
  $$0 = 46080;
  return ($$0|0);
 }
 $79 = (($$02$lcssa) + 2|0);
 HEAP32[$out>>2] = $79;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12Sap_Apu_Impl6volumeEd($this,$d) {
 $this = $this|0;
 $d = +$d;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d * 0.0083333333333333332;
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($this,$0);
 return;
}
function __ZN7Sap_Emu9call_initEi($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 324|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 66)) {
  $2 = $track&255;
  $3 = (($this) + 274|0);
  HEAP8[$3>>0] = $2;
  $4 = (($this) + 312|0);
  $5 = HEAP32[$4>>2]|0;
  __ZN7Sap_Emu11run_routineEj($this,$5);
  return;
 } else if ((($1|0) == 67)) {
  $6 = (($this) + 274|0);
  HEAP8[$6>>0] = 112;
  $7 = (($this) + 320|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8&255;
  $10 = (($this) + 275|0);
  HEAP8[$10>>0] = $9;
  $11 = HEAP32[$7>>2]|0;
  $12 = $11 >>> 8;
  $13 = $12&255;
  $14 = (($this) + 276|0);
  HEAP8[$14>>0] = $13;
  $15 = (($this) + 316|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 3)|0;
  __ZN7Sap_Emu11run_routineEj($this,$17);
  HEAP8[$6>>0] = 0;
  $18 = $track&255;
  HEAP8[$10>>0] = $18;
  $19 = HEAP32[$15>>2]|0;
  $20 = (($19) + 3)|0;
  __ZN7Sap_Emu11run_routineEj($this,$20);
  return;
 } else {
  return;
 }
}
function __ZNK7Sap_Emu11play_periodEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 332|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 888|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 return ($4|0);
}
function __ZNK7Sap_Cpu4timeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + ($3))|0;
 return ($5|0);
}
function __ZN7Sap_Cpu8set_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($t) - ($2))|0;
 $4 = (($1) + 4|0);
 HEAP32[$4>>2] = $3;
 return;
}
function __ZN7Sap_Emu9call_playEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 324|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 67)) {
  $4 = (($this) + 316|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 6)|0;
  __ZN7Sap_Emu7cpu_jsrEj($this,$6);
  return;
 } else if ((($1|0) == 66)) {
  $2 = (($this) + 316|0);
  $3 = HEAP32[$2>>2]|0;
  __ZN7Sap_Emu7cpu_jsrEj($this,$3);
  return;
 } else {
  return;
 }
}
function __ZL11new_sap_emuv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(84432)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN7Sap_EmuC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZL12new_sap_filev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(832)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN8Sap_FileC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZN8Sap_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN8Sap_File9load_mem_EPKhl($this,$begin,$size) {
 $this = $this|0;
 $begin = $begin|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 $1 = (__ZL10parse_infoPKhlPN7Sap_Emu6info_tE($begin,$size,$0)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = (($this) + 276|0);
 $4 = HEAP32[$3>>2]|0;
 __ZN8Gme_File15set_track_countEi($this,$4);
 $$0 = 0;
 return ($$0|0);
}
function __ZNK8Sap_File11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 252|0);
 __ZL15copy_sap_fieldsRKN7Sap_Emu6info_tEP12track_info_t($1,$out);
 return (0|0);
}
function __ZL8from_hexPKh($in) {
 $in = $in|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$012 = $in;$8 = 3;$result$03 = 0;
 while(1) {
  $0 = HEAP8[$$012>>0]|0;
  $1 = $0&255;
  $2 = (__Z13from_hex_chari($1)|0);
  $3 = ($2|0)>(15);
  if ($3) {
   $$0 = -1;
   label = 4;
   break;
  }
  $4 = (($$012) + 1|0);
  $5 = $result$03 << 4;
  $6 = (($2) + ($5))|0;
  $7 = (($8) + -1)|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = $6;
   label = 4;
   break;
  } else {
   $$012 = $4;$8 = $7;$result$03 = $6;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZL8from_decPKhS0_($in,$end) {
 $in = $in|0;
 $end = $end|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($in>>>0)<($end>>>0);
 L1: do {
  if ($0) {
   $1 = ($in>>>0)<($end>>>0);
   if ($1) {
    $$012 = $in;$n$03 = 0;
    while(1) {
     $2 = HEAP8[$$012>>0]|0;
     $3 = $2&255;
     $4 = (($3) + -48)|0;
     $5 = ($4>>>0)>(9);
     if ($5) {
      $$0 = -1;
      break L1;
     }
     $6 = (($$012) + 1|0);
     $7 = ($n$03*10)|0;
     $8 = (($4) + ($7))|0;
     $9 = ($6>>>0)<($end>>>0);
     if ($9) {
      $$012 = $6;$n$03 = $8;
     } else {
      $$0 = $8;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 return ($$0|0);
}
function __ZL12parse_stringPKhS0_iPc($in,$end,$len,$out) {
 $in = $in|0;
 $end = $end|0;
 $len = $len|0;
 $out = $out|0;
 var $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $8$phi = 0, $9 = 0, $start$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($in) + 1|0);
 $1 = HEAP8[$in>>0]|0;
 $2 = ($1<<24>>24)==(34);
 L1: do {
  if ($2) {
   $3 = ($0>>>0)<($end>>>0);
   if ($3) {
    $$01 = $0;$8 = $in;
    while(1) {
     $6 = HEAP8[$$01>>0]|0;
     $7 = ($6<<24>>24)==(34);
     $5 = (($8) + 2|0);
     if ($7) {
      $$1 = $$01;$start$0 = $0;
      break L1;
     }
     $4 = ($5>>>0)<($end>>>0);
     if ($4) {
      $8$phi = $$01;$$01 = $5;$8 = $8$phi;
     } else {
      $$1 = $5;$start$0 = $0;
      break;
     }
    }
   } else {
    $$1 = $0;$start$0 = $0;
   }
  } else {
   $$1 = $end;$start$0 = $in;
  }
 } while(0);
 $9 = (($len) + -1)|0;
 $10 = $$1;
 $11 = $start$0;
 $12 = (($10) - ($11))|0;
 $13 = (__Z3minIiET_S0_S0_($9,$12)|0);
 $14 = (($out) + ($13)|0);
 HEAP8[$14>>0] = 0;
 _memcpy(($out|0),($start$0|0),($13|0))|0;
 return;
}
function __ZN8Sap_FileC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Gme_Info_C2Ev($this);
 HEAP32[$this>>2] = ((46104 + 8|0));
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,45656);
 return;
}
function __ZN7Sms_OscC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$this+0>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;HEAP32[$this+12>>2]=0|0;HEAP32[$this+16>>2]=0|0;
 return;
}
function __ZN7Sms_Osc5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 28|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 32|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 3;
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 16|0);
 HEAP32[$6>>2] = $5;
 return;
}
function __ZN10Sms_Square3runEii($this,$time,$end_time) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 var $$0 = 0, $$1 = 0, $$lcssa = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $delta1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($this) + 36|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<(129);
  if (!($5)) {
   $32 = (($this) + 40|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   $35 = (0 - ($1))|0;
   $36 = $34 ? $1 : $35;
   $37 = (($this) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36|0)==($38|0);
   if (!($39)) {
    $40 = (($36) - ($38))|0;
    HEAP32[$37>>2] = $36;
    $41 = (($this) + 44|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($this) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($42,$time,$40,$44);
   }
   $45 = (($this) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($time))|0;
   $48 = ($47|0)<($end_time|0);
   if (!($48)) {
    $$1 = $47;
    $64 = (($$1) - ($end_time))|0;
    $65 = (($this) + 24|0);
    HEAP32[$65>>2] = $64;
    return;
   }
   $49 = (($this) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $36 << 1;
   $52 = (($this) + 44|0);
   $$0 = $47;$delta1$0 = $51;
   while(1) {
    $53 = (0 - ($delta1$0))|0;
    $54 = HEAP32[$52>>2]|0;
    __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($54,$$0,$53,$50);
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + ($$0))|0;
    $57 = HEAP32[$32>>2]|0;
    $58 = $57 ^ 1;
    HEAP32[$32>>2] = $58;
    $59 = ($56|0)<($end_time|0);
    if ($59) {
     $$0 = $56;$delta1$0 = $53;
    } else {
     $$lcssa = $56;$$lcssa3 = $57;
     break;
    }
   }
   $60 = ($$lcssa3|0)!=(1);
   $61 = HEAP32[$0>>2]|0;
   $62 = (0 - ($61))|0;
   $63 = $60 ? $61 : $62;
   HEAP32[$37>>2] = $63;
   $$1 = $$lcssa;
   $64 = (($$1) - ($end_time))|0;
   $65 = (($this) + 24|0);
   HEAP32[$65>>2] = $64;
   return;
  }
 }
 $6 = (($this) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (($this) + 44|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (0 - ($7))|0;
  $12 = (($this) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($10,$time,$11,$13);
  HEAP32[$6>>2] = 0;
 }
 $14 = (($this) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($time))|0;
 $17 = (($this) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $$1 = $end_time;
  $64 = (($$1) - ($end_time))|0;
  $65 = (($this) + 24|0);
  HEAP32[$65>>2] = $64;
  return;
 }
 $20 = ($16|0)<($end_time|0);
 if (!($20)) {
  $$1 = $16;
  $64 = (($$1) - ($end_time))|0;
  $65 = (($this) + 24|0);
  HEAP32[$65>>2] = $64;
  return;
 }
 $21 = (($end_time) + -1)|0;
 $22 = (($21) - ($16))|0;
 $23 = (($22) + ($18))|0;
 $24 = (($23|0) / ($18|0))&-1;
 $25 = (($this) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($24))|0;
 $28 = $27 & 1;
 HEAP32[$25>>2] = $28;
 $29 = HEAP32[$17>>2]|0;
 $30 = Math_imul($29, $24)|0;
 $31 = (($30) + ($16))|0;
 $$1 = $31;
 $64 = (($$1) - ($end_time))|0;
 $65 = (($this) + 24|0);
 HEAP32[$65>>2] = $64;
 return;
}
function __ZN9Sms_Noise3runEii($this,$time,$end_time) {
 $this = $this|0;
 $time = $time|0;
 $end_time = $end_time|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delta1$0 = 0, $delta1$1 = 0, $delta1$1$lcssa = 0, $end_time$ = 0, $shifter$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 $6 = (0 - ($1))|0;
 $$3 = $5 ? $1 : $6;
 $7 = (($this) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($$3|0)==($8|0);
 if (!($9)) {
  $10 = (($$3) - ($8))|0;
  HEAP32[$7>>2] = $$3;
  $11 = (($this) + 48|0);
  $12 = (($this) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($11,$time,$10,$13);
 }
 $14 = (($this) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($time))|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = ($17|0)==(0);
 $end_time$ = $18 ? $end_time : $16;
 $19 = ($end_time$|0)<($end_time|0);
 if (!($19)) {
  $$2 = $end_time$;
  $44 = (($$2) - ($end_time))|0;
  HEAP32[$14>>2] = $44;
  return;
 }
 $20 = (($this) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$2>>2]|0;
 $23 = $$3 << 1;
 $24 = (($this) + 36|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 << 1;
 $28 = ($26|0)!=(0);
 $$ = $28 ? $27 : 16;
 $29 = (($this) + 44|0);
 $30 = (($this) + 48|0);
 $$1 = $end_time$;$delta1$0 = $23;$shifter$0 = $22;
 while(1) {
  $31 = (($shifter$0) + 1)|0;
  $32 = HEAP32[$29>>2]|0;
  $33 = $shifter$0 & 1;
  $34 = (0 - ($33))|0;
  $35 = $32 & $34;
  $36 = $shifter$0 >>> 1;
  $37 = $35 ^ $36;
  $38 = $31 & 2;
  $39 = ($38|0)==(0);
  if ($39) {
   $delta1$1 = $delta1$0;
  } else {
   $40 = (0 - ($delta1$0))|0;
   __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($30,$$1,$40,$21);
   $delta1$1 = $40;
  }
  $41 = (($$1) + ($$))|0;
  $42 = ($41|0)<($end_time|0);
  if ($42) {
   $$1 = $41;$delta1$0 = $delta1$1;$shifter$0 = $37;
  } else {
   $$lcssa = $37;$$lcssa6 = $41;$delta1$1$lcssa = $delta1$1;
   break;
  }
 }
 HEAP32[$2>>2] = $$lcssa;
 $43 = $delta1$1$lcssa >> 1;
 HEAP32[$7>>2] = $43;
 $$2 = $$lcssa6;
 $44 = (($$2) - ($end_time))|0;
 HEAP32[$14>>2] = $44;
 return;
}
function __ZN7Sms_ApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZN10Sms_SquareC2Ev($0);
 $1 = (($this) + 64|0);
 __ZN10Sms_SquareC2Ev($1);
 $2 = (($this) + 112|0);
 __ZN10Sms_SquareC2Ev($2);
 $3 = (($this) + 160|0);
 __ZN10Blip_SynthILi12ELi1EEC2Ev($3);
 $4 = (($this) + 984|0);
 __ZN9Sms_NoiseC2Ev($4);
 $5 = (($this) + 60|0);
 HEAP32[$5>>2] = $3;
 $6 = (($this) + 16|0);
 HEAP32[$this>>2] = $6;
 $7 = (($this) + 108|0);
 HEAP32[$7>>2] = $3;
 $8 = (($this) + 64|0);
 $9 = (($this) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = (($this) + 156|0);
 HEAP32[$10>>2] = $3;
 $11 = (($this) + 112|0);
 $12 = (($this) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = (($this) + 12|0);
 HEAP32[$13>>2] = $4;
 __ZN7Sms_Apu6volumeEd($this,1.0);
 __ZN7Sms_Apu5resetEji($this,0,0);
 return;
}
function __ZN7Sms_Apu6volumeEd($this,$vol) {
 $this = $this|0;
 $vol = +$vol;
 var $0 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $vol * 0.00166015625;
 $1 = (($this) + 160|0);
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($1,$0);
 $2 = (($this) + 1032|0);
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($2,$0);
 return;
}
function __ZN7Sms_Apu5resetEji($this,$feedback,$noise_width) {
 $this = $this|0;
 $feedback = $feedback|0;
 $noise_width = $noise_width|0;
 var $$134 = 0, $$15 = 0, $$lcssa = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $feedback$ = 0, $noise_width$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 976|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 980|0);
 HEAP32[$1>>2] = 0;
 $2 = ($feedback|0)!=(0);
 $3 = ($noise_width|0)!=(0);
 $or$cond = $2 & $3;
 $noise_width$ = $or$cond ? $noise_width : 16;
 $4 = (($noise_width$) + -1)|0;
 $5 = 1 << $4;
 $6 = (($this) + 1596|0);
 HEAP32[$6>>2] = $5;
 $7 = (($this) + 1592|0);
 HEAP32[$7>>2] = 0;
 $8 = ($noise_width$|0)==(0);
 if (!($8)) {
  $feedback$ = $or$cond ? $feedback : 9;
  $$promoted = HEAP32[$7>>2]|0;
  $$134 = $feedback$;$$15 = $noise_width$;$11 = $$promoted;
  while(1) {
   $9 = (($$15) + -1)|0;
   $10 = $11 << 1;
   $12 = $$134 & 1;
   $13 = $10 | $12;
   $14 = $$134 >>> 1;
   $15 = ($9|0)==(0);
   if ($15) {
    $$lcssa = $13;
    break;
   } else {
    $$134 = $14;$$15 = $9;$11 = $13;
   }
  }
  HEAP32[$7>>2] = $$lcssa;
 }
 $16 = (($this) + 16|0);
 __ZN10Sms_Square5resetEv($16);
 $17 = (($this) + 64|0);
 __ZN10Sms_Square5resetEv($17);
 $18 = (($this) + 112|0);
 __ZN10Sms_Square5resetEv($18);
 $19 = (($this) + 984|0);
 __ZN9Sms_Noise5resetEv($19);
 return;
}
function __ZN7Sms_ApuD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN7Sms_Apu9treble_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 160|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($0,$eq);
 $1 = (($this) + 1032|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,$index,$center,$left,$right) {
 $this = $this|0;
 $index = $index|0;
 $center = $center|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($index>>>0)<(4);
 if (!($0)) {
  ___assert_fail((46216|0),(46248|0),194,(46296|0));
  // unreachable;
 }
 $1 = ($center|0)!=(0|0);
 $2 = ($left|0)!=(0|0);
 $or$cond = $1 & $2;
 $3 = ($right|0)!=(0|0);
 $or$cond3 = $or$cond & $3;
 $or$cond5 = $1 | $2;
 $or$cond7 = $or$cond5 | $3;
 $or$cond8 = $or$cond3 ^ $or$cond7;
 if ($or$cond8) {
  ___assert_fail((46312|0),(46248|0),195,(46296|0));
  // unreachable;
 } else {
  $4 = (($this) + ($index<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 4|0);
  HEAP32[$6>>2] = $right;
  $7 = (($5) + 8|0);
  HEAP32[$7>>2] = $left;
  $8 = (($5) + 12|0);
  HEAP32[$8>>2] = $center;
  $9 = (($5) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($5) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($5) + 16|0);
  HEAP32[$13>>2] = $12;
  return;
 }
}
function __ZN7Sms_Apu6outputEP11Blip_BufferS1_S1_($this,$center,$left,$right) {
 $this = $this|0;
 $center = $center|0;
 $left = $left|0;
 $right = $right|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,0,$center,$left,$right);
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,1,$center,$left,$right);
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,2,$center,$left,$right);
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,3,$center,$left,$right);
 return;
}
function __ZN7Sms_Apu9run_untilEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 976|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($end_time|0);
 if ($2) {
  ___assert_fail((46376|0),(46248|0),236,(46400|0));
  // unreachable;
 }
 $3 = ($1|0)<($end_time|0);
 if (!($3)) {
  return;
 }
 $4 = (($this) + 984|0);
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  __ZN11Blip_Buffer12set_modifiedEv($7);
  $9 = (($this) + 16|0);
  $10 = HEAP32[$0>>2]|0;
  __ZN10Sms_Square3runEii($9,$10,$end_time);
 }
 $11 = (($this) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  __ZN11Blip_Buffer12set_modifiedEv($14);
  $16 = (($this) + 64|0);
  $17 = HEAP32[$0>>2]|0;
  __ZN10Sms_Square3runEii($16,$17,$end_time);
 }
 $18 = (($this) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  __ZN11Blip_Buffer12set_modifiedEv($21);
  $23 = (($this) + 112|0);
  $24 = HEAP32[$0>>2]|0;
  __ZN10Sms_Square3runEii($23,$24,$end_time);
 }
 $25 = (($this) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  __ZN11Blip_Buffer12set_modifiedEv($28);
  $30 = HEAP32[$0>>2]|0;
  __ZN9Sms_Noise3runEii($4,$30,$end_time);
 }
 HEAP32[$0>>2] = $end_time;
 return;
}
function __ZN7Sms_Apu9end_frameEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 976|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($end_time|0);
 if ($2) {
  __ZN7Sms_Apu9run_untilEi($this,$end_time);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)<($end_time|0);
 if ($4) {
  ___assert_fail((46416|0),(46248|0),263,(46440|0));
  // unreachable;
 } else {
  $5 = (($3) - ($end_time))|0;
  HEAP32[$0>>2] = $5;
  return;
 }
}
function __ZN7Sms_Apu14write_ggstereoEii($this,$time,$data) {
 $this = $this|0;
 $time = $time|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data>>>0)<(256);
 if (!($0)) {
  ___assert_fail((49944|0),(46248|0),269,(46456|0));
  // unreachable;
 }
 __ZN7Sms_Apu9run_untilEi($this,$time);
 $1 = (($this) + 160|0);
 $2 = HEAP32[$this>>2]|0;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $data >>> 3;
 $6 = $5 & 2;
 $7 = $data & 1;
 $8 = $6 | $7;
 $9 = (($2) + 20|0);
 HEAP32[$9>>2] = $8;
 $10 = (($2) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$3>>2] = $11;
 $12 = ($11|0)==($4|0);
 if (!($12)) {
  $13 = (($2) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $16 = ($4|0)==(0|0);
   if (!($16)) {
    __ZN11Blip_Buffer12set_modifiedEv($4);
    $17 = HEAP32[$13>>2]|0;
    $18 = (0 - ($17))|0;
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($1,$time,$18,$4);
   }
   HEAP32[$13>>2] = 0;
  }
 }
 $19 = (($this) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $data >> 1;
 $22 = (($20) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $21 >>> 3;
 $25 = $24 & 2;
 $26 = $21 & 1;
 $27 = $25 | $26;
 $28 = (($20) + 20|0);
 HEAP32[$28>>2] = $27;
 $29 = (($20) + ($27<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$22>>2] = $30;
 $31 = ($30|0)==($23|0);
 if (!($31)) {
  $32 = (($20) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0);
  if (!($34)) {
   $35 = ($23|0)==(0|0);
   if (!($35)) {
    __ZN11Blip_Buffer12set_modifiedEv($23);
    $36 = HEAP32[$32>>2]|0;
    $37 = (0 - ($36))|0;
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($1,$time,$37,$23);
   }
   HEAP32[$32>>2] = 0;
  }
 }
 $38 = (($this) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $data >> 2;
 $41 = (($39) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $40 >>> 3;
 $44 = $43 & 2;
 $45 = $40 & 1;
 $46 = $44 | $45;
 $47 = (($39) + 20|0);
 HEAP32[$47>>2] = $46;
 $48 = (($39) + ($46<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP32[$41>>2] = $49;
 $50 = ($49|0)==($42|0);
 if (!($50)) {
  $51 = (($39) + 28|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0);
  if (!($53)) {
   $54 = ($42|0)==(0|0);
   if (!($54)) {
    __ZN11Blip_Buffer12set_modifiedEv($42);
    $55 = HEAP32[$51>>2]|0;
    $56 = (0 - ($55))|0;
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($1,$time,$56,$42);
   }
   HEAP32[$51>>2] = 0;
  }
 }
 $57 = (($this) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $data >> 3;
 $60 = (($58) + 16|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $59 >>> 3;
 $63 = $62 & 2;
 $64 = $59 & 1;
 $65 = $63 | $64;
 $66 = (($58) + 20|0);
 HEAP32[$66>>2] = $65;
 $67 = (($58) + ($65<<2)|0);
 $68 = HEAP32[$67>>2]|0;
 HEAP32[$60>>2] = $68;
 $69 = ($68|0)==($61|0);
 if ($69) {
  return;
 }
 $70 = (($58) + 28|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0);
 if ($72) {
  return;
 }
 $73 = ($61|0)==(0|0);
 if (!($73)) {
  __ZN11Blip_Buffer12set_modifiedEv($61);
  $74 = HEAP32[$70>>2]|0;
  $75 = (0 - ($74))|0;
  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($1,$time,$75,$61);
 }
 HEAP32[$70>>2] = 0;
 return;
}
function __ZN7Sms_Apu10write_dataEii($this,$time,$data) {
 $this = $this|0;
 $time = $time|0;
 $data = $data|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data>>>0)<(256);
 if (!($0)) {
  ___assert_fail((49944|0),(46248|0),299,(46472|0));
  // unreachable;
 }
 __ZN7Sms_Apu9run_untilEi($this,$time);
 $1 = $data & 128;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = (($this) + 980|0);
  HEAP32[$3>>2] = $data;
 }
 $4 = (($this) + 980|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 5;
 $7 = $6 & 3;
 $8 = $5 & 16;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = $data & 15;
  $11 = (46488 + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (($this) + ($7<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 32|0);
  HEAP32[$16>>2] = $13;
  return;
 }
 $17 = ($7|0)==(3);
 if ($17) {
  $28 = $data & 3;
  $29 = ($28|0)==(3);
  if ($29) {
   $32 = (($this) + 148|0);
   $33 = (($this) + 1020|0);
   HEAP32[$33>>2] = $32;
  } else {
   $30 = (46504 + ($28<<2)|0);
   $31 = (($this) + 1020|0);
   HEAP32[$31>>2] = $30;
  }
  $34 = $data & 4;
  $35 = ($34|0)==(0);
  $36 = (($this) + 1592|0);
  $37 = (($this) + 1596|0);
  $$in = $35 ? $37 : $36;
  $38 = HEAP32[$$in>>2]|0;
  $39 = (($this) + 1028|0);
  HEAP32[$39>>2] = $38;
  $40 = (($this) + 1024|0);
  HEAP32[$40>>2] = 32768;
  return;
 } else {
  $18 = ((($this) + (($7*48)|0)|0) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  if ($2) {
   $20 = $19 & 65280;
   $21 = $data << 4;
   $22 = $21 & 240;
   $23 = $20 | $22;
   HEAP32[$18>>2] = $23;
   return;
  } else {
   $24 = $19 & 255;
   $25 = $data << 8;
   $26 = $25 & 16128;
   $27 = $24 | $26;
   HEAP32[$18>>2] = $27;
   return;
  }
 }
}
function __ZN10Sms_SquareC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Sms_OscC2Ev($this);
 return;
}
function __ZN9Sms_NoiseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Sms_OscC2Ev($this);
 $0 = (($this) + 48|0);
 __ZN10Blip_SynthILi8ELi1EEC2Ev($0);
 return;
}
function __ZN10Sms_Square5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 36|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 40|0);
 HEAP32[$1>>2] = 0;
 __ZN7Sms_Osc5resetEv($this);
 return;
}
function __ZN9Sms_Noise5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 36|0);
 HEAP32[$0>>2] = 46504;
 $1 = (($this) + 40|0);
 HEAP32[$1>>2] = 32768;
 $2 = (($this) + 44|0);
 HEAP32[$2>>2] = 36864;
 __ZN7Sms_Osc5resetEv($this);
 return;
}
function __ZN8Snes_SpcC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 88|0);
 $1 = (($this) + 948|0);
 __ZN7Spc_DspC2EPh($0,$1);
 $2 = (($this) + 604|0);
 __ZN7Spc_CpuC2EP8Snes_SpcPh($2,$this,$1);
 __ZN8Snes_Spc9set_tempoEd($this,1.0);
 $3 = (($this) + 692|0);
 _memset(($3|0),-1,256)|0;
 $4 = (($this) + 66484|0);
 _memset(($4|0),-1,256)|0;
 $5 = (($this) + 66802|0);
 HEAP8[$5>>0] = -64;
 $6 = (($this) + 66803|0);
 HEAP8[$6>>0] = -1;
 $7 = (($this) + 66740|0);
 dest=$7+0|0; stop=dest+62|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN8Snes_Spc9set_tempoEd($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 16.0 / $t;
 $1 = $0 + 0.5;
 $2 = (~~(($1)));
 $3 = $2 << 3;
 $4 = (($this) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($this) + 36|0);
 HEAP32[$5>>2] = $3;
 $6 = (($this) + 60|0);
 HEAP32[$6>>2] = $2;
 return;
}
function __ZN8Snes_Spc11set_ipl_romEPKv($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 66740|0);
 dest=$0+0|0; src=$in+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN8Snes_Spc8load_spcEPKvl($this,$data,$size) {
 $this = $this|0;
 $data = $data|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $regs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $regs = sp;
 $0 = ($size|0)<(65920);
 if ($0) {
  $$0 = 46520;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_strncmp($data,48544,27)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 46520;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($data) + 37|0);
 $4 = (($data) + 38|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = HEAP8[$3>>0]|0;
 $9 = $8&255;
 $10 = $7 | $9;
 HEAP32[$regs>>2] = $10;
 $11 = (($data) + 39|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = (($regs) + 4|0);
 HEAP8[$13>>0] = $12;
 $14 = (($data) + 40|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = (($regs) + 5|0);
 HEAP8[$16>>0] = $15;
 $17 = (($data) + 41|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = (($regs) + 6|0);
 HEAP8[$19>>0] = $18;
 $20 = (($data) + 42|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = (($regs) + 7|0);
 HEAP8[$22>>0] = $21;
 $23 = (($data) + 43|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = (($regs) + 8|0);
 HEAP8[$25>>0] = $24;
 $26 = ($size>>>0)>(66047);
 if ($26) {
  $27 = (($data) + 65920|0);
  __ZN8Snes_Spc11set_ipl_romEPKv($this,$27);
 }
 $28 = (($data) + 256|0);
 $29 = (($data) + 65792|0);
 (__ZN8Snes_Spc10load_stateERKN7Spc_Cpu11registers_tEPKvS5_($this,$regs,$28,$29)|0);
 $30 = (($this) + 602|0);
 HEAP8[$30>>0] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN8Snes_Spc10load_stateERKN7Spc_Cpu11registers_tEPKvS5_($this,$cpu_state,$new_ram,$dsp_state) {
 $this = $this|0;
 $cpu_state = $cpu_state|0;
 $new_ram = $new_ram|0;
 $dsp_state = $dsp_state|0;
 var $$lobit = 0, $$lobit$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $i$02 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 608|0);
 ;HEAP32[$0+0>>2]=HEAP32[$cpu_state+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$cpu_state+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$cpu_state+8>>2]|0;
 $1 = (($this) + 72|0);
 HEAP32[$1>>2] = 32;
 $2 = (($this) + 948|0);
 _memcpy(($2|0),($new_ram|0),65536)|0;
 $3 = (($this) + 628|0);
 $4 = (($this) + 66420|0);
 dest=$3+0|0; src=$4+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $5 = (($this) + 1189|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($this) + 603|0);
 $$lobit = ($6&255) >>> 7;
 $$lobit$not = $$lobit ^ 1;
 HEAP8[$7>>0] = $$lobit$not;
 $8 = ($$lobit<<24>>24)==(1);
 __ZN8Snes_Spc10enable_romEb($this,$8);
 $9 = (($this) + 88|0);
 __ZN7Spc_Dsp5resetEv($9);
 $i$02 = 0;
 while(1) {
  $10 = (($dsp_state) + ($i$02)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  __ZN7Spc_Dsp5writeEii($9,$i$02,$12);
  $13 = (($i$02) + 1)|0;
  $exitcond = ($13|0)==(128);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $13;
  }
 }
 HEAP32[$this>>2] = 0;
 $14 = HEAP8[$5>>0]|0;
 $15 = $14&255;
 $16 = $15 & 1;
 $17 = (($this) + 16|0);
 HEAP32[$17>>2] = $16;
 $18 = ($16|0)==(0);
 if ($18) {
  HEAP32[$this>>2] = 127;
 }
 $19 = (($this) + 8|0);
 HEAP32[$19>>2] = 0;
 $20 = (($this) + 1201|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 & 15;
 $24 = (($this) + 20|0);
 HEAP32[$24>>2] = $23;
 $25 = (($this) + 1198|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ($26<<24>>24)!=(0);
 $29 = $28 ? $27 : 256;
 $30 = (($this) + 4|0);
 HEAP32[$30>>2] = $29;
 $31 = (($this) + 24|0);
 HEAP32[$31>>2] = 0;
 $32 = HEAP8[$5>>0]|0;
 $33 = $32&255;
 $34 = $33 >>> 1;
 $35 = $34 & 1;
 $36 = (($this) + 40|0);
 HEAP32[$36>>2] = $35;
 $37 = ($35|0)==(0);
 if ($37) {
  HEAP32[$31>>2] = 127;
 }
 $38 = (($this) + 32|0);
 HEAP32[$38>>2] = 0;
 $39 = (($this) + 1202|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 & 15;
 $43 = (($this) + 44|0);
 HEAP32[$43>>2] = $42;
 $44 = (($this) + 1199|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = ($45<<24>>24)!=(0);
 $48 = $47 ? $46 : 256;
 $49 = (($this) + 28|0);
 HEAP32[$49>>2] = $48;
 $50 = (($this) + 48|0);
 HEAP32[$50>>2] = 0;
 $51 = HEAP8[$5>>0]|0;
 $52 = $51&255;
 $53 = $52 >>> 2;
 $54 = $53 & 1;
 $55 = (($this) + 64|0);
 HEAP32[$55>>2] = $54;
 $56 = ($54|0)==(0);
 if ($56) {
  HEAP32[$50>>2] = 127;
 }
 $57 = (($this) + 56|0);
 HEAP32[$57>>2] = 0;
 $58 = (($this) + 1203|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 & 15;
 $62 = (($this) + 68|0);
 HEAP32[$62>>2] = $61;
 $63 = (($this) + 1200|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = ($64<<24>>24)!=(0);
 $67 = $66 ? $65 : 256;
 $68 = (($this) + 52|0);
 HEAP32[$68>>2] = $67;
 $69 = (($this) + 1188|0);
 HEAP8[$69>>0] = 0;
 HEAP8[$5>>0] = 0;
 $70 = (($this) + 1191|0);
 HEAP8[$70>>0] = -1;
 $71 = (($this) + 1198|0);
 HEAP8[$71>>0] = 0;
 $72 = (($this) + 1199|0);
 HEAP8[$72>>0] = 0;
 $73 = (($this) + 1200|0);
 HEAP8[$73>>0] = 0;
 $74 = (($this) + 1201|0);
 HEAP8[$74>>0] = -1;
 $75 = (($this) + 1202|0);
 HEAP8[$75>>0] = -1;
 $76 = (($this) + 1203|0);
 HEAP8[$76>>0] = -1;
 return (0|0);
}
function __ZN8Snes_Spc10clear_echoEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 88|0);
 $1 = (__ZN7Spc_Dsp4readEi($0,108)|0);
 $2 = $1 & 32;
 $3 = ($2|0)==(0);
 if (!($3)) {
  return;
 }
 $4 = (__ZN7Spc_Dsp4readEi($0,109)|0);
 $5 = $4 << 8;
 $6 = (__ZN7Spc_Dsp4readEi($0,125)|0);
 $7 = $6 << 11;
 $8 = ((($this) + ($5)|0) + 948|0);
 $9 = (65536 - ($5))|0;
 $10 = (__Z3minIjET_S0_S0_($7,$9)|0);
 _memset(($8|0),-1,($10|0))|0;
 return;
}
function __ZN8Snes_Spc10enable_romEb($this,$enable) {
 $this = $this|0;
 $enable = $enable|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 603|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $enable&1;
 $4 = ($2|0)==($3|0);
 if ($4) {
  return;
 }
 $5 = $enable&1;
 HEAP8[$0>>0] = $5;
 $6 = (($this) + 66420|0);
 $7 = (($this) + 66740|0);
 $8 = (($this) + 628|0);
 $9 = $enable ? $7 : $8;
 dest=$6+0|0; src=$9+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN8Snes_Spc5Timer10run_until_Ei($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elapsed$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___assert_fail((46536|0),(46544|0),183,(46592|0));
  // unreachable;
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = (($time) - ($3))|0;
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4|0) / ($6|0))&-1;
 $8 = (($7) + 1)|0;
 $9 = Math_imul($8, $6)|0;
 $10 = (($9) + ($3))|0;
 HEAP32[$this>>2] = $10;
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($8) + ($12))|0;
 $14 = (($this) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13|0)<($15|0);
 if ($16) {
  $elapsed$0 = $13;
  HEAP32[$11>>2] = $elapsed$0;
  return;
 }
 $17 = (($13|0) / ($15|0))&-1;
 $18 = Math_imul($17, $15)|0;
 $19 = (($13) - ($18))|0;
 $20 = (($this) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($17))|0;
 $23 = $22 & 15;
 HEAP32[$20>>2] = $23;
 $elapsed$0 = $19;
 HEAP32[$11>>2] = $elapsed$0;
 return;
}
function __ZN8Snes_Spc8run_dsp_Ei($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($time) - ($1))|0;
 $3 = $2 >> 5;
 $4 = (($3) + 1)|0;
 $5 = (($this) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = $4 << 1;
  $9 = (($6) + ($8<<1)|0);
  HEAP32[$5>>2] = $9;
  $10 = (($this) + 80|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9>>>0)>($11>>>0);
  if ($12) {
   ___assert_fail((46608|0),(46544|0),208,(46632|0));
   // unreachable;
  }
 }
 $13 = $4 << 5;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + ($13))|0;
 HEAP32[$0>>2] = $15;
 $16 = (($this) + 88|0);
 __ZN7Spc_Dsp3runElPs($16,$4,$6);
 return;
}
function __ZN8Snes_Spc4readEj($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this) + ($addr)|0) + 948|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $addr & -16;
 $4 = ($3|0)==(240);
 if (!($4)) {
  $$0 = $2;
  return ($$0|0);
 }
 $5 = (($addr) + -253)|0;
 $6 = ($5|0)>(-1);
 if ($6) {
  $7 = (($this) + (($5*24)|0)|0);
  $8 = (__ZNK8Snes_Spc4timeEv($this)|0);
  __ZN8Snes_Spc5Timer9run_untilEi($7,$8);
  $9 = ((($this) + (($5*24)|0)|0) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$9>>2] = 0;
  $$0 = $10;
  return ($$0|0);
 }
 $11 = ($addr|0)==(243);
 if (!($11)) {
  $$0 = $2;
  return ($$0|0);
 }
 $12 = (__ZNK8Snes_Spc4timeEv($this)|0);
 __ZN8Snes_Spc7run_dspEi($this,$12);
 $13 = (($this) + 1190|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($this) + 88|0);
 $17 = $15 & 127;
 $18 = (__ZN7Spc_Dsp4readEi($16,$17)|0);
 $$0 = $18;
 return ($$0|0);
}
function __ZN8Snes_Spc5writeEji($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($addr>>>0)<(240);
 if ($0) {
  $1 = $data&255;
  $2 = ((($this) + ($addr)|0) + 948|0);
  HEAP8[$2>>0] = $1;
  return;
 }
 switch ($addr|0) {
 case 247: case 246: case 245: case 244: case 240:  {
  return;
  break;
 }
 case 252: case 251: case 250:  {
  $55 = (($addr) + -250)|0;
  $56 = ((($this) + (($55*24)|0)|0) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $57 & 255;
  $59 = ($58|0)==($data|0);
  if ($59) {
   return;
  }
  $60 = (($this) + (($55*24)|0)|0);
  $61 = (__ZNK8Snes_Spc4timeEv($this)|0);
  __ZN8Snes_Spc5Timer9run_untilEi($60,$61);
  $62 = ($data|0)!=(0);
  $63 = $62 ? $data : 256;
  HEAP32[$56>>2] = $63;
  return;
  break;
 }
 case 255: case 254: case 253:  {
  $64 = (($addr) + -253)|0;
  $65 = ((($this) + (($64*24)|0)|0) + 20|0);
  HEAP32[$65>>2] = 0;
  return;
  break;
 }
 case 243:  {
  $12 = (__ZNK8Snes_Spc4timeEv($this)|0);
  __ZN8Snes_Spc7run_dspEi($this,$12);
  $13 = (($this) + 1190|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (($this) + 84|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)>(0);
  do {
   if ($18) {
    if ((($14<<24>>24) == 92)) {
     $26 = (($this) + 596|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $27 | $data;
     HEAP32[$26>>2] = $28;
     $29 = $data ^ -1;
     $30 = (($this) + 592|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $31 & $29;
     HEAP32[$30>>2] = $32;
     break;
    } else if ((($14<<24>>24) == 76)) {
     $19 = (($this) + 88|0);
     $20 = (__ZN7Spc_Dsp4readEi($19,92)|0);
     $21 = $20 ^ -1;
     $22 = $21 & $data;
     $23 = (($this) + 592|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $24 | $22;
     HEAP32[$23>>2] = $25;
     break;
    } else {
     label = 12;
     break;
    }
   } else {
    label = 12;
   }
  } while(0);
  if ((label|0) == 12) {
   $33 = ($14<<24>>24)>(-1);
   if (!($33)) {
    return;
   }
  }
  $34 = (($this) + 88|0);
  __ZN7Spc_Dsp5writeEii($34,$15,$data);
  return;
  break;
 }
 case 241:  {
  $35 = $data & 1;
  $36 = ($35|0)==(0);
  $37 = (($this) + 16|0);
  if ($36) {
   HEAP32[$37>>2] = 0;
   HEAP32[$this>>2] = 127;
  } else {
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    HEAP32[$37>>2] = 1;
    $40 = (($this) + 20|0);
    HEAP32[$40>>2] = 0;
    $41 = (($this) + 8|0);
    HEAP32[$41>>2] = 0;
    $42 = (__ZNK8Snes_Spc4timeEv($this)|0);
    HEAP32[$this>>2] = $42;
   }
  }
  $43 = (($this) + 24|0);
  $44 = $data & 2;
  $45 = ($44|0)==(0);
  $46 = (($this) + 40|0);
  if ($45) {
   HEAP32[$46>>2] = 0;
   HEAP32[$43>>2] = 127;
  } else {
   $66 = HEAP32[$46>>2]|0;
   $67 = ($66|0)==(0);
   if ($67) {
    HEAP32[$46>>2] = 1;
    $68 = (($this) + 44|0);
    HEAP32[$68>>2] = 0;
    $69 = (($this) + 32|0);
    HEAP32[$69>>2] = 0;
    $70 = (__ZNK8Snes_Spc4timeEv($this)|0);
    HEAP32[$43>>2] = $70;
   }
  }
  $71 = (($this) + 48|0);
  $72 = $data & 4;
  $73 = ($72|0)==(0);
  $74 = (($this) + 64|0);
  if ($73) {
   HEAP32[$74>>2] = 0;
   HEAP32[$71>>2] = 127;
  } else {
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)==(0);
   if ($76) {
    HEAP32[$74>>2] = 1;
    $77 = (($this) + 68|0);
    HEAP32[$77>>2] = 0;
    $78 = (($this) + 56|0);
    HEAP32[$78>>2] = 0;
    $79 = (__ZNK8Snes_Spc4timeEv($this)|0);
    HEAP32[$71>>2] = $79;
   }
  }
  $80 = $data & 16;
  $81 = ($80|0)==(0);
  if (!($81)) {
   $47 = (($this) + 1192|0);
   HEAP8[$47>>0] = 0;
   $48 = (($this) + 1193|0);
   HEAP8[$48>>0] = 0;
  }
  $49 = $data & 32;
  $50 = ($49|0)==(0);
  if (!($50)) {
   $51 = (($this) + 1194|0);
   HEAP8[$51>>0] = 0;
   $52 = (($this) + 1195|0);
   HEAP8[$52>>0] = 0;
  }
  $53 = $data & 128;
  $54 = ($53|0)!=(0);
  __ZN8Snes_Spc10enable_romEb($this,$54);
  return;
  break;
 }
 default: {
  $3 = ($addr>>>0)<(65472);
  $4 = $data&255;
  if ($3) {
   $5 = ((($this) + ($addr)|0) + 948|0);
   HEAP8[$5>>0] = $4;
   return;
  }
  $6 = (($addr) + -65472)|0;
  $7 = ((($this) + ($6)|0) + 628|0);
  HEAP8[$7>>0] = $4;
  $8 = (($this) + 603|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if (!($10)) {
   return;
  }
  $11 = ((($this) + ($addr)|0) + 948|0);
  HEAP8[$11>>0] = $4;
  return;
 }
 }
}
function __ZN8Snes_Spc4skipEl($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)>(128000);
 do {
  if ($0) {
   $1 = (($this) + 592|0);
   HEAP32[$1>>2] = 0;
   $2 = (($this) + 596|0);
   HEAP32[$2>>2] = 0;
   $3 = (($count) + -64000)|0;
   $4 = (($this) + 600|0);
   $5 = (__ZN8Snes_Spc4playElPs($this,$3,$4)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $7 = (($this) + 88|0);
    $8 = HEAP32[$2>>2]|0;
    $9 = HEAP32[$1>>2]|0;
    $10 = $9 ^ -1;
    $11 = $8 & $10;
    __ZN7Spc_Dsp5writeEii($7,92,$11);
    $12 = HEAP32[$1>>2]|0;
    __ZN7Spc_Dsp5writeEii($7,76,$12);
    __ZN8Snes_Spc10clear_echoEv($this);
    $$01 = 64000;
    break;
   } else {
    $$0 = $5;
    return ($$0|0);
   }
  } else {
   $$01 = $count;
  }
 } while(0);
 $13 = (__ZN8Snes_Spc4playElPs($this,$$01,0)|0);
 $$0 = $13;
 return ($$0|0);
}
function __ZN8Snes_Spc4playElPs($this,$count,$out) {
 $this = $this|0;
 $count = $count|0;
 $out = $out|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $count & 1;
 $1 = ($0|0)==(0);
 if (!($1)) {
  ___assert_fail((46656|0),(46544|0),448,(46672|0));
  // unreachable;
 }
 $2 = (($count|0) / 2)&-1;
 $3 = $2 << 5;
 $4 = (($this) + 76|0);
 HEAP32[$4>>2] = $out;
 $5 = ($out|0)!=(0|0);
 if ($5) {
  $6 = (($this) + 600|0);
  $7 = ($6|0)!=($out|0);
  $$ = $7 ? $count : 0;
  $9 = $$;
 } else {
  $9 = 0;
 }
 $8 = (($out) + ($9<<1)|0);
 $10 = (($this) + 80|0);
 HEAP32[$10>>2] = $8;
 $11 = (($this) + 600|0);
 $12 = ($11|0)==($out|0);
 $13 = (32 - ($3))|0;
 $$1 = $12 ? 32 : $13;
 $14 = (($this) + 84|0);
 HEAP32[$14>>2] = $$1;
 $15 = (0 - ($3))|0;
 $16 = (($this) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $19 = HEAP32[$this>>2]|0;
  $20 = (($19) - ($3))|0;
  HEAP32[$this>>2] = $20;
  __ZN8Snes_Spc5Timer9run_untilEi($this,$15);
 }
 $21 = (($this) + 24|0);
 $22 = (($this) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $36 = HEAP32[$21>>2]|0;
  $37 = (($36) - ($3))|0;
  HEAP32[$21>>2] = $37;
  __ZN8Snes_Spc5Timer9run_untilEi($21,$15);
 }
 $38 = (($this) + 48|0);
 $39 = (($this) + 64|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 if (!($41)) {
  $42 = HEAP32[$38>>2]|0;
  $43 = (($42) - ($3))|0;
  HEAP32[$38>>2] = $43;
  __ZN8Snes_Spc5Timer9run_untilEi($38,$15);
 }
 $44 = (($this) + 604|0);
 $27 = (($this) + 72|0);
 $45 = HEAP32[$27>>2]|0;
 $46 = (($3) - ($45))|0;
 $26 = (__ZN7Spc_Cpu3runEi($44,$46)|0);
 $47 = ($26|0)>(0);
 if ($47) {
  $$0 = 46680;
  return ($$0|0);
 }
 $25 = (0 - ($26))|0;
 HEAP32[$27>>2] = $25;
 __ZN8Snes_Spc7run_dspEi($this,0);
 if ($5) {
  $28 = HEAP32[$14>>2]|0;
  $29 = ($28|0)==(32);
  if (!($29)) {
   ___assert_fail((46736|0),(46544|0),483,(46672|0));
   // unreachable;
  }
  if (!($12)) {
   $30 = HEAP32[$4>>2]|0;
   $31 = $30;
   $32 = $out;
   $33 = (($31) - ($32))|0;
   $34 = $33 >> 1;
   $35 = ($34|0)==($count|0);
   if (!($35)) {
    ___assert_fail((46768|0),(46544|0),484,(46672|0));
    // unreachable;
   }
  }
 }
 HEAP32[$10>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Spc_Dsp4readEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i>>>0)<(128);
 if ($0) {
  $1 = (($this) + ($i)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  return ($3|0);
 } else {
  ___assert_fail((47120|0),(46824|0),148,(46648|0));
  // unreachable;
 }
 return (0)|0;
}
function __Z3minIjET_S0_S0_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $x$y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x>>>0)<($y>>>0);
 $x$y = $0 ? $x : $y;
 return ($x$y|0);
}
function __ZNK8Snes_Spc4timeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 604|0);
 $1 = (__ZNK7Spc_Cpu6remainEv($0)|0);
 $2 = (0 - ($1))|0;
 return ($2|0);
}
function __ZN8Snes_Spc5Timer9run_untilEi($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)>($time|0);
 if ($1) {
  return;
 }
 __ZN8Snes_Spc5Timer10run_until_Ei($this,$time);
 return;
}
function __ZN8Snes_Spc7run_dspEi($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($time|0);
 if ($2) {
  return;
 }
 __ZN8Snes_Spc8run_dsp_Ei($this,$time);
 return;
}
function __ZNK7Spc_Cpu6remainEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN7Spc_CpuC2EP8Snes_SpcPh($this,$e,$ram_in) {
 $this = $this|0;
 $e = $e|0;
 $ram_in = $ram_in|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $ram_in;
 $0 = (($this) + 20|0);
 HEAP32[$0>>2] = $e;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = 0;
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN7Spc_Cpu7mem_bitEj($this,$pc) {
 $this = $this|0;
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + ($pc)|0);
 $2 = (__Z8get_le16PKv($1)|0);
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2 & 8191;
 $6 = (__ZN8Snes_Spc4readEj($4,$5)|0);
 $7 = $2 >>> 13;
 $8 = $6 >>> $7;
 $9 = $8 << 8;
 $10 = $9 & 256;
 return ($10|0);
}
function __ZN7Spc_Cpu3runEi($this,$cycle_count) {
 $this = $this|0;
 $cycle_count = $cycle_count|0;
 var $$ = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$masked = 0, $$masked1 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0;
 var $a$1$be = 0, $a$1$lcssa = 0, $a$137 = 0, $a$2 = 0, $addr$0 = 0, $addr3$0 = 0, $addr4$0 = 0, $addr5$0 = 0, $addr5$1 = 0, $c$0 = 0, $c$1$be = 0, $c$1$lcssa = 0, $c$10 = 0, $c$11 = 0, $c$114 = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0;
 var $c$7 = 0, $c$8 = 0, $c$9 = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$17 = 0, $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$20 = 0, $data$21 = 0, $data$22 = 0, $data$23 = 0;
 var $data$24 = 0, $data$25 = 0, $data$26 = 0, $data$27 = 0, $data$28 = 0, $data$29 = 0, $data$3 = 0, $data$30 = 0, $data$31 = 0, $data$32 = 0, $data$33 = 0, $data$34 = 0, $data$35 = 0, $data$36 = 0, $data$37 = 0, $data$38 = 0, $data$39 = 0, $data$4 = 0, $data$40 = 0, $data$41 = 0;
 var $data$42 = 0, $data$43 = 0, $data$44 = 0, $data$45 = 0, $data$46 = 0, $data$48 = 0, $data$48$ = 0, $data$5 = 0, $data$50 = 0, $data$51 = 0, $data$52 = 0, $data$53 = 0, $data$54 = 0, $data$55 = 0, $data$56 = 0, $data$6 = 0, $data$7 = 0, $data$8 = 0, $data$9 = 0, $dp$0$be = 0;
 var $dp$0$lcssa = 0, $dp$011 = 0, $nz$0 = 0, $nz$1$be = 0, $nz$1$lcssa = 0, $nz$112 = 0, $nz$2 = 0, $pc$0 = 0, $pc$1 = 0, $pc$10 = 0, $pc$11 = 0, $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$18 = 0, $pc$19 = 0, $pc$2$be = 0;
 var $pc$2$lcssa = 0, $pc$20 = 0, $pc$21 = 0, $pc$22 = 0, $pc$23 = 0, $pc$24 = 0, $pc$240 = 0, $pc$25 = 0, $pc$27 = 0, $pc$28 = 0, $pc$29 = 0, $pc$3 = 0, $pc$30 = 0, $pc$31 = 0, $pc$32 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0;
 var $pc$9 = 0, $sext = 0, $sign$0 = 0, $sp$0$be = 0, $sp$0$lcssa = 0, $sp$0$pn = 0, $sp$041 = 0, $sp$1 = 0, $status$0 = 0, $status$1$be = 0, $status$1$lcssa = 0, $status$116 = 0, $status$3 = 0, $sum = 0, $temp2$0 = 0, $temp21$1 = 0, $temp22$0 = 0, $temp23$1 = 0, $temp28$1 = 0, $temp9$0 = 0;
 var $x$0 = 0, $x$1$be = 0, $x$1$lcssa = 0, $x$124 = 0, $x$2 = 0, $y$0 = 0, $y$1$be = 0, $y$1$lcssa = 0, $y$118 = 0, $y$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = $cycle_count;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($this) + 12|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $$sum = (($4) + 257)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = (($this) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($this) + 8|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (($this) + 9|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (($this) + 10|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($this) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 & 92;
 $21 = $19 << 8;
 $22 = $19 << 4;
 $23 = $22 & 2048;
 $24 = $19 & 2;
 $25 = $23 | $24;
 $26 = $25 ^ 2;
 $27 = $19 << 3;
 $28 = $27 & 256;
 $29 = (($7) + 1)|0;
 $30 = (($1) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = HEAP32[$0>>2]|0;
 $33 = ($32|0)<(1);
 if ($33) {
  $a$1$lcssa = $10;$c$1$lcssa = $21;$dp$0$lcssa = $28;$nz$1$lcssa = $26;$pc$2$lcssa = $7;$sp$0$lcssa = $5;$status$1$lcssa = $20;$x$1$lcssa = $13;$y$1$lcssa = $16;
  $887 = $status$1$lcssa & -132;
  $888 = $c$1$lcssa >>> 8;
  $889 = $888 & 1;
  $890 = $dp$0$lcssa >>> 3;
  $891 = $889 | $890;
  $892 = $891 | $887;
  $893 = $nz$1$lcssa & 2176;
  $894 = ($893|0)==(0);
  $895 = $892 | 128;
  $$7 = $894 ? $892 : $895;
  $896 = $nz$1$lcssa & 255;
  $897 = ($896|0)==(0);
  $898 = $$7 | 2;
  $temp28$1 = $897 ? $898 : $$7;
  $899 = $temp28$1&255;
  HEAP8[$17>>0] = $899;
  HEAP32[$6>>2] = $pc$2$lcssa;
  $900 = (($sp$0$lcssa) + -257|0);
  $901 = $900;
  $902 = $1;
  $903 = (($901) - ($902))|0;
  $904 = $903&255;
  HEAP8[$2>>0] = $904;
  $905 = $a$1$lcssa&255;
  HEAP8[$8>>0] = $905;
  $906 = $x$1$lcssa&255;
  HEAP8[$11>>0] = $906;
  $907 = $y$1$lcssa&255;
  HEAP8[$14>>0] = $907;
  $908 = HEAP32[$0>>2]|0;
  return ($908|0);
 }
 $34 = $31&255;
 $35 = (($1) + ($7)|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = (($this) + 20|0);
 $39 = (($this) + 20|0);
 $40 = (($this) + 20|0);
 $41 = (($this) + 20|0);
 $42 = (($this) + 20|0);
 $43 = (($this) + 20|0);
 $44 = (($this) + 20|0);
 $45 = (($this) + 20|0);
 $46 = (($this) + 20|0);
 $47 = $1;
 $48 = (($this) + 20|0);
 $49 = (($this) + 20|0);
 $50 = (($this) + 20|0);
 $51 = (($this) + 20|0);
 $52 = (($this) + 20|0);
 $53 = (($this) + 20|0);
 $54 = (($this) + 20|0);
 $55 = (($this) + 20|0);
 $56 = (($this) + 20|0);
 $57 = (($this) + 20|0);
 $58 = (($this) + 20|0);
 $59 = (($this) + 20|0);
 $60 = (($this) + 20|0);
 $61 = (($this) + 20|0);
 $62 = (($this) + 20|0);
 $63 = (($this) + 20|0);
 $64 = (($this) + 20|0);
 $65 = (($this) + 20|0);
 $66 = (($this) + 20|0);
 $67 = (($this) + 20|0);
 $68 = (($this) + 20|0);
 $69 = (($this) + 20|0);
 $70 = (($this) + 20|0);
 $71 = (($this) + 20|0);
 $72 = (($this) + 20|0);
 $73 = (($this) + 20|0);
 $74 = (($this) + 20|0);
 $75 = (($this) + 20|0);
 $76 = (($this) + 20|0);
 $77 = (($this) + 20|0);
 $78 = (($this) + 20|0);
 $79 = (($this) + 20|0);
 $80 = (($this) + 20|0);
 $81 = (($this) + 20|0);
 $82 = (($this) + 20|0);
 $83 = (($this) + 20|0);
 $84 = (($1) + 65502|0);
 $85 = (($this) + 20|0);
 $86 = (($this) + 20|0);
 $87 = (($this) + 20|0);
 $88 = (($this) + 20|0);
 $106 = $37;$110 = $32;$115 = $31;$126 = $30;$138 = $34;$664 = $29;$a$137 = $10;$c$114 = $21;$dp$011 = $28;$nz$112 = $26;$pc$240 = $7;$sp$041 = $5;$status$116 = $20;$x$124 = $13;$y$118 = $16;
 L4: while(1) {
  $105 = (46864 + ($106)|0);
  $107 = HEAP8[$105>>0]|0;
  $108 = $107&255;
  $109 = (($110) - ($108))|0;
  HEAP32[$0>>2] = $109;
  do {
   switch ($106|0) {
   case 191:  {
    $160 = (($x$124) + ($dp$011))|0;
    $161 = (($x$124) + 1)|0;
    $162 = $161 & 255;
    $data$2 = $160;$pc$3 = $pc$240;$x$2 = $162;
    label = 21;
    break;
   }
   case 249:  {
    $163 = (($138) + ($y$118))|0;
    $164 = $163 & 255;
    $data$3 = $164;
    label = 24;
    break;
   }
   case 248:  {
    $data$3 = $138;
    label = 24;
    break;
   }
   case 233:  {
    $166 = (__Z8get_le16PKv($126)|0);
    $167 = (($pc$240) + 2)|0;
    $data$4 = $166;$pc$4 = $167;
    label = 26;
    break;
   }
   case 205:  {
    $data$5 = $138;$pc$5 = $664;
    label = 27;
    break;
   }
   case 251:  {
    $170 = (($138) + ($x$124))|0;
    $171 = $170 & 255;
    $data$6 = $171;
    label = 29;
    break;
   }
   case 235:  {
    $data$6 = $138;
    label = 29;
    break;
   }
   case 236:  {
    $173 = (__Z8get_le16PKv($126)|0);
    $174 = (($pc$240) + 2)|0;
    $data$7 = $173;$pc$6 = $174;
    label = 31;
    break;
   }
   case 141:  {
    $data$8 = $138;$pc$7 = $664;
    label = 32;
    break;
   }
   case 198:  {
    $177 = (($x$124) + ($dp$011))|0;
    $data$11 = $177;$pc$8 = $pc$240;
    label = 41;
    break;
   }
   case 215:  {
    $178 = $138 | $dp$011;
    $179 = (($1) + ($178)|0);
    $180 = (__Z8get_le16PKv($179)|0);
    $181 = (($180) + ($y$118))|0;
    $data$11 = $181;$pc$8 = $664;
    label = 41;
    break;
   }
   case 214:  {
    $187 = (($138) + ($y$118))|0;
    $data$9 = $187;
    label = 38;
    break;
   }
   case 199:  {
    $182 = (($138) + ($x$124))|0;
    $183 = $182 & 255;
    $184 = $183 | $dp$011;
    $185 = (($1) + ($184)|0);
    $186 = (__Z8get_le16PKv($185)|0);
    $data$11 = $186;$pc$8 = $664;
    label = 41;
    break;
   }
   case 213:  {
    $188 = (($138) + ($x$124))|0;
    $data$9 = $188;
    label = 38;
    break;
   }
   case 212:  {
    $195 = (($138) + ($x$124))|0;
    $196 = $195 & 255;
    $data$10 = $196;
    label = 40;
    break;
   }
   case 197:  {
    $data$9 = $138;
    label = 38;
    break;
   }
   case 196:  {
    $data$10 = $138;
    label = 40;
    break;
   }
   case 201:  {
    $temp2$0 = $x$124;
    label = 43;
    break;
   }
   case 217:  {
    $202 = (($138) + ($y$118))|0;
    $203 = $202 & 255;
    $data$12 = $203;
    label = 45;
    break;
   }
   case 204:  {
    $temp2$0 = $y$118;
    label = 43;
    break;
   }
   case 216:  {
    $data$12 = $138;
    label = 45;
    break;
   }
   case 219:  {
    $206 = (($138) + ($x$124))|0;
    $207 = $206 & 255;
    $data$13 = $207;
    label = 47;
    break;
   }
   case 203:  {
    $data$13 = $138;
    label = 47;
    break;
   }
   case 250:  {
    $210 = HEAP32[$45>>2]|0;
    $211 = $138 | $dp$011;
    $212 = (__ZN8Snes_Spc4readEj($210,$211)|0);
    $data$14 = $212;
    label = 49;
    break;
   }
   case 143:  {
    $data$14 = $138;
    label = 49;
    break;
   }
   case 125:  {
    $a$1$be = $x$124;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $x$124;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 221:  {
    $a$1$be = $y$118;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $y$118;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 93:  {
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $a$137;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $a$137;$y$1$be = $y$118;
    break;
   }
   case 253:  {
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $a$137;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $a$137;
    break;
   }
   case 157:  {
    $219 = (($sp$041) + -257|0);
    $220 = $219;
    $221 = (($220) - ($47))|0;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $221;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $221;$y$1$be = $y$118;
    break;
   }
   case 189:  {
    $$sum2 = (($x$124) + 257)|0;
    $222 = (($1) + ($$sum2)|0);
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $222;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 175:  {
    $223 = HEAP32[$48>>2]|0;
    $224 = (($x$124) + ($dp$011))|0;
    __ZN8Snes_Spc5writeEji($223,$224,$a$137);
    $225 = (($x$124) + 1)|0;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $225;$y$1$be = $y$118;
    break;
   }
   case 38:  {
    $226 = (($x$124) + ($dp$011))|0;
    $data$17 = $226;$pc$9 = $pc$240;
    label = 65;
    break;
   }
   case 55:  {
    $227 = $138 | $dp$011;
    $228 = (($1) + ($227)|0);
    $229 = (__Z8get_le16PKv($228)|0);
    $230 = (($229) + ($y$118))|0;
    $data$17 = $230;$pc$9 = $664;
    label = 65;
    break;
   }
   case 54:  {
    $236 = (($138) + ($y$118))|0;
    $data$15 = $236;
    label = 62;
    break;
   }
   case 39:  {
    $231 = (($138) + ($x$124))|0;
    $232 = $231 & 255;
    $233 = $232 | $dp$011;
    $234 = (($1) + ($233)|0);
    $235 = (__Z8get_le16PKv($234)|0);
    $data$17 = $235;$pc$9 = $664;
    label = 65;
    break;
   }
   case 53:  {
    $237 = (($138) + ($x$124))|0;
    $data$15 = $237;
    label = 62;
    break;
   }
   case 37:  {
    $data$15 = $138;
    label = 62;
    break;
   }
   case 52:  {
    $244 = (($138) + ($x$124))|0;
    $245 = $244 & 255;
    $data$16 = $245;
    label = 64;
    break;
   }
   case 36:  {
    $data$16 = $138;
    label = 64;
    break;
   }
   case 40:  {
    $data$18 = $138;$pc$10 = $664;
    label = 66;
    break;
   }
   case 57:  {
    $250 = HEAP32[$50>>2]|0;
    $251 = (($y$118) + ($dp$011))|0;
    $252 = (__ZN8Snes_Spc4readEj($250,$251)|0);
    $253 = (($x$124) + ($dp$011))|0;
    $addr$0 = $253;$data$20 = $252;$pc$11 = $pc$240;
    label = 70;
    break;
   }
   case 41:  {
    $254 = HEAP32[$52>>2]|0;
    $255 = $138 | $dp$011;
    $256 = (__ZN8Snes_Spc4readEj($254,$255)|0);
    $data$19 = $256;
    label = 69;
    break;
   }
   case 56:  {
    $data$19 = $138;
    label = 69;
    break;
   }
   case 6:  {
    $266 = (($x$124) + ($dp$011))|0;
    $data$23 = $266;$pc$12 = $pc$240;
    label = 79;
    break;
   }
   case 23:  {
    $267 = $138 | $dp$011;
    $268 = (($1) + ($267)|0);
    $269 = (__Z8get_le16PKv($268)|0);
    $270 = (($269) + ($y$118))|0;
    $data$23 = $270;$pc$12 = $664;
    label = 79;
    break;
   }
   case 75:  {
    $521 = $138 | $dp$011;
    $c$11 = 0;$data$55 = $521;$pc$30 = $664;
    label = 163;
    break;
   }
   case 123:  {
    $c$8 = $c$114;
    label = 159;
    break;
   }
   case 107:  {
    $c$9 = $c$114;$data$54 = $138;
    label = 160;
    break;
   }
   case 76:  {
    $c$10 = 0;
    label = 162;
    break;
   }
   case 108:  {
    $c$10 = $c$114;
    label = 162;
    break;
   }
   case 159:  {
    $535 = $a$137 >> 4;
    $536 = $a$137 << 4;
    $537 = $536 & 240;
    $538 = $537 | $535;
    $a$1$be = $538;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $538;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 218:  {
    $551 = HEAP32[$76>>2]|0;
    $552 = $138 | $dp$011;
    __ZN8Snes_Spc5writeEji($551,$552,$a$137);
    $553 = HEAP32[$76>>2]|0;
    $554 = (($138) + 1)|0;
    $555 = $554 & 255;
    $556 = $555 | $dp$011;
    __ZN8Snes_Spc5writeEji($553,$556,$y$118);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $664;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 186:  {
    $539 = HEAP32[$75>>2]|0;
    $540 = $138 | $dp$011;
    $541 = (__ZN8Snes_Spc4readEj($539,$540)|0);
    $542 = $541 & 127;
    $543 = $541 >> 1;
    $544 = $542 | $543;
    $545 = HEAP32[$75>>2]|0;
    $546 = (($138) + 1)|0;
    $547 = $546 & 255;
    $548 = $547 | $dp$011;
    $549 = (__ZN8Snes_Spc4readEj($545,$548)|0);
    $550 = $544 | $549;
    $a$0 = $541;$c$0 = $c$114;$nz$0 = $550;$pc$1 = $664;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $549;
    label = 4;
    break;
   }
   case 63:  {
    $124 = (($sp$041) + -2|0);
    $125 = (($pc$240) + 3)|0;
    __Z8set_le16Pvj($124,$125);
    $127 = (__Z8get_le16PKv($126)|0);
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $127;$sp$0$be = $124;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 22:  {
    $276 = (($138) + ($y$118))|0;
    $data$21 = $276;
    label = 76;
    break;
   }
   case 7:  {
    $271 = (($138) + ($x$124))|0;
    $272 = $271 & 255;
    $273 = $272 | $dp$011;
    $274 = (($1) + ($273)|0);
    $275 = (__Z8get_le16PKv($274)|0);
    $data$23 = $275;$pc$12 = $664;
    label = 79;
    break;
   }
   case 21:  {
    $277 = (($138) + ($x$124))|0;
    $data$21 = $277;
    label = 76;
    break;
   }
   case 5:  {
    $data$21 = $138;
    label = 76;
    break;
   }
   case 26: case 58:  {
    $557 = $138 | $dp$011;
    $558 = HEAP32[$77>>2]|0;
    $559 = (__ZN8Snes_Spc4readEj($558,$557)|0);
    $560 = $106 >>> 4;
    $561 = $560 & 2;
    $562 = (($561) + -1)|0;
    $563 = (($562) + ($559))|0;
    $564 = $563 >>> 1;
    $565 = $564 | $563;
    $566 = $565 & 127;
    $567 = HEAP32[$77>>2]|0;
    $568 = $563 & 255;
    __ZN8Snes_Spc5writeEji($567,$557,$568);
    $569 = (($138) + 1)|0;
    $570 = $569 & 255;
    $571 = $570 | $dp$011;
    $572 = $563 >>> 8;
    $573 = HEAP32[$77>>2]|0;
    $574 = (__ZN8Snes_Spc4readEj($573,$571)|0);
    $575 = (($574) + ($572))|0;
    $576 = $575 & 255;
    $577 = $576 | $566;
    $578 = HEAP32[$77>>2]|0;
    __ZN8Snes_Spc5writeEji($578,$571,$576);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $577;$pc$1 = $664;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 122: case 154:  {
    $579 = HEAP32[$78>>2]|0;
    $580 = $138 | $dp$011;
    $581 = (__ZN8Snes_Spc4readEj($579,$580)|0);
    $582 = HEAP32[$78>>2]|0;
    $583 = (($138) + 1)|0;
    $584 = $583 & 255;
    $585 = $584 | $dp$011;
    $586 = (__ZN8Snes_Spc4readEj($582,$585)|0);
    $587 = $586 << 8;
    $588 = (($587) + ($581))|0;
    $589 = $status$116 & -73;
    $590 = $106 & 128;
    $591 = ($590|0)==(0);
    if ($591) {
     $sign$0 = $586;$temp9$0 = $588;
    } else {
     $592 = $588 ^ 65535;
     $593 = (($592) + 1)|0;
     $594 = $593 >> 8;
     $sign$0 = $594;$temp9$0 = $593;
    }
    $595 = (($temp9$0) + ($a$137))|0;
    $596 = $595 & 255;
    $597 = $595 >>> 1;
    $598 = $597 | $595;
    $599 = $598 & 127;
    $600 = $595 >> 8;
    $601 = (($600) + ($y$118))|0;
    $$masked1 = $601 & 255;
    $602 = $599 | $$masked1;
    $603 = $601 & 15;
    $604 = $y$118 & 15;
    $605 = (($603) - ($604))|0;
    $606 = $605 >>> 4;
    $607 = $606 & 8;
    $608 = $607 | $589;
    $609 = $601 ^ $y$118;
    $610 = $y$118 ^ 128;
    $611 = $610 ^ $sign$0;
    $612 = $609 & $611;
    $613 = $612 >>> 1;
    $614 = $613 & 64;
    $615 = $608 | $614;
    $a$0 = $596;$c$0 = $601;$nz$0 = $602;$pc$1 = $664;$status$0 = $615;$x$0 = $x$124;$y$0 = $$masked1;
    label = 4;
    break;
   }
   case 90:  {
    $616 = HEAP32[$79>>2]|0;
    $617 = $138 | $dp$011;
    $618 = (__ZN8Snes_Spc4readEj($616,$617)|0);
    $619 = (($a$137) - ($618))|0;
    $620 = $619 >>> 1;
    $621 = $620 | $619;
    $622 = $621 & 127;
    $623 = $619 >> 8;
    $624 = (($623) + ($y$118))|0;
    $625 = HEAP32[$79>>2]|0;
    $626 = (($138) + 1)|0;
    $627 = $626 & 255;
    $628 = $627 | $dp$011;
    $629 = (__ZN8Snes_Spc4readEj($625,$628)|0);
    $630 = (($624) - ($629))|0;
    $631 = $630 ^ -1;
    $$masked = $630 & 255;
    $632 = $$masked | $622;
    $a$0 = $a$137;$c$0 = $631;$nz$0 = $632;$pc$1 = $664;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 207:  {
    $633 = Math_imul($a$137, $y$118)|0;
    $634 = $633 & 255;
    $635 = $633 >>> 1;
    $636 = $635 | $633;
    $637 = $636 & 127;
    $638 = $633 >>> 8;
    $639 = $637 | $638;
    $a$1$be = $634;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $639;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $638;
    break;
   }
   case 158:  {
    $640 = $status$116 & -73;
    $641 = $y$118 & 15;
    $642 = $x$124 & 15;
    $643 = ($641>>>0)<($642>>>0);
    $644 = $640 | 8;
    $$ = $643 ? $640 : $644;
    $645 = ($y$118|0)<($x$124|0);
    $646 = $$ | 64;
    $status$3 = $645 ? $$ : $646;
    $647 = $y$118 << 8;
    $648 = (($a$137) + ($647))|0;
    $649 = $x$124 << 1;
    $650 = ($y$118|0)<($649|0);
    if ($650) {
     $651 = (($648>>>0) / ($x$124>>>0))&-1;
     $652 = Math_imul($651, $x$124)|0;
     $653 = (($648) - ($652))|0;
     $a$2 = $651;$y$2 = $653;
    } else {
     $654 = $x$124 << 9;
     $655 = (($648) - ($654))|0;
     $656 = (256 - ($x$124))|0;
     $657 = (($655>>>0) / ($656>>>0))&-1;
     $658 = (255 - ($657))|0;
     $659 = (($655>>>0) % ($656>>>0))&-1;
     $660 = (($659) + ($x$124))|0;
     $a$2 = $658;$y$2 = $660;
    }
    $661 = $a$2 & 255;
    $a$1$be = $661;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $661;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$3;$x$1$be = $x$124;$y$1$be = $y$2;
    break;
   }
   case 47:  {
    $662 = $115 << 24 >> 24;
    $663 = (($662) + ($664))|0;
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $663;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 48:  {
    $665 = (($pc$240) + 2)|0;
    $666 = $nz$112 & 2176;
    $667 = ($666|0)==(0);
    if ($667) {
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $665;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    } else {
     $668 = $115 << 24 >> 24;
     $669 = (($668) + ($665))|0;
     $670 = (($109) + -2)|0;
     HEAP32[$0>>2] = $670;
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $669;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    }
    break;
   }
   case 16:  {
    $671 = (($pc$240) + 2)|0;
    $672 = $nz$112 & 2176;
    $673 = ($672|0)==(0);
    if ($673) {
     $674 = $115 << 24 >> 24;
     $675 = (($674) + ($671))|0;
     $676 = (($109) + -2)|0;
     HEAP32[$0>>2] = $676;
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $675;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    } else {
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $671;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    }
    break;
   }
   case 176:  {
    $677 = (($pc$240) + 2)|0;
    $678 = $c$114 & 256;
    $679 = ($678|0)==(0);
    if ($679) {
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $677;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    } else {
     $680 = $115 << 24 >> 24;
     $681 = (($680) + ($677))|0;
     $682 = (($109) + -2)|0;
     HEAP32[$0>>2] = $682;
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $681;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    }
    break;
   }
   case 144:  {
    $683 = (($pc$240) + 2)|0;
    $684 = $c$114 & 256;
    $685 = ($684|0)==(0);
    if ($685) {
     $686 = $115 << 24 >> 24;
     $687 = (($686) + ($683))|0;
     $688 = (($109) + -2)|0;
     HEAP32[$0>>2] = $688;
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $687;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    } else {
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $683;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    }
    break;
   }
   case 112:  {
    $689 = (($pc$240) + 2)|0;
    $690 = $status$116 & 64;
    $691 = ($690|0)==(0);
    if ($691) {
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $689;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    } else {
     $692 = $115 << 24 >> 24;
     $693 = (($692) + ($689))|0;
     $694 = (($109) + -2)|0;
     HEAP32[$0>>2] = $694;
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $693;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    }
    break;
   }
   case 80:  {
    $695 = (($pc$240) + 2)|0;
    $696 = $status$116 & 64;
    $697 = ($696|0)==(0);
    if ($697) {
     $698 = $115 << 24 >> 24;
     $699 = (($698) + ($695))|0;
     $700 = (($109) + -2)|0;
     HEAP32[$0>>2] = $700;
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $699;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    } else {
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $695;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    }
    break;
   }
   case 227: case 195: case 163: case 131: case 99: case 67: case 35: case 3:  {
    $701 = (($pc$240) + 2)|0;
    $702 = HEAP32[$80>>2]|0;
    $703 = $138 | $dp$011;
    $704 = (__ZN8Snes_Spc4readEj($702,$703)|0);
    $705 = $106 >>> 5;
    $706 = 1 << $705;
    $707 = $704 & $706;
    $708 = ($707|0)==(0);
    if ($708) {
     $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $701;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
     label = 4;
    } else {
     $pc$0 = $701;
     label = 3;
    }
    break;
   }
   case 243: case 211: case 179: case 147: case 115: case 83: case 51: case 19:  {
    $709 = (($pc$240) + 2)|0;
    $710 = HEAP32[$81>>2]|0;
    $711 = $138 | $dp$011;
    $712 = (__ZN8Snes_Spc4readEj($710,$711)|0);
    $713 = $106 >>> 5;
    $714 = 1 << $713;
    $715 = $712 & $714;
    $716 = ($715|0)==(0);
    if ($716) {
     $pc$0 = $709;
     label = 3;
    } else {
     $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $709;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
     label = 4;
    }
    break;
   }
   case 222:  {
    $717 = (($138) + ($x$124))|0;
    $718 = $717 & 255;
    $data$56 = $718;
    label = 193;
    break;
   }
   case 46:  {
    $data$56 = $138;
    label = 193;
    break;
   }
   case 254:  {
    $724 = (($y$118) + 255)|0;
    $725 = $724 & 255;
    $726 = (($pc$240) + 2)|0;
    $727 = ($725|0)==(0);
    if ($727) {
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $726;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = 0;
    } else {
     $728 = $115 << 24 >> 24;
     $729 = (($728) + ($726))|0;
     $730 = (($109) + -2)|0;
     HEAP32[$0>>2] = $730;
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $729;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $725;
    }
    break;
   }
   case 110:  {
    $731 = (($pc$240) + 2)|0;
    $732 = HEAP32[$83>>2]|0;
    $733 = $138 | $dp$011;
    $734 = (__ZN8Snes_Spc4readEj($732,$733)|0);
    $735 = (($734) + -1)|0;
    $736 = HEAP32[$83>>2]|0;
    $737 = $735 & 255;
    __ZN8Snes_Spc5writeEji($736,$733,$737);
    $738 = ($735|0)==(0);
    if ($738) {
     $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $731;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
     label = 4;
    } else {
     $pc$0 = $731;
     label = 3;
    }
    break;
   }
   case 31:  {
    $739 = (__Z8get_le16PKv($126)|0);
    $740 = (($739) + ($x$124))|0;
    $pc$31 = $740;
    label = 198;
    break;
   }
   case 95:  {
    $pc$31 = $664;
    label = 198;
    break;
   }
   case 15:  {
    $743 = (($sp$041) + -2|0);
    $744 = (($pc$240) + 2)|0;
    __Z8set_le16Pvj($743,$744);
    $745 = (__Z8get_le16PKv($84)|0);
    $746 = $status$116 & -132;
    $747 = $c$114 >>> 8;
    $748 = $747 & 1;
    $749 = $dp$011 >>> 3;
    $750 = $748 | $749;
    $751 = $750 | $746;
    $752 = $nz$112 & 2176;
    $753 = ($752|0)==(0);
    $754 = $751 | 128;
    $$3 = $753 ? $751 : $754;
    $755 = $nz$112 & 255;
    $756 = ($755|0)==(0);
    $757 = $$3 | 2;
    $temp21$1 = $756 ? $757 : $$3;
    $758 = $temp21$1&255;
    $759 = (($sp$041) + -3|0);
    HEAP8[$759>>0] = $758;
    $760 = $status$116 & -21;
    $761 = $760 | 16;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $745;$sp$0$be = $759;$status$1$be = $761;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 79:  {
    $762 = (($pc$240) + 2)|0;
    $763 = (($sp$041) + -2|0);
    __Z8set_le16Pvj($763,$762);
    $764 = $138 | 65280;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $764;$sp$0$be = $763;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 241: case 225: case 209: case 193: case 177: case 161: case 145: case 129: case 113: case 97: case 81: case 65: case 49: case 33: case 17: case 1:  {
    $765 = (($sp$041) + -2|0);
    __Z8set_le16Pvj($765,$664);
    $766 = $106 >>> 3;
    $767 = (65502 - ($766))|0;
    $768 = (($1) + ($767)|0);
    $769 = (__Z8get_le16PKv($768)|0);
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $769;$sp$0$be = $765;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 127:  {
    $770 = (($sp$041) + 1|0);
    $771 = HEAP8[$sp$041>>0]|0;
    $772 = $771&255;
    $773 = (($sp$041) + 2|0);
    $774 = HEAP8[$770>>0]|0;
    $775 = $774&255;
    $776 = HEAP8[$773>>0]|0;
    $777 = $776&255;
    $778 = $777 << 8;
    $779 = $778 | $775;
    $pc$32 = $779;$sp$0$pn = $773;$temp22$0 = $772;
    label = 204;
    break;
   }
   case 142:  {
    $780 = HEAP8[$sp$041>>0]|0;
    $781 = $780&255;
    $pc$32 = $664;$sp$0$pn = $sp$041;$temp22$0 = $781;
    label = 204;
    break;
   }
   case 13:  {
    $791 = $status$116 & -132;
    $792 = $c$114 >>> 8;
    $793 = $792 & 1;
    $794 = $dp$011 >>> 3;
    $795 = $793 | $794;
    $796 = $795 | $791;
    $797 = $nz$112 & 2176;
    $798 = ($797|0)==(0);
    $799 = $796 | 128;
    $$4 = $798 ? $796 : $799;
    $800 = $nz$112 & 255;
    $801 = ($800|0)==(0);
    $802 = $$4 | 2;
    $temp23$1 = $801 ? $802 : $$4;
    $803 = $temp23$1&255;
    $804 = (($sp$041) + -1|0);
    HEAP8[$804>>0] = $803;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $804;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 45:  {
    $805 = $a$137&255;
    $806 = (($sp$041) + -1|0);
    HEAP8[$806>>0] = $805;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $806;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 77:  {
    $807 = $x$124&255;
    $808 = (($sp$041) + -1|0);
    HEAP8[$808>>0] = $807;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $808;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 109:  {
    $809 = $y$118&255;
    $810 = (($sp$041) + -1|0);
    HEAP8[$810>>0] = $809;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $810;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 174:  {
    $811 = (($sp$041) + 1|0);
    $812 = HEAP8[$sp$041>>0]|0;
    $813 = $812&255;
    $a$1$be = $813;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $811;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 206:  {
    $814 = (($sp$041) + 1|0);
    $815 = HEAP8[$sp$041>>0]|0;
    $816 = $815&255;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $814;$status$1$be = $status$116;$x$1$be = $816;$y$1$be = $y$118;
    break;
   }
   case 238:  {
    $817 = (($sp$041) + 1|0);
    $818 = HEAP8[$sp$041>>0]|0;
    $819 = $818&255;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $817;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $819;
    break;
   }
   case 242: case 210: case 178: case 146: case 114: case 82: case 50: case 18: case 226: case 194: case 162: case 130: case 98: case 66: case 34: case 2:  {
    $820 = $138 | $dp$011;
    $821 = $106 >>> 5;
    $822 = 1 << $821;
    $823 = $822 ^ -1;
    $824 = $106 & 16;
    $825 = ($824|0)==(0);
    $$5 = $825 ? $822 : 0;
    $826 = HEAP32[$85>>2]|0;
    $827 = (__ZN8Snes_Spc4readEj($826,$820)|0);
    $828 = $827 & $823;
    $829 = $828 | $$5;
    __ZN8Snes_Spc5writeEji($826,$820,$829);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $664;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 78: case 14:  {
    $830 = (__Z8get_le16PKv($126)|0);
    $831 = (($pc$240) + 3)|0;
    $832 = HEAP32[$86>>2]|0;
    $833 = (__ZN8Snes_Spc4readEj($832,$830)|0);
    $834 = $833 & $a$137;
    $835 = $a$137 ^ -1;
    $836 = $833 & $835;
    $837 = $106 & 64;
    $838 = ($837|0)==(0);
    $839 = $838 ? $a$137 : 0;
    $$6 = $836 | $839;
    $840 = HEAP32[$86>>2]|0;
    __ZN8Snes_Spc5writeEji($840,$830,$$6);
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $834;$pc$2$be = $831;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 74:  {
    $841 = (__ZN7Spc_Cpu7mem_bitEj($this,$664)|0);
    $842 = $841 & $c$114;
    $843 = (($pc$240) + 3)|0;
    $a$1$be = $a$137;$c$1$be = $842;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $843;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 106:  {
    $844 = (__ZN7Spc_Cpu7mem_bitEj($this,$664)|0);
    $845 = $844 ^ -1;
    $846 = $c$114 & $845;
    $847 = (($pc$240) + 3)|0;
    $a$1$be = $a$137;$c$1$be = $846;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $847;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 10:  {
    $848 = (__ZN7Spc_Cpu7mem_bitEj($this,$664)|0);
    $849 = $848 | $c$114;
    $850 = (($pc$240) + 3)|0;
    $a$1$be = $a$137;$c$1$be = $849;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $850;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 42:  {
    $851 = (__ZN7Spc_Cpu7mem_bitEj($this,$664)|0);
    $852 = $851 ^ -1;
    $853 = $c$114 | $852;
    $854 = (($pc$240) + 3)|0;
    $a$1$be = $a$137;$c$1$be = $853;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $854;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 138:  {
    $855 = (__ZN7Spc_Cpu7mem_bitEj($this,$664)|0);
    $856 = $855 ^ $c$114;
    $857 = (($pc$240) + 3)|0;
    $a$1$be = $a$137;$c$1$be = $856;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $857;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 234:  {
    $858 = (__Z8get_le16PKv($126)|0);
    $859 = (($pc$240) + 3)|0;
    $860 = HEAP32[$87>>2]|0;
    $861 = $858 & 8191;
    $862 = (__ZN8Snes_Spc4readEj($860,$861)|0);
    $863 = $858 >>> 13;
    $864 = 1 << $863;
    $865 = $862 ^ $864;
    $866 = HEAP32[$87>>2]|0;
    __ZN8Snes_Spc5writeEji($866,$861,$865);
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $859;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 202:  {
    $867 = (__Z8get_le16PKv($126)|0);
    $868 = (($pc$240) + 3)|0;
    $869 = HEAP32[$88>>2]|0;
    $870 = $867 & 8191;
    $871 = (__ZN8Snes_Spc4readEj($869,$870)|0);
    $872 = $867 >>> 13;
    $873 = 1 << $872;
    $874 = $873 ^ -1;
    $875 = $871 & $874;
    $876 = $c$114 >>> 8;
    $877 = $876 & 1;
    $878 = $877 << $872;
    $879 = $875 | $878;
    $880 = HEAP32[$88>>2]|0;
    __ZN8Snes_Spc5writeEji($880,$870,$879);
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $868;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 170:  {
    $881 = (__ZN7Spc_Cpu7mem_bitEj($this,$664)|0);
    $882 = (($pc$240) + 3)|0;
    $a$1$be = $a$137;$c$1$be = $881;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $882;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 96:  {
    $a$1$be = $a$137;$c$1$be = 0;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 128:  {
    $a$1$be = $a$137;$c$1$be = -1;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 237:  {
    $883 = $c$114 ^ 256;
    $a$1$be = $a$137;$c$1$be = $883;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 224:  {
    $884 = $status$116 & -73;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $884;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 32:  {
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = 0;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 64:  {
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = 256;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 160:  {
    $885 = $status$116 | 4;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $885;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 192:  {
    $886 = $status$116 & -5;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $886;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 240:  {
    $111 = (($pc$240) + 2)|0;
    $112 = $nz$112&255;
    $113 = ($112<<24>>24)==(0);
    if ($113) {
     $114 = $115 << 24 >> 24;
     $116 = (($114) + ($111))|0;
     $117 = (($109) + -2)|0;
     HEAP32[$0>>2] = $117;
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $116;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    } else {
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $111;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    }
    break;
   }
   case 0:  {
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 120:  {
    $data$37 = $138;
    label = 111;
    break;
   }
   case 30:  {
    $395 = (__Z8get_le16PKv($126)|0);
    $396 = (($pc$240) + 2)|0;
    $data$38 = $395;$pc$20 = $396;
    label = 114;
    break;
   }
   case 200:  {
    $data$39 = $138;$pc$21 = $664;
    label = 115;
    break;
   }
   case 126:  {
    $402 = $138 | $dp$011;
    $data$40 = $402;$pc$22 = $664;
    label = 118;
    break;
   }
   case 94:  {
    $403 = (__Z8get_le16PKv($126)|0);
    $404 = (($pc$240) + 2)|0;
    $data$40 = $403;$pc$22 = $404;
    label = 118;
    break;
   }
   case 173:  {
    $data$41 = $138;$pc$23 = $664;
    label = 119;
    break;
   }
   case 153: case 185:  {
    $410 = HEAP32[$67>>2]|0;
    $411 = (($x$124) + ($dp$011))|0;
    $412 = (__ZN8Snes_Spc4readEj($410,$411)|0);
    $413 = (($y$118) + ($dp$011))|0;
    $addr5$0 = $413;$data$43 = $412;$pc$24 = $pc$240;
    label = 123;
    break;
   }
   case 137: case 169:  {
    $414 = HEAP32[$70>>2]|0;
    $415 = $138 | $dp$011;
    $416 = (__ZN8Snes_Spc4readEj($414,$415)|0);
    $data$42 = $416;
    label = 122;
    break;
   }
   case 152: case 184:  {
    $data$42 = $138;
    label = 122;
    break;
   }
   case 166: case 134:  {
    $424 = (($x$124) + ($dp$011))|0;
    $data$46 = $424;$pc$25 = $pc$240;
    label = 132;
    break;
   }
   case 183: case 151:  {
    $425 = $138 | $dp$011;
    $426 = (($1) + ($425)|0);
    $427 = (__Z8get_le16PKv($426)|0);
    $428 = (($427) + ($y$118))|0;
    $data$46 = $428;$pc$25 = $664;
    label = 132;
    break;
   }
   case 182: case 150:  {
    $434 = (($138) + ($y$118))|0;
    $data$44 = $434;
    label = 129;
    break;
   }
   case 167: case 135:  {
    $429 = (($138) + ($x$124))|0;
    $430 = $429 & 255;
    $431 = $430 | $dp$011;
    $432 = (($1) + ($431)|0);
    $433 = (__Z8get_le16PKv($432)|0);
    $data$46 = $433;$pc$25 = $664;
    label = 132;
    break;
   }
   case 181: case 149:  {
    $435 = (($138) + ($x$124))|0;
    $data$44 = $435;
    label = 129;
    break;
   }
   case 165: case 133:  {
    $data$44 = $138;
    label = 129;
    break;
   }
   case 180: case 148:  {
    $442 = (($138) + ($x$124))|0;
    $443 = $442 & 255;
    $data$45 = $443;
    label = 131;
    break;
   }
   case 164: case 132:  {
    $data$45 = $138;
    label = 131;
    break;
   }
   case 136: case 168:  {
    $addr5$1 = -1;$data$48 = $138;$nz$2 = $a$137;$pc$27 = $664;
    label = 133;
    break;
   }
   case 188:  {
    $472 = (($a$137) + 1)|0;
    $473 = $472 & 255;
    $a$1$be = $473;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $472;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 61:  {
    $474 = (($x$124) + 1)|0;
    $475 = $474 & 255;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $474;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $475;$y$1$be = $y$118;
    break;
   }
   case 252:  {
    $476 = (($y$118) + 1)|0;
    $477 = $476 & 255;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $476;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $477;
    break;
   }
   case 156:  {
    $478 = (($a$137) + -1)|0;
    $479 = $478 & 255;
    $a$1$be = $479;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $478;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 29:  {
    $480 = (($x$124) + -1)|0;
    $481 = $480 & 255;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $480;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $481;$y$1$be = $y$118;
    break;
   }
   case 220:  {
    $482 = (($y$118) + -1)|0;
    $483 = $482 & 255;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $482;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $483;
    break;
   }
   case 187: case 155:  {
    $484 = (($138) + ($x$124))|0;
    $485 = $484 & 255;
    $data$50 = $485;
    label = 143;
    break;
   }
   case 171: case 139:  {
    $data$50 = $138;
    label = 143;
    break;
   }
   case 172: case 140:  {
    $487 = (__Z8get_le16PKv($126)|0);
    $488 = (($pc$240) + 2)|0;
    $data$51 = $487;$pc$28 = $488;
    label = 145;
    break;
   }
   case 92:  {
    $c$2 = 0;
    label = 147;
    break;
   }
   case 124:  {
    $c$2 = $c$114;
    label = 147;
    break;
   }
   case 28:  {
    $c$3 = 0;
    label = 149;
    break;
   }
   case 60:  {
    $c$3 = $c$114;
    label = 149;
    break;
   }
   case 11:  {
    $507 = $138 | $dp$011;
    $c$7 = 0;$data$53 = $507;$pc$29 = $664;
    label = 156;
    break;
   }
   case 27:  {
    $c$4 = 0;
    label = 152;
    break;
   }
   case 59:  {
    $c$4 = $c$114;
    label = 152;
    break;
   }
   case 43:  {
    $c$5 = $c$114;$data$52 = $138;
    label = 153;
    break;
   }
   case 12:  {
    $c$6 = 0;
    label = 155;
    break;
   }
   case 44:  {
    $c$6 = $c$114;
    label = 155;
    break;
   }
   case 91:  {
    $c$8 = 0;
    label = 159;
    break;
   }
   case 230:  {
    $136 = (($x$124) + ($dp$011))|0;
    $data$2 = $136;$pc$3 = $pc$240;$x$2 = $x$124;
    label = 21;
    break;
   }
   case 228:  {
    $data$1 = $138;
    label = 20;
    break;
   }
   case 208:  {
    $118 = (($pc$240) + 2)|0;
    $119 = $nz$112&255;
    $120 = ($119<<24>>24)==(0);
    if ($120) {
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $118;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    } else {
     $121 = $115 << 24 >> 24;
     $122 = (($121) + ($118))|0;
     $123 = (($109) + -2)|0;
     HEAP32[$0>>2] = $123;
     $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $122;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    }
    break;
   }
   case 244:  {
    $155 = (($138) + ($x$124))|0;
    $156 = $155 & 255;
    $data$1 = $156;
    label = 20;
    break;
   }
   case 229:  {
    $data$0 = $138;
    label = 18;
    break;
   }
   case 111:  {
    $128 = (($sp$041) + 1|0);
    $129 = HEAP8[$sp$041>>0]|0;
    $130 = $129&255;
    $131 = (($sp$041) + 2|0);
    $132 = HEAP8[$128>>0]|0;
    $133 = $132&255;
    $134 = $133 << 8;
    $135 = $134 | $130;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $135;$sp$0$be = $131;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 247:  {
    $137 = $138 | $dp$011;
    $139 = (($1) + ($137)|0);
    $140 = (__Z8get_le16PKv($139)|0);
    $141 = (($140) + ($y$118))|0;
    $data$2 = $141;$pc$3 = $664;$x$2 = $x$124;
    label = 21;
    break;
   }
   case 246:  {
    $147 = (($138) + ($y$118))|0;
    $data$0 = $147;
    label = 18;
    break;
   }
   case 231:  {
    $142 = (($138) + ($x$124))|0;
    $143 = $142 & 255;
    $144 = $143 | $dp$011;
    $145 = (($1) + ($144)|0);
    $146 = (__Z8get_le16PKv($145)|0);
    $data$2 = $146;$pc$3 = $664;$x$2 = $x$124;
    label = 21;
    break;
   }
   case 245:  {
    $148 = (($138) + ($x$124))|0;
    $data$0 = $148;
    label = 18;
    break;
   }
   case 232:  {
    $a$0 = $138;$c$0 = $c$114;$nz$0 = $138;$pc$1 = $664;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 20:  {
    $284 = (($138) + ($x$124))|0;
    $285 = $284 & 255;
    $data$22 = $285;
    label = 78;
    break;
   }
   case 4:  {
    $data$22 = $138;
    label = 78;
    break;
   }
   case 8:  {
    $data$24 = $138;$pc$13 = $664;
    label = 80;
    break;
   }
   case 25:  {
    $290 = HEAP32[$54>>2]|0;
    $291 = (($y$118) + ($dp$011))|0;
    $292 = (__ZN8Snes_Spc4readEj($290,$291)|0);
    $293 = (($x$124) + ($dp$011))|0;
    $addr3$0 = $293;$data$26 = $292;$pc$14 = $pc$240;
    label = 84;
    break;
   }
   case 9:  {
    $294 = HEAP32[$56>>2]|0;
    $295 = $138 | $dp$011;
    $296 = (__ZN8Snes_Spc4readEj($294,$295)|0);
    $data$25 = $296;
    label = 83;
    break;
   }
   case 24:  {
    $data$25 = $138;
    label = 83;
    break;
   }
   case 70:  {
    $306 = (($x$124) + ($dp$011))|0;
    $data$29 = $306;$pc$15 = $pc$240;
    label = 93;
    break;
   }
   case 87:  {
    $307 = $138 | $dp$011;
    $308 = (($1) + ($307)|0);
    $309 = (__Z8get_le16PKv($308)|0);
    $310 = (($309) + ($y$118))|0;
    $data$29 = $310;$pc$15 = $664;
    label = 93;
    break;
   }
   case 86:  {
    $316 = (($138) + ($y$118))|0;
    $data$27 = $316;
    label = 90;
    break;
   }
   case 71:  {
    $311 = (($138) + ($x$124))|0;
    $312 = $311 & 255;
    $313 = $312 | $dp$011;
    $314 = (($1) + ($313)|0);
    $315 = (__Z8get_le16PKv($314)|0);
    $data$29 = $315;$pc$15 = $664;
    label = 93;
    break;
   }
   case 85:  {
    $317 = (($138) + ($x$124))|0;
    $data$27 = $317;
    label = 90;
    break;
   }
   case 69:  {
    $data$27 = $138;
    label = 90;
    break;
   }
   case 84:  {
    $324 = (($138) + ($x$124))|0;
    $325 = $324 & 255;
    $data$28 = $325;
    label = 92;
    break;
   }
   case 68:  {
    $data$28 = $138;
    label = 92;
    break;
   }
   case 72:  {
    $data$30 = $138;$pc$16 = $664;
    label = 94;
    break;
   }
   case 89:  {
    $330 = HEAP32[$58>>2]|0;
    $331 = (($y$118) + ($dp$011))|0;
    $332 = (__ZN8Snes_Spc4readEj($330,$331)|0);
    $333 = (($x$124) + ($dp$011))|0;
    $addr4$0 = $333;$data$32 = $332;$pc$17 = $pc$240;
    label = 98;
    break;
   }
   case 73:  {
    $334 = HEAP32[$60>>2]|0;
    $335 = $138 | $dp$011;
    $336 = (__ZN8Snes_Spc4readEj($334,$335)|0);
    $data$31 = $336;
    label = 97;
    break;
   }
   case 88:  {
    $data$31 = $138;
    label = 97;
    break;
   }
   case 102:  {
    $346 = (($x$124) + ($dp$011))|0;
    $data$35 = $346;$pc$18 = $pc$240;
    label = 107;
    break;
   }
   case 119:  {
    $347 = $138 | $dp$011;
    $348 = (($1) + ($347)|0);
    $349 = (__Z8get_le16PKv($348)|0);
    $350 = (($349) + ($y$118))|0;
    $data$35 = $350;$pc$18 = $664;
    label = 107;
    break;
   }
   case 118:  {
    $356 = (($138) + ($y$118))|0;
    $data$33 = $356;
    label = 104;
    break;
   }
   case 103:  {
    $351 = (($138) + ($x$124))|0;
    $352 = $351 & 255;
    $353 = $352 | $dp$011;
    $354 = (($1) + ($353)|0);
    $355 = (__Z8get_le16PKv($354)|0);
    $data$35 = $355;$pc$18 = $664;
    label = 107;
    break;
   }
   case 117:  {
    $357 = (($138) + ($x$124))|0;
    $data$33 = $357;
    label = 104;
    break;
   }
   case 101:  {
    $data$33 = $138;
    label = 104;
    break;
   }
   case 116:  {
    $364 = (($138) + ($x$124))|0;
    $365 = $364 & 255;
    $data$34 = $365;
    label = 106;
    break;
   }
   case 100:  {
    $data$34 = $138;
    label = 106;
    break;
   }
   case 104:  {
    $data$36 = $138;$pc$19 = $664;
    label = 108;
    break;
   }
   case 121:  {
    $372 = HEAP32[$62>>2]|0;
    $373 = (($x$124) + ($dp$011))|0;
    $374 = (__ZN8Snes_Spc4readEj($372,$373)|0);
    $375 = HEAP32[$62>>2]|0;
    $376 = (($y$118) + ($dp$011))|0;
    $377 = (__ZN8Snes_Spc4readEj($375,$376)|0);
    $378 = (($374) - ($377))|0;
    $379 = $378 ^ -1;
    $380 = $378 & 255;
    $a$1$be = $a$137;$c$1$be = $379;$dp$0$be = $dp$011;$nz$1$be = $380;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 105:  {
    $381 = HEAP32[$63>>2]|0;
    $382 = $138 | $dp$011;
    $383 = (__ZN8Snes_Spc4readEj($381,$382)|0);
    $data$37 = $383;
    label = 111;
    break;
   }
   case 62:  {
    $394 = $138 | $dp$011;
    $data$38 = $394;$pc$20 = $664;
    label = 114;
    break;
   }
   default: {
    $a$1$lcssa = $a$137;$c$1$lcssa = $c$114;$dp$0$lcssa = $dp$011;$nz$1$lcssa = $nz$112;$pc$2$lcssa = $pc$240;$sp$0$lcssa = $sp$041;$status$1$lcssa = $status$116;$x$1$lcssa = $x$124;$y$1$lcssa = $y$118;
    label = 230;
    break L4;
   }
   }
  } while(0);
  switch (label|0) {
   case 18: {
    label = 0;
    $149 = (($pc$240) + 2)|0;
    $150 = (($1) + ($149)|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = $151&255;
    $153 = $152 << 8;
    $154 = (($153) + ($data$0))|0;
    $data$2 = $154;$pc$3 = $149;$x$2 = $x$124;
    label = 21;
    break;
   }
   case 20: {
    label = 0;
    $157 = $data$1 | $dp$011;
    $data$2 = $157;$pc$3 = $664;$x$2 = $x$124;
    label = 21;
    break;
   }
   case 24: {
    label = 0;
    $165 = $data$3 | $dp$011;
    $data$4 = $165;$pc$4 = $664;
    label = 26;
    break;
   }
   case 29: {
    label = 0;
    $172 = $data$6 | $dp$011;
    $data$7 = $172;$pc$6 = $664;
    label = 31;
    break;
   }
   case 38: {
    label = 0;
    $189 = (($pc$240) + 2)|0;
    $190 = (($1) + ($189)|0);
    $191 = HEAP8[$190>>0]|0;
    $192 = $191&255;
    $193 = $192 << 8;
    $194 = (($193) + ($data$9))|0;
    $data$11 = $194;$pc$8 = $189;
    label = 41;
    break;
   }
   case 40: {
    label = 0;
    $197 = $data$10 | $dp$011;
    $data$11 = $197;$pc$8 = $664;
    label = 41;
    break;
   }
   case 43: {
    label = 0;
    $199 = HEAP32[$42>>2]|0;
    $200 = (__Z8get_le16PKv($126)|0);
    __ZN8Snes_Spc5writeEji($199,$200,$temp2$0);
    $201 = (($pc$240) + 3)|0;
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $201;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 45: {
    label = 0;
    $204 = HEAP32[$43>>2]|0;
    $205 = $data$12 | $dp$011;
    __ZN8Snes_Spc5writeEji($204,$205,$x$124);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $664;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 47: {
    label = 0;
    $208 = HEAP32[$44>>2]|0;
    $209 = $data$13 | $dp$011;
    __ZN8Snes_Spc5writeEji($208,$209,$y$118);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $664;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 49: {
    label = 0;
    $213 = (($pc$240) + 2)|0;
    $214 = HEAP32[$46>>2]|0;
    $215 = (($1) + ($213)|0);
    $216 = HEAP8[$215>>0]|0;
    $217 = $216&255;
    $218 = $217 | $dp$011;
    __ZN8Snes_Spc5writeEji($214,$218,$data$14);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $213;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 62: {
    label = 0;
    $238 = (($pc$240) + 2)|0;
    $239 = (($1) + ($238)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = $241 << 8;
    $243 = (($242) + ($data$15))|0;
    $data$17 = $243;$pc$9 = $238;
    label = 65;
    break;
   }
   case 64: {
    label = 0;
    $246 = $data$16 | $dp$011;
    $data$17 = $246;$pc$9 = $664;
    label = 65;
    break;
   }
   case 69: {
    label = 0;
    $257 = (($pc$240) + 2)|0;
    $258 = (($1) + ($257)|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&255;
    $261 = $260 | $dp$011;
    $addr$0 = $261;$data$20 = $data$19;$pc$11 = $257;
    label = 70;
    break;
   }
   case 76: {
    label = 0;
    $278 = (($pc$240) + 2)|0;
    $279 = (($1) + ($278)|0);
    $280 = HEAP8[$279>>0]|0;
    $281 = $280&255;
    $282 = $281 << 8;
    $283 = (($282) + ($data$21))|0;
    $data$23 = $283;$pc$12 = $278;
    label = 79;
    break;
   }
   case 78: {
    label = 0;
    $286 = $data$22 | $dp$011;
    $data$23 = $286;$pc$12 = $664;
    label = 79;
    break;
   }
   case 83: {
    label = 0;
    $297 = (($pc$240) + 2)|0;
    $298 = (($1) + ($297)|0);
    $299 = HEAP8[$298>>0]|0;
    $300 = $299&255;
    $301 = $300 | $dp$011;
    $addr3$0 = $301;$data$26 = $data$25;$pc$14 = $297;
    label = 84;
    break;
   }
   case 90: {
    label = 0;
    $318 = (($pc$240) + 2)|0;
    $319 = (($1) + ($318)|0);
    $320 = HEAP8[$319>>0]|0;
    $321 = $320&255;
    $322 = $321 << 8;
    $323 = (($322) + ($data$27))|0;
    $data$29 = $323;$pc$15 = $318;
    label = 93;
    break;
   }
   case 92: {
    label = 0;
    $326 = $data$28 | $dp$011;
    $data$29 = $326;$pc$15 = $664;
    label = 93;
    break;
   }
   case 97: {
    label = 0;
    $337 = (($pc$240) + 2)|0;
    $338 = (($1) + ($337)|0);
    $339 = HEAP8[$338>>0]|0;
    $340 = $339&255;
    $341 = $340 | $dp$011;
    $addr4$0 = $341;$data$32 = $data$31;$pc$17 = $337;
    label = 98;
    break;
   }
   case 104: {
    label = 0;
    $358 = (($pc$240) + 2)|0;
    $359 = (($1) + ($358)|0);
    $360 = HEAP8[$359>>0]|0;
    $361 = $360&255;
    $362 = $361 << 8;
    $363 = (($362) + ($data$33))|0;
    $data$35 = $363;$pc$18 = $358;
    label = 107;
    break;
   }
   case 106: {
    label = 0;
    $366 = $data$34 | $dp$011;
    $data$35 = $366;$pc$18 = $664;
    label = 107;
    break;
   }
   case 111: {
    label = 0;
    $384 = (($pc$240) + 2)|0;
    $385 = HEAP32[$64>>2]|0;
    $386 = (($1) + ($384)|0);
    $387 = HEAP8[$386>>0]|0;
    $388 = $387&255;
    $389 = $388 | $dp$011;
    $390 = (__ZN8Snes_Spc4readEj($385,$389)|0);
    $391 = (($390) - ($data$37))|0;
    $392 = $391 ^ -1;
    $393 = $391 & 255;
    $a$0 = $a$137;$c$0 = $392;$nz$0 = $393;$pc$1 = $384;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 114: {
    label = 0;
    $397 = HEAP32[$65>>2]|0;
    $398 = (__ZN8Snes_Spc4readEj($397,$data$38)|0);
    $data$39 = $398;$pc$21 = $pc$20;
    label = 115;
    break;
   }
   case 118: {
    label = 0;
    $405 = HEAP32[$66>>2]|0;
    $406 = (__ZN8Snes_Spc4readEj($405,$data$40)|0);
    $data$41 = $406;$pc$23 = $pc$22;
    label = 119;
    break;
   }
   case 122: {
    label = 0;
    $417 = (($pc$240) + 2)|0;
    $418 = (($1) + ($417)|0);
    $419 = HEAP8[$418>>0]|0;
    $420 = $419&255;
    $421 = $420 | $dp$011;
    $addr5$0 = $421;$data$43 = $data$42;$pc$24 = $417;
    label = 123;
    break;
   }
   case 129: {
    label = 0;
    $436 = (($pc$240) + 2)|0;
    $437 = (($1) + ($436)|0);
    $438 = HEAP8[$437>>0]|0;
    $439 = $438&255;
    $440 = $439 << 8;
    $441 = (($440) + ($data$44))|0;
    $data$46 = $441;$pc$25 = $436;
    label = 132;
    break;
   }
   case 131: {
    label = 0;
    $444 = $data$45 | $dp$011;
    $data$46 = $444;$pc$25 = $664;
    label = 132;
    break;
   }
   case 143: {
    label = 0;
    $486 = $data$50 | $dp$011;
    $data$51 = $486;$pc$28 = $664;
    label = 145;
    break;
   }
   case 147: {
    label = 0;
    $497 = $c$2 >>> 1;
    $498 = $497 & 128;
    $499 = $a$137 >> 1;
    $500 = $498 | $499;
    $501 = $a$137 << 8;
    $a$1$be = $500;$c$1$be = $501;$dp$0$be = $dp$011;$nz$1$be = $500;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 149: {
    label = 0;
    $502 = $c$3 >>> 8;
    $503 = $502 & 1;
    $504 = $a$137 << 1;
    $505 = $503 | $504;
    $506 = $505 & 255;
    $a$1$be = $506;$c$1$be = $504;$dp$0$be = $dp$011;$nz$1$be = $505;$pc$2$be = $664;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 152: {
    label = 0;
    $508 = (($138) + ($x$124))|0;
    $509 = $508 & 255;
    $c$5 = $c$4;$data$52 = $509;
    label = 153;
    break;
   }
   case 155: {
    label = 0;
    $511 = (__Z8get_le16PKv($126)|0);
    $512 = (($pc$240) + 2)|0;
    $c$7 = $c$6;$data$53 = $511;$pc$29 = $512;
    label = 156;
    break;
   }
   case 159: {
    label = 0;
    $522 = (($138) + ($x$124))|0;
    $523 = $522 & 255;
    $c$9 = $c$8;$data$54 = $523;
    label = 160;
    break;
   }
   case 162: {
    label = 0;
    $525 = (__Z8get_le16PKv($126)|0);
    $526 = (($pc$240) + 2)|0;
    $c$11 = $c$10;$data$55 = $525;$pc$30 = $526;
    label = 163;
    break;
   }
   case 193: {
    label = 0;
    $719 = (($pc$240) + 2)|0;
    $720 = HEAP32[$82>>2]|0;
    $721 = $data$56 | $dp$011;
    $722 = (__ZN8Snes_Spc4readEj($720,$721)|0);
    $723 = ($722|0)==($a$137|0);
    if ($723) {
     $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $719;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
     label = 4;
    } else {
     $pc$0 = $719;
     label = 3;
    }
    break;
   }
   case 198: {
    label = 0;
    $741 = (($1) + ($pc$31)|0);
    $742 = (__Z8get_le16PKv($741)|0);
    $a$1$be = $a$137;$c$1$be = $c$114;$dp$0$be = $dp$011;$nz$1$be = $nz$112;$pc$2$be = $742;$sp$0$be = $sp$041;$status$1$be = $status$116;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
   case 204: {
    label = 0;
    $sp$1 = (($sp$0$pn) + 1|0);
    $782 = $temp22$0 & 92;
    $783 = $temp22$0 << 8;
    $784 = $temp22$0 << 4;
    $785 = $784 & 2048;
    $786 = $temp22$0 & 2;
    $787 = $785 | $786;
    $788 = $787 ^ 2;
    $789 = $temp22$0 << 3;
    $790 = $789 & 256;
    $a$1$be = $a$137;$c$1$be = $783;$dp$0$be = $790;$nz$1$be = $788;$pc$2$be = $pc$32;$sp$0$be = $sp$1;$status$1$be = $782;$x$1$be = $x$124;$y$1$be = $y$118;
    break;
   }
  }
  switch (label|0) {
   case 3: {
    label = 0;
    $89 = (($1) + ($pc$0)|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90 << 24 >> 24;
    $92 = (($91) + ($pc$0))|0;
    $93 = HEAP32[$0>>2]|0;
    $94 = (($93) + -2)|0;
    HEAP32[$0>>2] = $94;
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $92;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 21: {
    label = 0;
    $158 = HEAP32[$38>>2]|0;
    $159 = (__ZN8Snes_Spc4readEj($158,$data$2)|0);
    $a$0 = $159;$c$0 = $c$114;$nz$0 = $159;$pc$1 = $pc$3;$status$0 = $status$116;$x$0 = $x$2;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 26: {
    label = 0;
    $168 = HEAP32[$39>>2]|0;
    $169 = (__ZN8Snes_Spc4readEj($168,$data$4)|0);
    $data$5 = $169;$pc$5 = $pc$4;
    label = 27;
    break;
   }
   case 31: {
    label = 0;
    $175 = HEAP32[$40>>2]|0;
    $176 = (__ZN8Snes_Spc4readEj($175,$data$7)|0);
    $data$8 = $176;$pc$7 = $pc$6;
    label = 32;
    break;
   }
   case 41: {
    label = 0;
    $198 = HEAP32[$41>>2]|0;
    __ZN8Snes_Spc5writeEji($198,$data$11,$a$137);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $nz$112;$pc$1 = $pc$8;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 65: {
    label = 0;
    $247 = HEAP32[$49>>2]|0;
    $248 = (__ZN8Snes_Spc4readEj($247,$data$17)|0);
    $data$18 = $248;$pc$10 = $pc$9;
    label = 66;
    break;
   }
   case 70: {
    label = 0;
    $262 = HEAP32[$51>>2]|0;
    $263 = (__ZN8Snes_Spc4readEj($262,$addr$0)|0);
    $264 = $263 & $data$20;
    $265 = HEAP32[$51>>2]|0;
    __ZN8Snes_Spc5writeEji($265,$addr$0,$264);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $264;$pc$1 = $pc$11;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 79: {
    label = 0;
    $287 = HEAP32[$53>>2]|0;
    $288 = (__ZN8Snes_Spc4readEj($287,$data$23)|0);
    $data$24 = $288;$pc$13 = $pc$12;
    label = 80;
    break;
   }
   case 84: {
    label = 0;
    $302 = HEAP32[$55>>2]|0;
    $303 = (__ZN8Snes_Spc4readEj($302,$addr3$0)|0);
    $304 = $303 | $data$26;
    $305 = HEAP32[$55>>2]|0;
    __ZN8Snes_Spc5writeEji($305,$addr3$0,$304);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $304;$pc$1 = $pc$14;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 93: {
    label = 0;
    $327 = HEAP32[$57>>2]|0;
    $328 = (__ZN8Snes_Spc4readEj($327,$data$29)|0);
    $data$30 = $328;$pc$16 = $pc$15;
    label = 94;
    break;
   }
   case 98: {
    label = 0;
    $342 = HEAP32[$59>>2]|0;
    $343 = (__ZN8Snes_Spc4readEj($342,$addr4$0)|0);
    $344 = $343 ^ $data$32;
    $345 = HEAP32[$59>>2]|0;
    __ZN8Snes_Spc5writeEji($345,$addr4$0,$344);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $344;$pc$1 = $pc$17;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 107: {
    label = 0;
    $367 = HEAP32[$61>>2]|0;
    $368 = (__ZN8Snes_Spc4readEj($367,$data$35)|0);
    $data$36 = $368;$pc$19 = $pc$18;
    label = 108;
    break;
   }
   case 115: {
    label = 0;
    $399 = (($x$124) - ($data$39))|0;
    $400 = $399 ^ -1;
    $401 = $399 & 255;
    $a$0 = $a$137;$c$0 = $400;$nz$0 = $401;$pc$1 = $pc$21;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 119: {
    label = 0;
    $407 = (($y$118) - ($data$41))|0;
    $408 = $407 ^ -1;
    $409 = $407 & 255;
    $a$0 = $a$137;$c$0 = $408;$nz$0 = $409;$pc$1 = $pc$23;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 123: {
    label = 0;
    $422 = HEAP32[$68>>2]|0;
    $423 = (__ZN8Snes_Spc4readEj($422,$addr5$0)|0);
    $addr5$1 = $addr5$0;$data$48 = $data$43;$nz$2 = $423;$pc$27 = $pc$24;
    label = 133;
    break;
   }
   case 132: {
    label = 0;
    $445 = HEAP32[$71>>2]|0;
    $446 = (__ZN8Snes_Spc4readEj($445,$data$46)|0);
    $addr5$1 = -1;$data$48 = $446;$nz$2 = $a$137;$pc$27 = $pc$25;
    label = 133;
    break;
   }
   case 145: {
    label = 0;
    $489 = $106 >>> 4;
    $490 = $489 & 2;
    $491 = (($490) + -1)|0;
    $492 = HEAP32[$72>>2]|0;
    $493 = (__ZN8Snes_Spc4readEj($492,$data$51)|0);
    $494 = (($491) + ($493))|0;
    $495 = HEAP32[$72>>2]|0;
    $496 = $494 & 255;
    __ZN8Snes_Spc5writeEji($495,$data$51,$496);
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $494;$pc$1 = $pc$28;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
    break;
   }
   case 153: {
    label = 0;
    $510 = $data$52 | $dp$011;
    $c$7 = $c$5;$data$53 = $510;$pc$29 = $664;
    label = 156;
    break;
   }
   case 160: {
    label = 0;
    $524 = $data$54 | $dp$011;
    $c$11 = $c$9;$data$55 = $524;$pc$30 = $664;
    label = 163;
    break;
   }
  }
  do {
   if ((label|0) == 27) {
    label = 0;
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $data$5;$pc$1 = $pc$5;$status$0 = $status$116;$x$0 = $data$5;$y$0 = $y$118;
    label = 4;
   }
   else if ((label|0) == 32) {
    label = 0;
    $a$0 = $a$137;$c$0 = $c$114;$nz$0 = $data$8;$pc$1 = $pc$7;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $data$8;
    label = 4;
   }
   else if ((label|0) == 66) {
    label = 0;
    $249 = $data$18 & $a$137;
    $a$0 = $249;$c$0 = $c$114;$nz$0 = $249;$pc$1 = $pc$10;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
   }
   else if ((label|0) == 80) {
    label = 0;
    $289 = $data$24 | $a$137;
    $a$0 = $289;$c$0 = $c$114;$nz$0 = $289;$pc$1 = $pc$13;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
   }
   else if ((label|0) == 94) {
    label = 0;
    $329 = $data$30 ^ $a$137;
    $a$0 = $329;$c$0 = $c$114;$nz$0 = $329;$pc$1 = $pc$16;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
   }
   else if ((label|0) == 108) {
    label = 0;
    $369 = (($a$137) - ($data$36))|0;
    $370 = $369 ^ -1;
    $371 = $369 & 255;
    $a$0 = $a$137;$c$0 = $370;$nz$0 = $371;$pc$1 = $pc$19;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
   }
   else if ((label|0) == 133) {
    label = 0;
    $447 = $106 & 32;
    $448 = ($447|0)==(0);
    $449 = $data$48 ^ 255;
    $data$48$ = $448 ? $data$48 : $449;
    $450 = $c$114 >>> 8;
    $451 = $450 & 1;
    $452 = $nz$2 ^ 128;
    $453 = (($452) + ($451))|0;
    $sext = $data$48$ << 24;
    $454 = $sext >> 24;
    $455 = (($453) + ($454))|0;
    $456 = $nz$2 & 15;
    $457 = (($nz$2) + ($451))|0;
    $458 = (($457) + ($data$48$))|0;
    $459 = $458 & 15;
    $sum = (($456) + ($451))|0;
    $460 = (($459) - ($sum))|0;
    $461 = $status$116 & -73;
    $462 = $455 >>> 2;
    $463 = $462 & 64;
    $464 = $463 | $461;
    $465 = $460 >>> 1;
    $466 = $465 & 8;
    $467 = $464 | $466;
    $468 = ($addr5$1|0)<(0);
    if ($468) {
     $469 = $458 & 255;
     $a$0 = $469;$c$0 = $458;$nz$0 = $458;$pc$1 = $pc$27;$status$0 = $467;$x$0 = $x$124;$y$0 = $y$118;
     label = 4;
     break;
    } else {
     $470 = HEAP32[$69>>2]|0;
     $471 = $458 & 255;
     __ZN8Snes_Spc5writeEji($470,$addr5$1,$471);
     $a$0 = $a$137;$c$0 = $458;$nz$0 = $458;$pc$1 = $pc$27;$status$0 = $467;$x$0 = $x$124;$y$0 = $y$118;
     label = 4;
     break;
    }
   }
   else if ((label|0) == 156) {
    label = 0;
    $513 = $c$7 >>> 8;
    $514 = $513 & 1;
    $515 = HEAP32[$73>>2]|0;
    $516 = (__ZN8Snes_Spc4readEj($515,$data$53)|0);
    $517 = $516 << 1;
    $518 = $517 | $514;
    $519 = HEAP32[$73>>2]|0;
    $520 = $518 & 255;
    __ZN8Snes_Spc5writeEji($519,$data$53,$520);
    $a$0 = $a$137;$c$0 = $517;$nz$0 = $518;$pc$1 = $pc$29;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
   }
   else if ((label|0) == 163) {
    label = 0;
    $527 = HEAP32[$74>>2]|0;
    $528 = (__ZN8Snes_Spc4readEj($527,$data$55)|0);
    $529 = $c$11 >>> 1;
    $530 = $529 & 128;
    $531 = $528 >> 1;
    $532 = $531 | $530;
    $533 = $528 << 8;
    $534 = HEAP32[$74>>2]|0;
    __ZN8Snes_Spc5writeEji($534,$data$55,$532);
    $a$0 = $a$137;$c$0 = $533;$nz$0 = $532;$pc$1 = $pc$30;$status$0 = $status$116;$x$0 = $x$124;$y$0 = $y$118;
    label = 4;
   }
  } while(0);
  if ((label|0) == 4) {
   label = 0;
   $95 = (($pc$1) + 1)|0;
   $a$1$be = $a$0;$c$1$be = $c$0;$dp$0$be = $dp$011;$nz$1$be = $nz$0;$pc$2$be = $95;$sp$0$be = $sp$041;$status$1$be = $status$0;$x$1$be = $x$0;$y$1$be = $y$0;
  }
  $96 = (($1) + ($pc$2$be)|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = (($pc$2$be) + 1)|0;
  $100 = (($1) + ($99)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = HEAP32[$0>>2]|0;
  $104 = ($103|0)<(1);
  if ($104) {
   $a$1$lcssa = $a$1$be;$c$1$lcssa = $c$1$be;$dp$0$lcssa = $dp$0$be;$nz$1$lcssa = $nz$1$be;$pc$2$lcssa = $pc$2$be;$sp$0$lcssa = $sp$0$be;$status$1$lcssa = $status$1$be;$x$1$lcssa = $x$1$be;$y$1$lcssa = $y$1$be;
   label = 230;
   break;
  } else {
   $106 = $98;$110 = $103;$115 = $101;$126 = $100;$138 = $102;$664 = $99;$a$137 = $a$1$be;$c$114 = $c$1$be;$dp$011 = $dp$0$be;$nz$112 = $nz$1$be;$pc$240 = $pc$2$be;$sp$041 = $sp$0$be;$status$116 = $status$1$be;$x$124 = $x$1$be;$y$118 = $y$1$be;
  }
 }
 if ((label|0) == 230) {
  $887 = $status$1$lcssa & -132;
  $888 = $c$1$lcssa >>> 8;
  $889 = $888 & 1;
  $890 = $dp$0$lcssa >>> 3;
  $891 = $889 | $890;
  $892 = $891 | $887;
  $893 = $nz$1$lcssa & 2176;
  $894 = ($893|0)==(0);
  $895 = $892 | 128;
  $$7 = $894 ? $892 : $895;
  $896 = $nz$1$lcssa & 255;
  $897 = ($896|0)==(0);
  $898 = $$7 | 2;
  $temp28$1 = $897 ? $898 : $$7;
  $899 = $temp28$1&255;
  HEAP8[$17>>0] = $899;
  HEAP32[$6>>2] = $pc$2$lcssa;
  $900 = (($sp$0$lcssa) + -257|0);
  $901 = $900;
  $902 = $1;
  $903 = (($901) - ($902))|0;
  $904 = $903&255;
  HEAP8[$2>>0] = $904;
  $905 = $a$1$lcssa&255;
  HEAP8[$8>>0] = $905;
  $906 = $x$1$lcssa&255;
  HEAP8[$11>>0] = $906;
  $907 = $y$1$lcssa&255;
  HEAP8[$14>>0] = $907;
  $908 = HEAP32[$0>>2]|0;
  return ($908|0);
 }
 return (0)|0;
}
function __ZN7Spc_DspC2EPh($this,$ram_) {
 $this = $this|0;
 $ram_ = $ram_|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 128|0);
 HEAP32[$0>>2] = $ram_;
 __ZN7Spc_Dsp8set_gainEd($this,1.0);
 __ZN7Spc_Dsp11mute_voicesEi($this,0);
 __ZN7Spc_Dsp16disable_surroundEb($this,0);
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN7Spc_Dsp11mute_voicesEi($this,$mask) {
 $this = $this|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mask & 1;
 $1 = ($0|0)!=(0);
 $2 = $1 ? 31 : 7;
 $3 = (($this) + 274|0);
 HEAP16[$3>>1] = $2;
 $4 = $mask & 2;
 $5 = ($4|0)!=(0);
 $6 = $5 ? 31 : 7;
 $7 = (($this) + 306|0);
 HEAP16[$7>>1] = $6;
 $8 = $mask & 4;
 $9 = ($8|0)!=(0);
 $10 = $9 ? 31 : 7;
 $11 = (($this) + 338|0);
 HEAP16[$11>>1] = $10;
 $12 = $mask & 8;
 $13 = ($12|0)!=(0);
 $14 = $13 ? 31 : 7;
 $15 = (($this) + 370|0);
 HEAP16[$15>>1] = $14;
 $16 = $mask & 16;
 $17 = ($16|0)!=(0);
 $18 = $17 ? 31 : 7;
 $19 = (($this) + 402|0);
 HEAP16[$19>>1] = $18;
 $20 = $mask & 32;
 $21 = ($20|0)!=(0);
 $22 = $21 ? 31 : 7;
 $23 = (($this) + 434|0);
 HEAP16[$23>>1] = $22;
 $24 = $mask & 64;
 $25 = ($24|0)!=(0);
 $26 = $25 ? 31 : 7;
 $27 = (($this) + 466|0);
 HEAP16[$27>>1] = $26;
 $28 = $mask & 128;
 $29 = ($28|0)!=(0);
 $30 = $29 ? 31 : 7;
 $31 = (($this) + 498|0);
 HEAP16[$31>>1] = $30;
 return;
}
function __ZN7Spc_Dsp5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 224|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 228|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 240|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 236|0);
 HEAP32[$3>>2] = 1;
 $4 = (($this) + 212|0);
 HEAP32[$4>>2] = 0;
 $5 = (($this) + 108|0);
 HEAP8[$5>>0] = -32;
 $6 = (($this) + 76|0);
 HEAP8[$6>>0] = 0;
 $7 = (($this) + 272|0);
 HEAP16[$7>>1] = 0;
 $8 = (($this) + 248|0);
 HEAP16[$8>>1] = 0;
 $9 = (($this) + 250|0);
 HEAP16[$9>>1] = 0;
 $10 = (($this) + 276|0);
 HEAP16[$10>>1] = 3;
 $11 = (($this) + 304|0);
 HEAP16[$11>>1] = 0;
 $12 = (($this) + 280|0);
 HEAP16[$12>>1] = 0;
 $13 = (($this) + 282|0);
 HEAP16[$13>>1] = 0;
 $14 = (($this) + 308|0);
 HEAP16[$14>>1] = 3;
 $15 = (($this) + 336|0);
 HEAP16[$15>>1] = 0;
 $16 = (($this) + 312|0);
 HEAP16[$16>>1] = 0;
 $17 = (($this) + 314|0);
 HEAP16[$17>>1] = 0;
 $18 = (($this) + 340|0);
 HEAP16[$18>>1] = 3;
 $19 = (($this) + 368|0);
 HEAP16[$19>>1] = 0;
 $20 = (($this) + 344|0);
 HEAP16[$20>>1] = 0;
 $21 = (($this) + 346|0);
 HEAP16[$21>>1] = 0;
 $22 = (($this) + 372|0);
 HEAP16[$22>>1] = 3;
 $23 = (($this) + 400|0);
 HEAP16[$23>>1] = 0;
 $24 = (($this) + 376|0);
 HEAP16[$24>>1] = 0;
 $25 = (($this) + 378|0);
 HEAP16[$25>>1] = 0;
 $26 = (($this) + 404|0);
 HEAP16[$26>>1] = 3;
 $27 = (($this) + 432|0);
 HEAP16[$27>>1] = 0;
 $28 = (($this) + 408|0);
 HEAP16[$28>>1] = 0;
 $29 = (($this) + 410|0);
 HEAP16[$29>>1] = 0;
 $30 = (($this) + 436|0);
 HEAP16[$30>>1] = 3;
 $31 = (($this) + 464|0);
 HEAP16[$31>>1] = 0;
 $32 = (($this) + 440|0);
 HEAP16[$32>>1] = 0;
 $33 = (($this) + 442|0);
 HEAP16[$33>>1] = 0;
 $34 = (($this) + 468|0);
 HEAP16[$34>>1] = 3;
 $35 = (($this) + 496|0);
 HEAP16[$35>>1] = 0;
 $36 = (($this) + 472|0);
 HEAP16[$36>>1] = 0;
 $37 = (($this) + 474|0);
 HEAP16[$37>>1] = 0;
 $38 = (($this) + 500|0);
 HEAP16[$38>>1] = 3;
 $39 = (($this) + 148|0);
 dest=$39+0|0; stop=dest+64|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN7Spc_Dsp5writeEii($this,$i,$data) {
 $this = $this|0;
 $i = $i|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i>>>0)<(128);
 if (!($0)) {
  ___assert_fail((47120|0),(47152|0),70,(47200|0));
  // unreachable;
 }
 $1 = $data&255;
 $2 = (($this) + ($i)|0);
 HEAP8[$2>>0] = $1;
 $3 = $i >> 4;
 $4 = $i & 15;
 if ((($4|0) == 15)) {
  $26 = $1 << 24 >> 24;
  $27 = ((($this) + ($3<<1)|0) + 132|0);
  HEAP16[$27>>1] = $26;
  return;
 } else if ((($4|0) == 1) | (($4|0) == 0)) {
  $5 = ((($this) + ($3<<5)|0) + 248|0);
  $6 = $i & -2;
  $7 = (($this) + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = $i | 1;
  $11 = (($this) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = $8 << 24 >> 24;
  HEAP16[$5>>1] = $14;
  $15 = $12 << 24 >> 24;
  $16 = ((($this) + ($3<<5)|0) + 250|0);
  HEAP16[$16>>1] = $15;
  $17 = Math_imul($13, $9)|0;
  $18 = (($this) + 244|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($17|0)<($19|0);
  if (!($20)) {
   return;
  }
  $21 = ($8<<24>>24)<(0);
  if ($21) {
   $22 = (0 - ($9))|0;
   $23 = $22&65535;
   HEAP16[$5>>1] = $23;
   return;
  } else {
   $24 = (0 - ($13))|0;
   $25 = $24&65535;
   HEAP16[$16>>1] = $25;
   return;
  }
 } else {
  return;
 }
}
function __ZN7Spc_Dsp3runElPs($this,$count,$out_buf) {
 $this = $this|0;
 $count = $count|0;
 $out_buf = $out_buf|0;
 var $$ = 0, $$01$be = 0, $$0134 = 0, $$18 = 0, $$in = 0, $$in36 = 0, $$lcssa = 0, $$lcssa42 = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$promoted = 0, $$promoted24 = 0, $$promoted26 = 0, $$sum = 0, $$sum10 = 0, $$sum1112 = 0, $$sum1314 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0;
 var $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $501$phi = 0, $502 = 0, $502$phi = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delta$0 = 0, $delta$1 = 0, $delta$2 = 0, $echol$032 = 0, $echol$1 = 0, $echol$2 = 0, $echol$2$lcssa = 0, $echor$031 = 0, $echor$1 = 0, $echor$2 = 0, $echor$2$lcssa = 0;
 var $exitcond = 0, $left$030 = 0, $left$1 = 0, $left$1$lcssa = 0, $n$1 = 0, $output$0 = 0, $prev_outx$033 = 0, $prev_outx$1 = 0, $rate$0 = 0, $right$029 = 0, $right$1 = 0, $right$1$lcssa = 0, $sext = 0, $sext16 = 0, $sext2 = 0, $sum = 0, $vidx$027 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 108|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)<(0);
 if ($2) {
  __ZN7Spc_Dsp5resetEv($this);
 }
 $3 = (($this) + 93|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = (($this) + 128|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6)|0);
 $10 = (($this) + 12|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($this) + 28|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = Math_imul($15, $12)|0;
 $17 = (($this) + 244|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)<($18|0);
 $20 = (0 - ($15))|0;
 $$ = $19 ? $20 : $15;
 $21 = (($this) + 216|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = Math_imul($22, $12)|0;
 $24 = Math_imul($$, $22)|0;
 $25 = ($count|0)>(0);
 if (!($25)) {
  return;
 }
 $26 = (($this) + 76|0);
 $27 = (($this) + 124|0);
 $28 = (($this) + 61|0);
 $29 = (($this) + 240|0);
 $30 = (($this) + 236|0);
 $31 = (($this) + 232|0);
 $32 = (($this) + 92|0);
 $33 = (($this) + 224|0);
 $34 = (($this) + 45|0);
 $35 = (($this) + 77|0);
 $36 = (($this) + 232|0);
 $37 = (($this) + 224|0);
 $38 = (($this) + 228|0);
 $39 = (($this) + 109|0);
 $40 = (($this) + 125|0);
 $41 = (($this) + 212|0);
 $42 = (($this) + 146|0);
 $43 = (($this) + 144|0);
 $44 = (($this) + 142|0);
 $45 = (($this) + 140|0);
 $46 = (($this) + 138|0);
 $47 = (($this) + 136|0);
 $48 = (($this) + 134|0);
 $49 = (($this) + 132|0);
 $50 = (($this) + 44|0);
 $51 = (($this) + 60|0);
 $52 = (($this) + 13|0);
 $$0134 = $out_buf;$$in = $count;
 while(1) {
  $53 = (($$in) + -1)|0;
  $54 = HEAP8[$26>>0]|0;
  $55 = $54&255;
  $56 = $55 ^ 255;
  $57 = HEAP8[$27>>0]|0;
  $58 = $57&255;
  $59 = $58 & $56;
  $60 = $59&255;
  HEAP8[$27>>0] = $60;
  $61 = HEAP8[$28>>0]|0;
  $62 = ($61<<24>>24)==(0);
  if ($62) {
   $echol$032 = 0;$echor$031 = 0;$left$030 = 0;$prev_outx$033 = 0;$right$029 = 0;$vidx$027 = 0;
  } else {
   $63 = HEAP8[$0>>0]|0;
   $64 = $63&255;
   $65 = $64 & 31;
   $66 = (47208 + ($65<<1)|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   $69 = HEAP32[$29>>2]|0;
   $70 = (($69) - ($68))|0;
   HEAP32[$29>>2] = $70;
   $71 = ($70|0)<(1);
   if ($71) {
    HEAP32[$29>>2] = 30720;
    $72 = HEAP32[$30>>2]|0;
    $73 = $72 << 17;
    $74 = $73 >> 16;
    HEAP32[$31>>2] = $74;
    $75 = HEAP32[$30>>2]|0;
    $76 = $75 << 13;
    $77 = $75 << 14;
    $78 = $76 ^ $77;
    $79 = $78 & 16384;
    $80 = $75 >> 1;
    $81 = $79 | $80;
    HEAP32[$30>>2] = $81;
    $echol$032 = 0;$echor$031 = 0;$left$030 = 0;$prev_outx$033 = 0;$right$029 = 0;$vidx$027 = 0;
   } else {
    $echol$032 = 0;$echor$031 = 0;$left$030 = 0;$prev_outx$033 = 0;$right$029 = 0;$vidx$027 = 0;
   }
  }
  while(1) {
   $82 = 1 << $vidx$027;
   $83 = ((($this) + ($vidx$027<<5)|0) + 272|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = ($84<<16>>16)==(0);
   if (!($85)) {
    $86 = (($84) + -1)<<16>>16;
    HEAP16[$83>>1] = $86;
    $87 = ($86<<16>>16)==(0);
    if ($87) {
     $88 = HEAP32[$37>>2]|0;
     $89 = $88 | $82;
     HEAP32[$37>>2] = $89;
     $90 = ((($this) + ($vidx$027<<4)|0) + 4|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $93 = (($9) + ($92<<2)|0);
     $94 = (__Z8get_le16PKv($93)|0);
     $95 = $94&65535;
     $96 = ((($this) + ($vidx$027<<5)|0) + 264|0);
     HEAP16[$96>>1] = $95;
     $97 = ((($this) + ($vidx$027<<5)|0) + 262|0);
     HEAP16[$97>>1] = 1;
     $98 = ((($this) + ($vidx$027<<5)|0) + 270|0);
     HEAP16[$98>>1] = 0;
     $99 = ((($this) + ($vidx$027<<5)|0) + 266|0);
     HEAP16[$99>>1] = 0;
     $100 = ((($this) + ($vidx$027<<5)|0) + 252|0);
     HEAP16[$100>>1] = 16383;
     $101 = ((($this) + ($vidx$027<<5)|0) + 260|0);
     HEAP16[$101>>1] = 0;
     $102 = ((($this) + ($vidx$027<<5)|0) + 258|0);
     HEAP16[$102>>1] = 0;
     $103 = ((($this) + ($vidx$027<<5)|0) + 268|0);
     HEAP16[$103>>1] = 30720;
     $104 = ((($this) + ($vidx$027<<5)|0) + 276|0);
     HEAP16[$104>>1] = 0;
    }
   }
   $105 = HEAP8[$26>>0]|0;
   $106 = $105&255;
   $107 = $106 & $82;
   $108 = HEAP8[$32>>0]|0;
   $109 = $108&255;
   $110 = $109 ^ -1;
   $111 = $107 & $110;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = $82 ^ 255;
    $114 = $106 & $113;
    $115 = $114&255;
    HEAP8[$26>>0] = $115;
    HEAP16[$83>>1] = 8;
   }
   $116 = HEAP32[$33>>2]|0;
   $117 = HEAP8[$32>>0]|0;
   $118 = $117&255;
   $119 = $116 & $82;
   $120 = $119 & $118;
   $121 = ($120|0)==(0);
   if (!($121)) {
    $122 = ((($this) + ($vidx$027<<5)|0) + 276|0);
    HEAP16[$122>>1] = 3;
    HEAP16[$83>>1] = 0;
   }
   $123 = HEAP32[$33>>2]|0;
   $124 = $123 & $82;
   $125 = ($124|0)==(0);
   if ($125) {
    label = 17;
   } else {
    $126 = (__ZN7Spc_Dsp14clock_envelopeEi($this,$vidx$027)|0);
    $127 = ($126|0)<(0);
    if ($127) {
     label = 17;
    } else {
     $130 = ((($this) + ($vidx$027<<5)|0) + 252|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = $131 << 16 >> 16;
     $133 = $132 >> 12;
     $134 = ($133|0)>(0);
     L27: do {
      if ($134) {
       $135 = ((($this) + ($vidx$027<<5)|0) + 262|0);
       $136 = ((($this) + ($vidx$027<<5)|0) + 264|0);
       $137 = ((($this) + ($vidx$027<<5)|0) + 266|0);
       $138 = ((($this) + ($vidx$027<<5)|0) + 260|0);
       $139 = ((($this) + ($vidx$027<<5)|0) + 258|0);
       $140 = ((($this) + ($vidx$027<<5)|0) + 256|0);
       $141 = ((($this) + ($vidx$027<<5)|0) + 254|0);
       $142 = ((($this) + ($vidx$027<<5)|0) + 266|0);
       $143 = ((($this) + ($vidx$027<<5)|0) + 264|0);
       $144 = ((($this) + ($vidx$027<<4)|0) + 4|0);
       $145 = ((($this) + ($vidx$027<<5)|0) + 264|0);
       $146 = ((($this) + ($vidx$027<<5)|0) + 264|0);
       $147 = ((($this) + ($vidx$027<<5)|0) + 266|0);
       $$in36 = $133;
       while(1) {
        $148 = (($$in36) + -1)|0;
        $149 = HEAP16[$135>>1]|0;
        $150 = (($149) + -1)<<16>>16;
        HEAP16[$135>>1] = $150;
        if ((($149<<16>>16) == 10)) {
         $173 = HEAP16[$146>>1]|0;
         $174 = $173&65535;
         $175 = (($174) + 5)|0;
         $176 = HEAP32[$7>>2]|0;
         $177 = (($176) + ($175)|0);
         $178 = HEAP8[$177>>0]|0;
         $179 = $178 & 3;
         $180 = ($179<<24>>24)==(1);
         if ($180) {
          $181 = HEAP16[$147>>1]|0;
          $182 = $181 & 3;
          $183 = ($182<<16>>16)==(3);
          if (!($183)) {
           $$lcssa = $148;
           break;
          }
         }
        } else if ((($149<<16>>16) == 1)) {
         $151 = HEAP16[$142>>1]|0;
         $152 = $151 & 1;
         $153 = ($152<<16>>16)==(0);
         if (!($153)) {
          $154 = HEAP8[$27>>0]|0;
          $155 = $154&255;
          $156 = $155 | $82;
          $157 = $156&255;
          HEAP8[$27>>0] = $157;
          $158 = HEAP16[$142>>1]|0;
          $159 = $158 & 2;
          $160 = ($159<<16>>16)==(0);
          if ($160) {
           $$lcssa = $148;
           break;
          }
          $161 = HEAP8[$144>>0]|0;
          $162 = $161&255;
          $163 = ((($9) + ($162<<2)|0) + 2|0);
          $164 = (__Z8get_le16PKv($163)|0);
          $165 = $164&65535;
          HEAP16[$145>>1] = $165;
         }
         $166 = HEAP16[$143>>1]|0;
         $167 = (($166) + 1)<<16>>16;
         HEAP16[$143>>1] = $167;
         $168 = $166&65535;
         $169 = HEAP32[$7>>2]|0;
         $170 = (($169) + ($168)|0);
         $171 = HEAP8[$170>>0]|0;
         $172 = $171&255;
         HEAP16[$142>>1] = $172;
         HEAP16[$135>>1] = 16;
        }
        $198 = HEAP16[$136>>1]|0;
        $199 = $198&65535;
        $200 = HEAP32[$7>>2]|0;
        $201 = (($200) + ($199)|0);
        $202 = HEAP8[$201>>0]|0;
        $203 = $202&255;
        $204 = HEAP16[$135>>1]|0;
        $205 = $204 & 1;
        $206 = ($205<<16>>16)==(0);
        if ($206) {
         $delta$0 = $203;
        } else {
         $207 = $203 << 4;
         $208 = (($198) + 1)<<16>>16;
         HEAP16[$136>>1] = $208;
         $delta$0 = $207;
        }
        $sext16 = $delta$0 << 24;
        $209 = $sext16 >> 28;
        $210 = HEAP16[$137>>1]|0;
        $211 = $210 << 16 >> 16;
        $212 = $211 >> 4;
        $213 = $209 << $212;
        $214 = $213 >> 1;
        $215 = ($212|0)>(12);
        if ($215) {
         $216 = $213 >> 15;
         $217 = $216 & -2048;
         $delta$1 = $217;
        } else {
         $delta$1 = $214;
        }
        $218 = HEAP16[$138>>1]|0;
        $219 = $218 << 16 >> 16;
        $220 = HEAP16[$139>>1]|0;
        $221 = $220 << 16 >> 16;
        $222 = HEAP16[$137>>1]|0;
        $223 = $222 << 16 >> 16;
        $224 = $223 & 8;
        $225 = ($224|0)==(0);
        do {
         if ($225) {
          $243 = $223 & 4;
          $244 = ($243|0)==(0);
          if ($244) {
           $delta$2 = $delta$1;
          } else {
           $245 = $219 >> 1;
           $246 = (($245) + ($delta$1))|0;
           $247 = (0 - ($219))|0;
           $248 = $247 >> 5;
           $249 = (($246) + ($248))|0;
           $delta$2 = $249;
          }
         } else {
          $226 = (($219) + ($delta$1))|0;
          $227 = $221 >> 1;
          $228 = (($226) - ($227))|0;
          $229 = $223 & 4;
          $230 = ($229|0)==(0);
          if ($230) {
           $231 = $219 >> 1;
           $sum = (($231) + ($219))|0;
           $232 = (0 - ($sum))|0;
           $233 = $232 >> 5;
           $234 = $221 >> 5;
           $235 = (($233) + ($234))|0;
           $236 = (($235) + ($228))|0;
           $delta$2 = $236;
           break;
          } else {
           $237 = Math_imul($219, -13)|0;
           $238 = $237 >> 7;
           $239 = (($228) + ($238))|0;
           $240 = (($227) + ($221))|0;
           $241 = $240 >> 4;
           $242 = (($239) + ($241))|0;
           $delta$2 = $242;
           break;
          }
         }
        } while(0);
        $250 = HEAP16[$140>>1]|0;
        HEAP16[$141>>1] = $250;
        HEAP16[$140>>1] = $220;
        HEAP16[$139>>1] = $218;
        $251 = (__Z8clamp_16i($delta$2)|0);
        $252 = $251 << 1;
        $253 = $252&65535;
        HEAP16[$138>>1] = $253;
        $254 = ($148|0)>(0);
        if ($254) {
         $$in36 = $148;
        } else {
         break L27;
        }
       }
       $184 = HEAP8[$27>>0]|0;
       $185 = $184&255;
       $186 = $185 | $82;
       $187 = $186&255;
       HEAP8[$27>>0] = $187;
       $188 = $82 ^ -1;
       $189 = HEAP32[$33>>2]|0;
       $190 = $189 & $188;
       HEAP32[$33>>2] = $190;
       $191 = ((($this) + ($vidx$027<<4)|0) + 8|0);
       HEAP8[$191>>0] = 0;
       $192 = ((($this) + ($vidx$027<<5)|0) + 270|0);
       HEAP16[$192>>1] = 0;
       $193 = ((($this) + ($vidx$027<<5)|0) + 256|0);
       $194 = ((($this) + ($vidx$027<<5)|0) + 258|0);
       $195 = ((($this) + ($vidx$027<<5)|0) + 260|0);
       $$promoted = HEAP16[$193>>1]|0;
       $$promoted24 = HEAP16[$194>>1]|0;
       $$promoted26 = HEAP16[$195>>1]|0;
       $500 = $$promoted26;$501 = $$promoted24;$502 = $$promoted;$n$1 = $$lcssa;
       while(1) {
        $196 = (($n$1) + -1)|0;
        $197 = ($n$1|0)>(0);
        if ($197) {
         $502$phi = $501;$501$phi = $500;$500 = 0;$n$1 = $196;$502 = $502$phi;$501 = $501$phi;
        } else {
         $$lcssa42 = $500;$$lcssa43 = $501;$$lcssa44 = $502;
         break;
        }
       }
       $255 = ((($this) + ($vidx$027<<5)|0) + 254|0);
       HEAP16[$193>>1] = $$lcssa43;
       HEAP16[$255>>1] = $$lcssa44;
       HEAP16[$194>>1] = $$lcssa42;
       HEAP16[$195>>1] = 0;
      }
     } while(0);
     $256 = ((($this) + ($vidx$027<<4)|0) + 2|0);
     $257 = (__Z8get_le16PKv($256)|0);
     $258 = $257 & 16383;
     $259 = HEAP8[$34>>0]|0;
     $260 = $259&255;
     $261 = $260 & $82;
     $262 = ($261|0)==(0);
     if ($262) {
      $rate$0 = $258;
     } else {
      $263 = (($prev_outx$033) + 32768)|0;
      $264 = Math_imul($258, $263)|0;
      $265 = $264 >> 15;
      $rate$0 = $265;
     }
     $266 = HEAP16[$130>>1]|0;
     $267 = $266 << 16 >> 16;
     $268 = $267 >>> 2;
     $269 = $268 & 1020;
     $270 = $267 & 4095;
     $271 = (($270) + ($rate$0))|0;
     $272 = $271&65535;
     HEAP16[$130>>1] = $272;
     $273 = (47272 + ($269)|0);
     $274 = (1020 - ($269))|0;
     $275 = (47272 + ($274)|0);
     $276 = HEAP16[$273>>1]|0;
     $277 = $276 << 16 >> 16;
     $278 = ((($this) + ($vidx$027<<5)|0) + 254|0);
     $279 = HEAP16[$278>>1]|0;
     $280 = $279 << 16 >> 16;
     $281 = Math_imul($280, $277)|0;
     $282 = $281 >>> 12;
     $$sum1112 = $269 | 2;
     $283 = (47272 + ($$sum1112)|0);
     $284 = HEAP16[$283>>1]|0;
     $285 = $284 << 16 >> 16;
     $286 = ((($this) + ($vidx$027<<5)|0) + 256|0);
     $287 = HEAP16[$286>>1]|0;
     $288 = $287 << 16 >> 16;
     $289 = Math_imul($288, $285)|0;
     $290 = $289 >>> 12;
     $291 = (($290) + ($282))|0;
     $$sum1314 = $274 | 2;
     $292 = (47272 + ($$sum1314)|0);
     $293 = HEAP16[$292>>1]|0;
     $294 = $293 << 16 >> 16;
     $295 = ((($this) + ($vidx$027<<5)|0) + 258|0);
     $296 = HEAP16[$295>>1]|0;
     $297 = $296 << 16 >> 16;
     $298 = Math_imul($297, $294)|0;
     $299 = $298 >>> 12;
     $300 = (($291) + ($299))|0;
     $301 = $300 << 17;
     $302 = $301 >> 16;
     $303 = HEAP16[$275>>1]|0;
     $304 = $303 << 16 >> 16;
     $305 = ((($this) + ($vidx$027<<5)|0) + 260|0);
     $306 = HEAP16[$305>>1]|0;
     $307 = $306 << 16 >> 16;
     $308 = Math_imul($307, $304)|0;
     $309 = $308 >> 11;
     $310 = $309 & -2;
     $311 = (($302) + ($310))|0;
     $312 = (__Z8clamp_16i($311)|0);
     $313 = HEAP8[$28>>0]|0;
     $314 = $313&255;
     $315 = $314 & $82;
     $316 = ($315|0)==(0);
     if ($316) {
      $output$0 = $312;
     } else {
      $317 = HEAP32[$36>>2]|0;
      $output$0 = $317;
     }
     $318 = Math_imul($output$0, $126)|0;
     $319 = $318 >> 11;
     $320 = $319 & -2;
     $321 = ((($this) + ($vidx$027<<5)|0) + 248|0);
     $322 = HEAP16[$321>>1]|0;
     $323 = $322 << 16 >> 16;
     $324 = Math_imul($320, $323)|0;
     $325 = ((($this) + ($vidx$027<<5)|0) + 274|0);
     $326 = HEAP16[$325>>1]|0;
     $327 = $326 << 16 >> 16;
     $328 = $324 >> $327;
     $329 = ((($this) + ($vidx$027<<5)|0) + 250|0);
     $330 = HEAP16[$329>>1]|0;
     $331 = $330 << 16 >> 16;
     $332 = Math_imul($331, $320)|0;
     $333 = $332 >> $327;
     $334 = $318 >>> 19;
     $335 = $334&255;
     $336 = ((($this) + ($vidx$027<<4)|0) + 9|0);
     HEAP8[$336>>0] = $335;
     $337 = HEAP8[$35>>0]|0;
     $338 = $337&255;
     $339 = $338 & $82;
     $340 = ($339|0)==(0);
     if ($340) {
      $echol$1 = $echol$032;$echor$1 = $echor$031;
     } else {
      $341 = (($328) + ($echol$032))|0;
      $342 = (($333) + ($echor$031))|0;
      $echol$1 = $341;$echor$1 = $342;
     }
     $343 = (($328) + ($left$030))|0;
     $344 = (($333) + ($right$029))|0;
     $echol$2 = $echol$1;$echor$2 = $echor$1;$left$1 = $343;$prev_outx$1 = $320;$right$1 = $344;
    }
   }
   if ((label|0) == 17) {
    label = 0;
    $128 = ((($this) + ($vidx$027<<4)|0) + 8|0);
    HEAP8[$128>>0] = 0;
    $129 = ((($this) + ($vidx$027<<4)|0) + 9|0);
    HEAP8[$129>>0] = 0;
    $echol$2 = $echol$032;$echor$2 = $echor$031;$left$1 = $left$030;$prev_outx$1 = 0;$right$1 = $right$029;
   }
   $345 = (($vidx$027) + 1)|0;
   $exitcond = ($345|0)==(8);
   if ($exitcond) {
    $echol$2$lcssa = $echol$2;$echor$2$lcssa = $echor$2;$left$1$lcssa = $left$1;$right$1$lcssa = $right$1;
    break;
   } else {
    $echol$032 = $echol$2;$echor$031 = $echor$2;$left$030 = $left$1;$prev_outx$033 = $prev_outx$1;$right$029 = $right$1;$vidx$027 = $345;
   }
  }
  $346 = Math_imul($23, $left$1$lcssa)|0;
  $347 = $346 >> 15;
  $348 = Math_imul($24, $right$1$lcssa)|0;
  $349 = $348 >> 15;
  $350 = HEAP32[$38>>2]|0;
  $351 = HEAP8[$39>>0]|0;
  $352 = $351&255;
  $353 = $352 << 8;
  $354 = (($353) + ($350))|0;
  $355 = $354 & 65535;
  $356 = HEAP32[$7>>2]|0;
  $357 = (($356) + ($355)|0);
  $358 = (($350) + 4)|0;
  $359 = HEAP8[$40>>0]|0;
  $360 = $359&255;
  $361 = $360 << 11;
  $362 = $361 & 30720;
  $363 = ($358|0)<($362|0);
  $$18 = $363 ? $358 : 0;
  $364 = (__Z8get_le16PKv($357)|0);
  $sext = $364 << 16;
  $365 = $sext >> 16;
  $$sum = (($355) + 2)|0;
  $366 = (($356) + ($$sum)|0);
  $367 = (__Z8get_le16PKv($366)|0);
  $sext2 = $367 << 16;
  $368 = $sext2 >> 16;
  HEAP32[$38>>2] = $$18;
  $369 = HEAP32[$41>>2]|0;
  $370 = (($369) + 7)|0;
  $371 = $370 & 7;
  HEAP32[$41>>2] = $371;
  $372 = $365&65535;
  $373 = ((($this) + ($369<<2)|0) + 148|0);
  HEAP16[$373>>1] = $372;
  $374 = $368&65535;
  $375 = ((($this) + ($369<<2)|0) + 150|0);
  HEAP16[$375>>1] = $374;
  $$sum3 = (($369) + 8)|0;
  $376 = ((($this) + ($$sum3<<2)|0) + 148|0);
  HEAP16[$376>>1] = $372;
  $377 = ((($this) + ($$sum3<<2)|0) + 150|0);
  HEAP16[$377>>1] = $374;
  $378 = HEAP16[$42>>1]|0;
  $379 = $378 << 16 >> 16;
  $380 = Math_imul($379, $365)|0;
  $$sum4 = (($369) + 1)|0;
  $381 = ((($this) + ($$sum4<<2)|0) + 148|0);
  $382 = HEAP16[$381>>1]|0;
  $383 = $382 << 16 >> 16;
  $384 = HEAP16[$43>>1]|0;
  $385 = $384 << 16 >> 16;
  $386 = Math_imul($385, $383)|0;
  $387 = (($386) + ($380))|0;
  $$sum5 = (($369) + 2)|0;
  $388 = ((($this) + ($$sum5<<2)|0) + 148|0);
  $389 = HEAP16[$388>>1]|0;
  $390 = $389 << 16 >> 16;
  $391 = HEAP16[$44>>1]|0;
  $392 = $391 << 16 >> 16;
  $393 = Math_imul($392, $390)|0;
  $394 = (($387) + ($393))|0;
  $$sum6 = (($369) + 3)|0;
  $395 = ((($this) + ($$sum6<<2)|0) + 148|0);
  $396 = HEAP16[$395>>1]|0;
  $397 = $396 << 16 >> 16;
  $398 = HEAP16[$45>>1]|0;
  $399 = $398 << 16 >> 16;
  $400 = Math_imul($399, $397)|0;
  $401 = (($394) + ($400))|0;
  $$sum7 = (($369) + 4)|0;
  $402 = ((($this) + ($$sum7<<2)|0) + 148|0);
  $403 = HEAP16[$402>>1]|0;
  $404 = $403 << 16 >> 16;
  $405 = HEAP16[$46>>1]|0;
  $406 = $405 << 16 >> 16;
  $407 = Math_imul($406, $404)|0;
  $408 = (($401) + ($407))|0;
  $$sum8 = (($369) + 5)|0;
  $409 = ((($this) + ($$sum8<<2)|0) + 148|0);
  $410 = HEAP16[$409>>1]|0;
  $411 = $410 << 16 >> 16;
  $412 = HEAP16[$47>>1]|0;
  $413 = $412 << 16 >> 16;
  $414 = Math_imul($413, $411)|0;
  $415 = (($408) + ($414))|0;
  $$sum9 = (($369) + 6)|0;
  $416 = ((($this) + ($$sum9<<2)|0) + 148|0);
  $417 = HEAP16[$416>>1]|0;
  $418 = $417 << 16 >> 16;
  $419 = HEAP16[$48>>1]|0;
  $420 = $419 << 16 >> 16;
  $421 = Math_imul($420, $418)|0;
  $422 = (($415) + ($421))|0;
  $$sum10 = (($369) + 7)|0;
  $423 = ((($this) + ($$sum10<<2)|0) + 148|0);
  $424 = HEAP16[$423>>1]|0;
  $425 = $424 << 16 >> 16;
  $426 = HEAP16[$49>>1]|0;
  $427 = $426 << 16 >> 16;
  $428 = Math_imul($427, $425)|0;
  $429 = (($422) + ($428))|0;
  $430 = Math_imul($379, $368)|0;
  $431 = ((($this) + ($$sum4<<2)|0) + 150|0);
  $432 = HEAP16[$431>>1]|0;
  $433 = $432 << 16 >> 16;
  $434 = Math_imul($433, $385)|0;
  $435 = (($434) + ($430))|0;
  $436 = ((($this) + ($$sum5<<2)|0) + 150|0);
  $437 = HEAP16[$436>>1]|0;
  $438 = $437 << 16 >> 16;
  $439 = Math_imul($438, $392)|0;
  $440 = (($435) + ($439))|0;
  $441 = ((($this) + ($$sum6<<2)|0) + 150|0);
  $442 = HEAP16[$441>>1]|0;
  $443 = $442 << 16 >> 16;
  $444 = Math_imul($443, $399)|0;
  $445 = (($440) + ($444))|0;
  $446 = ((($this) + ($$sum7<<2)|0) + 150|0);
  $447 = HEAP16[$446>>1]|0;
  $448 = $447 << 16 >> 16;
  $449 = Math_imul($448, $406)|0;
  $450 = (($445) + ($449))|0;
  $451 = ((($this) + ($$sum8<<2)|0) + 150|0);
  $452 = HEAP16[$451>>1]|0;
  $453 = $452 << 16 >> 16;
  $454 = Math_imul($453, $413)|0;
  $455 = (($450) + ($454))|0;
  $456 = ((($this) + ($$sum9<<2)|0) + 150|0);
  $457 = HEAP16[$456>>1]|0;
  $458 = $457 << 16 >> 16;
  $459 = Math_imul($458, $420)|0;
  $460 = (($455) + ($459))|0;
  $461 = ((($this) + ($$sum10<<2)|0) + 150|0);
  $462 = HEAP16[$461>>1]|0;
  $463 = $462 << 16 >> 16;
  $464 = Math_imul($463, $427)|0;
  $465 = (($460) + ($464))|0;
  $466 = HEAP8[$50>>0]|0;
  $467 = $466 << 24 >> 24;
  $468 = Math_imul($467, $429)|0;
  $469 = $468 >> 14;
  $470 = (($469) + ($347))|0;
  $471 = HEAP8[$51>>0]|0;
  $472 = $471 << 24 >> 24;
  $473 = Math_imul($465, $472)|0;
  $474 = $473 >> 14;
  $475 = (($474) + ($349))|0;
  $476 = HEAP8[$0>>0]|0;
  $477 = $476 & 32;
  $478 = ($477<<24>>24)==(0);
  if ($478) {
   $479 = HEAP8[$52>>0]|0;
   $480 = $479 << 24 >> 24;
   $481 = Math_imul($480, $429)|0;
   $482 = $481 >> 14;
   $483 = (($482) + ($echol$2$lcssa))|0;
   $484 = Math_imul($480, $465)|0;
   $485 = $484 >> 14;
   $486 = (($485) + ($echor$2$lcssa))|0;
   $487 = (__Z8clamp_16i($483)|0);
   __Z8set_le16Pvj($357,$487);
   $488 = (__Z8clamp_16i($486)|0);
   __Z8set_le16Pvj($366,$488);
  }
  $489 = ($$0134|0)==(0|0);
  if ($489) {
   $$01$be = 0;
  } else {
   $490 = (__Z8clamp_16i($470)|0);
   $491 = (__Z8clamp_16i($475)|0);
   $492 = HEAP8[$0>>0]|0;
   $493 = $490&65535;
   HEAP16[$$0134>>1] = $493;
   $494 = $491&65535;
   $495 = (($$0134) + 2|0);
   HEAP16[$495>>1] = $494;
   $496 = (($$0134) + 4|0);
   $497 = $492 & 64;
   $498 = ($497<<24>>24)==(0);
   if ($498) {
    $$01$be = $496;
   } else {
    HEAP16[$$0134>>1] = 0;
    HEAP16[$495>>1] = 0;
    $$01$be = $496;
   }
  }
  $499 = ($53|0)>(0);
  if ($499) {
   $$0134 = $$01$be;$$in = $53;
  } else {
   break;
  }
 }
 return;
}
function __ZN7Spc_Dsp8set_gainEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $v * 256.0;
 $1 = (~~(($0)));
 $2 = (($this) + 216|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN7Spc_Dsp16disable_surroundEb($this,$disable) {
 $this = $this|0;
 $disable = $disable|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $disable ? 0 : -32767;
 $1 = (($this) + 244|0);
 HEAP32[$1>>2] = $0;
 return;
}
function __ZN7Spc_Dsp14clock_envelopeEi($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $$ = 0, $$0 = 0, $$envx$5 = 0, $$neg1 = 0, $$neg3 = 0, $$neg5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$2 = 0, $envx$0 = 0, $envx$1 = 0, $envx$2 = 0, $envx$3 = 0, $envx$4 = 0, $envx$5 = 0, $envx$5$v = 0, $envx$7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this) + ($v<<5)|0) + 270|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ((($this) + ($v<<5)|0) + 276|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ($4<<16>>16)==(3);
 if ($6) {
  $7 = (($2) + -8)|0;
  $8 = ($7|0)<(1);
  if ($8) {
   $9 = 1 << $v;
   $10 = $9 ^ -1;
   $11 = (($this) + 224|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & $10;
   HEAP32[$11>>2] = $13;
   $$0 = -1;
   return ($$0|0);
  } else {
   $14 = $7&65535;
   HEAP16[$0>>1] = $14;
   $15 = $7 >>> 8;
   $16 = $15&255;
   $17 = ((($this) + ($v<<4)|0) + 8|0);
   HEAP8[$17>>0] = $16;
   $$0 = $7;
   return ($$0|0);
  }
 }
 $18 = ((($this) + ($v<<5)|0) + 268|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = ((($this) + ($v<<4)|0) + 5|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 & 128;
 $25 = ($24|0)==(0);
 do {
  if ($25) {
   $71 = ((($this) + ($v<<4)|0) + 7|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = ($72<<24>>24)>(-1);
   if ($74) {
    $75 = $73 << 4;
    $76 = $75&65535;
    HEAP16[$0>>1] = $76;
    $cnt$2 = $20;$envx$7 = $75;
    break;
   }
   $77 = $73 >>> 5;
   if ((($77|0) == 7)) {
    $109 = $73 & 31;
    $110 = (47208 + ($109<<1)|0);
    $111 = HEAP16[$110>>1]|0;
    $112 = $111 << 16 >> 16;
    $113 = (($20) - ($112))|0;
    $114 = ($113|0)>(0);
    if ($114) {
     $cnt$2 = $113;$envx$7 = $2;
     break;
    }
    $115 = ($1<<16>>16)<(1536);
    $envx$5$v = $115 ? 32 : 8;
    $envx$5 = (($envx$5$v) + ($2))|0;
    $116 = ($envx$5|0)>(2047);
    $$envx$5 = $116 ? 2047 : $envx$5;
    $117 = $$envx$5&65535;
    HEAP16[$0>>1] = $117;
    $cnt$2 = 30720;$envx$7 = $$envx$5;
    break;
   } else if ((($77|0) == 4)) {
    $78 = $73 & 31;
    $79 = (47208 + ($78<<1)|0);
    $80 = HEAP16[$79>>1]|0;
    $81 = $80 << 16 >> 16;
    $82 = (($20) - ($81))|0;
    $83 = ($82|0)>(0);
    if ($83) {
     $cnt$2 = $82;$envx$7 = $2;
     break;
    }
    $84 = (($2) + -32)|0;
    $85 = ($84|0)<(0);
    if ($85) {
     $86 = ($4<<16>>16)==(0);
     if ($86) {
      HEAP16[$3>>1] = 1;
      $envx$3 = 0;
     } else {
      $envx$3 = 0;
     }
    } else {
     $envx$3 = $84;
    }
    $87 = $envx$3&65535;
    HEAP16[$0>>1] = $87;
    $cnt$2 = 30720;$envx$7 = $envx$3;
    break;
   } else if ((($77|0) == 6)) {
    $100 = $73 & 31;
    $101 = (47208 + ($100<<1)|0);
    $102 = HEAP16[$101>>1]|0;
    $103 = $102 << 16 >> 16;
    $104 = (($20) - ($103))|0;
    $105 = ($104|0)>(0);
    if ($105) {
     $cnt$2 = $104;$envx$7 = $2;
     break;
    }
    $106 = (($2) + 32)|0;
    $107 = ($106|0)>(2047);
    $$ = $107 ? 2047 : $106;
    $108 = $$&65535;
    HEAP16[$0>>1] = $108;
    $cnt$2 = 30720;$envx$7 = $$;
    break;
   } else if ((($77|0) == 5)) {
    $88 = $73 & 31;
    $89 = (47208 + ($88<<1)|0);
    $90 = HEAP16[$89>>1]|0;
    $91 = $90 << 16 >> 16;
    $92 = (($20) - ($91))|0;
    $93 = ($92|0)>(0);
    if ($93) {
     $cnt$2 = $92;$envx$7 = $2;
     break;
    }
    $94 = (($2) + -1)|0;
    $95 = $94 >> 8;
    $$neg5 = (($2) + -1)|0;
    $96 = (($$neg5) - ($95))|0;
    $97 = ($96|0)<(0);
    if ($97) {
     $98 = ($4<<16>>16)==(0);
     if ($98) {
      HEAP16[$3>>1] = 1;
      $envx$4 = 0;
     } else {
      $envx$4 = 0;
     }
    } else {
     $envx$4 = $96;
    }
    $99 = $envx$4&65535;
    HEAP16[$0>>1] = $99;
    $cnt$2 = 30720;$envx$7 = $envx$4;
    break;
   } else {
    $cnt$2 = $20;$envx$7 = $2;
    break;
   }
  } else {
   if ((($5|0) == 0)) {
    $26 = $23 & 15;
    $27 = ($26|0)==(15);
    if ($27) {
     $28 = (($2) + 1024)|0;
     $cnt$0 = $20;$envx$0 = $28;
    } else {
     $29 = $26 << 1;
     $30 = $29 | 1;
     $31 = (47208 + ($30<<1)|0);
     $32 = HEAP16[$31>>1]|0;
     $33 = $32 << 16 >> 16;
     $34 = (($20) - ($33))|0;
     $35 = ($34|0)>(0);
     if ($35) {
      $cnt$2 = $34;$envx$7 = $2;
      break;
     }
     $36 = (($2) + 32)|0;
     $cnt$0 = 30720;$envx$0 = $36;
    }
    $37 = ($envx$0|0)>(2047);
    if ($37) {
     HEAP16[$3>>1] = 1;
     $envx$1 = 2047;
    } else {
     $envx$1 = $envx$0;
    }
    $38 = $envx$1&65535;
    HEAP16[$0>>1] = $38;
    $cnt$2 = $cnt$0;$envx$7 = $envx$1;
    break;
   } else if ((($5|0) == 2)) {
    $58 = ((($this) + ($v<<4)|0) + 6|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 & 31;
    $62 = (47208 + ($61<<1)|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63 << 16 >> 16;
    $65 = (($20) - ($64))|0;
    $66 = ($65|0)<(1);
    if (!($66)) {
     $cnt$2 = $65;$envx$7 = $2;
     break;
    }
    $67 = (($2) + -1)|0;
    $68 = $67 >> 8;
    $$neg3 = (($2) + -1)|0;
    $69 = (($$neg3) - ($68))|0;
    $70 = $69&65535;
    HEAP16[$0>>1] = $70;
    $cnt$2 = 30720;$envx$7 = $69;
    break;
   } else if ((($5|0) == 1)) {
    $39 = $23 >>> 3;
    $40 = $39 & 14;
    $41 = $40 | 16;
    $42 = (47208 + ($41<<1)|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = $43 << 16 >> 16;
    $45 = (($20) - ($44))|0;
    $46 = ($45|0)<(1);
    if ($46) {
     $47 = (($2) + -1)|0;
     $48 = $47 >> 8;
     $$neg1 = (($2) + -1)|0;
     $49 = (($$neg1) - ($48))|0;
     $50 = $49&65535;
     HEAP16[$0>>1] = $50;
     $cnt$1 = 30720;$envx$2 = $49;
    } else {
     $cnt$1 = $45;$envx$2 = $2;
    }
    $51 = ((($this) + ($v<<4)|0) + 6|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $53 >>> 5;
    $55 = $54 << 8;
    $56 = (($55) + 256)|0;
    $57 = ($envx$2|0)>($56|0);
    if ($57) {
     $cnt$2 = $cnt$1;$envx$7 = $envx$2;
     break;
    }
    HEAP16[$3>>1] = 2;
    $cnt$2 = $cnt$1;$envx$7 = $envx$2;
    break;
   } else {
    $cnt$2 = $20;$envx$7 = $2;
    break;
   }
  }
 } while(0);
 $118 = $cnt$2&65535;
 HEAP16[$18>>1] = $118;
 $119 = $envx$7 >>> 4;
 $120 = $119&255;
 $121 = ((($this) + ($v<<4)|0) + 8|0);
 HEAP8[$121>>0] = $120;
 $$0 = $envx$7;
 return ($$0|0);
}
function __Z8clamp_16i($n) {
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $sext = 0, $sext1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sext = $n << 16;
 $0 = $sext >> 16;
 $1 = ($0|0)==($n|0);
 if ($1) {
  $$0 = $n;
  return ($$0|0);
 }
 $2 = $n >> 31;
 $3 = (32767 - ($2))|0;
 $sext1 = $3 << 16;
 $4 = $sext1 >> 16;
 $$0 = $4;
 return ($$0|0);
}
function __ZN7Spc_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Music_EmuC2Ev($this);
 HEAP32[$this>>2] = ((48296 + 8|0));
 $0 = (($this) + 264|0);
 __ZN13Fir_ResamplerILi24EEC2Ev($0);
 $1 = (($this) + 1856|0);
 __ZN8Snes_SpcC2Ev($1);
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,48488);
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,48376);
 __ZN9Music_Emu8set_gainEd($this,1.3999999999999999);
 return;
}
function __ZN7Spc_EmuD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((48296 + 8|0));
 $0 = (($this) + 264|0);
 __ZN14Fir_Resampler_D2Ev($0);
 __ZN9Music_EmuD2Ev($this);
 return;
}
function __ZN7Spc_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Spc_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZNK7Spc_Emu7trailerEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 256|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__Z3minIlET_S0_S0_($1,66048)|0);
 $3 = (($this) + 252|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 return ($5|0);
}
function __ZNK7Spc_Emu12trailer_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 256|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -66048)|0;
 $3 = (__Z3maxIlET_S0_S0_(0,$2)|0);
 return ($3|0);
}
function __ZNK7Spc_Emu11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK7Spc_Emu6headerEv($this)|0);
 $2 = (__ZNK7Spc_Emu7trailerEv($this)|0);
 $3 = (__ZNK7Spc_Emu12trailer_sizeEv($this)|0);
 __ZL12get_spc_infoRKN7Spc_Emu8header_tEPKhlP12track_info_t($1,$2,$3,$out);
 return (0|0);
}
function __ZN7Spc_Emu16set_sample_rate_El($this,$sample_rate) {
 $this = $this|0;
 $sample_rate = $sample_rate|0;
 var $$0 = 0, $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1856|0);
 $1 = (+__ZNK9Music_Emu4gainEv($this));
 __ZN8Snes_Spc8set_gainEd($0,$1);
 $2 = ($sample_rate|0)==(32000);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (($this) + 264|0);
 $4 = (__ZN14Fir_Resampler_11buffer_sizeEi($3,3200)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = (+($sample_rate|0));
 $7 = 32000.0 / $6;
 (+__ZN14Fir_Resampler_10time_ratioEddd($3,$7,0.99650000000000005,1.0));
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Spc_Emu12mute_voices_Ei($this,$m) {
 $this = $this|0;
 $m = $m|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1856|0);
 __ZN8Snes_Spc11mute_voicesEi($0,$m);
 return;
}
function __ZN7Spc_Emu9load_mem_EPKhl($this,$in,$size) {
 $this = $this|0;
 $in = $in|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 HEAP32[$0>>2] = $in;
 $1 = (($this) + 256|0);
 HEAP32[$1>>2] = $size;
 __ZN9Music_Emu15set_voice_countEi($this,8);
 $2 = ($size|0)<(65920);
 if ($2) {
  $$0 = 38248;
  return ($$0|0);
 }
 $3 = (__ZL16check_spc_headerPKv($in)|0);
 $$0 = $3;
 return ($$0|0);
}
function __ZN7Spc_Emu10set_tempo_Ed($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1856|0);
 __ZN8Snes_Spc9set_tempoEd($0,$t);
 return;
}
function __ZN7Spc_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 264|0);
 __ZN14Fir_Resampler_5clearEv($0);
 $1 = (($this) + 1856|0);
 $2 = (($this) + 252|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 256|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN8Snes_Spc8load_spcEPKvl($1,$3,$5)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 __ZN8Snes_Spc10clear_echoEv($1);
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Spc_Emu5skip_El($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
 $1 = ($0|0)==(32000);
 if ($1) {
  $$01 = $count;
 } else {
  $2 = (+($count|0));
  $3 = (($this) + 264|0);
  $4 = (+__ZNK14Fir_Resampler_5ratioEv($3));
  $5 = $2 * $4;
  $6 = (~~(($5)));
  $7 = $6 & -2;
  $8 = (__ZN14Fir_Resampler_10skip_inputEl($3,$7)|0);
  $9 = (($7) - ($8))|0;
  $$01 = $9;
 }
 $10 = ($$01|0)>(0);
 if ($10) {
  $11 = (($this) + 1856|0);
  $12 = (__ZN8Snes_Spc4skipEl($11,$$01)|0);
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $$0 = $12;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $14 = HEAP32[$this>>2]|0;
 $15 = (($14) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_iiii[$16 & 63]($this,64,$buf)|0);
 $$0 = $17;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7Spc_Emu5play_ElPs($this,$count,$out) {
 $this = $this|0;
 $count = $count|0;
 $out = $out|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remain$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
 $1 = ($0|0)==(32000);
 if ($1) {
  $5 = (($this) + 1856|0);
  $6 = (__ZN8Snes_Spc4playElPs($5,$count,$out)|0);
  $$0 = $6;
  return ($$0|0);
 }
 $2 = (($this) + 264|0);
 $3 = ($count|0)>(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (($this) + 1856|0);
 $remain$01 = $count;
 while(1) {
  $7 = (($count) - ($remain$01))|0;
  $8 = (($out) + ($7<<1)|0);
  $9 = (__ZN13Fir_ResamplerILi24EE4readEPsi($2,$8,$remain$01)|0);
  $10 = (($remain$01) - ($9))|0;
  $11 = ($10|0)>(0);
  if (!($11)) {
   $$0 = 0;
   label = 8;
   break;
  }
  $12 = (__ZNK14Fir_Resampler_9max_writeEv($2)|0);
  $13 = (__ZN14Fir_Resampler_6bufferEv($2)|0);
  $14 = (__ZN8Snes_Spc4playElPs($4,$12,$13)|0);
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $$0 = $14;
   label = 8;
   break;
  }
  __ZN14Fir_Resampler_5writeEl($2,$12);
  $16 = ($10|0)>(0);
  if ($16) {
   $remain$01 = $10;
  } else {
   $$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN13Fir_ResamplerILi24EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 52|0);
 __ZN14Fir_Resampler_C2EiPs($this,24,$0);
 return;
}
function __Z3maxIlET_S0_S0_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $y$x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x|0)<($y|0);
 $y$x = $0 ? $y : $x;
 return ($y$x|0);
}
function __ZNK7Spc_Emu6headerEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 252|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZL12get_spc_infoRKN7Spc_Emu8header_tEPKhlP12track_info_t($h,$xid6,$xid6_size,$out) {
 $h = $h|0;
 $xid6 = $xid6|0;
 $xid6_size = $xid6_size|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, $i$06$lcssa = 0, $len_secs$05 = 0, $len_secs$07 = 0, $len_secs$07$lcssa = 0, $len_secs$2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$06 = 0;$len_secs$07 = 0;
 while(1) {
  $0 = ((($h) + ($i$06)|0) + 169|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = $1&255;
  $3 = (($2) + -48)|0;
  $4 = ($3>>>0)>(9);
  if ($4) {
   $i$06$lcssa = $i$06;$len_secs$07$lcssa = $len_secs$07;
   label = 3;
   break;
  }
  $12 = ($len_secs$07*10)|0;
  $13 = (($3) + ($12))|0;
  $14 = (($i$06) + 1)|0;
  $15 = ($14|0)<(3);
  if ($15) {
   $i$06 = $14;$len_secs$07 = $13;
  } else {
   $len_secs$05 = $13;
   label = 7;
   break;
  }
 }
 if ((label|0) == 3) {
  $5 = ($i$06$lcssa|0)==(1);
  if ($5) {
   $6 = (($h) + 176|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    $9 = (($h) + 177|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     label = 8;
    } else {
     $len_secs$05 = $len_secs$07$lcssa;
     label = 7;
    }
   } else {
    label = 8;
   }
  } else {
   $len_secs$05 = $len_secs$07$lcssa;
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $16 = ($len_secs$05|0)==(0);
  $17 = ($len_secs$05|0)>(8191);
  $or$cond = $16 | $17;
  if ($or$cond) {
   label = 8;
  } else {
   $len_secs$2 = $len_secs$05;
  }
 }
 if ((label|0) == 8) {
  $18 = (($h) + 169|0);
  $19 = (__Z8get_le16PKv($18)|0);
  $len_secs$2 = $19;
 }
 $20 = ($len_secs$2|0)<(8191);
 if ($20) {
  $21 = ($len_secs$2*1000)|0;
  $22 = (($out) + 4|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = (($h) + 176|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24<<24>>24)<(32);
 if ($25) {
  $30 = 1;
 } else {
  $26 = $24 << 24 >> 24;
  $27 = (($26) + -48)|0;
  $28 = ($27>>>0)<(10);
  $30 = $28;
 }
 $29 = $30&1;
 $31 = (($out) + 784|0);
 $32 = ((($h) + ($29)|0) + 176|0);
 $33 = (32 - ($29))|0;
 __ZN8Gme_File11copy_field_EPcPKci($31,$32,$33);
 $34 = (($out) + 528|0);
 $35 = (($h) + 46|0);
 __ZN8Gme_File11copy_field_EPcPKci($34,$35,32);
 $36 = (($out) + 272|0);
 $37 = (($h) + 78|0);
 __ZN8Gme_File11copy_field_EPcPKci($36,$37,32);
 $38 = (($out) + 1552|0);
 $39 = (($h) + 110|0);
 __ZN8Gme_File11copy_field_EPcPKci($38,$39,16);
 $40 = (($out) + 1296|0);
 $41 = (($h) + 126|0);
 __ZN8Gme_File11copy_field_EPcPKci($40,$41,32);
 $42 = ($xid6_size|0)==(0);
 if ($42) {
  return;
 }
 __ZL12get_spc_xid6PKhlP12track_info_t($xid6,$xid6_size,$out);
 return;
}
function __ZN8Snes_Spc8set_gainEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 88|0);
 __ZN7Spc_Dsp8set_gainEd($0,$v);
 return;
}
function __ZN8Snes_Spc11mute_voicesEi($this,$mask) {
 $this = $this|0;
 $mask = $mask|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 88|0);
 __ZN7Spc_Dsp11mute_voicesEi($0,$mask);
 return;
}
function __ZL16check_spc_headerPKv($header) {
 $header = $header|0;
 var $$ = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($header,48544,27)|0);
 $1 = ($0|0)==(0);
 $$ = $1 ? 0 : 38248;
 return ($$|0);
}
function __ZN13Fir_ResamplerILi24EE4readEPsi($this,$out_begin,$count) {
 $this = $this|0;
 $out_begin = $out_begin|0;
 $count = $count|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa8 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $8 = 0, $9 = 0, $i$04 = 0, $imp$0 = 0, $imp$11 = 0, $imp$2 = 0, $in$0 = 0, $in$1 = 0, $l$02 = 0, $n$05 = 0, $out$0 = 0, $out$1 = 0, $r$03 = 0, $remain$0 = 0, $remain$1 = 0, $remain$2 = 0, $scevgep = 0, $skip$0 = 0, $skip$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK13blargg_vectorIsE5beginEv($this)|0);
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 28|0);
 $4 = (($this) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) - ($5))|0;
 $9 = (($this) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = $0;
 $13 = (($11) - ($12))|0;
 $14 = ($13|0)>(94);
 L1: do {
  if ($14) {
   $15 = $count >> 1;
   $16 = ((($this) + (($5*48)|0)|0) + 52|0);
   $17 = HEAP32[$3>>2]|0;
   $18 = $17 >>> $5;
   $19 = (($2) + -96|0);
   $20 = (($this) + 52|0);
   $$0 = $15;$imp$0 = $16;$in$0 = $0;$out$0 = $out_begin;$remain$0 = $8;$skip$0 = $18;
   while(1) {
    $21 = (($$0) + -1)|0;
    $22 = ($$0|0)<(1);
    if ($22) {
     $in$1 = $in$0;$out$1 = $out$0;$remain$2 = $remain$0;
     break L1;
    } else {
     $i$04 = $in$0;$imp$11 = $imp$0;$l$02 = 0;$n$05 = 12;$r$03 = 0;
    }
    while(1) {
     $23 = HEAP16[$imp$11>>1]|0;
     $24 = $23 << 16 >> 16;
     $25 = HEAP16[$i$04>>1]|0;
     $26 = $25 << 16 >> 16;
     $27 = Math_imul($26, $24)|0;
     $28 = (($27) + ($l$02))|0;
     $29 = (($i$04) + 2|0);
     $30 = HEAP16[$29>>1]|0;
     $31 = $30 << 16 >> 16;
     $32 = Math_imul($31, $24)|0;
     $33 = (($32) + ($r$03))|0;
     $34 = (($imp$11) + 2|0);
     $35 = HEAP16[$34>>1]|0;
     $36 = $35 << 16 >> 16;
     $37 = (($imp$11) + 4|0);
     $38 = (($i$04) + 4|0);
     $39 = HEAP16[$38>>1]|0;
     $40 = $39 << 16 >> 16;
     $41 = Math_imul($40, $36)|0;
     $42 = (($28) + ($41))|0;
     $43 = (($i$04) + 6|0);
     $44 = HEAP16[$43>>1]|0;
     $45 = $44 << 16 >> 16;
     $46 = Math_imul($45, $36)|0;
     $47 = (($33) + ($46))|0;
     $48 = (($i$04) + 8|0);
     $49 = (($n$05) + -1)|0;
     $50 = ($49|0)==(0);
     if ($50) {
      $$lcssa = $42;$$lcssa8 = $47;
      break;
     } else {
      $i$04 = $48;$imp$11 = $37;$l$02 = $42;$n$05 = $49;$r$03 = $47;
     }
    }
    $scevgep = (($imp$0) + 48|0);
    $51 = (($remain$0) + -1)|0;
    $52 = $$lcssa >>> 15;
    $53 = $$lcssa8 >>> 15;
    $54 = $skip$0 << 1;
    $55 = $54 & 2;
    $56 = $skip$0 >>> 1;
    $$sum = (($55) + ($10))|0;
    $57 = (($in$0) + ($$sum<<1)|0);
    $58 = ($51|0)==(0);
    if ($58) {
     $59 = HEAP32[$3>>2]|0;
     $60 = HEAP32[$6>>2]|0;
     $imp$2 = $20;$remain$1 = $60;$skip$1 = $59;
    } else {
     $imp$2 = $scevgep;$remain$1 = $51;$skip$1 = $56;
    }
    $61 = $52&65535;
    HEAP16[$out$0>>1] = $61;
    $62 = $53&65535;
    $63 = (($out$0) + 2|0);
    HEAP16[$63>>1] = $62;
    $64 = (($out$0) + 4|0);
    $65 = ($57>>>0)>($19>>>0);
    if ($65) {
     $in$1 = $57;$out$1 = $64;$remain$2 = $remain$1;
     break;
    } else {
     $$0 = $21;$imp$0 = $imp$2;$in$0 = $57;$out$0 = $64;$remain$0 = $remain$1;$skip$0 = $skip$1;
    }
   }
  } else {
   $in$1 = $0;$out$1 = $out_begin;$remain$2 = $8;
  }
 } while(0);
 $66 = HEAP32[$6>>2]|0;
 $67 = (($66) - ($remain$2))|0;
 HEAP32[$4>>2] = $67;
 $68 = HEAP32[$1>>2]|0;
 $69 = $68;
 $70 = $in$1;
 $71 = (($69) - ($70))|0;
 $72 = $71 >> 1;
 $73 = (__ZNK13blargg_vectorIsEixEj($this,$72)|0);
 HEAP32[$1>>2] = $73;
 $74 = (__ZNK13blargg_vectorIsE5beginEv($this)|0);
 _memmove(($74|0),($in$1|0),($71|0))|0;
 $75 = $out$1;
 $76 = $out_begin;
 $77 = (($75) - ($76))|0;
 $78 = $77 >> 1;
 return ($78|0);
}
function __ZNK14Fir_Resampler_9max_writeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK13blargg_vectorIsE3endEv($this)|0);
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $0;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 return ($6|0);
}
function __ZL11new_spc_emuv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(68664)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN7Spc_EmuC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZL12new_spc_filev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(520)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN8Spc_FileC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZN8Spc_FileD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((48576 + 8|0));
 $0 = (($this) + 508|0);
 __ZN13blargg_vectorIhED2Ev($0);
 __ZN9Music_EmuD2Ev($this);
 return;
}
function __ZN8Spc_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8Spc_FileD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN8Spc_File5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 15]($in)|0);
 $4 = ($3|0)<(65920);
 if ($4) {
  $$0 = 38248;
  return ($$0|0);
 }
 $5 = HEAP32[$in>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($this) + 252|0);
 $9 = (FUNCTION_TABLE_iiii[$7 & 63]($in,$8,256)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $$0 = $9;
  return ($$0|0);
 }
 $11 = (__ZL16check_spc_headerPKv($8)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $$0 = $11;
  return ($$0|0);
 }
 $13 = (($3) + -66048)|0;
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = (($this) + 508|0);
  $16 = (__ZN13blargg_vectorIhE6resizeEj($15,$13)|0);
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $$0 = $16;
   return ($$0|0);
  }
  $18 = HEAP32[$in>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iii[$20 & 63]($in,65792)|0);
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $$0 = $21;
   return ($$0|0);
  }
  $23 = HEAP32[$in>>2]|0;
  $24 = (($23) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (__ZNK13blargg_vectorIhE5beginEv($15)|0);
  $27 = (__ZNK13blargg_vectorIhE4sizeEv($15)|0);
  $28 = (FUNCTION_TABLE_iiii[$25 & 63]($in,$26,$27)|0);
  $29 = ($28|0)==(0|0);
  if (!($29)) {
   $$0 = $28;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function __ZNK8Spc_File11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 252|0);
 $2 = (($this) + 508|0);
 $3 = (__ZNK13blargg_vectorIhE5beginEv($2)|0);
 $4 = (__ZNK13blargg_vectorIhE4sizeEv($2)|0);
 __ZL12get_spc_infoRKN7Spc_Emu8header_tEPKhlP12track_info_t($1,$3,$4,$out);
 return (0|0);
}
function __ZL12get_spc_xid6PKhlP12track_info_t($begin,$size,$out) {
 $begin = $begin|0;
 $size = $size|0;
 $out = $out|0;
 var $$sum = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $copyright = 0, $copyright_len$0$lcssa = 0, $copyright_len$017 = 0, $copyright_len$18 = 0, $copyright_len$2 = 0, $end$0 = 0, $field$0$ph = 0, $in$0$ph = 0, $in$019 = 0, $in$1 = 0, $or$cond = 0, $p$1 = 0, $year$0$lcssa = 0, $year$018 = 0, $year$110 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $copyright = sp;
 $0 = (($begin) + ($size)|0);
 $1 = ($size|0)<(8);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (_memcmp($begin,48688,4)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($begin) + 4|0);
 $5 = (__Z8get_le32PKv($4)|0);
 $6 = (($begin) + 8|0);
 $7 = $0;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>($5|0);
 if ($10) {
  $$sum6 = (($5) + 8)|0;
  $11 = (($begin) + ($$sum6)|0);
  $end$0 = $11;
 } else {
  $end$0 = $0;
 }
 $12 = $end$0;
 $13 = $6;
 $14 = (($12) - ($13))|0;
 $15 = ($14|0)>(3);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $begin;
 $17 = (($out) + 528|0);
 $18 = (($out) + 272|0);
 $19 = (($out) + 784|0);
 $20 = (($out) + 1552|0);
 $21 = (($out) + 1296|0);
 $22 = (($copyright) + 5|0);
 $copyright_len$017 = 0;$in$019 = $6;$year$018 = 0;
 while(1) {
  $26 = (($in$019) + 3|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $28 << 8;
  $30 = (($in$019) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $29 | $32;
  $34 = (($in$019) + 1|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = ($35<<24>>24)!=(0);
  $37 = $36 ? $33 : 0;
  $38 = (($in$019) + 4|0);
  $39 = $38;
  $40 = (($12) - ($39))|0;
  $41 = ($37|0)>($40|0);
  if ($41) {
   $copyright_len$0$lcssa = $copyright_len$017;$year$0$lcssa = $year$018;
   break;
  }
  $42 = HEAP8[$in$019>>0]|0;
  $43 = $42&255;
  switch ($43|0) {
  case 2:  {
   $field$0$ph = $18;
   label = 16;
   break;
  }
  case 3:  {
   $field$0$ph = $19;
   label = 16;
   break;
  }
  case 20:  {
   $copyright_len$18 = $copyright_len$017;$year$110 = $33;
   break;
  }
  case 1:  {
   $field$0$ph = $17;
   label = 16;
   break;
  }
  case 4:  {
   $field$0$ph = $20;
   label = 16;
   break;
  }
  case 7:  {
   $field$0$ph = $21;
   label = 16;
   break;
  }
  case 19:  {
   $44 = (__Z3minIiET_S0_S0_($37,256)|0);
   _memcpy(($22|0),($38|0),($44|0))|0;
   $copyright_len$18 = $44;$year$110 = $year$018;
   break;
  }
  default: {
   $copyright_len$18 = $copyright_len$017;$year$110 = $year$018;
  }
  }
  if ((label|0) == 16) {
   label = 0;
   __ZN8Gme_File11copy_field_EPcPKci($field$0$ph,$38,$37);
   $copyright_len$18 = $copyright_len$017;$year$110 = $year$018;
  }
  $$sum = (($37) + 4)|0;
  $45 = (($in$019) + ($$sum)|0);
  $in$1 = $45;
  while(1) {
   $46 = $in$1;
   $47 = (($46) - ($16))|0;
   $48 = $47 & 3;
   $49 = ($48|0)!=(0);
   $50 = ($in$1>>>0)<($end$0>>>0);
   $or$cond = $49 & $50;
   if (!($or$cond)) {
    $in$0$ph = $in$1;
    break;
   }
   $51 = (($in$1) + 1|0);
   $52 = HEAP8[$in$1>>0]|0;
   $53 = ($52<<24>>24)==(0);
   if ($53) {
    $in$1 = $51;
   } else {
    $in$0$ph = $45;
    break;
   }
  }
  $23 = $in$0$ph;
  $24 = (($12) - ($23))|0;
  $25 = ($24|0)>(3);
  if ($25) {
   $copyright_len$017 = $copyright_len$18;$in$019 = $in$0$ph;$year$018 = $year$110;
  } else {
   $copyright_len$0$lcssa = $copyright_len$18;$year$0$lcssa = $year$110;
   break;
  }
 }
 $54 = (($copyright) + 5|0);
 $55 = ($year$0$lcssa|0)==(0);
 if ($55) {
  $copyright_len$2 = $copyright_len$0$lcssa;$p$1 = $54;
 } else {
  $56 = (($copyright) + 4|0);
  HEAP8[$56>>0] = 32;
  $57 = (($year$0$lcssa|0) % 10)&-1;
  $58 = (($57) + 48)|0;
  $59 = $58&255;
  $60 = (($copyright) + 3|0);
  HEAP8[$60>>0] = $59;
  $61 = (($year$0$lcssa|0) / 10)&-1;
  $62 = (($61|0) % 10)&-1;
  $63 = (($62) + 48)|0;
  $64 = $63&255;
  $65 = (($copyright) + 2|0);
  HEAP8[$65>>0] = $64;
  $66 = (($year$0$lcssa|0) / 100)&-1;
  $67 = (($66|0) % 10)&-1;
  $68 = (($67) + 48)|0;
  $69 = $68&255;
  $70 = (($copyright) + 1|0);
  HEAP8[$70>>0] = $69;
  $71 = (($year$0$lcssa|0) / 1000)&-1;
  $72 = (($71|0) % 10)&-1;
  $73 = (($72) + 48)|0;
  $74 = $73&255;
  HEAP8[$copyright>>0] = $74;
  $75 = (($copyright_len$0$lcssa) + 5)|0;
  $copyright_len$2 = $75;$p$1 = $copyright;
 }
 $76 = ($copyright_len$2|0)==(0);
 if ($76) {
  STACKTOP = sp;return;
 }
 $77 = (($out) + 1040|0);
 __ZN8Gme_File11copy_field_EPcPKci($77,$p$1,$copyright_len$2);
 STACKTOP = sp;return;
}
function __ZN8Spc_FileC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Gme_Info_C2Ev($this);
 HEAP32[$this>>2] = ((48576 + 8|0));
 $0 = (($this) + 508|0);
 __ZN13blargg_vectorIhEC2Ev($0);
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,48488);
 return;
}
function __ZN7Vgm_EmuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12Vgm_Emu_ImplC2Ev($this);
 HEAP32[$this>>2] = ((48696 + 8|0));
 $0 = (($this) + 272|0);
 HEAP32[$0>>2] = ((48696 + 100|0));
 $1 = (($this) + 3424|0);
 HEAP8[$1>>0] = 0;
 $2 = (($this) + 3416|0);
 HEAP32[$2>>2] = 0;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,48880);
 __ZN11Classic_Emu15set_voice_typesEPKi($this,48808);
 __ZN9Music_Emu21set_silence_lookaheadEi($this,1);
 __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($this,48840);
 return;
}
function __ZN7Vgm_EmuD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12Vgm_Emu_ImplD2Ev($this);
 return;
}
function __ZThn272_N7Vgm_EmuD1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -272|0);
 __ZN7Vgm_EmuD2Ev($0);
 return;
}
function __ZN7Vgm_EmuD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Vgm_EmuD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZThn272_N7Vgm_EmuD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -272|0);
 __ZN7Vgm_EmuD0Ev($0);
 return;
}
function __ZNK7Vgm_Emu8gd3_dataEPi($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $$0 = 0, $$mux = 0, $$not = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)!=(0|0);
 if ($0) {
  HEAP32[$size>>2] = 0;
 }
 $1 = (__ZNK7Vgm_Emu6headerEv($this)|0);
 $2 = (($1) + 20|0);
 $3 = (__Z8get_le32PKv($2)|0);
 $4 = (($3) + -44)|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (($this) + 1140|0);
 $7 = HEAP32[$6>>2]|0;
 $$sum = (($3) + 20)|0;
 $8 = (($7) + ($$sum)|0);
 $9 = (($this) + 1148|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = $8;
 $13 = (($11) - ($12))|0;
 $14 = (__ZL16check_gd3_headerPKhl($8,$13)|0);
 $15 = ($14|0)==(0);
 $$not = $0 ^ 1;
 $brmerge = $15 | $$not;
 $$mux = $15 ? 0 : $8;
 if ($brmerge) {
  $$0 = $$mux;
  return ($$0|0);
 }
 $16 = (($14) + 12)|0;
 HEAP32[$size>>2] = $16;
 $$0 = $8;
 return ($$0|0);
}
function __ZNK7Vgm_Emu11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $1 = (__ZNK7Vgm_Emu6headerEv($this)|0);
 __ZL14get_vgm_lengthRKN7Vgm_Emu8header_tEP12track_info_t($1,$out);
 $2 = (__ZNK7Vgm_Emu8gd3_dataEPi($this,$size)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return (0|0);
 }
 $4 = (($2) + 12|0);
 $5 = HEAP32[$size>>2]|0;
 $6 = (($2) + ($5)|0);
 __ZL9parse_gd3PKhS0_P12track_info_t($4,$6,$out);
 STACKTOP = sp;return (0|0);
}
function __ZN7Vgm_Emu10set_tempo_Ed($this,$t) {
 $this = $this|0;
 $t = +$t;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 3416|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = $t * 44100.0;
 $4 = $3 + 0.5;
 $5 = (~~(($4)));
 $6 = (($this) + 3420|0);
 HEAP32[$6>>2] = $5;
 $7 = (+($5|0));
 $8 = 4096.0 / $7;
 $9 = HEAP32[$0>>2]|0;
 $10 = (+($9|0));
 $11 = $8 * $10;
 $12 = $11 + 0.5;
 $13 = (+Math_floor((+$12)));
 $14 = (~~(($13)));
 $15 = (($this) + 1136|0);
 HEAP32[$15>>2] = $14;
 $16 = (($this) + 3408|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $17 * 4096.0;
 $19 = HEAP32[$6>>2]|0;
 $20 = (+($19|0));
 $21 = $18 / $20;
 $22 = $21 + 0.5;
 $23 = (+Math_floor((+$22)));
 $24 = (~~(($23)));
 $25 = (($24) + 2)|0;
 $26 = (($this) + 1132|0);
 HEAP32[$26>>2] = $25;
 return;
}
function __ZN7Vgm_Emu16set_sample_rate_El($this,$sample_rate) {
 $this = $this|0;
 $sample_rate = $sample_rate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1200|0);
 $1 = (__ZN11Blip_Buffer15set_sample_rateEli($0,$sample_rate,33)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = (__ZN11Classic_Emu16set_sample_rate_El($this,$sample_rate)|0);
 $$0 = $3;
 return ($$0|0);
}
function __ZN7Vgm_Emu9update_eqERK9blip_eq_t($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1248|0);
 __ZN7Sms_Apu9treble_eqERK9blip_eq_t($0,$eq);
 $1 = (($this) + 2848|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN7Vgm_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$c,$l,$r) {
 $this = $this|0;
 $i = $i|0;
 $c = $c|0;
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)<(4);
 if (!($0)) {
  return;
 }
 $1 = (($this) + 1248|0);
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($1,$i,$c,$l,$r);
 return;
}
function __ZN7Vgm_Emu12mute_voices_Ei($this,$mask) {
 $this = $this|0;
 $mask = $mask|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Classic_Emu12mute_voices_Ei($this,$mask);
 $0 = (($this) + 2848|0);
 $1 = (($this) + 1200|0);
 __ZN10Blip_SynthILi8ELi1EE6outputEP11Blip_Buffer($0,$1);
 $2 = (($this) + 3425|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  return;
 }
 $5 = (($this) + 1248|0);
 $6 = $mask & 128;
 $7 = ($6|0)==(0);
 $$ = $7 ? $1 : 0;
 __ZN7Sms_Apu6outputEP11Blip_Buffer($5,$$);
 $8 = (($this) + 1176|0);
 $9 = (__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($8)|0);
 if ($9) {
  $10 = $mask & 64;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = (+__ZNK9Music_Emu4gainEv($this));
   $13 = $12 * 0.0013066406250000001;
   $14 = $13;
  } else {
   $14 = 0.0;
  }
  __ZN10Blip_SynthILi8ELi1EE6volumeEd($0,$14);
  __ZN10Ym2612_Emu11mute_voicesEi($8,$mask);
 }
 $15 = (($this) + 1188|0);
 $16 = (__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($15)|0);
 if (!($16)) {
  return;
 }
 return;
}
function __ZN7Vgm_Emu9load_mem_EPKhl($this,$new_data,$new_size) {
 $this = $this|0;
 $new_data = $new_data|0;
 $new_size = $new_size|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($new_size|0)<(65);
 if ($0) {
  $$0 = 38248;
  return ($$0|0);
 }
 $1 = (__ZL16check_vgm_headerRKN7Vgm_Emu8header_tE($new_data)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = (($new_data) + 12|0);
 $4 = (__Z8get_le32PKv($3)|0);
 $5 = (($this) + 3416|0);
 $6 = ($4|0)==(0);
 $$ = $6 ? 3579545 : $4;
 HEAP32[$5>>2] = $$;
 $7 = (($this) + 1200|0);
 __ZN11Blip_Buffer10clock_rateEl($7,$$);
 $8 = (($this) + 1140|0);
 HEAP32[$8>>2] = $new_data;
 $9 = (($new_data) + ($new_size)|0);
 $10 = (($this) + 1148|0);
 HEAP32[$10>>2] = $9;
 $11 = (($this) + 1144|0);
 HEAP32[$11>>2] = $9;
 $12 = (($new_data) + 28|0);
 $13 = (__Z8get_le32PKv($12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = (($13) + 28)|0;
  $16 = HEAP32[$8>>2]|0;
  $17 = (($16) + ($15)|0);
  HEAP32[$11>>2] = $17;
 }
 __ZN9Music_Emu15set_voice_countEi($this,4);
 $18 = (__ZN7Vgm_Emu8setup_fmEv($this)|0);
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $$0 = $18;
  return ($$0|0);
 }
 $20 = (($this) + 3425|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)!=(0);
 $23 = $22 ? 48936 : 49032;
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,$23);
 $24 = HEAP32[$5>>2]|0;
 $25 = (__ZN11Classic_Emu12setup_bufferEl($this,$24)|0);
 $$0 = $25;
 return ($$0|0);
}
function __ZN7Vgm_Emu8setup_fmEv($this) {
 $this = $this|0;
 var $$0 = 0, $$not = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $ym2413_rate = 0;
 var $ym2612_rate = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ym2612_rate = sp + 4|0;
 $ym2413_rate = sp;
 $0 = (__ZNK7Vgm_Emu6headerEv($this)|0);
 $1 = (($0) + 44|0);
 $2 = (__Z8get_le32PKv($1)|0);
 HEAP32[$ym2612_rate>>2] = $2;
 $3 = (__ZNK7Vgm_Emu6headerEv($this)|0);
 $4 = (($3) + 16|0);
 $5 = (__Z8get_le32PKv($4)|0);
 HEAP32[$ym2413_rate>>2] = $5;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = (__ZNK7Vgm_Emu6headerEv($this)|0);
  $8 = (($7) + 8|0);
  $9 = (__Z8get_le32PKv($8)|0);
  $10 = ($9>>>0)<(272);
  if ($10) {
   __ZNK12Vgm_Emu_Impl15update_fm_ratesEPlS0_($this,$ym2413_rate,$ym2612_rate);
  }
 }
 $11 = (($this) + 3425|0);
 HEAP8[$11>>0] = 0;
 $12 = (($this) + 1200|0);
 $13 = (__ZNK11Blip_Buffer11sample_rateEv($12)|0);
 $14 = (+($13|0));
 $15 = $14 * 1.5;
 $16 = (($this) + 3408|0);
 HEAPF64[$16>>3] = $15;
 $17 = HEAP32[$ym2612_rate>>2]|0;
 $18 = ($17|0)==(0);
 do {
  if (!($18)) {
   HEAP8[$11>>0] = 1;
   $19 = (($this) + 3424|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if (!($21)) {
    $22 = HEAP32[$ym2612_rate>>2]|0;
    $23 = (+($22|0));
    $24 = $23 / 144.0;
    HEAPF64[$16>>3] = $24;
   }
   $25 = (($this) + 272|0);
   $26 = +HEAPF64[$16>>3];
   $27 = (__ZNK11Blip_Buffer11sample_rateEv($12)|0);
   $28 = (+($27|0));
   $29 = $26 / $28;
   $30 = (+__ZNK9Music_Emu4gainEv($this));
   $31 = $30 * 3.0;
   (+__ZN14Dual_Resampler5setupEddd($25,$29,0.98999999999999999,$31));
   $32 = (($this) + 1176|0);
   $33 = +HEAPF64[$16>>3];
   $34 = HEAP32[$ym2612_rate>>2]|0;
   $35 = (+($34|0));
   $36 = (__ZN10Ym2612_Emu8set_rateEdd($32,$33,$35)|0);
   $37 = ($36|0)==(0|0);
   if ($37) {
    __ZN6Ym_EmuI10Ym2612_EmuE6enableEb($32,1);
    __ZN9Music_Emu15set_voice_countEi($this,8);
    break;
   } else {
    $$0 = $36;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $38 = HEAP8[$11>>0]|0;
 $$not = ($38<<24>>24)==(0);
 $39 = HEAP32[$ym2413_rate>>2]|0;
 $40 = ($39|0)!=(0);
 $or$cond = $$not & $40;
 do {
  if ($or$cond) {
   HEAP8[$11>>0] = 1;
   $41 = (($this) + 3424|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(0);
   if (!($43)) {
    $44 = HEAP32[$ym2413_rate>>2]|0;
    $45 = (+($44|0));
    $46 = $45 / 72.0;
    HEAPF64[$16>>3] = $46;
   }
   $47 = (($this) + 272|0);
   $48 = +HEAPF64[$16>>3];
   $49 = (__ZNK11Blip_Buffer11sample_rateEv($12)|0);
   $50 = (+($49|0));
   $51 = $48 / $50;
   $52 = (+__ZNK9Music_Emu4gainEv($this));
   $53 = $52 * 3.0;
   (+__ZN14Dual_Resampler5setupEddd($47,$51,0.98999999999999999,$53));
   $54 = (($this) + 1188|0);
   $55 = +HEAPF64[$16>>3];
   $56 = HEAP32[$ym2413_rate>>2]|0;
   $57 = (+($56|0));
   $58 = (__ZN10Ym2413_Emu8set_rateEdd($54,$55,$57)|0);
   if ((($58|0) == 2)) {
    $$0 = 49104;
    STACKTOP = sp;return ($$0|0);
   } else if ((($58|0) == 0)) {
    __ZN6Ym_EmuI10Ym2413_EmuE6enableEb($54,1);
    __ZN9Music_Emu15set_voice_countEi($this,8);
    $$pr = HEAP8[$11>>0]|0;
    $60 = $$pr;
    break;
   } else {
    $$0 = 50160;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $60 = $38;
  }
 } while(0);
 $59 = ($60<<24>>24)==(0);
 if ($59) {
  $71 = (($this) + 1176|0);
  __ZN6Ym_EmuI10Ym2612_EmuE6enableEb($71,0);
  $72 = (($this) + 1188|0);
  __ZN6Ym_EmuI10Ym2413_EmuE6enableEb($72,0);
  $73 = (($this) + 1248|0);
  $74 = (+__ZNK9Music_Emu4gainEv($this));
  __ZN7Sms_Apu6volumeEd($73,$74);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = (($this) + 272|0);
 $62 = (__ZNK11Blip_Buffer6lengthEv($12)|0);
 $63 = (__ZNK11Blip_Buffer11sample_rateEv($12)|0);
 $64 = Math_imul($63, $62)|0;
 $65 = (($64|0) / 1000)&-1;
 $66 = (__ZN14Dual_Resampler5resetEi($61,$65)|0);
 $67 = ($66|0)==(0|0);
 if (!($67)) {
  $$0 = $66;
  STACKTOP = sp;return ($$0|0);
 }
 $68 = (($this) + 1248|0);
 $69 = (+__ZNK9Music_Emu4gainEv($this));
 $70 = $69 * 0.40500000000000003;
 __ZN7Sms_Apu6volumeEd($68,$70);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7Vgm_Emu12start_track_Ei($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN11Classic_Emu12start_track_Ei($this,$track)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (($this) + 1248|0);
 $3 = (__ZNK7Vgm_Emu6headerEv($this)|0);
 $4 = (($3) + 40|0);
 $5 = (__Z8get_le16PKv($4)|0);
 $6 = (($3) + 42|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 __ZN7Sms_Apu5resetEji($2,$5,$8);
 $9 = (($this) + 1172|0);
 HEAP32[$9>>2] = -1;
 $10 = (($this) + 1140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 64|0);
 $13 = (($this) + 1156|0);
 HEAP32[$13>>2] = $12;
 $14 = (($this) + 1160|0);
 HEAP32[$14>>2] = $12;
 $15 = HEAP32[$13>>2]|0;
 $16 = (($this) + 1164|0);
 HEAP32[$16>>2] = $15;
 $17 = (($this) + 1168|0);
 HEAP32[$17>>2] = -1;
 $18 = (($this) + 1152|0);
 HEAP32[$18>>2] = 0;
 $19 = (__ZNK7Vgm_Emu6headerEv($this)|0);
 $20 = (($19) + 8|0);
 $21 = (__Z8get_le32PKv($20)|0);
 $22 = ($21>>>0)>(335);
 if ($22) {
  $23 = (($19) + 52|0);
  $24 = (__Z8get_le32PKv($23)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $26 = (($24) + -12)|0;
   $27 = HEAP32[$13>>2]|0;
   $28 = (($27) + ($26)|0);
   HEAP32[$13>>2] = $28;
  }
 }
 $29 = (($this) + 3425|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $$0 = 0;
  return ($$0|0);
 }
 $32 = (($this) + 1188|0);
 $33 = (__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($32)|0);
 if ($33) {
 }
 $34 = (($this) + 1176|0);
 $35 = (__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($34)|0);
 if ($35) {
  __ZN10Ym2612_Emu5resetEv($34);
 }
 $36 = (($this) + 1128|0);
 HEAP32[$36>>2] = 0;
 $37 = (($this) + 1200|0);
 __ZN11Blip_Buffer5clearEi($37,1);
 $38 = (($this) + 272|0);
 __ZN14Dual_Resampler5clearEv($38);
 $$0 = 0;
 return ($$0|0);
}
function __ZN7Vgm_Emu10run_clocksERii($this,$time_io,$msec) {
 $this = $this|0;
 $time_io = $time_io|0;
 $msec = $msec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 3420|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = Math_imul($1, $msec)|0;
 $3 = (($2|0) / 1000)&-1;
 $4 = (__ZN12Vgm_Emu_Impl12run_commandsEi($this,$3)|0);
 HEAP32[$time_io>>2] = $4;
 $5 = (($this) + 1248|0);
 __ZN7Sms_Apu9end_frameEi($5,$4);
 return (0|0);
}
function __ZN7Vgm_Emu5play_ElPs($this,$count,$out) {
 $this = $this|0;
 $count = $count|0;
 $out = $out|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 3425|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (__ZN11Classic_Emu5play_ElPs($this,$count,$out)|0);
  $$0 = $3;
  return ($$0|0);
 } else {
  $4 = (($this) + 272|0);
  $5 = (($this) + 1200|0);
  __ZN14Dual_Resampler9dual_playElPsR11Blip_Buffer($4,$count,$out,$5);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12Vgm_Emu_ImplC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11Classic_EmuC2Ev($this);
 $0 = (($this) + 272|0);
 __ZN14Dual_ResamplerC2Ev($0);
 HEAP32[$this>>2] = ((49448 + 8|0));
 $1 = (($this) + 272|0);
 HEAP32[$1>>2] = ((49448 + 100|0));
 $2 = (($this) + 1176|0);
 __ZN6Ym_EmuI10Ym2612_EmuEC2Ev($2);
 $3 = (($this) + 1188|0);
 __ZN6Ym_EmuI10Ym2413_EmuEC2Ev($3);
 $4 = (($this) + 1200|0);
 __ZN11Blip_BufferC2Ev($4);
 $5 = (($this) + 1248|0);
 __ZN7Sms_ApuC2Ev($5);
 $6 = (($this) + 2848|0);
 __ZN10Blip_SynthILi8ELi1EEC2Ev($6);
 return;
}
function __ZN12Vgm_Emu_ImplD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((49448 + 8|0));
 $0 = (($this) + 272|0);
 HEAP32[$0>>2] = ((49448 + 100|0));
 $1 = (($this) + 1248|0);
 __ZN7Sms_ApuD2Ev($1);
 $2 = (($this) + 1200|0);
 __ZN11Blip_BufferD2Ev($2);
 $3 = (($this) + 1176|0);
 __ZN10Ym2612_EmuD2Ev($3);
 $4 = (($this) + 272|0);
 __ZN14Dual_ResamplerD2Ev($4);
 __ZN11Classic_EmuD2Ev($this);
 return;
}
function __ZNK7Vgm_Emu6headerEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1140|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZL16check_gd3_headerPKhl($h,$remain) {
 $h = $h|0;
 $remain = $remain|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($remain|0)<(12);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_memcmp($h,49288,4)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (($h) + 4|0);
 $4 = (__Z8get_le32PKv($3)|0);
 $5 = ($4>>>0)>(511);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (($h) + 8|0);
 $7 = (__Z8get_le32PKv($6)|0);
 $8 = (($remain) + -12)|0;
 $9 = ($7|0)>($8|0);
 $$ = $9 ? 0 : $7;
 $$0 = $$;
 return ($$0|0);
}
function __ZL14get_vgm_lengthRKN7Vgm_Emu8header_tEP12track_info_t($h,$out) {
 $h = $h|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($h) + 24|0);
 $1 = (__Z8get_le32PKv($0)|0);
 $2 = ($1*10)|0;
 $3 = (($2>>>0) / 441)&-1;
 $4 = ($2>>>0)>(440);
 if (!($4)) {
  return;
 }
 $5 = (($h) + 32|0);
 $6 = (__Z8get_le32PKv($5)|0);
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = (($h) + 28|0);
  $9 = (__Z8get_le32PKv($8)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = ($6*10)|0;
   $12 = (($11|0) / 441)&-1;
   $13 = (($out) + 12|0);
   HEAP32[$13>>2] = $12;
   $14 = (($3) - ($12))|0;
   $15 = (($out) + 8|0);
   HEAP32[$15>>2] = $14;
   return;
  }
 }
 $16 = (($out) + 4|0);
 HEAP32[$16>>2] = $3;
 $17 = (($out) + 8|0);
 HEAP32[$17>>2] = $3;
 $18 = (($out) + 12|0);
 HEAP32[$18>>2] = 0;
 return;
}
function __ZL9parse_gd3PKhS0_P12track_info_t($in,$end,$out) {
 $in = $in|0;
 $end = $end|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($out) + 528|0);
 $1 = (__ZL12get_gd3_pairPKhS0_Pc($in,$end,$0)|0);
 $2 = (($out) + 272|0);
 $3 = (__ZL12get_gd3_pairPKhS0_Pc($1,$end,$2)|0);
 $4 = (($out) + 16|0);
 $5 = (__ZL12get_gd3_pairPKhS0_Pc($3,$end,$4)|0);
 $6 = (($out) + 784|0);
 $7 = (__ZL12get_gd3_pairPKhS0_Pc($5,$end,$6)|0);
 $8 = (($out) + 1040|0);
 $9 = (__ZL11get_gd3_strPKhS0_Pc($7,$end,$8)|0);
 $10 = (($out) + 1552|0);
 $11 = (__ZL12get_gd3_pairPKhS0_Pc($9,$end,$10)|0);
 $12 = (($out) + 1296|0);
 (__ZL11get_gd3_strPKhS0_Pc($11,$end,$12)|0);
 return;
}
function __ZN10Blip_SynthILi8ELi1EE6outputEP11Blip_Buffer($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $b;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(-1);
 return ($2|0);
}
function __ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(-1);
 return ($2|0);
}
function __ZL16check_vgm_headerRKN7Vgm_Emu8header_tE($h) {
 $h = $h|0;
 var $$ = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($h,49168,4)|0);
 $1 = ($0|0)==(0);
 $$ = $1 ? 0 : 38248;
 return ($$|0);
}
function __ZN6Ym_EmuI10Ym2612_EmuE6enableEb($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $not$b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $not$b = $b ^ 1;
 $0 = $not$b << 31 >> 31;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 return;
}
function __ZN6Ym_EmuI10Ym2413_EmuE6enableEb($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $not$b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $not$b = $b ^ 1;
 $0 = $not$b << 31 >> 31;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 return;
}
function __ZL11new_vgm_emuv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(3432)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN7Vgm_EmuC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZL12new_vgm_filev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8Gme_FilenwEj(328)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 0;
  return ($2|0);
 }
 __ZN8Vgm_FileC2Ev($0);
 $2 = $0;
 return ($2|0);
}
function __ZN8Vgm_FileD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((49176 + 8|0));
 $0 = (($this) + 316|0);
 __ZN13blargg_vectorIhED2Ev($0);
 __ZN9Music_EmuD2Ev($this);
 return;
}
function __ZN8Vgm_FileD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8Vgm_FileD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZN8Vgm_File5load_ER11Data_Reader($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $$0 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gd3_h = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $gd3_h = sp;
 $0 = HEAP32[$in>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 15]($in)|0);
 $4 = ($3|0)<(65);
 if ($4) {
  $$0 = 38248;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$in>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($this) + 252|0);
 $9 = (FUNCTION_TABLE_iiii[$7 & 63]($in,$8,64)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (__ZL16check_vgm_headerRKN7Vgm_Emu8header_tE($8)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($this) + 272|0);
 $14 = (__Z8get_le32PKv($13)|0);
 $15 = (($14) + -44)|0;
 $16 = (($3) + -64)|0;
 $$neg = (44 - ($14))|0;
 $17 = (($16) + ($$neg))|0;
 $18 = ($15|0)>(0);
 $19 = ($17|0)>(11);
 $or$cond = $18 | $19;
 if ($or$cond) {
  $20 = HEAP32[$in>>2]|0;
  $21 = (($20) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_iii[$22 & 63]($in,$15)|0);
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $$0 = $23;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$in>>2]|0;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_iiii[$27 & 63]($in,$gd3_h,12)|0);
  $29 = ($28|0)==(0|0);
  if (!($29)) {
   $$0 = $28;
   STACKTOP = sp;return ($$0|0);
  }
  $30 = (__ZL16check_gd3_headerPKhl($gd3_h,$17)|0);
  $31 = ($30|0)==(0);
  if (!($31)) {
   $32 = (($this) + 316|0);
   $33 = (__ZN13blargg_vectorIhE6resizeEj($32,$30)|0);
   $34 = ($33|0)==(0|0);
   if (!($34)) {
    $$0 = $33;
    STACKTOP = sp;return ($$0|0);
   }
   $35 = HEAP32[$in>>2]|0;
   $36 = (($35) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (__ZNK13blargg_vectorIhE5beginEv($32)|0);
   $39 = (__ZNK13blargg_vectorIhE4sizeEv($32)|0);
   $40 = (FUNCTION_TABLE_iiii[$37 & 63]($in,$38,$39)|0);
   $41 = ($40|0)==(0|0);
   if (!($41)) {
    $$0 = $40;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK8Vgm_File11track_info_EP12track_info_ti($this,$out,$0) {
 $this = $this|0;
 $out = $out|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 252|0);
 __ZL14get_vgm_lengthRKN7Vgm_Emu8header_tEP12track_info_t($1,$out);
 $2 = (($this) + 316|0);
 $3 = (__ZNK13blargg_vectorIhE4sizeEv($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  return (0|0);
 }
 $5 = (__ZNK13blargg_vectorIhE5beginEv($2)|0);
 $6 = (__ZNK13blargg_vectorIhE3endEv($2)|0);
 __ZL9parse_gd3PKhS0_P12track_info_t($5,$6,$out);
 return (0|0);
}
function __ZN6Ym_EmuI10Ym2612_EmuEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10Ym2612_EmuC2Ev($this);
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = -1;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZN6Ym_EmuI10Ym2413_EmuEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = -1;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZL12get_gd3_pairPKhS0_Pc($in,$end,$field) {
 $in = $in|0;
 $end = $end|0;
 $field = $field|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZL11get_gd3_strPKhS0_Pc($in,$end,$field)|0);
 $1 = (__ZL12skip_gd3_strPKhS0_($0,$end)|0);
 return ($1|0);
}
function __ZL11get_gd3_strPKhS0_Pc($in,$end,$field) {
 $in = $in|0;
 $end = $end|0;
 $field = $field|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZL12skip_gd3_strPKhS0_($in,$end)|0);
 $1 = $0;
 $2 = $in;
 $3 = (($1) - ($2))|0;
 $4 = (($3|0) / 2)&-1;
 $5 = (($4) + -1)|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  return ($0|0);
 }
 $7 = (__Z3minIiET_S0_S0_($5,255)|0);
 $8 = (($field) + ($7)|0);
 HEAP8[$8>>0] = 0;
 $9 = ($7|0)>(0);
 if ($9) {
  $i$01 = 0;
 } else {
  return ($0|0);
 }
 while(1) {
  $10 = $i$01 << 1;
  $11 = $10 | 1;
  $12 = (($in) + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(0);
  if ($14) {
   $15 = (($in) + ($10)|0);
   $16 = HEAP8[$15>>0]|0;
   $18 = $16;
  } else {
   $18 = 63;
  }
  $17 = (($field) + ($i$01)|0);
  HEAP8[$17>>0] = $18;
  $19 = (($i$01) + 1)|0;
  $exitcond = ($19|0)==($7|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $19;
  }
 }
 return ($0|0);
}
function __ZN8Vgm_FileC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9Gme_Info_C2Ev($this);
 HEAP32[$this>>2] = ((49176 + 8|0));
 $0 = (($this) + 316|0);
 __ZN13blargg_vectorIhEC2Ev($0);
 __ZN8Gme_File8set_typeEPK11gme_type_t_($this,48880);
 return;
}
function __ZL12skip_gd3_strPKhS0_($in,$end) {
 $in = $in|0;
 $end = $end|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $end;
 $$0 = $in;
 while(1) {
  $1 = $$0;
  $2 = (($0) - ($1))|0;
  $3 = ($2|0)>(1);
  if (!($3)) {
   $$1 = $$0;
   label = 4;
   break;
  }
  $4 = (($$0) + 2|0);
  $5 = HEAP8[$$0>>0]|0;
  $6 = (($$0) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 | $5;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $$1 = $4;
   label = 4;
   break;
  } else {
   $$0 = $4;
  }
 }
 if ((label|0) == 4) {
  return ($$1|0);
 }
 return (0)|0;
}
function __ZN12Vgm_Emu_Impl9write_pcmEii($this,$vgm_time,$amp) {
 $this = $this|0;
 $vgm_time = $vgm_time|0;
 $amp = $amp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$vgm_time)|0);
 $1 = (($this) + 1168|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = $amp;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (($amp) - ($2))|0;
  $5 = (($this) + 2848|0);
  $6 = (($this) + 1200|0);
  __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($5,$0,$4,$6);
  return;
 } else {
  $7 = (($this) + 1172|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 | $amp;
  HEAP32[$1>>2] = $9;
  return;
 }
}
function __ZN12Vgm_Emu_Impl12run_commandsEi($this,$end_time) {
 $this = $this|0;
 $end_time = $end_time|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pos$0$be = 0, $pos$0$lcssa = 0, $pos$05 = 0, $vgm_time$0$be = 0, $vgm_time$0$lcssa = 0, $vgm_time$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 1156|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 1148|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if (!($6)) {
  __ZN9Music_Emu15set_track_endedEv($this);
  $7 = HEAP32[$4>>2]|0;
  $8 = ($3>>>0)>($7>>>0);
  if ($8) {
   __ZN8Gme_File11set_warningEPKc($this,49296);
  }
 }
 $9 = ($1|0)<($end_time|0);
 if (!($9)) {
  $pos$0$lcssa = $3;$vgm_time$0$lcssa = $1;
  $125 = (($vgm_time$0$lcssa) - ($end_time))|0;
  HEAP32[$2>>2] = $pos$0$lcssa;
  HEAP32[$0>>2] = $125;
  $126 = (__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$end_time)|0);
  return ($126|0);
 }
 $10 = (($this) + 1164|0);
 $11 = (($this) + 1144|0);
 $12 = (($this) + 1248|0);
 $13 = (($this) + 1248|0);
 $14 = (($this) + 1188|0);
 $15 = (($this) + 1176|0);
 $16 = (($this) + 1172|0);
 $17 = (($this) + 1168|0);
 $18 = (($this) + 1176|0);
 $19 = (($this) + 1160|0);
 $20 = (($this) + 1160|0);
 $21 = (($this) + 1164|0);
 $pos$05 = $3;$vgm_time$07 = $1;
 while(1) {
  $22 = HEAP32[$4>>2]|0;
  $23 = ($pos$05>>>0)<($22>>>0);
  if (!($23)) {
   $pos$0$lcssa = $pos$05;$vgm_time$0$lcssa = $vgm_time$07;
   label = 38;
   break;
  }
  $24 = (($pos$05) + 1|0);
  $25 = HEAP8[$pos$05>>0]|0;
  $26 = $25&255;
  L11: do {
   switch ($26|0) {
   case 103:  {
    $87 = (($pos$05) + 2|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = (($pos$05) + 3|0);
    $90 = (__Z8get_le32PKv($89)|0);
    $91 = ($88<<24>>24)==(0);
    if ($91) {
     $92 = (($pos$05) + 7|0);
     HEAP32[$19>>2] = $92;
    }
    $$sum3 = (($90) + 7)|0;
    $93 = (($pos$05) + ($$sum3)|0);
    $pos$0$be = $93;$vgm_time$0$be = $vgm_time$07;
    break;
   }
   case 83:  {
    $78 = (__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time$07)|0);
    $79 = (__ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($18,$78)|0);
    $80 = ($79|0)==(0);
    if (!($80)) {
     $81 = HEAP8[$24>>0]|0;
     $82 = $81&255;
     $83 = (($pos$05) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     __ZN10Ym2612_Emu6write1Eii($18,$82,$85);
    }
    $86 = (($pos$05) + 3|0);
    $pos$0$be = $86;$vgm_time$0$be = $vgm_time$07;
    break;
   }
   case 81:  {
    $51 = (__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time$07)|0);
    $52 = (__ZN6Ym_EmuI10Ym2413_EmuE9run_untilEi($14,$51)|0);
    $53 = ($52|0)==(0);
    if (!($53)) {
    }
    $54 = (($pos$05) + 3|0);
    $pos$0$be = $54;$vgm_time$0$be = $vgm_time$07;
    break;
   }
   case 224:  {
    $94 = HEAP32[$20>>2]|0;
    $95 = (($pos$05) + 4|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 << 24;
    $99 = (($pos$05) + 3|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $102 = $101 << 16;
    $$sum = $102 | $98;
    $103 = (($pos$05) + 2|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = $105 << 8;
    $$sum1 = $$sum | $106;
    $107 = HEAP8[$24>>0]|0;
    $108 = $107&255;
    $$sum2 = $$sum1 | $108;
    $109 = (($94) + ($$sum2)|0);
    HEAP32[$21>>2] = $109;
    $110 = (($pos$05) + 5|0);
    $pos$0$be = $110;$vgm_time$0$be = $vgm_time$07;
    break;
   }
   case 100:  {
    $47 = (($pos$05) + 2|0);
    $48 = HEAP8[$24>>0]|0;
    $49 = $48&255;
    $50 = (($49) + ($vgm_time$07))|0;
    $pos$0$be = $47;$vgm_time$0$be = $50;
    break;
   }
   case 79:  {
    $30 = (__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$vgm_time$07)|0);
    $31 = (($pos$05) + 2|0);
    $32 = HEAP8[$24>>0]|0;
    $33 = $32&255;
    __ZN7Sms_Apu14write_ggstereoEii($12,$30,$33);
    $pos$0$be = $31;$vgm_time$0$be = $vgm_time$07;
    break;
   }
   case 82:  {
    $55 = HEAP8[$24>>0]|0;
    $56 = ($55<<24>>24)==(42);
    if ($56) {
     $57 = (($pos$05) + 2|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     __ZN12Vgm_Emu_Impl9write_pcmEii($this,$vgm_time$07,$59);
    } else {
     $60 = (__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time$07)|0);
     $61 = (__ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($15,$60)|0);
     $62 = ($61|0)==(0);
     if (!($62)) {
      $63 = HEAP8[$24>>0]|0;
      $64 = ($63<<24>>24)==(43);
      if ($64) {
       $65 = (($pos$05) + 2|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = $66&255;
       $68 = $67 >>> 7;
       $69 = (($68) + -1)|0;
       HEAP32[$16>>2] = $69;
       $70 = HEAP32[$17>>2]|0;
       $71 = $69 | $70;
       HEAP32[$17>>2] = $71;
      }
      $72 = HEAP8[$24>>0]|0;
      $73 = $72&255;
      $74 = (($pos$05) + 2|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = $75&255;
      __ZN10Ym2612_Emu6write0Eii($15,$73,$76);
     }
    }
    $77 = (($pos$05) + 3|0);
    $pos$0$be = $77;$vgm_time$0$be = $vgm_time$07;
    break;
   }
   case 102:  {
    $27 = HEAP32[$11>>2]|0;
    $pos$0$be = $27;$vgm_time$0$be = $vgm_time$07;
    break;
   }
   case 80:  {
    $34 = (__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$vgm_time$07)|0);
    $35 = (($pos$05) + 2|0);
    $36 = HEAP8[$24>>0]|0;
    $37 = $36&255;
    __ZN7Sms_Apu10write_dataEii($13,$34,$37);
    $pos$0$be = $35;$vgm_time$0$be = $vgm_time$07;
    break;
   }
   case 99:  {
    $29 = (($vgm_time$07) + 882)|0;
    $pos$0$be = $24;$vgm_time$0$be = $29;
    break;
   }
   case 97:  {
    $38 = (($pos$05) + 2|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = $40 << 8;
    $42 = HEAP8[$24>>0]|0;
    $43 = $42&255;
    $44 = $41 | $43;
    $45 = (($44) + ($vgm_time$07))|0;
    $46 = (($pos$05) + 3|0);
    $pos$0$be = $46;$vgm_time$0$be = $45;
    break;
   }
   case 98:  {
    $28 = (($vgm_time$07) + 735)|0;
    $pos$0$be = $24;$vgm_time$0$be = $28;
    break;
   }
   default: {
    $111 = $26 & 240;
    if ((($111|0) == 128)) {
     $112 = HEAP32[$10>>2]|0;
     $113 = (($112) + 1|0);
     HEAP32[$10>>2] = $113;
     $114 = HEAP8[$112>>0]|0;
     $115 = $114&255;
     __ZN12Vgm_Emu_Impl9write_pcmEii($this,$vgm_time$07,$115);
     $116 = $26 & 15;
     $117 = (($116) + ($vgm_time$07))|0;
     $pos$0$be = $24;$vgm_time$0$be = $117;
     break L11;
    } else if ((($111|0) == 112)) {
     $119 = $26 & 15;
     $120 = (($vgm_time$07) + 1)|0;
     $121 = (($120) + ($119))|0;
     $pos$0$be = $24;$vgm_time$0$be = $121;
     break L11;
    } else if ((($111|0) == 80)) {
     $122 = (($pos$05) + 3|0);
     $pos$0$be = $122;$vgm_time$0$be = $vgm_time$07;
     break L11;
    } else {
     $123 = (__Z11command_leni($26)|0);
     $124 = (($pos$05) + ($123)|0);
     __ZN8Gme_File11set_warningEPKc($this,49320);
     $pos$0$be = $124;$vgm_time$0$be = $vgm_time$07;
     break L11;
    }
   }
   }
  } while(0);
  $118 = ($vgm_time$0$be|0)<($end_time|0);
  if ($118) {
   $pos$05 = $pos$0$be;$vgm_time$07 = $vgm_time$0$be;
  } else {
   $pos$0$lcssa = $pos$0$be;$vgm_time$0$lcssa = $vgm_time$0$be;
   label = 38;
   break;
  }
 }
 if ((label|0) == 38) {
  $125 = (($vgm_time$0$lcssa) - ($end_time))|0;
  HEAP32[$2>>2] = $pos$0$lcssa;
  HEAP32[$0>>2] = $125;
  $126 = (__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$end_time)|0);
  return ($126|0);
 }
 return (0)|0;
}
function __ZN12Vgm_Emu_Impl10play_frameEiiPs($this,$blip_time,$sample_count,$buf) {
 $this = $this|0;
 $blip_time = $blip_time|0;
 $sample_count = $sample_count|0;
 $buf = $buf|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vgm_time$0 = 0, $vgm_time$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $sample_count >> 1;
 $1 = $0 << 12;
 $2 = (($this) + 1132|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1|0) / ($3|0))&-1;
 $5 = (($4) + -1)|0;
 $6 = (__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$5)|0);
 $7 = ($6|0)>($0|0);
 if ($7) {
  ___assert_fail((49344|0),(49384|0),243,(49432|0));
  // unreachable;
 } else {
  $vgm_time$0 = $5;
 }
 while(1) {
  $8 = (__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time$0)|0);
  $9 = ($8|0)<($0|0);
  $10 = (($vgm_time$0) + 1)|0;
  if ($9) {
   $vgm_time$0 = $10;
  } else {
   $$lcssa = $8;$vgm_time$0$lcssa = $vgm_time$0;
   break;
  }
 }
 $11 = (($this) + 1176|0);
 $12 = (__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($11)|0);
 if ($12) {
  __ZN6Ym_EmuI10Ym2612_EmuE11begin_frameEPs($11,$buf);
  $13 = $$lcssa << 2;
  _memset(($buf|0),0,($13|0))|0;
 } else {
  $14 = (($this) + 1188|0);
  $15 = (__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($14)|0);
  if ($15) {
   __ZN6Ym_EmuI10Ym2413_EmuE11begin_frameEPs($14,$buf);
  }
 }
 (__ZN12Vgm_Emu_Impl12run_commandsEi($this,$vgm_time$0$lcssa)|0);
 (__ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($11,$$lcssa)|0);
 $16 = (($this) + 1188|0);
 (__ZN6Ym_EmuI10Ym2413_EmuE9run_untilEi($16,$$lcssa)|0);
 $17 = HEAP32[$2>>2]|0;
 $18 = Math_imul($17, $vgm_time$0$lcssa)|0;
 $19 = (($this) + 1128|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $$lcssa << 12;
 $22 = (($20) - ($21))|0;
 $23 = (($22) + ($18))|0;
 HEAP32[$19>>2] = $23;
 $24 = (($this) + 1248|0);
 __ZN7Sms_Apu9end_frameEi($24,$blip_time);
 $25 = $$lcssa << 1;
 return ($25|0);
}
function __ZThn272_N12Vgm_Emu_Impl10play_frameEiiPs($this,$blip_time,$sample_count,$buf) {
 $this = $this|0;
 $blip_time = $blip_time|0;
 $sample_count = $sample_count|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -272|0);
 $1 = (__ZN12Vgm_Emu_Impl10play_frameEiiPs($0,$blip_time,$sample_count,$buf)|0);
 return ($1|0);
}
function __ZNK12Vgm_Emu_Impl15update_fm_ratesEPlS0_($this,$ym2413_rate,$ym2612_rate) {
 $this = $this|0;
 $ym2413_rate = $ym2413_rate|0;
 $ym2612_rate = $ym2612_rate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$be = 0;
 var $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1140|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 64|0);
 $3 = (($this) + 1148|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  $p$01 = $2;
 } else {
  return;
 }
 L3: while(1) {
  $6 = HEAP8[$p$01>>0]|0;
  $7 = $6&255;
  switch ($7|0) {
  case 97:  {
   $9 = (($p$01) + 3|0);
   $p$0$be = $9;
   break;
  }
  case 100: case 80:  {
   $8 = (($p$01) + 2|0);
   $p$0$be = $8;
   break;
  }
  case 103:  {
   $10 = (($p$01) + 3|0);
   $11 = (__Z8get_le32PKv($10)|0);
   $12 = (($11) + 7)|0;
   $13 = (($p$01) + ($12)|0);
   $p$0$be = $13;
   break;
  }
  case 83: case 82:  {
   label = 7;
   break L3;
   break;
  }
  case 84:  {
   label = 8;
   break L3;
   break;
  }
  case 81:  {
   label = 6;
   break L3;
   break;
  }
  case 102:  {
   label = 11;
   break L3;
   break;
  }
  default: {
   $15 = (__Z11command_leni($7)|0);
   $16 = (($p$01) + ($15)|0);
   $p$0$be = $16;
  }
  }
  $17 = HEAP32[$3>>2]|0;
  $18 = ($p$0$be>>>0)<($17>>>0);
  if ($18) {
   $p$01 = $p$0$be;
  } else {
   label = 11;
   break;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$ym2612_rate>>2] = 0;
  return;
 }
 else if ((label|0) == 7) {
  $14 = HEAP32[$ym2413_rate>>2]|0;
  HEAP32[$ym2612_rate>>2] = $14;
  HEAP32[$ym2413_rate>>2] = 0;
  return;
 }
 else if ((label|0) == 8) {
  HEAP32[$ym2413_rate>>2] = 0;
  HEAP32[$ym2612_rate>>2] = 0;
  return;
 }
 else if ((label|0) == 11) {
  return;
 }
}
function __ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1136|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = Math_imul($1, $t)|0;
 $3 = $2 >> 12;
 return ($3|0);
}
function __ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 1132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = Math_imul($1, $t)|0;
 $3 = (($this) + 1128|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4))|0;
 $6 = $5 >> 12;
 return ($6|0);
}
function __ZN6Ym_EmuI10Ym2413_EmuE9run_untilEi($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($time) - ($1))|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ($1|0)<(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = $time;
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2 << 1;
 $8 = (($6) + ($7<<1)|0);
 HEAP32[$5>>2] = $8;
 $$0 = 1;
 return ($$0|0);
}
function __ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($this,$time) {
 $this = $this|0;
 $time = $time|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($time) - ($1))|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ($1|0)<(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = $time;
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2 << 1;
 $8 = (($6) + ($7<<1)|0);
 HEAP32[$5>>2] = $8;
 __ZN10Ym2612_Emu3runEiPs($this,$2,$6);
 $$0 = 1;
 return ($$0|0);
}
function __Z11command_leni($command) {
 $command = $command|0;
 var $$0 = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $command >> 4;
 switch ($0|0) {
 case 13: case 12:  {
  $$0 = 4;
  break;
 }
 case 15: case 14:  {
  $$0 = 5;
  break;
 }
 case 11: case 10: case 5:  {
  $$0 = 3;
  break;
 }
 case 4: case 3:  {
  $$0 = 2;
  break;
 }
 default: {
  $$0 = 1;
 }
 }
 return ($$0|0);
}
function __ZN6Ym_EmuI10Ym2612_EmuE11begin_frameEPs($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($this)|0);
 if ($0) {
  $1 = (($this) + 8|0);
  HEAP32[$1>>2] = $p;
  $2 = (($this) + 4|0);
  HEAP32[$2>>2] = 0;
  return;
 } else {
  ___assert_fail((49608|0),(49384|0),72,(49624|0));
  // unreachable;
 }
}
function __ZN6Ym_EmuI10Ym2413_EmuE11begin_frameEPs($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($this)|0);
 if ($0) {
  $1 = (($this) + 8|0);
  HEAP32[$1>>2] = $p;
  $2 = (($this) + 4|0);
  HEAP32[$2>>2] = 0;
  return;
 } else {
  ___assert_fail((49608|0),(49384|0),72,(49624|0));
  // unreachable;
 }
}
function __ZN12Vgm_Emu_ImplD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12Vgm_Emu_ImplD2Ev($this);
 __ZN8Gme_FiledlEPv($this);
 return;
}
function __ZThn272_N12Vgm_Emu_ImplD1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -272|0);
 __ZN12Vgm_Emu_ImplD2Ev($0);
 return;
}
function __ZThn272_N12Vgm_Emu_ImplD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -272|0);
 __ZN12Vgm_Emu_ImplD0Ev($0);
 return;
}
function __ZN10Ym2413_EmuC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Ym2413_EmuD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Ym2413_Emu8set_rateEdd($this,$0,$1) {
 $this = $this|0;
 $0 = +$0;
 $1 = +$1;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10Ym2413_Emu5resetEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Ym2413_Emu5writeEii($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Ym2413_Emu11mute_voicesEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10Ym2413_Emu3runEiPs($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$ch,$nsl) {
 $this = $this|0;
 $ch = $ch|0;
 $nsl = $nsl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($ch) + (($nsl*116)|0)|0) + 152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if (!($2)) {
  return;
 }
 $3 = ((($ch) + (($nsl*116)|0)|0) + 144|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($ch) + (($nsl*116)|0)|0) + 156|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 16;
 $7 = ((($this) + ($6<<1)|0) + 15772|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ((($this) + ($9<<2)|0) + 134572|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($ch) + (($nsl*116)|0)|0) + 192|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & $11;
 HEAP32[$4>>2] = $14;
 HEAP32[$12>>2] = -1;
 $15 = ((($ch) + (($nsl*116)|0)|0) + 168|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($ch) + (($nsl*116)|0)|0) + 160|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($ch) + (($nsl*116)|0)|0) + 164|0);
 HEAP32[$18>>2] = 268435456;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$ch,$nsl) {
 $this = $this|0;
 $ch = $ch|0;
 $nsl = $nsl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ch) + (($nsl*116)|0)|0) + 152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  return;
 }
 $3 = ((($ch) + (($nsl*116)|0)|0) + 156|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(268435456);
 if ($5) {
  $6 = $4 >> 16;
  $7 = ((($this) + ($6<<1)|0) + 15772|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = $9 << 16;
  $11 = (($10) + 268435456)|0;
  HEAP32[$3>>2] = $11;
 }
 $12 = ((($ch) + (($nsl*116)|0)|0) + 180|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($ch) + (($nsl*116)|0)|0) + 160|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($ch) + (($nsl*116)|0)|0) + 164|0);
 HEAP32[$15>>2] = 536870912;
 HEAP32[$0>>2] = 3;
 return;
}
function __ZN11Ym2612_Impl8SLOT_SETEii($this,$Adr,$data) {
 $this = $this|0;
 $Adr = $Adr|0;
 $data = $data|0;
 var $$ = 0, $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $Adr & 3;
 $1 = ($0|0)==(3);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = $Adr & 256;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 3 : 0;
 $5 = (($4) + ($0))|0;
 $6 = $Adr >>> 2;
 $7 = $6 & 3;
 $8 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 128|0);
 $9 = $Adr & 240;
 switch ($9|0) {
 case 48:  {
  $10 = $data & 15;
  $11 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 132|0);
  $12 = ($10|0)==(0);
  $13 = $10 << 1;
  $storemerge = $12 ? 1 : $13;
  HEAP32[$11>>2] = $storemerge;
  $14 = $data >>> 4;
  $15 = $14 & 7;
  $16 = ((($this) + ($15<<7)|0) + 14524|0);
  HEAP32[$8>>2] = $16;
  $17 = ((($this) + (($5*556)|0)|0) + 188|0);
  HEAP32[$17>>2] = -1;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 64:  {
  $18 = $data & 127;
  $19 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 136|0);
  HEAP32[$19>>2] = $18;
  $20 = $18 << 5;
  $21 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 140|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 144:  {
  $111 = $data & 8;
  $112 = ($111|0)==(0);
  $113 = $data & 15;
  $$ = $112 ? 0 : $113;
  __Z7set_segR6slot_ti($8,$$);
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 128:  {
  $90 = $data >> 4;
  $91 = ((($this) + ($90<<2)|0) + 15548|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 144|0);
  HEAP32[$93>>2] = $92;
  $94 = $data << 2;
  $95 = $94 & 60;
  $96 = $95 | 2;
  $97 = ((($this) + ($96<<2)|0) + 14140|0);
  $98 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 180|0);
  HEAP32[$98>>2] = $97;
  $99 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 152|0);
  $100 = HEAP32[$99>>2]|0;
  $$sum = (($100) + ($96))|0;
  $101 = ((($this) + ($$sum<<2)|0) + 14140|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 220|0);
  HEAP32[$103>>2] = $102;
  $104 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 192|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)==(3);
  if (!($106)) {
   $$0 = 0;
   return ($$0|0);
  }
  $107 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 196|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)<(536870912);
  if (!($109)) {
   $$0 = 0;
   return ($$0|0);
  }
  $110 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 200|0);
  HEAP32[$110>>2] = $102;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 80:  {
  $22 = $data >> 6;
  $23 = (3 - ($22))|0;
  $24 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 148|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($this) + (($5*556)|0)|0) + 188|0);
  HEAP32[$25>>2] = -1;
  $26 = $data & 31;
  $27 = ($26|0)==(0);
  if ($27) {
   $31 = (($this) + 15612|0);
   $32 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 168|0);
   HEAP32[$32>>2] = $31;
  } else {
   $28 = $26 << 1;
   $29 = ((($this) + ($28<<2)|0) + 13628|0);
   $30 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 168|0);
   HEAP32[$30>>2] = $29;
  }
  $33 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 152|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 168|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($34<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 208|0);
  HEAP32[$39>>2] = $38;
  $40 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 192|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0);
  if (!($42)) {
   $$0 = 0;
   return ($$0|0);
  }
  $43 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 200|0);
  HEAP32[$43>>2] = $38;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 112:  {
  $69 = $data & 31;
  $70 = ($69|0)==(0);
  if ($70) {
   $74 = (($this) + 15612|0);
   $75 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 176|0);
   HEAP32[$75>>2] = $74;
  } else {
   $71 = $69 << 1;
   $72 = ((($this) + ($71<<2)|0) + 14140|0);
   $73 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 176|0);
   HEAP32[$73>>2] = $72;
  }
  $76 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 152|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 176|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + ($77<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 216|0);
  HEAP32[$82>>2] = $81;
  $83 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 192|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)==(2);
  if (!($85)) {
   $$0 = 0;
   return ($$0|0);
  }
  $86 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 196|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)<(536870912);
  if (!($88)) {
   $$0 = 0;
   return ($$0|0);
  }
  $89 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 200|0);
  HEAP32[$89>>2] = $81;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 96:  {
  $44 = $data & 128;
  $45 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 240|0);
  HEAP32[$45>>2] = $44;
  $46 = ($44|0)==(0);
  if ($46) {
   $50 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 236|0);
   HEAP32[$50>>2] = 31;
  } else {
   $47 = ((($this) + (($5*556)|0)|0) + 76|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 236|0);
   HEAP32[$49>>2] = $48;
  }
  $51 = $data & 31;
  $52 = ($51|0)==(0);
  if ($52) {
   $56 = (($this) + 15612|0);
   $57 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 172|0);
   HEAP32[$57>>2] = $56;
  } else {
   $53 = $51 << 1;
   $54 = ((($this) + ($53<<2)|0) + 14140|0);
   $55 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 172|0);
   HEAP32[$55>>2] = $54;
  }
  $58 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 152|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 172|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($59<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 212|0);
  HEAP32[$64>>2] = $63;
  $65 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 192|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(1);
  if (!($67)) {
   $$0 = 0;
   return ($$0|0);
  }
  $68 = (((($this) + (($5*556)|0)|0) + (($7*116)|0)|0) + 200|0);
  HEAP32[$68>>2] = $63;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN11Ym2612_Impl11CHANNEL_SETEii($this,$Adr,$data) {
 $this = $this|0;
 $Adr = $Adr|0;
 $data = $data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $Adr & 3;
 $1 = ($0|0)==(3);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = $Adr & 256;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 3 : 0;
 $5 = (($4) + ($0))|0;
 $6 = $Adr & 252;
 switch ($6|0) {
 case 160:  {
  $7 = ((($this) + (($5*556)|0)|0) + 80|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 1792;
  $10 = (($9) + ($data))|0;
  HEAP32[$7>>2] = $10;
  $11 = ((($this) + (($5*556)|0)|0) + 96|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 << 2;
  $14 = $10 >> 7;
  $15 = (49640 + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 | $13;
  $19 = ((($this) + (($5*556)|0)|0) + 112|0);
  HEAP32[$19>>2] = $18;
  $20 = ((($this) + (($5*556)|0)|0) + 188|0);
  HEAP32[$20>>2] = -1;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 176:  {
  $75 = ((($this) + (($5*556)|0)|0) + 64|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $data & 7;
  $78 = ($76|0)==($77|0);
  if (!($78)) {
   HEAP32[$75>>2] = $77;
   $79 = ((($this) + (($5*556)|0)|0) + 232|0);
   HEAP32[$79>>2] = 0;
   $80 = ((($this) + (($5*556)|0)|0) + 348|0);
   HEAP32[$80>>2] = 0;
   $81 = ((($this) + (($5*556)|0)|0) + 464|0);
   HEAP32[$81>>2] = 0;
   $82 = ((($this) + (($5*556)|0)|0) + 580|0);
   HEAP32[$82>>2] = 0;
  }
  $83 = $data >>> 3;
  $84 = $83 & 7;
  $85 = (9 - ($84))|0;
  $86 = ((($this) + (($5*556)|0)|0) + 68|0);
  HEAP32[$86>>2] = $85;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 172:  {
  $55 = ($Adr|0)<(256);
  if (!($55)) {
   $$0 = 0;
   return ($$0|0);
  }
  $56 = (($0) + 1)|0;
  $57 = ((($this) + ($56<<2)|0) + 1192|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58 & 255;
  $60 = $data << 8;
  $61 = $60 & 1792;
  $62 = $59 | $61;
  HEAP32[$57>>2] = $62;
  $63 = $data >>> 3;
  $64 = $63 & 7;
  $65 = ((($this) + ($56<<2)|0) + 1208|0);
  HEAP32[$65>>2] = $64;
  $66 = $64 << 2;
  $67 = HEAP32[$57>>2]|0;
  $68 = $67 >> 7;
  $69 = (49640 + ($68)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71 | $66;
  $73 = ((($this) + ($56<<2)|0) + 1224|0);
  HEAP32[$73>>2] = $72;
  $74 = (($this) + 1300|0);
  HEAP32[$74>>2] = -1;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 168:  {
  $39 = ($Adr|0)<(256);
  if (!($39)) {
   $$0 = 0;
   return ($$0|0);
  }
  $40 = (($0) + 1)|0;
  $41 = ((($this) + ($40<<2)|0) + 1192|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & 1792;
  $44 = (($43) + ($data))|0;
  HEAP32[$41>>2] = $44;
  $45 = ((($this) + ($40<<2)|0) + 1208|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $46 << 2;
  $48 = $44 >> 7;
  $49 = (49640 + ($48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51 | $47;
  $53 = ((($this) + ($40<<2)|0) + 1224|0);
  HEAP32[$53>>2] = $52;
  $54 = (($this) + 1300|0);
  HEAP32[$54>>2] = -1;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 180:  {
  $87 = $data >>> 7;
  $88 = $87 & 1;
  $89 = (0 - ($88))|0;
  $90 = ((($this) + (($5*556)|0)|0) + 56|0);
  HEAP32[$90>>2] = $89;
  $91 = $data >>> 6;
  $92 = $91 & 1;
  $93 = (0 - ($92))|0;
  $94 = ((($this) + (($5*556)|0)|0) + 60|0);
  HEAP32[$94>>2] = $93;
  $95 = $data >>> 4;
  $96 = $95 & 3;
  $97 = (49656 + ($96)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = ((($this) + (($5*556)|0)|0) + 76|0);
  HEAP32[$100>>2] = $99;
  $101 = $data & 7;
  $102 = (49664 + ($101)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = ((($this) + (($5*556)|0)|0) + 72|0);
  HEAP32[$105>>2] = $104;
  $106 = ((($this) + (($5*556)|0)|0) + 240|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)==(0);
  if ($108) {
   $111 = 31;
  } else {
   $109 = HEAP32[$100>>2]|0;
   $111 = $109;
  }
  $110 = ((($this) + (($5*556)|0)|0) + 236|0);
  HEAP32[$110>>2] = $111;
  $112 = ((($this) + (($5*556)|0)|0) + 356|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($113|0)==(0);
  if ($114) {
   $117 = 31;
  } else {
   $115 = HEAP32[$100>>2]|0;
   $117 = $115;
  }
  $116 = ((($this) + (($5*556)|0)|0) + 352|0);
  HEAP32[$116>>2] = $117;
  $118 = ((($this) + (($5*556)|0)|0) + 472|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==(0);
  if ($120) {
   $123 = 31;
  } else {
   $121 = HEAP32[$100>>2]|0;
   $123 = $121;
  }
  $122 = ((($this) + (($5*556)|0)|0) + 468|0);
  HEAP32[$122>>2] = $123;
  $124 = ((($this) + (($5*556)|0)|0) + 588|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)==(0);
  if ($126) {
   $129 = 31;
  } else {
   $127 = HEAP32[$100>>2]|0;
   $129 = $127;
  }
  $128 = ((($this) + (($5*556)|0)|0) + 584|0);
  HEAP32[$128>>2] = $129;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 164:  {
  $21 = ((($this) + (($5*556)|0)|0) + 80|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 255;
  $24 = $data << 8;
  $25 = $24 & 1792;
  $26 = $23 | $25;
  HEAP32[$21>>2] = $26;
  $27 = $data >>> 3;
  $28 = $27 & 7;
  $29 = ((($this) + (($5*556)|0)|0) + 96|0);
  HEAP32[$29>>2] = $28;
  $30 = $28 << 2;
  $31 = HEAP32[$21>>2]|0;
  $32 = $31 >> 7;
  $33 = (49640 + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35 | $30;
  $37 = ((($this) + (($5*556)|0)|0) + 112|0);
  HEAP32[$37>>2] = $36;
  $38 = ((($this) + (($5*556)|0)|0) + 188|0);
  HEAP32[$38>>2] = -1;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN11Ym2612_Impl6YM_SETEii($this,$Adr,$data) {
 $this = $this|0;
 $Adr = $Adr|0;
 $data = $data|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($Adr|0) {
 case 34:  {
  $0 = $data & 8;
  $1 = ($0|0)==(0);
  if ($1) {
   $6 = (($this) + 13620|0);
   HEAP32[$6>>2] = 0;
   $7 = (($this) + 13624|0);
   HEAP32[$7>>2] = 0;
   $$0 = 0;
   return ($$0|0);
  } else {
   $2 = $data & 7;
   $3 = ((($this) + ($2<<2)|0) + 15740|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($this) + 13624|0);
   HEAP32[$5>>2] = $4;
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 40:  {
  $50 = $data & 3;
  $51 = ($50|0)==(3);
  if ($51) {
   $$0 = 1;
   return ($$0|0);
  }
  $52 = $data & 4;
  $53 = ($52|0)==(0);
  $54 = (($50) + 3)|0;
  $$ = $53 ? $50 : $54;
  $55 = ((($this) + (($$*556)|0)|0) + 40|0);
  $56 = $data & 16;
  $57 = ($56|0)==(0);
  if ($57) {
   __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$55,0);
  } else {
   __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$55,0);
  }
  $58 = $data & 32;
  $59 = ($58|0)==(0);
  if ($59) {
   __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$55,2);
  } else {
   __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$55,2);
  }
  $60 = $data & 64;
  $61 = ($60|0)==(0);
  if ($61) {
   __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$55,1);
  } else {
   __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$55,1);
  }
  $62 = $data & 128;
  $63 = ($62|0)==(0);
  if ($63) {
   __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$55,3);
   $$0 = 0;
   return ($$0|0);
  } else {
   __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$55,3);
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 39:  {
  $37 = (($this) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 ^ $data;
  $40 = $39 & 64;
  $41 = ($40|0)==(0);
  if (!($41)) {
   $42 = (($this) + 1300|0);
   HEAP32[$42>>2] = -1;
  }
  $43 = $data ^ -16;
  $44 = $43 >> 4;
  $45 = $data >> 2;
  $46 = $44 & $45;
  $47 = (($this) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $46 & $48;
  HEAP32[$47>>2] = $49;
  HEAP32[$37>>2] = $data;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 37:  {
  $19 = (($this) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 1020;
  $22 = $data & 3;
  $23 = $21 | $22;
  HEAP32[$19>>2] = $23;
  $24 = (($this) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (1024 - ($23))|0;
  $27 = $26 << 12;
  $28 = ($25|0)==($27|0);
  if ($28) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$24>>2] = $27;
  $29 = (($this) + 16|0);
  HEAP32[$29>>2] = $27;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 43:  {
  $64 = (($this) + 36|0);
  $65 = $data & 128;
  HEAP32[$64>>2] = $65;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 36:  {
  $8 = (($this) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 3;
  $11 = $data << 2;
  $12 = $10 | $11;
  HEAP32[$8>>2] = $12;
  $13 = (($this) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (1024 - ($12))|0;
  $16 = $15 << 12;
  $17 = ($14|0)==($16|0);
  if ($17) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$13>>2] = $16;
  $18 = (($this) + 16|0);
  HEAP32[$18>>2] = $16;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 38:  {
  $30 = (($this) + 20|0);
  HEAP32[$30>>2] = $data;
  $31 = (($this) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (256 - ($data))|0;
  $34 = $33 << 16;
  $35 = ($32|0)==($34|0);
  if ($35) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$31>>2] = $34;
  $36 = (($this) + 28|0);
  HEAP32[$36>>2] = $34;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN11Ym2612_Impl8set_rateEdd($this,$sample_rate,$clock_rate) {
 $this = $this|0;
 $sample_rate = +$sample_rate;
 $clock_rate = +$clock_rate;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0;
 var $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0;
 var $151 = 0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0.0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $Frequence$0 = 0.0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond$3 = 0, $exitcond37 = 0, $exitcond40 = 0, $exitcond47 = 0, $exitcond48 = 0, $exitcond49 = 0, $exitcond53 = 0, $exitcond54 = 0, $exitcond55 = 0, $exitcond56 = 0;
 var $i$028 = 0, $i$1014 = 0, $i$127 = 0, $i$226 = 0, $i$325 = 0, $i$523 = 0, $i$618 = 0, $i$717 = 0, $i$915 = 0, $j4$022 = 0, $j4$1$lcssa = 0, $j4$119 = 0, $j8$011 = 0, $j8$011$1 = 0, $j8$011$2 = 0, $j8$011$3 = 0, $scevgep = 0, $scevgep51 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = $sample_rate != 0.0;
 if (!($0)) {
  ___assert_fail((49672|0),(49688|0),633,(49736|0));
  // unreachable;
 }
 $1 = $clock_rate > $sample_rate;
 if (!($1)) {
  ___assert_fail((49752|0),(49688|0),634,(49736|0));
  // unreachable;
 }
 $2 = $clock_rate / $sample_rate;
 $3 = $2 / 144.0;
 $4 = $3 + -1.0;
 $5 = (+Math_abs((+$4)));
 $6 = $5 < 9.9999999999999995E-8;
 $Frequence$0 = $6 ? 1.0 : $3;
 $7 = $Frequence$0 * 4096.0;
 $8 = (~~(($7)));
 HEAP32[$this>>2] = $8;
 $i$028 = 0;
 while(1) {
  $9 = ($i$028|0)>(3327);
  if ($9) {
   $10 = ((($this) + ($i$028<<2)|0) + 36268|0);
   HEAP32[$10>>2] = 0;
   $11 = (($i$028) + 12288)|0;
   $12 = ((($this) + ($11<<2)|0) + 36268|0);
   HEAP32[$12>>2] = 0;
  } else {
   $13 = (+($i$028|0));
   $14 = $13 * 0.0234375;
   $15 = $14 / 20.0;
   $16 = (+Math_pow(10.0,(+$15)));
   $17 = 268435455.0 / $16;
   $18 = (~~(($17)));
   $19 = ((($this) + ($i$028<<2)|0) + 36268|0);
   HEAP32[$19>>2] = $18;
   $20 = (0 - ($18))|0;
   $21 = (($i$028) + 12288)|0;
   $22 = ((($this) + ($21<<2)|0) + 36268|0);
   HEAP32[$22>>2] = $20;
  }
  $23 = (($i$028) + 1)|0;
  $exitcond56 = ($23|0)==(12288);
  if ($exitcond56) {
   break;
  } else {
   $i$028 = $23;
  }
 }
 $24 = (($this) + 9524|0);
 HEAP16[$24>>1] = 3328;
 $25 = (($this) + 5428|0);
 HEAP16[$25>>1] = 3328;
 $i$127 = 1;
 while(1) {
  $26 = (+($i$127|0));
  $27 = $26 * 6.2831853071795862;
  $28 = $27 * 2.44140625E-4;
  $29 = (+Math_sin((+$28)));
  $30 = 1.0 / $29;
  $31 = (+_log10($30));
  $32 = $31 * 20.0;
  $33 = $32 / 0.0234375;
  $34 = (~~(($33)));
  $35 = ($34|0)>(3328);
  $$ = $35 ? 3328 : $34;
  $36 = $$&65535;
  $37 = (2048 - ($i$127))|0;
  $38 = ((($this) + ($37<<1)|0) + 5428|0);
  HEAP16[$38>>1] = $36;
  $39 = ((($this) + ($i$127<<1)|0) + 5428|0);
  HEAP16[$39>>1] = $36;
  $40 = (($$) + 12288)|0;
  $41 = $40&65535;
  $42 = (4096 - ($i$127))|0;
  $43 = ((($this) + ($42<<1)|0) + 5428|0);
  HEAP16[$43>>1] = $41;
  $44 = (($i$127) + 2048)|0;
  $45 = ((($this) + ($44<<1)|0) + 5428|0);
  HEAP16[$45>>1] = $41;
  $46 = (($i$127) + 1)|0;
  $exitcond55 = ($46|0)==(1025);
  if ($exitcond55) {
   $i$226 = 0;
   break;
  } else {
   $i$127 = $46;
  }
 }
 while(1) {
  $47 = (+($i$226|0));
  $48 = $47 * 6.2831853071795862;
  $49 = $48 * 9.765625E-4;
  $50 = (+Math_sin((+$49)));
  $51 = $50 + 1.0;
  $52 = $51 * 0.5;
  $53 = $52 * 503.4666666666667;
  $54 = (~~(($53)));
  $55 = $54&65535;
  $56 = ((($this) + ($i$226<<1)|0) + 32172|0);
  HEAP16[$56>>1] = $55;
  $57 = $50 * 511.0;
  $58 = (~~(($57)));
  $59 = $58&65535;
  $60 = ((($this) + ($i$226<<1)|0) + 34220|0);
  HEAP16[$60>>1] = $59;
  $61 = (($i$226) + 1)|0;
  $exitcond54 = ($61|0)==(1024);
  if ($exitcond54) {
   $i$325 = 0;
   break;
  } else {
   $i$226 = $61;
  }
 }
 while(1) {
  $62 = (4095 - ($i$325))|0;
  $63 = (+($62|0));
  $64 = $63 * 2.44140625E-4;
  $65 = (+Math_pow((+$64),8.0));
  $66 = $65 * 4096.0;
  $67 = (~~(($66)));
  $68 = $67&65535;
  $69 = ((($this) + ($i$325<<1)|0) + 15772|0);
  HEAP16[$69>>1] = $68;
  $70 = (+($i$325|0));
  $71 = $70 * 2.44140625E-4;
  $72 = $71 * 4096.0;
  $73 = (~~(($72)));
  $74 = $73&65535;
  $75 = (($i$325) + 4096)|0;
  $76 = ((($this) + ($75<<1)|0) + 15772|0);
  HEAP16[$76>>1] = $74;
  $77 = (($i$325) + 1)|0;
  $exitcond53 = ($77|0)==(4096);
  if ($exitcond53) {
   break;
  } else {
   $i$325 = $77;
  }
 }
 $scevgep51 = (($this) + 32156|0);
 ;HEAP16[$scevgep51+0>>1]=0|0;HEAP16[$scevgep51+2>>1]=0|0;HEAP16[$scevgep51+4>>1]=0|0;HEAP16[$scevgep51+6>>1]=0|0;HEAP16[$scevgep51+8>>1]=0|0;HEAP16[$scevgep51+10>>1]=0|0;HEAP16[$scevgep51+12>>1]=0|0;HEAP16[$scevgep51+14>>1]=0|0;
 $78 = (($this) + 32156|0);
 HEAP16[$78>>1] = 4095;
 $i$523 = 0;$j4$022 = 4095;
 while(1) {
  $79 = ($j4$022|0)==(0);
  L23: do {
   if ($79) {
    $j4$1$lcssa = 0;
   } else {
    $j4$119 = $j4$022;
    while(1) {
     $82 = ((($this) + ($j4$119<<1)|0) + 15772|0);
     $83 = HEAP16[$82>>1]|0;
     $84 = $83 << 16 >> 16;
     $85 = ($84|0)<($i$523|0);
     $81 = (($j4$119) + -1)|0;
     if (!($85)) {
      $j4$1$lcssa = $j4$119;
      break L23;
     }
     $80 = ($81|0)==(0);
     if ($80) {
      $j4$1$lcssa = 0;
      break;
     } else {
      $j4$119 = $81;
     }
    }
   }
  } while(0);
  $86 = $j4$1$lcssa << 16;
  $87 = ((($this) + ($i$523<<2)|0) + 134572|0);
  HEAP32[$87>>2] = $86;
  $88 = (($i$523) + 1)|0;
  $exitcond49 = ($88|0)==(4096);
  if ($exitcond49) {
   $i$618 = 0;
   break;
  } else {
   $i$523 = $88;$j4$022 = $j4$1$lcssa;
  }
 }
 while(1) {
  $89 = ($i$618*3)|0;
  $90 = (+($89|0));
  $91 = $90 / 0.0234375;
  $92 = (~~(($91)));
  $93 = $92 << 16;
  $94 = (($93) + 268435456)|0;
  $95 = ((($this) + ($i$618<<2)|0) + 15548|0);
  HEAP32[$95>>2] = $94;
  $96 = (($i$618) + 1)|0;
  $exitcond48 = ($96|0)==(15);
  if ($exitcond48) {
   break;
  } else {
   $i$618 = $96;
  }
 }
 $97 = (($this) + 15608|0);
 HEAP32[$97>>2] = 536805376;
 $i$717 = 0;
 while(1) {
  $98 = (+($i$717|0));
  $99 = $Frequence$0 * $98;
  $100 = $99 * 4096.0;
  $101 = $100 * 0.5;
  $102 = (~~(($101))>>>0);
  $103 = ((($this) + ($i$717<<2)|0) + 150956|0);
  HEAP32[$103>>2] = $102;
  $104 = (($i$717) + 1)|0;
  $exitcond47 = ($104|0)==(2048);
  if ($exitcond47) {
   break;
  } else {
   $i$717 = $104;
  }
 }
 $105 = (($this) + 13628|0);
 $106 = (($this) + 14140|0);
 ;HEAP32[$105+0>>2]=0|0;HEAP32[$105+4>>2]=0|0;HEAP32[$105+8>>2]=0|0;HEAP32[$105+12>>2]=0|0;
 ;HEAP32[$106+0>>2]=0|0;HEAP32[$106+4>>2]=0|0;HEAP32[$106+8>>2]=0|0;HEAP32[$106+12>>2]=0|0;
 $i$915 = 0;
 while(1) {
  $109 = $i$915 & 3;
  $110 = (+($109|0));
  $111 = $110 * 0.25;
  $112 = $111 + 1.0;
  $113 = $Frequence$0 * $112;
  $114 = $i$915 >> 2;
  $115 = 1 << $114;
  $116 = (+($115|0));
  $117 = $116 * $113;
  $118 = $117 * 268435456.0;
  $119 = $118 / 399128.0;
  $120 = (~~(($119))>>>0);
  $121 = (($i$915) + 4)|0;
  $122 = ((($this) + ($121<<2)|0) + 13628|0);
  HEAP32[$122>>2] = $120;
  $123 = $118 / 5514396.0;
  $124 = (~~(($123))>>>0);
  $125 = ((($this) + ($121<<2)|0) + 14140|0);
  HEAP32[$125>>2] = $124;
  $126 = (($i$915) + 1)|0;
  $exitcond40 = ($126|0)==(60);
  if ($exitcond40) {
   break;
  } else {
   $i$915 = $126;
  }
 }
 $107 = (($this) + 13880|0);
 $108 = (($this) + 14392|0);
 $i$1014 = 64;
 while(1) {
  $127 = HEAP32[$107>>2]|0;
  $128 = ((($this) + ($i$1014<<2)|0) + 13628|0);
  HEAP32[$128>>2] = $127;
  $129 = HEAP32[$108>>2]|0;
  $130 = ((($this) + ($i$1014<<2)|0) + 14140|0);
  HEAP32[$130>>2] = $129;
  $131 = (($i$1014) + -64)|0;
  $132 = ((($this) + ($131<<2)|0) + 15612|0);
  HEAP32[$132>>2] = 0;
  $133 = (($i$1014) + 1)|0;
  $exitcond37 = ($133|0)==(96);
  if ($exitcond37) {
   break;
  } else {
   $i$1014 = $133;
  }
 }
 $scevgep = (($this) + 14012|0);
 dest=$scevgep+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $j8$011 = 0;
 while(1) {
  $134 = (49784 + ($j8$011)|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = (+($135&255));
  $137 = $Frequence$0 * $136;
  $138 = $137 * 32.0;
  $139 = (~~(($138)));
  $140 = ((($this) + ($j8$011<<2)|0) + 14524|0);
  HEAP32[$140>>2] = $139;
  $141 = -$138;
  $142 = (~~(($141)));
  $143 = ((($this) + ($j8$011<<2)|0) + 15036|0);
  HEAP32[$143>>2] = $142;
  $144 = (($j8$011) + 1)|0;
  $exitcond = ($144|0)==(32);
  if ($exitcond) {
   $j8$011$1 = 0;
   break;
  } else {
   $j8$011 = $144;
  }
 }
 while(1) {
  $145 = (($j8$011$1) + 32)|0;
  $146 = (49784 + ($145)|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = (+($147&255));
  $149 = $Frequence$0 * $148;
  $150 = $149 * 32.0;
  $151 = (~~(($150)));
  $152 = ((($this) + ($j8$011$1<<2)|0) + 14652|0);
  HEAP32[$152>>2] = $151;
  $153 = -$150;
  $154 = (~~(($153)));
  $155 = ((($this) + ($j8$011$1<<2)|0) + 15164|0);
  HEAP32[$155>>2] = $154;
  $156 = (($j8$011$1) + 1)|0;
  $exitcond$1 = ($156|0)==(32);
  if ($exitcond$1) {
   $j8$011$2 = 0;
   break;
  } else {
   $j8$011$1 = $156;
  }
 }
 while(1) {
  $157 = (($j8$011$2) + 64)|0;
  $158 = (49784 + ($157)|0);
  $159 = HEAP8[$158>>0]|0;
  $160 = (+($159&255));
  $161 = $Frequence$0 * $160;
  $162 = $161 * 32.0;
  $163 = (~~(($162)));
  $164 = ((($this) + ($j8$011$2<<2)|0) + 14780|0);
  HEAP32[$164>>2] = $163;
  $165 = -$162;
  $166 = (~~(($165)));
  $167 = ((($this) + ($j8$011$2<<2)|0) + 15292|0);
  HEAP32[$167>>2] = $166;
  $168 = (($j8$011$2) + 1)|0;
  $exitcond$2 = ($168|0)==(32);
  if ($exitcond$2) {
   $j8$011$3 = 0;
   break;
  } else {
   $j8$011$2 = $168;
  }
 }
 while(1) {
  $169 = (($j8$011$3) + 96)|0;
  $170 = (49784 + ($169)|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = (+($171&255));
  $173 = $Frequence$0 * $172;
  $174 = $173 * 32.0;
  $175 = (~~(($174)));
  $176 = ((($this) + ($j8$011$3<<2)|0) + 14908|0);
  HEAP32[$176>>2] = $175;
  $177 = -$174;
  $178 = (~~(($177)));
  $179 = ((($this) + ($j8$011$3<<2)|0) + 15420|0);
  HEAP32[$179>>2] = $178;
  $180 = (($j8$011$3) + 1)|0;
  $exitcond$3 = ($180|0)==(32);
  if ($exitcond$3) {
   break;
  } else {
   $j8$011$3 = $180;
  }
 }
 $181 = 1068373114.88 / $sample_rate;
 $182 = (~~(($181))>>>0);
 $183 = (($this) + 15740|0);
 HEAP32[$183>>2] = $182;
 $184 = 1492501135.3599999 / $sample_rate;
 $185 = (~~(($184))>>>0);
 $186 = (($this) + 15744|0);
 HEAP32[$186>>2] = $185;
 $187 = 1615981445.1199999 / $sample_rate;
 $188 = (~~(($187))>>>0);
 $189 = (($this) + 15748|0);
 HEAP32[$189>>2] = $188;
 $190 = 1709933854.72 / $sample_rate;
 $191 = (~~(($190))>>>0);
 $192 = (($this) + 15752|0);
 HEAP32[$192>>2] = $191;
 $193 = 1846835937.28 / $sample_rate;
 $194 = (~~(($193))>>>0);
 $195 = (($this) + 15756|0);
 HEAP32[$195>>2] = $194;
 $196 = 2585033441.2800002 / $sample_rate;
 $197 = (~~(($196))>>>0);
 $198 = (($this) + 15760|0);
 HEAP32[$198>>2] = $197;
 $199 = 12911745433.6 / $sample_rate;
 $200 = (~~(($199))>>>0);
 $201 = (($this) + 15764|0);
 HEAP32[$201>>2] = $200;
 $202 = 19381039923.200001 / $sample_rate;
 $203 = (~~(($202))>>>0);
 $204 = (($this) + 15768|0);
 HEAP32[$204>>2] = $203;
 __ZN11Ym2612_Impl5resetEv($this);
 return;
}
function __ZN11Ym2612_Impl5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $exitcond16 = 0, $i$07 = 0, $i$15 = 0, $i$33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 13620|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 4|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;
 $i$07 = 0;
 while(1) {
  $3 = ((($this) + (($i$07*556)|0)|0) + 56|0);
  HEAP32[$3>>2] = -1;
  $4 = ((($this) + (($i$07*556)|0)|0) + 60|0);
  HEAP32[$4>>2] = -1;
  $5 = ((($this) + (($i$07*556)|0)|0) + 64|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($this) + (($i$07*556)|0)|0) + 68|0);
  HEAP32[$6>>2] = 31;
  $7 = ((($this) + (($i$07*556)|0)|0) + 72|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($this) + (($i$07*556)|0)|0) + 76|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($this) + (($i$07*556)|0)|0) + 40|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($this) + (($i$07*556)|0)|0) + 80|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($this) + (($i$07*556)|0)|0) + 96|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($this) + (($i$07*556)|0)|0) + 112|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($this) + (($i$07*556)|0)|0) + 184|0);
  HEAP32[$13>>2] = 0;
  $14 = ((($this) + (($i$07*556)|0)|0) + 188|0);
  HEAP32[$14>>2] = 0;
  $15 = ((($this) + (($i$07*556)|0)|0) + 196|0);
  HEAP32[$15>>2] = 536870912;
  $16 = ((($this) + (($i$07*556)|0)|0) + 200|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($this) + (($i$07*556)|0)|0) + 204|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($this) + (($i$07*556)|0)|0) + 192|0);
  HEAP32[$18>>2] = 3;
  $19 = ((($this) + (($i$07*556)|0)|0) + 232|0);
  HEAP32[$19>>2] = 0;
  $20 = ((($this) + (($i$07*556)|0)|0) + 44|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($this) + (($i$07*556)|0)|0) + 84|0);
  HEAP32[$21>>2] = 0;
  $22 = ((($this) + (($i$07*556)|0)|0) + 100|0);
  HEAP32[$22>>2] = 0;
  $23 = ((($this) + (($i$07*556)|0)|0) + 116|0);
  HEAP32[$23>>2] = 0;
  $24 = ((($this) + (($i$07*556)|0)|0) + 300|0);
  HEAP32[$24>>2] = 0;
  $25 = ((($this) + (($i$07*556)|0)|0) + 304|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($this) + (($i$07*556)|0)|0) + 312|0);
  HEAP32[$26>>2] = 536870912;
  $27 = ((($this) + (($i$07*556)|0)|0) + 316|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($this) + (($i$07*556)|0)|0) + 320|0);
  HEAP32[$28>>2] = 0;
  $29 = ((($this) + (($i$07*556)|0)|0) + 308|0);
  HEAP32[$29>>2] = 3;
  $30 = ((($this) + (($i$07*556)|0)|0) + 348|0);
  HEAP32[$30>>2] = 0;
  $31 = ((($this) + (($i$07*556)|0)|0) + 48|0);
  HEAP32[$31>>2] = 0;
  $32 = ((($this) + (($i$07*556)|0)|0) + 88|0);
  HEAP32[$32>>2] = 0;
  $33 = ((($this) + (($i$07*556)|0)|0) + 104|0);
  HEAP32[$33>>2] = 0;
  $34 = ((($this) + (($i$07*556)|0)|0) + 120|0);
  HEAP32[$34>>2] = 0;
  $35 = ((($this) + (($i$07*556)|0)|0) + 416|0);
  HEAP32[$35>>2] = 0;
  $36 = ((($this) + (($i$07*556)|0)|0) + 420|0);
  HEAP32[$36>>2] = 0;
  $37 = ((($this) + (($i$07*556)|0)|0) + 428|0);
  HEAP32[$37>>2] = 536870912;
  $38 = ((($this) + (($i$07*556)|0)|0) + 432|0);
  HEAP32[$38>>2] = 0;
  $39 = ((($this) + (($i$07*556)|0)|0) + 436|0);
  HEAP32[$39>>2] = 0;
  $40 = ((($this) + (($i$07*556)|0)|0) + 424|0);
  HEAP32[$40>>2] = 3;
  $41 = ((($this) + (($i$07*556)|0)|0) + 464|0);
  HEAP32[$41>>2] = 0;
  $42 = ((($this) + (($i$07*556)|0)|0) + 52|0);
  HEAP32[$42>>2] = 0;
  $43 = ((($this) + (($i$07*556)|0)|0) + 92|0);
  HEAP32[$43>>2] = 0;
  $44 = ((($this) + (($i$07*556)|0)|0) + 108|0);
  HEAP32[$44>>2] = 0;
  $45 = ((($this) + (($i$07*556)|0)|0) + 124|0);
  HEAP32[$45>>2] = 0;
  $46 = ((($this) + (($i$07*556)|0)|0) + 532|0);
  HEAP32[$46>>2] = 0;
  $47 = ((($this) + (($i$07*556)|0)|0) + 536|0);
  HEAP32[$47>>2] = 0;
  $48 = ((($this) + (($i$07*556)|0)|0) + 544|0);
  HEAP32[$48>>2] = 536870912;
  $49 = ((($this) + (($i$07*556)|0)|0) + 548|0);
  HEAP32[$49>>2] = 0;
  $50 = ((($this) + (($i$07*556)|0)|0) + 552|0);
  HEAP32[$50>>2] = 0;
  $51 = ((($this) + (($i$07*556)|0)|0) + 540|0);
  HEAP32[$51>>2] = 3;
  $52 = ((($this) + (($i$07*556)|0)|0) + 580|0);
  HEAP32[$52>>2] = 0;
  $53 = (($i$07) + 1)|0;
  $exitcond16 = ($53|0)==(6);
  if ($exitcond16) {
   $i$15 = 0;
   break;
  } else {
   $i$07 = $53;
  }
 }
 while(1) {
  $54 = ((($this) + ($i$15<<2)|0) + 3376|0);
  HEAP32[$54>>2] = -1;
  $55 = ((($this) + ($i$15<<2)|0) + 4400|0);
  HEAP32[$55>>2] = -1;
  $56 = (($i$15) + 1)|0;
  $exitcond = ($56|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$15 = $56;
  }
 }
 __ZN11Ym2612_Impl6write0Eii($this,182,192);
 __ZN11Ym2612_Impl6write1Eii($this,182,192);
 __ZN11Ym2612_Impl6write0Eii($this,181,192);
 __ZN11Ym2612_Impl6write1Eii($this,181,192);
 __ZN11Ym2612_Impl6write0Eii($this,180,192);
 __ZN11Ym2612_Impl6write1Eii($this,180,192);
 $i$33 = 178;
 while(1) {
  __ZN11Ym2612_Impl6write0Eii($this,$i$33,0);
  __ZN11Ym2612_Impl6write1Eii($this,$i$33,0);
  $57 = (($i$33) + -1)|0;
  $58 = ($57|0)>(33);
  if ($58) {
   $i$33 = $57;
  } else {
   break;
  }
 }
 __ZN11Ym2612_Impl6write0Eii($this,42,128);
 return;
}
function __ZN10Ym2612_Emu8set_rateEdd($this,$sample_rate,$clock_rate) {
 $this = $this|0;
 $sample_rate = +$sample_rate;
 $clock_rate = +$clock_rate;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $2 = (_malloc(159148)|0);
   HEAP32[$this>>2] = $2;
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$0 = 50160;
    return ($$0|0);
   } else {
    $4 = (($2) + 5424|0);
    HEAP32[$4>>2] = 0;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$this>>2]|0;
 _memset(($5|0),0,5424)|0;
 $6 = HEAP32[$this>>2]|0;
 __ZN11Ym2612_Impl8set_rateEdd($6,$sample_rate,$clock_rate);
 $$0 = 0;
 return ($$0|0);
}
function __ZN10Ym2612_EmuD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 _free($0);
 return;
}
function __ZN10Ym2612_Emu5resetEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __ZN11Ym2612_Impl5resetEv($0);
 return;
}
function __ZN10Ym2612_Emu6write0Eii($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __ZN11Ym2612_Impl6write0Eii($0,$addr,$data);
 return;
}
function __ZN10Ym2612_Emu6write1Eii($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __ZN11Ym2612_Impl6write1Eii($0,$addr,$data);
 return;
}
function __ZN10Ym2612_Emu11mute_voicesEi($this,$mask) {
 $this = $this|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 5424|0);
 HEAP32[$1>>2] = $mask;
 return;
}
function __ZN11Ym2612_Impl9run_timerEi($this,$length) {
 $this = $this|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remain$0 = 0, $remain$0$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = (($this) + 28|0);
 $2 = (($this) + 4|0);
 $3 = (($this) + 24|0);
 $4 = (($this) + 16|0);
 $5 = (($this) + 4|0);
 $6 = (($this) + 12|0);
 $7 = (($this) + 1152|0);
 $remain$0 = $length;
 while(1) {
  $8 = ($remain$0|0)<(6);
  $remain$0$ = $8 ? $remain$0 : 6;
  $9 = (($remain$0) - ($remain$0$))|0;
  $10 = HEAP32[$this>>2]|0;
  $11 = Math_imul($remain$0$, $10)|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = $12 & 1;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = HEAP32[$4>>2]|0;
   $16 = (($15) - ($11))|0;
   HEAP32[$4>>2] = $16;
   $17 = ($16|0)<(1);
   if ($17) {
    $18 = HEAP32[$0>>2]|0;
    $19 = $18 >>> 2;
    $20 = $19 & 1;
    $21 = HEAP32[$5>>2]|0;
    $22 = $20 | $21;
    HEAP32[$5>>2] = $22;
    $23 = HEAP32[$6>>2]|0;
    $24 = HEAP32[$4>>2]|0;
    $25 = (($24) + ($23))|0;
    HEAP32[$4>>2] = $25;
    $26 = HEAP32[$0>>2]|0;
    $27 = $26 & 128;
    $28 = ($27|0)==(0);
    if (!($28)) {
     __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$7,0);
     __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$7,1);
     __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$7,2);
     __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$7,3);
    }
   }
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = $29 & 2;
  $31 = ($30|0)==(0);
  if (!($31)) {
   $32 = HEAP32[$1>>2]|0;
   $33 = (($32) - ($11))|0;
   HEAP32[$1>>2] = $33;
   $34 = ($33|0)<(1);
   if ($34) {
    $35 = HEAP32[$0>>2]|0;
    $36 = $35 >>> 2;
    $37 = $36 & 2;
    $38 = HEAP32[$2>>2]|0;
    $39 = $37 | $38;
    HEAP32[$2>>2] = $39;
    $40 = HEAP32[$3>>2]|0;
    $41 = HEAP32[$1>>2]|0;
    $42 = (($41) + ($40))|0;
    HEAP32[$1>>2] = $42;
   }
  }
  $43 = ($9|0)>(0);
  if ($43) {
   $remain$0 = $9;
  } else {
   break;
  }
 }
 return;
}
function __ZN11Ym2612_Impl3runEiPs($this,$pair_count,$out) {
 $this = $this|0;
 $pair_count = $pair_count|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chi$07 = 0, $exitcond = 0, $exitcond9 = 0, $i$05 = 0, $i2$16 = 0, $i2$2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pair_count|0)<(1);
 if ($0) {
  return;
 }
 $1 = (($this) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 if ($4) {
  $chi$07 = 0;
 } else {
  __ZN11Ym2612_Impl9run_timerEi($this,$pair_count);
  $chi$07 = 0;
 }
 while(1) {
  $5 = ((($this) + (($chi$07*556)|0)|0) + 188|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   $8 = ($chi$07|0)==(2);
   if ($8) {
    $9 = HEAP32[$1>>2]|0;
    $10 = $9 >>> 5;
    $11 = $10 & 2;
    $i$05 = 0;$i2$16 = $11;
   } else {
    $i$05 = 0;$i2$16 = 0;
   }
   while(1) {
    $12 = (((($this) + (($chi$07*556)|0)|0) + ($i2$16<<2)|0) + 80|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($this) + ($13<<2)|0) + 150956|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (((($this) + (($chi$07*556)|0)|0) + ($i2$16<<2)|0) + 96|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (7 - ($17))|0;
    $19 = $15 >>> $18;
    $20 = (((($this) + (($chi$07*556)|0)|0) + ($i2$16<<2)|0) + 112|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 148|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $21 >> $23;
    $25 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 128|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + ($21<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($19))|0;
    $30 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 132|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = Math_imul($29, $31)|0;
    $33 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 188|0);
    HEAP32[$33>>2] = $32;
    $34 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 152|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==($24|0);
    do {
     if (!($36)) {
      HEAP32[$34>>2] = $24;
      $37 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 168|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (($38) + ($24<<2)|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 208|0);
      HEAP32[$41>>2] = $40;
      $42 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 172|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (($43) + ($24<<2)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 212|0);
      HEAP32[$46>>2] = $45;
      $47 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 176|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (($48) + ($24<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 216|0);
      HEAP32[$51>>2] = $50;
      $52 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 180|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($53) + ($24<<2)|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 220|0);
      HEAP32[$56>>2] = $55;
      $57 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 192|0);
      $58 = HEAP32[$57>>2]|0;
      if ((($58|0) == 1)) {
       $61 = HEAP32[$46>>2]|0;
       $62 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 200|0);
       HEAP32[$62>>2] = $61;
       break;
      } else if ((($58|0) == 0)) {
       $59 = HEAP32[$41>>2]|0;
       $60 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 200|0);
       HEAP32[$60>>2] = $59;
       break;
      } else {
       $63 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 196|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64|0)<(536870912);
       if (!($65)) {
        break;
       }
       if ((($58|0) == 3)) {
        $68 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 200|0);
        HEAP32[$68>>2] = $55;
        break;
       } else if ((($58|0) == 2)) {
        $66 = HEAP32[$51>>2]|0;
        $67 = (((($this) + (($chi$07*556)|0)|0) + (($i$05*116)|0)|0) + 200|0);
        HEAP32[$67>>2] = $66;
        break;
       } else {
        break;
       }
      }
     }
    } while(0);
    $69 = ($i2$16|0)==(0);
    if ($69) {
     $i2$2 = 0;
    } else {
     $70 = $i2$16 ^ 2;
     $71 = $i2$16 >> 1;
     $72 = $70 ^ $71;
     $i2$2 = $72;
    }
    $73 = (($i$05) + 1)|0;
    $exitcond = ($73|0)==(4);
    if ($exitcond) {
     break;
    } else {
     $i$05 = $73;$i2$16 = $i2$2;
    }
   }
  }
  $74 = (($chi$07) + 1)|0;
  $exitcond9 = ($74|0)==(6);
  if ($exitcond9) {
   break;
  } else {
   $chi$07 = $74;
  }
 }
 $75 = (($this) + 5424|0);
 $76 = (($this) + 36|0);
 $77 = (($this) + 5428|0);
 $78 = HEAP32[$75>>2]|0;
 $79 = $78 & 1;
 $80 = ($79|0)==(0);
 if ($80) {
  $81 = (($this) + 40|0);
  $82 = (($this) + 64|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (49912 + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  FUNCTION_TABLE_viiii[$85 & 15]($77,$81,$out,$pair_count);
 }
 $86 = HEAP32[$75>>2]|0;
 $87 = $86 & 2;
 $88 = ($87|0)==(0);
 if ($88) {
  $89 = (($this) + 596|0);
  $90 = (($this) + 620|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (49912 + ($91<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  FUNCTION_TABLE_viiii[$93 & 15]($77,$89,$out,$pair_count);
 }
 $94 = HEAP32[$75>>2]|0;
 $95 = $94 & 4;
 $96 = ($95|0)==(0);
 if ($96) {
  $97 = (($this) + 1152|0);
  $98 = (($this) + 1176|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (49912 + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  FUNCTION_TABLE_viiii[$101 & 15]($77,$97,$out,$pair_count);
 }
 $102 = HEAP32[$75>>2]|0;
 $103 = $102 & 8;
 $104 = ($103|0)==(0);
 if ($104) {
  $105 = (($this) + 1708|0);
  $106 = (($this) + 1732|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (49912 + ($107<<2)|0);
  $109 = HEAP32[$108>>2]|0;
  FUNCTION_TABLE_viiii[$109 & 15]($77,$105,$out,$pair_count);
 }
 $110 = HEAP32[$75>>2]|0;
 $111 = $110 & 16;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = (($this) + 2264|0);
  $114 = (($this) + 2288|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (49912 + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  FUNCTION_TABLE_viiii[$117 & 15]($77,$113,$out,$pair_count);
 }
 $118 = HEAP32[$75>>2]|0;
 $119 = $118 & 32;
 $120 = ($119|0)==(0);
 if ($120) {
  $121 = HEAP32[$76>>2]|0;
  $122 = ($121|0)==(0);
  if ($122) {
   $123 = (($this) + 2820|0);
   $124 = (($this) + 2844|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (49912 + ($125<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   FUNCTION_TABLE_viiii[$127 & 15]($77,$123,$out,$pair_count);
  }
 }
 $128 = (($this) + 13624|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = Math_imul($129, $pair_count)|0;
 $131 = (($this) + 13620|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + ($130))|0;
 HEAP32[$131>>2] = $133;
 return;
}
function __ZN10Ym2612_Emu3runEiPs($this,$pair_count,$out) {
 $this = $this|0;
 $pair_count = $pair_count|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __ZN11Ym2612_Impl3runEiPs($0,$pair_count,$out);
 return;
}
function __Z7set_segR6slot_ti($s,$seg) {
 $s = $s|0;
 $seg = $seg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 32|0);
 HEAP32[$0>>2] = 0;
 $1 = (($s) + 36|0);
 HEAP32[$1>>2] = 2147483647;
 $2 = (($s) + 28|0);
 HEAP32[$2>>2] = $seg;
 $3 = $seg & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 HEAP32[$0>>2] = 4095;
 HEAP32[$1>>2] = 4095;
 return;
}
function __ZN11Ym2612_Impl6write0Eii($this,$opn_addr,$data) {
 $this = $this|0;
 $opn_addr = $opn_addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data>>>0)<(256);
 if (!($0)) {
  ___assert_fail((49944|0),(49688|0),850,(49976|0));
  // unreachable;
 }
 $1 = ($opn_addr|0)<(48);
 $2 = ((($this) + ($opn_addr<<2)|0) + 3376|0);
 if ($1) {
  HEAP32[$2>>2] = $data;
  (__ZN11Ym2612_Impl6YM_SETEii($this,$opn_addr,$data)|0);
  return;
 }
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($data|0);
 if ($4) {
  return;
 }
 HEAP32[$2>>2] = $data;
 $5 = ($opn_addr|0)<(160);
 if ($5) {
  (__ZN11Ym2612_Impl8SLOT_SETEii($this,$opn_addr,$data)|0);
  return;
 } else {
  (__ZN11Ym2612_Impl11CHANNEL_SETEii($this,$opn_addr,$data)|0);
  return;
 }
}
function __ZN11Ym2612_Impl6write1Eii($this,$opn_addr,$data) {
 $this = $this|0;
 $opn_addr = $opn_addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data>>>0)<(256);
 if (!($0)) {
  ___assert_fail((49944|0),(49688|0),870,(49968|0));
  // unreachable;
 }
 $1 = ($opn_addr|0)>(47);
 if (!($1)) {
  return;
 }
 $2 = ((($this) + ($opn_addr<<2)|0) + 4400|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($data|0);
 if ($4) {
  return;
 }
 HEAP32[$2>>2] = $data;
 $5 = ($opn_addr|0)<(160);
 $6 = (($opn_addr) + 256)|0;
 if ($5) {
  (__ZN11Ym2612_Impl8SLOT_SETEii($this,$6,$data)|0);
  return;
 } else {
  (__ZN11Ym2612_Impl11CHANNEL_SETEii($this,$6,$data)|0);
  return;
 }
}
function __ZN18ym2612_update_chanILi0EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
 $g = $g|0;
 $ch = $ch|0;
 $buf = $buf|0;
 $length = $length|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in1$0 = 0, $in2$0 = 0, $in3$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ch) + 436|0);
 $1 = (($ch) + 504|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($ch) + 4|0);
 $4 = (($ch) + 88|0);
 $5 = (($ch) + 144|0);
 $6 = (($ch) + 320|0);
 $7 = (($ch) + 376|0);
 $8 = (($ch) + 204|0);
 $9 = (($ch) + 260|0);
 $10 = (($ch) + 492|0);
 $11 = (($g) + 8196|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($2|0)==(536870912);
 if ($13) {
  return;
 }
 $14 = (($g) + 8192|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$10>>2]|0;
 $17 = HEAP32[$9>>2]|0;
 $18 = HEAP32[$7>>2]|0;
 $19 = HEAP32[$5>>2]|0;
 $20 = HEAP32[$3>>2]|0;
 $21 = (($ch) + 156|0);
 $22 = (($ch) + 100|0);
 $23 = (($ch) + 120|0);
 $24 = (($ch) + 196|0);
 $25 = (($ch) + 124|0);
 $26 = (($ch) + 388|0);
 $27 = (($ch) + 332|0);
 $28 = (($ch) + 352|0);
 $29 = (($ch) + 428|0);
 $30 = (($ch) + 356|0);
 $31 = (($ch) + 272|0);
 $32 = (($ch) + 216|0);
 $33 = (($ch) + 236|0);
 $34 = (($ch) + 312|0);
 $35 = (($ch) + 240|0);
 $36 = (($ch) + 448|0);
 $37 = (($ch) + 468|0);
 $38 = (($ch) + 544|0);
 $39 = (($ch) + 472|0);
 $40 = (($ch) + 28|0);
 $41 = (($ch) + 32|0);
 $42 = (($ch) + 148|0);
 $43 = (($ch) + 380|0);
 $44 = (($ch) + 264|0);
 $45 = (($ch) + 496|0);
 $46 = (($ch) + 16|0);
 $47 = (($ch) + 20|0);
 $$0 = $buf;$$01 = $length;$$pn = $15;$CH_S0_OUT_1$0 = $20;$in0$0 = $19;$in1$0 = $18;$in2$0 = $17;$in3$0 = $16;
 while(1) {
  $YM2612_LFOcnt$0 = (($$pn) + ($12))|0;
  $48 = $YM2612_LFOcnt$0 >>> 18;
  $49 = $48 & 1023;
  $50 = ((($g) + ($49<<1)|0) + 26744|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = HEAP32[$21>>2]|0;
  $54 = $53 >> 16;
  $55 = ((($g) + ($54<<1)|0) + 10344|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = HEAP32[$22>>2]|0;
  $59 = (($57) + ($58))|0;
  $60 = HEAP32[$23>>2]|0;
  $61 = $59 ^ $60;
  $62 = HEAP32[$24>>2]|0;
  $63 = $52 >> $62;
  $64 = (($63) + ($61))|0;
  $65 = HEAP32[$25>>2]|0;
  $66 = (($59) - ($65))|0;
  $67 = $66 >> 31;
  $68 = $67 & $64;
  $69 = HEAP32[$26>>2]|0;
  $70 = $69 >> 16;
  $71 = ((($g) + ($70<<1)|0) + 10344|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = HEAP32[$27>>2]|0;
  $75 = (($73) + ($74))|0;
  $76 = HEAP32[$28>>2]|0;
  $77 = $75 ^ $76;
  $78 = HEAP32[$29>>2]|0;
  $79 = $52 >> $78;
  $80 = (($79) + ($77))|0;
  $81 = HEAP32[$30>>2]|0;
  $82 = (($75) - ($81))|0;
  $83 = $82 >> 31;
  $84 = $83 & $80;
  $85 = HEAP32[$31>>2]|0;
  $86 = $85 >> 16;
  $87 = ((($g) + ($86<<1)|0) + 10344|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 << 16 >> 16;
  $90 = HEAP32[$32>>2]|0;
  $91 = (($89) + ($90))|0;
  $92 = HEAP32[$33>>2]|0;
  $93 = $91 ^ $92;
  $94 = HEAP32[$34>>2]|0;
  $95 = $52 >> $94;
  $96 = (($95) + ($93))|0;
  $97 = HEAP32[$35>>2]|0;
  $98 = (($91) - ($97))|0;
  $99 = $98 >> 31;
  $100 = $99 & $96;
  $101 = HEAP32[$1>>2]|0;
  $102 = $101 >> 16;
  $103 = ((($g) + ($102<<1)|0) + 10344|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = HEAP32[$36>>2]|0;
  $107 = (($105) + ($106))|0;
  $108 = HEAP32[$37>>2]|0;
  $109 = $107 ^ $108;
  $110 = HEAP32[$38>>2]|0;
  $111 = $52 >> $110;
  $112 = (($111) + ($109))|0;
  $113 = HEAP32[$39>>2]|0;
  $114 = (($107) - ($113))|0;
  $115 = $114 >> 31;
  $116 = $115 & $112;
  $117 = HEAP32[$ch>>2]|0;
  $118 = (($117) + ($CH_S0_OUT_1$0))|0;
  $119 = HEAP32[$40>>2]|0;
  $120 = $118 >> $119;
  $121 = (($120) + ($in0$0))|0;
  $122 = $121 >>> 14;
  $123 = $122 & 4095;
  $124 = (($g) + ($123<<1)|0);
  $125 = HEAP16[$124>>1]|0;
  $126 = $125 << 16 >> 16;
  $127 = (($126) + ($68))|0;
  $128 = ((($g) + ($127<<2)|0) + 30840|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($117) + ($in1$0))|0;
  $131 = $130 >>> 14;
  $132 = $131 & 4095;
  $133 = (($g) + ($132<<1)|0);
  $134 = HEAP16[$133>>1]|0;
  $135 = $134 << 16 >> 16;
  $136 = (($135) + ($84))|0;
  $137 = ((($g) + ($136<<2)|0) + 30840|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + ($in2$0))|0;
  $140 = $139 >>> 14;
  $141 = $140 & 4095;
  $142 = (($g) + ($141<<1)|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143 << 16 >> 16;
  $145 = (($144) + ($100))|0;
  $146 = ((($g) + ($145<<2)|0) + 30840|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + ($in3$0))|0;
  $149 = $148 >>> 14;
  $150 = $149 & 4095;
  $151 = (($g) + ($150<<1)|0);
  $152 = HEAP16[$151>>1]|0;
  $153 = $152 << 16 >> 16;
  $154 = (($153) + ($116))|0;
  $155 = ((($g) + ($154<<2)|0) + 30840|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $156 >> 16;
  $158 = ((($g) + ($49<<1)|0) + 28792|0);
  $159 = HEAP16[$158>>1]|0;
  $160 = $159 << 16 >> 16;
  $161 = HEAP32[$41>>2]|0;
  $162 = Math_imul($160, $161)|0;
  $163 = $162 >> 10;
  $164 = (($163) + 256)|0;
  $165 = HEAP32[$42>>2]|0;
  $166 = Math_imul($164, $165)|0;
  $167 = $166 >>> 8;
  $168 = (($167) + ($in0$0))|0;
  $169 = HEAP32[$43>>2]|0;
  $170 = Math_imul($164, $169)|0;
  $171 = $170 >>> 8;
  $172 = (($171) + ($in1$0))|0;
  $173 = HEAP32[$44>>2]|0;
  $174 = Math_imul($173, $164)|0;
  $175 = $174 >>> 8;
  $176 = (($175) + ($in2$0))|0;
  $177 = HEAP32[$45>>2]|0;
  $178 = Math_imul($177, $164)|0;
  $179 = $178 >>> 8;
  $180 = (($179) + ($in3$0))|0;
  $181 = HEAP16[$$0>>1]|0;
  $182 = $181&65535;
  $183 = HEAP32[$46>>2]|0;
  $184 = $183 & $157;
  $185 = (($184) + ($182))|0;
  $186 = (($$0) + 2|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187&65535;
  $189 = HEAP32[$47>>2]|0;
  $190 = $189 & $157;
  $191 = (($190) + ($188))|0;
  __Z15update_envelopeR6slot_t($4);
  __Z15update_envelopeR6slot_t($8);
  __Z15update_envelopeR6slot_t($6);
  __Z15update_envelopeR6slot_t($0);
  HEAP32[$ch>>2] = $129;
  $192 = $185&65535;
  HEAP16[$$0>>1] = $192;
  $193 = $191&65535;
  HEAP16[$186>>1] = $193;
  $194 = (($$0) + 4|0);
  $195 = (($$01) + -1)|0;
  $196 = ($195|0)==(0);
  if ($196) {
   $$lcssa = $117;$$lcssa10 = $168;$$lcssa11 = $172;$$lcssa12 = $176;$$lcssa13 = $180;
   break;
  } else {
   $$0 = $194;$$01 = $195;$$pn = $YM2612_LFOcnt$0;$CH_S0_OUT_1$0 = $117;$in0$0 = $168;$in1$0 = $172;$in2$0 = $176;$in3$0 = $180;
  }
 }
 HEAP32[$3>>2] = $$lcssa;
 HEAP32[$5>>2] = $$lcssa10;
 HEAP32[$7>>2] = $$lcssa11;
 HEAP32[$9>>2] = $$lcssa12;
 HEAP32[$10>>2] = $$lcssa13;
 return;
}
function __ZN18ym2612_update_chanILi1EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
 $g = $g|0;
 $ch = $ch|0;
 $buf = $buf|0;
 $length = $length|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in1$0 = 0, $in2$0 = 0, $in3$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ch) + 436|0);
 $1 = (($ch) + 504|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($ch) + 4|0);
 $4 = (($ch) + 88|0);
 $5 = (($ch) + 144|0);
 $6 = (($ch) + 320|0);
 $7 = (($ch) + 376|0);
 $8 = (($ch) + 204|0);
 $9 = (($ch) + 260|0);
 $10 = (($ch) + 492|0);
 $11 = (($g) + 8196|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($2|0)==(536870912);
 if ($13) {
  return;
 }
 $14 = (($g) + 8192|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$10>>2]|0;
 $17 = HEAP32[$9>>2]|0;
 $18 = HEAP32[$7>>2]|0;
 $19 = HEAP32[$5>>2]|0;
 $20 = HEAP32[$3>>2]|0;
 $21 = (($ch) + 156|0);
 $22 = (($ch) + 100|0);
 $23 = (($ch) + 120|0);
 $24 = (($ch) + 196|0);
 $25 = (($ch) + 124|0);
 $26 = (($ch) + 388|0);
 $27 = (($ch) + 332|0);
 $28 = (($ch) + 352|0);
 $29 = (($ch) + 428|0);
 $30 = (($ch) + 356|0);
 $31 = (($ch) + 272|0);
 $32 = (($ch) + 216|0);
 $33 = (($ch) + 236|0);
 $34 = (($ch) + 312|0);
 $35 = (($ch) + 240|0);
 $36 = (($ch) + 448|0);
 $37 = (($ch) + 468|0);
 $38 = (($ch) + 544|0);
 $39 = (($ch) + 472|0);
 $40 = (($ch) + 28|0);
 $41 = (($ch) + 32|0);
 $42 = (($ch) + 148|0);
 $43 = (($ch) + 380|0);
 $44 = (($ch) + 264|0);
 $45 = (($ch) + 496|0);
 $46 = (($ch) + 16|0);
 $47 = (($ch) + 20|0);
 $$0 = $buf;$$01 = $length;$$pn = $15;$CH_S0_OUT_1$0 = $20;$in0$0 = $19;$in1$0 = $18;$in2$0 = $17;$in3$0 = $16;
 while(1) {
  $YM2612_LFOcnt$0 = (($$pn) + ($12))|0;
  $48 = $YM2612_LFOcnt$0 >>> 18;
  $49 = $48 & 1023;
  $50 = ((($g) + ($49<<1)|0) + 26744|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = HEAP32[$21>>2]|0;
  $54 = $53 >> 16;
  $55 = ((($g) + ($54<<1)|0) + 10344|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = HEAP32[$22>>2]|0;
  $59 = (($57) + ($58))|0;
  $60 = HEAP32[$23>>2]|0;
  $61 = $59 ^ $60;
  $62 = HEAP32[$24>>2]|0;
  $63 = $52 >> $62;
  $64 = (($63) + ($61))|0;
  $65 = HEAP32[$25>>2]|0;
  $66 = (($59) - ($65))|0;
  $67 = $66 >> 31;
  $68 = $67 & $64;
  $69 = HEAP32[$26>>2]|0;
  $70 = $69 >> 16;
  $71 = ((($g) + ($70<<1)|0) + 10344|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = HEAP32[$27>>2]|0;
  $75 = (($73) + ($74))|0;
  $76 = HEAP32[$28>>2]|0;
  $77 = $75 ^ $76;
  $78 = HEAP32[$29>>2]|0;
  $79 = $52 >> $78;
  $80 = (($79) + ($77))|0;
  $81 = HEAP32[$30>>2]|0;
  $82 = (($75) - ($81))|0;
  $83 = $82 >> 31;
  $84 = $83 & $80;
  $85 = HEAP32[$31>>2]|0;
  $86 = $85 >> 16;
  $87 = ((($g) + ($86<<1)|0) + 10344|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 << 16 >> 16;
  $90 = HEAP32[$32>>2]|0;
  $91 = (($89) + ($90))|0;
  $92 = HEAP32[$33>>2]|0;
  $93 = $91 ^ $92;
  $94 = HEAP32[$34>>2]|0;
  $95 = $52 >> $94;
  $96 = (($95) + ($93))|0;
  $97 = HEAP32[$35>>2]|0;
  $98 = (($91) - ($97))|0;
  $99 = $98 >> 31;
  $100 = $99 & $96;
  $101 = HEAP32[$1>>2]|0;
  $102 = $101 >> 16;
  $103 = ((($g) + ($102<<1)|0) + 10344|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = HEAP32[$36>>2]|0;
  $107 = (($105) + ($106))|0;
  $108 = HEAP32[$37>>2]|0;
  $109 = $107 ^ $108;
  $110 = HEAP32[$38>>2]|0;
  $111 = $52 >> $110;
  $112 = (($111) + ($109))|0;
  $113 = HEAP32[$39>>2]|0;
  $114 = (($107) - ($113))|0;
  $115 = $114 >> 31;
  $116 = $115 & $112;
  $117 = HEAP32[$ch>>2]|0;
  $118 = (($117) + ($CH_S0_OUT_1$0))|0;
  $119 = HEAP32[$40>>2]|0;
  $120 = $118 >> $119;
  $121 = (($120) + ($in0$0))|0;
  $122 = $121 >>> 14;
  $123 = $122 & 4095;
  $124 = (($g) + ($123<<1)|0);
  $125 = HEAP16[$124>>1]|0;
  $126 = $125 << 16 >> 16;
  $127 = (($126) + ($68))|0;
  $128 = ((($g) + ($127<<2)|0) + 30840|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($117) + ($in2$0))|0;
  $131 = $in1$0 >>> 14;
  $132 = $131 & 4095;
  $133 = (($g) + ($132<<1)|0);
  $134 = HEAP16[$133>>1]|0;
  $135 = $134 << 16 >> 16;
  $136 = (($135) + ($84))|0;
  $137 = ((($g) + ($136<<2)|0) + 30840|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($130) + ($138))|0;
  $140 = $139 >>> 14;
  $141 = $140 & 4095;
  $142 = (($g) + ($141<<1)|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143 << 16 >> 16;
  $145 = (($144) + ($100))|0;
  $146 = ((($g) + ($145<<2)|0) + 30840|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + ($in3$0))|0;
  $149 = $148 >>> 14;
  $150 = $149 & 4095;
  $151 = (($g) + ($150<<1)|0);
  $152 = HEAP16[$151>>1]|0;
  $153 = $152 << 16 >> 16;
  $154 = (($153) + ($116))|0;
  $155 = ((($g) + ($154<<2)|0) + 30840|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $156 >> 16;
  $158 = ((($g) + ($49<<1)|0) + 28792|0);
  $159 = HEAP16[$158>>1]|0;
  $160 = $159 << 16 >> 16;
  $161 = HEAP32[$41>>2]|0;
  $162 = Math_imul($160, $161)|0;
  $163 = $162 >> 10;
  $164 = (($163) + 256)|0;
  $165 = HEAP32[$42>>2]|0;
  $166 = Math_imul($164, $165)|0;
  $167 = $166 >>> 8;
  $168 = (($167) + ($in0$0))|0;
  $169 = HEAP32[$43>>2]|0;
  $170 = Math_imul($164, $169)|0;
  $171 = $170 >>> 8;
  $172 = (($171) + ($in1$0))|0;
  $173 = HEAP32[$44>>2]|0;
  $174 = Math_imul($173, $164)|0;
  $175 = $174 >>> 8;
  $176 = (($175) + ($in2$0))|0;
  $177 = HEAP32[$45>>2]|0;
  $178 = Math_imul($177, $164)|0;
  $179 = $178 >>> 8;
  $180 = (($179) + ($in3$0))|0;
  $181 = HEAP16[$$0>>1]|0;
  $182 = $181&65535;
  $183 = HEAP32[$46>>2]|0;
  $184 = $183 & $157;
  $185 = (($184) + ($182))|0;
  $186 = (($$0) + 2|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187&65535;
  $189 = HEAP32[$47>>2]|0;
  $190 = $189 & $157;
  $191 = (($190) + ($188))|0;
  __Z15update_envelopeR6slot_t($4);
  __Z15update_envelopeR6slot_t($8);
  __Z15update_envelopeR6slot_t($6);
  __Z15update_envelopeR6slot_t($0);
  HEAP32[$ch>>2] = $129;
  $192 = $185&65535;
  HEAP16[$$0>>1] = $192;
  $193 = $191&65535;
  HEAP16[$186>>1] = $193;
  $194 = (($$0) + 4|0);
  $195 = (($$01) + -1)|0;
  $196 = ($195|0)==(0);
  if ($196) {
   $$lcssa = $117;$$lcssa10 = $168;$$lcssa11 = $172;$$lcssa12 = $176;$$lcssa13 = $180;
   break;
  } else {
   $$0 = $194;$$01 = $195;$$pn = $YM2612_LFOcnt$0;$CH_S0_OUT_1$0 = $117;$in0$0 = $168;$in1$0 = $172;$in2$0 = $176;$in3$0 = $180;
  }
 }
 HEAP32[$3>>2] = $$lcssa;
 HEAP32[$5>>2] = $$lcssa10;
 HEAP32[$7>>2] = $$lcssa11;
 HEAP32[$9>>2] = $$lcssa12;
 HEAP32[$10>>2] = $$lcssa13;
 return;
}
function __ZN18ym2612_update_chanILi2EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
 $g = $g|0;
 $ch = $ch|0;
 $buf = $buf|0;
 $length = $length|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in1$0 = 0, $in2$0 = 0, $in3$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ch) + 436|0);
 $1 = (($ch) + 504|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($ch) + 4|0);
 $4 = (($ch) + 88|0);
 $5 = (($ch) + 144|0);
 $6 = (($ch) + 320|0);
 $7 = (($ch) + 376|0);
 $8 = (($ch) + 204|0);
 $9 = (($ch) + 260|0);
 $10 = (($ch) + 492|0);
 $11 = (($g) + 8196|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($2|0)==(536870912);
 if ($13) {
  return;
 }
 $14 = (($g) + 8192|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$10>>2]|0;
 $17 = HEAP32[$9>>2]|0;
 $18 = HEAP32[$7>>2]|0;
 $19 = HEAP32[$5>>2]|0;
 $20 = HEAP32[$3>>2]|0;
 $21 = (($ch) + 156|0);
 $22 = (($ch) + 100|0);
 $23 = (($ch) + 120|0);
 $24 = (($ch) + 196|0);
 $25 = (($ch) + 124|0);
 $26 = (($ch) + 388|0);
 $27 = (($ch) + 332|0);
 $28 = (($ch) + 352|0);
 $29 = (($ch) + 428|0);
 $30 = (($ch) + 356|0);
 $31 = (($ch) + 272|0);
 $32 = (($ch) + 216|0);
 $33 = (($ch) + 236|0);
 $34 = (($ch) + 312|0);
 $35 = (($ch) + 240|0);
 $36 = (($ch) + 448|0);
 $37 = (($ch) + 468|0);
 $38 = (($ch) + 544|0);
 $39 = (($ch) + 472|0);
 $40 = (($ch) + 28|0);
 $41 = (($ch) + 32|0);
 $42 = (($ch) + 148|0);
 $43 = (($ch) + 380|0);
 $44 = (($ch) + 264|0);
 $45 = (($ch) + 496|0);
 $46 = (($ch) + 16|0);
 $47 = (($ch) + 20|0);
 $$0 = $buf;$$01 = $length;$$pn = $15;$CH_S0_OUT_1$0 = $20;$in0$0 = $19;$in1$0 = $18;$in2$0 = $17;$in3$0 = $16;
 while(1) {
  $YM2612_LFOcnt$0 = (($$pn) + ($12))|0;
  $48 = $YM2612_LFOcnt$0 >>> 18;
  $49 = $48 & 1023;
  $50 = ((($g) + ($49<<1)|0) + 26744|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = HEAP32[$21>>2]|0;
  $54 = $53 >> 16;
  $55 = ((($g) + ($54<<1)|0) + 10344|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = HEAP32[$22>>2]|0;
  $59 = (($57) + ($58))|0;
  $60 = HEAP32[$23>>2]|0;
  $61 = $59 ^ $60;
  $62 = HEAP32[$24>>2]|0;
  $63 = $52 >> $62;
  $64 = (($63) + ($61))|0;
  $65 = HEAP32[$25>>2]|0;
  $66 = (($59) - ($65))|0;
  $67 = $66 >> 31;
  $68 = $67 & $64;
  $69 = HEAP32[$26>>2]|0;
  $70 = $69 >> 16;
  $71 = ((($g) + ($70<<1)|0) + 10344|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = HEAP32[$27>>2]|0;
  $75 = (($73) + ($74))|0;
  $76 = HEAP32[$28>>2]|0;
  $77 = $75 ^ $76;
  $78 = HEAP32[$29>>2]|0;
  $79 = $52 >> $78;
  $80 = (($79) + ($77))|0;
  $81 = HEAP32[$30>>2]|0;
  $82 = (($75) - ($81))|0;
  $83 = $82 >> 31;
  $84 = $83 & $80;
  $85 = HEAP32[$31>>2]|0;
  $86 = $85 >> 16;
  $87 = ((($g) + ($86<<1)|0) + 10344|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 << 16 >> 16;
  $90 = HEAP32[$32>>2]|0;
  $91 = (($89) + ($90))|0;
  $92 = HEAP32[$33>>2]|0;
  $93 = $91 ^ $92;
  $94 = HEAP32[$34>>2]|0;
  $95 = $52 >> $94;
  $96 = (($95) + ($93))|0;
  $97 = HEAP32[$35>>2]|0;
  $98 = (($91) - ($97))|0;
  $99 = $98 >> 31;
  $100 = $99 & $96;
  $101 = HEAP32[$1>>2]|0;
  $102 = $101 >> 16;
  $103 = ((($g) + ($102<<1)|0) + 10344|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = HEAP32[$36>>2]|0;
  $107 = (($105) + ($106))|0;
  $108 = HEAP32[$37>>2]|0;
  $109 = $107 ^ $108;
  $110 = HEAP32[$38>>2]|0;
  $111 = $52 >> $110;
  $112 = (($111) + ($109))|0;
  $113 = HEAP32[$39>>2]|0;
  $114 = (($107) - ($113))|0;
  $115 = $114 >> 31;
  $116 = $115 & $112;
  $117 = HEAP32[$ch>>2]|0;
  $118 = (($117) + ($CH_S0_OUT_1$0))|0;
  $119 = HEAP32[$40>>2]|0;
  $120 = $118 >> $119;
  $121 = (($120) + ($in0$0))|0;
  $122 = $121 >>> 14;
  $123 = $122 & 4095;
  $124 = (($g) + ($123<<1)|0);
  $125 = HEAP16[$124>>1]|0;
  $126 = $125 << 16 >> 16;
  $127 = (($126) + ($68))|0;
  $128 = ((($g) + ($127<<2)|0) + 30840|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $in1$0 >>> 14;
  $131 = $130 & 4095;
  $132 = (($g) + ($131<<1)|0);
  $133 = HEAP16[$132>>1]|0;
  $134 = $133 << 16 >> 16;
  $135 = (($134) + ($84))|0;
  $136 = ((($g) + ($135<<2)|0) + 30840|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + ($in2$0))|0;
  $139 = (($117) + ($in3$0))|0;
  $140 = $138 >>> 14;
  $141 = $140 & 4095;
  $142 = (($g) + ($141<<1)|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143 << 16 >> 16;
  $145 = (($144) + ($100))|0;
  $146 = ((($g) + ($145<<2)|0) + 30840|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($139) + ($147))|0;
  $149 = $148 >>> 14;
  $150 = $149 & 4095;
  $151 = (($g) + ($150<<1)|0);
  $152 = HEAP16[$151>>1]|0;
  $153 = $152 << 16 >> 16;
  $154 = (($153) + ($116))|0;
  $155 = ((($g) + ($154<<2)|0) + 30840|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $156 >> 16;
  $158 = ((($g) + ($49<<1)|0) + 28792|0);
  $159 = HEAP16[$158>>1]|0;
  $160 = $159 << 16 >> 16;
  $161 = HEAP32[$41>>2]|0;
  $162 = Math_imul($160, $161)|0;
  $163 = $162 >> 10;
  $164 = (($163) + 256)|0;
  $165 = HEAP32[$42>>2]|0;
  $166 = Math_imul($164, $165)|0;
  $167 = $166 >>> 8;
  $168 = (($167) + ($in0$0))|0;
  $169 = HEAP32[$43>>2]|0;
  $170 = Math_imul($164, $169)|0;
  $171 = $170 >>> 8;
  $172 = (($171) + ($in1$0))|0;
  $173 = HEAP32[$44>>2]|0;
  $174 = Math_imul($173, $164)|0;
  $175 = $174 >>> 8;
  $176 = (($175) + ($in2$0))|0;
  $177 = HEAP32[$45>>2]|0;
  $178 = Math_imul($177, $164)|0;
  $179 = $178 >>> 8;
  $180 = (($179) + ($in3$0))|0;
  $181 = HEAP16[$$0>>1]|0;
  $182 = $181&65535;
  $183 = HEAP32[$46>>2]|0;
  $184 = $183 & $157;
  $185 = (($184) + ($182))|0;
  $186 = (($$0) + 2|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187&65535;
  $189 = HEAP32[$47>>2]|0;
  $190 = $189 & $157;
  $191 = (($190) + ($188))|0;
  __Z15update_envelopeR6slot_t($4);
  __Z15update_envelopeR6slot_t($8);
  __Z15update_envelopeR6slot_t($6);
  __Z15update_envelopeR6slot_t($0);
  HEAP32[$ch>>2] = $129;
  $192 = $185&65535;
  HEAP16[$$0>>1] = $192;
  $193 = $191&65535;
  HEAP16[$186>>1] = $193;
  $194 = (($$0) + 4|0);
  $195 = (($$01) + -1)|0;
  $196 = ($195|0)==(0);
  if ($196) {
   $$lcssa = $117;$$lcssa10 = $168;$$lcssa11 = $172;$$lcssa12 = $176;$$lcssa13 = $180;
   break;
  } else {
   $$0 = $194;$$01 = $195;$$pn = $YM2612_LFOcnt$0;$CH_S0_OUT_1$0 = $117;$in0$0 = $168;$in1$0 = $172;$in2$0 = $176;$in3$0 = $180;
  }
 }
 HEAP32[$3>>2] = $$lcssa;
 HEAP32[$5>>2] = $$lcssa10;
 HEAP32[$7>>2] = $$lcssa11;
 HEAP32[$9>>2] = $$lcssa12;
 HEAP32[$10>>2] = $$lcssa13;
 return;
}
function __ZN18ym2612_update_chanILi3EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
 $g = $g|0;
 $ch = $ch|0;
 $buf = $buf|0;
 $length = $length|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in1$0 = 0, $in2$0 = 0, $in3$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ch) + 436|0);
 $1 = (($ch) + 504|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($ch) + 4|0);
 $4 = (($ch) + 88|0);
 $5 = (($ch) + 144|0);
 $6 = (($ch) + 320|0);
 $7 = (($ch) + 376|0);
 $8 = (($ch) + 204|0);
 $9 = (($ch) + 260|0);
 $10 = (($ch) + 492|0);
 $11 = (($g) + 8196|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($2|0)==(536870912);
 if ($13) {
  return;
 }
 $14 = (($g) + 8192|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$10>>2]|0;
 $17 = HEAP32[$9>>2]|0;
 $18 = HEAP32[$7>>2]|0;
 $19 = HEAP32[$5>>2]|0;
 $20 = HEAP32[$3>>2]|0;
 $21 = (($ch) + 156|0);
 $22 = (($ch) + 100|0);
 $23 = (($ch) + 120|0);
 $24 = (($ch) + 196|0);
 $25 = (($ch) + 124|0);
 $26 = (($ch) + 388|0);
 $27 = (($ch) + 332|0);
 $28 = (($ch) + 352|0);
 $29 = (($ch) + 428|0);
 $30 = (($ch) + 356|0);
 $31 = (($ch) + 272|0);
 $32 = (($ch) + 216|0);
 $33 = (($ch) + 236|0);
 $34 = (($ch) + 312|0);
 $35 = (($ch) + 240|0);
 $36 = (($ch) + 448|0);
 $37 = (($ch) + 468|0);
 $38 = (($ch) + 544|0);
 $39 = (($ch) + 472|0);
 $40 = (($ch) + 28|0);
 $41 = (($ch) + 32|0);
 $42 = (($ch) + 148|0);
 $43 = (($ch) + 380|0);
 $44 = (($ch) + 264|0);
 $45 = (($ch) + 496|0);
 $46 = (($ch) + 16|0);
 $47 = (($ch) + 20|0);
 $$0 = $buf;$$01 = $length;$$pn = $15;$CH_S0_OUT_1$0 = $20;$in0$0 = $19;$in1$0 = $18;$in2$0 = $17;$in3$0 = $16;
 while(1) {
  $YM2612_LFOcnt$0 = (($$pn) + ($12))|0;
  $48 = $YM2612_LFOcnt$0 >>> 18;
  $49 = $48 & 1023;
  $50 = ((($g) + ($49<<1)|0) + 26744|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = HEAP32[$21>>2]|0;
  $54 = $53 >> 16;
  $55 = ((($g) + ($54<<1)|0) + 10344|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = HEAP32[$22>>2]|0;
  $59 = (($57) + ($58))|0;
  $60 = HEAP32[$23>>2]|0;
  $61 = $59 ^ $60;
  $62 = HEAP32[$24>>2]|0;
  $63 = $52 >> $62;
  $64 = (($63) + ($61))|0;
  $65 = HEAP32[$25>>2]|0;
  $66 = (($59) - ($65))|0;
  $67 = $66 >> 31;
  $68 = $67 & $64;
  $69 = HEAP32[$26>>2]|0;
  $70 = $69 >> 16;
  $71 = ((($g) + ($70<<1)|0) + 10344|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = HEAP32[$27>>2]|0;
  $75 = (($73) + ($74))|0;
  $76 = HEAP32[$28>>2]|0;
  $77 = $75 ^ $76;
  $78 = HEAP32[$29>>2]|0;
  $79 = $52 >> $78;
  $80 = (($79) + ($77))|0;
  $81 = HEAP32[$30>>2]|0;
  $82 = (($75) - ($81))|0;
  $83 = $82 >> 31;
  $84 = $83 & $80;
  $85 = HEAP32[$31>>2]|0;
  $86 = $85 >> 16;
  $87 = ((($g) + ($86<<1)|0) + 10344|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 << 16 >> 16;
  $90 = HEAP32[$32>>2]|0;
  $91 = (($89) + ($90))|0;
  $92 = HEAP32[$33>>2]|0;
  $93 = $91 ^ $92;
  $94 = HEAP32[$34>>2]|0;
  $95 = $52 >> $94;
  $96 = (($95) + ($93))|0;
  $97 = HEAP32[$35>>2]|0;
  $98 = (($91) - ($97))|0;
  $99 = $98 >> 31;
  $100 = $99 & $96;
  $101 = HEAP32[$1>>2]|0;
  $102 = $101 >> 16;
  $103 = ((($g) + ($102<<1)|0) + 10344|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = HEAP32[$36>>2]|0;
  $107 = (($105) + ($106))|0;
  $108 = HEAP32[$37>>2]|0;
  $109 = $107 ^ $108;
  $110 = HEAP32[$38>>2]|0;
  $111 = $52 >> $110;
  $112 = (($111) + ($109))|0;
  $113 = HEAP32[$39>>2]|0;
  $114 = (($107) - ($113))|0;
  $115 = $114 >> 31;
  $116 = $115 & $112;
  $117 = HEAP32[$ch>>2]|0;
  $118 = (($117) + ($CH_S0_OUT_1$0))|0;
  $119 = HEAP32[$40>>2]|0;
  $120 = $118 >> $119;
  $121 = (($120) + ($in0$0))|0;
  $122 = $121 >>> 14;
  $123 = $122 & 4095;
  $124 = (($g) + ($123<<1)|0);
  $125 = HEAP16[$124>>1]|0;
  $126 = $125 << 16 >> 16;
  $127 = (($126) + ($68))|0;
  $128 = ((($g) + ($127<<2)|0) + 30840|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($117) + ($in1$0))|0;
  $131 = $130 >>> 14;
  $132 = $131 & 4095;
  $133 = (($g) + ($132<<1)|0);
  $134 = HEAP16[$133>>1]|0;
  $135 = $134 << 16 >> 16;
  $136 = (($135) + ($84))|0;
  $137 = ((($g) + ($136<<2)|0) + 30840|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + ($in3$0))|0;
  $140 = $in2$0 >>> 14;
  $141 = $140 & 4095;
  $142 = (($g) + ($141<<1)|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143 << 16 >> 16;
  $145 = (($144) + ($100))|0;
  $146 = ((($g) + ($145<<2)|0) + 30840|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($139) + ($147))|0;
  $149 = $148 >>> 14;
  $150 = $149 & 4095;
  $151 = (($g) + ($150<<1)|0);
  $152 = HEAP16[$151>>1]|0;
  $153 = $152 << 16 >> 16;
  $154 = (($153) + ($116))|0;
  $155 = ((($g) + ($154<<2)|0) + 30840|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $156 >> 16;
  $158 = ((($g) + ($49<<1)|0) + 28792|0);
  $159 = HEAP16[$158>>1]|0;
  $160 = $159 << 16 >> 16;
  $161 = HEAP32[$41>>2]|0;
  $162 = Math_imul($160, $161)|0;
  $163 = $162 >> 10;
  $164 = (($163) + 256)|0;
  $165 = HEAP32[$42>>2]|0;
  $166 = Math_imul($164, $165)|0;
  $167 = $166 >>> 8;
  $168 = (($167) + ($in0$0))|0;
  $169 = HEAP32[$43>>2]|0;
  $170 = Math_imul($164, $169)|0;
  $171 = $170 >>> 8;
  $172 = (($171) + ($in1$0))|0;
  $173 = HEAP32[$44>>2]|0;
  $174 = Math_imul($173, $164)|0;
  $175 = $174 >>> 8;
  $176 = (($175) + ($in2$0))|0;
  $177 = HEAP32[$45>>2]|0;
  $178 = Math_imul($177, $164)|0;
  $179 = $178 >>> 8;
  $180 = (($179) + ($in3$0))|0;
  $181 = HEAP16[$$0>>1]|0;
  $182 = $181&65535;
  $183 = HEAP32[$46>>2]|0;
  $184 = $183 & $157;
  $185 = (($184) + ($182))|0;
  $186 = (($$0) + 2|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187&65535;
  $189 = HEAP32[$47>>2]|0;
  $190 = $189 & $157;
  $191 = (($190) + ($188))|0;
  __Z15update_envelopeR6slot_t($4);
  __Z15update_envelopeR6slot_t($8);
  __Z15update_envelopeR6slot_t($6);
  __Z15update_envelopeR6slot_t($0);
  HEAP32[$ch>>2] = $129;
  $192 = $185&65535;
  HEAP16[$$0>>1] = $192;
  $193 = $191&65535;
  HEAP16[$186>>1] = $193;
  $194 = (($$0) + 4|0);
  $195 = (($$01) + -1)|0;
  $196 = ($195|0)==(0);
  if ($196) {
   $$lcssa = $117;$$lcssa10 = $168;$$lcssa11 = $172;$$lcssa12 = $176;$$lcssa13 = $180;
   break;
  } else {
   $$0 = $194;$$01 = $195;$$pn = $YM2612_LFOcnt$0;$CH_S0_OUT_1$0 = $117;$in0$0 = $168;$in1$0 = $172;$in2$0 = $176;$in3$0 = $180;
  }
 }
 HEAP32[$3>>2] = $$lcssa;
 HEAP32[$5>>2] = $$lcssa10;
 HEAP32[$7>>2] = $$lcssa11;
 HEAP32[$9>>2] = $$lcssa12;
 HEAP32[$10>>2] = $$lcssa13;
 return;
}
function __ZN18ym2612_update_chanILi4EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
 $g = $g|0;
 $ch = $ch|0;
 $buf = $buf|0;
 $length = $length|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in1$0 = 0, $in2$0 = 0, $in3$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ch) + 436|0);
 $1 = (($ch) + 504|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -536870912)|0;
 $4 = (($ch) + 320|0);
 $5 = (($ch) + 388|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -536870912)|0;
 $8 = $7 | $3;
 $9 = (($ch) + 4|0);
 $10 = (($ch) + 88|0);
 $11 = (($ch) + 144|0);
 $12 = (($ch) + 376|0);
 $13 = (($ch) + 204|0);
 $14 = (($ch) + 260|0);
 $15 = (($ch) + 492|0);
 $16 = (($g) + 8196|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($8|0)==(0);
 if ($18) {
  return;
 }
 $19 = (($g) + 8192|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$15>>2]|0;
 $22 = HEAP32[$14>>2]|0;
 $23 = HEAP32[$12>>2]|0;
 $24 = HEAP32[$11>>2]|0;
 $25 = HEAP32[$9>>2]|0;
 $26 = (($ch) + 156|0);
 $27 = (($ch) + 100|0);
 $28 = (($ch) + 120|0);
 $29 = (($ch) + 196|0);
 $30 = (($ch) + 124|0);
 $31 = (($ch) + 332|0);
 $32 = (($ch) + 352|0);
 $33 = (($ch) + 428|0);
 $34 = (($ch) + 356|0);
 $35 = (($ch) + 272|0);
 $36 = (($ch) + 216|0);
 $37 = (($ch) + 236|0);
 $38 = (($ch) + 312|0);
 $39 = (($ch) + 240|0);
 $40 = (($ch) + 448|0);
 $41 = (($ch) + 468|0);
 $42 = (($ch) + 544|0);
 $43 = (($ch) + 472|0);
 $44 = (($ch) + 28|0);
 $45 = (($ch) + 32|0);
 $46 = (($ch) + 148|0);
 $47 = (($ch) + 380|0);
 $48 = (($ch) + 264|0);
 $49 = (($ch) + 496|0);
 $50 = (($ch) + 16|0);
 $51 = (($ch) + 20|0);
 $$0 = $buf;$$01 = $length;$$pn = $20;$CH_S0_OUT_1$0 = $25;$in0$0 = $24;$in1$0 = $23;$in2$0 = $22;$in3$0 = $21;
 while(1) {
  $YM2612_LFOcnt$0 = (($$pn) + ($17))|0;
  $52 = $YM2612_LFOcnt$0 >>> 18;
  $53 = $52 & 1023;
  $54 = ((($g) + ($53<<1)|0) + 26744|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  $57 = HEAP32[$26>>2]|0;
  $58 = $57 >> 16;
  $59 = ((($g) + ($58<<1)|0) + 10344|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = HEAP32[$27>>2]|0;
  $63 = (($61) + ($62))|0;
  $64 = HEAP32[$28>>2]|0;
  $65 = $63 ^ $64;
  $66 = HEAP32[$29>>2]|0;
  $67 = $56 >> $66;
  $68 = (($67) + ($65))|0;
  $69 = HEAP32[$30>>2]|0;
  $70 = (($63) - ($69))|0;
  $71 = $70 >> 31;
  $72 = $71 & $68;
  $73 = HEAP32[$5>>2]|0;
  $74 = $73 >> 16;
  $75 = ((($g) + ($74<<1)|0) + 10344|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = HEAP32[$31>>2]|0;
  $79 = (($77) + ($78))|0;
  $80 = HEAP32[$32>>2]|0;
  $81 = $79 ^ $80;
  $82 = HEAP32[$33>>2]|0;
  $83 = $56 >> $82;
  $84 = (($83) + ($81))|0;
  $85 = HEAP32[$34>>2]|0;
  $86 = (($79) - ($85))|0;
  $87 = $86 >> 31;
  $88 = $87 & $84;
  $89 = HEAP32[$35>>2]|0;
  $90 = $89 >> 16;
  $91 = ((($g) + ($90<<1)|0) + 10344|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92 << 16 >> 16;
  $94 = HEAP32[$36>>2]|0;
  $95 = (($93) + ($94))|0;
  $96 = HEAP32[$37>>2]|0;
  $97 = $95 ^ $96;
  $98 = HEAP32[$38>>2]|0;
  $99 = $56 >> $98;
  $100 = (($99) + ($97))|0;
  $101 = HEAP32[$39>>2]|0;
  $102 = (($95) - ($101))|0;
  $103 = $102 >> 31;
  $104 = $103 & $100;
  $105 = HEAP32[$1>>2]|0;
  $106 = $105 >> 16;
  $107 = ((($g) + ($106<<1)|0) + 10344|0);
  $108 = HEAP16[$107>>1]|0;
  $109 = $108 << 16 >> 16;
  $110 = HEAP32[$40>>2]|0;
  $111 = (($109) + ($110))|0;
  $112 = HEAP32[$41>>2]|0;
  $113 = $111 ^ $112;
  $114 = HEAP32[$42>>2]|0;
  $115 = $56 >> $114;
  $116 = (($115) + ($113))|0;
  $117 = HEAP32[$43>>2]|0;
  $118 = (($111) - ($117))|0;
  $119 = $118 >> 31;
  $120 = $119 & $116;
  $121 = HEAP32[$ch>>2]|0;
  $122 = (($121) + ($CH_S0_OUT_1$0))|0;
  $123 = HEAP32[$44>>2]|0;
  $124 = $122 >> $123;
  $125 = (($124) + ($in0$0))|0;
  $126 = $125 >>> 14;
  $127 = $126 & 4095;
  $128 = (($g) + ($127<<1)|0);
  $129 = HEAP16[$128>>1]|0;
  $130 = $129 << 16 >> 16;
  $131 = (($130) + ($72))|0;
  $132 = ((($g) + ($131<<2)|0) + 30840|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = $in2$0 >>> 14;
  $135 = $134 & 4095;
  $136 = (($g) + ($135<<1)|0);
  $137 = HEAP16[$136>>1]|0;
  $138 = $137 << 16 >> 16;
  $139 = (($138) + ($104))|0;
  $140 = ((($g) + ($139<<2)|0) + 30840|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($141) + ($in3$0))|0;
  $143 = $142 >>> 14;
  $144 = $143 & 4095;
  $145 = (($g) + ($144<<1)|0);
  $146 = HEAP16[$145>>1]|0;
  $147 = $146 << 16 >> 16;
  $148 = (($147) + ($120))|0;
  $149 = ((($g) + ($148<<2)|0) + 30840|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($121) + ($in1$0))|0;
  $152 = $151 >>> 14;
  $153 = $152 & 4095;
  $154 = (($g) + ($153<<1)|0);
  $155 = HEAP16[$154>>1]|0;
  $156 = $155 << 16 >> 16;
  $157 = (($156) + ($88))|0;
  $158 = ((($g) + ($157<<2)|0) + 30840|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($159) + ($150))|0;
  $161 = $160 >> 16;
  $162 = ((($g) + ($53<<1)|0) + 28792|0);
  $163 = HEAP16[$162>>1]|0;
  $164 = $163 << 16 >> 16;
  $165 = HEAP32[$45>>2]|0;
  $166 = Math_imul($164, $165)|0;
  $167 = $166 >> 10;
  $168 = (($167) + 256)|0;
  $169 = HEAP32[$46>>2]|0;
  $170 = Math_imul($168, $169)|0;
  $171 = $170 >>> 8;
  $172 = (($171) + ($in0$0))|0;
  $173 = HEAP32[$47>>2]|0;
  $174 = Math_imul($168, $173)|0;
  $175 = $174 >>> 8;
  $176 = (($175) + ($in1$0))|0;
  $177 = HEAP32[$48>>2]|0;
  $178 = Math_imul($177, $168)|0;
  $179 = $178 >>> 8;
  $180 = (($179) + ($in2$0))|0;
  $181 = HEAP32[$49>>2]|0;
  $182 = Math_imul($181, $168)|0;
  $183 = $182 >>> 8;
  $184 = (($183) + ($in3$0))|0;
  $185 = HEAP16[$$0>>1]|0;
  $186 = $185&65535;
  $187 = HEAP32[$50>>2]|0;
  $188 = $187 & $161;
  $189 = (($188) + ($186))|0;
  $190 = (($$0) + 2|0);
  $191 = HEAP16[$190>>1]|0;
  $192 = $191&65535;
  $193 = HEAP32[$51>>2]|0;
  $194 = $193 & $161;
  $195 = (($194) + ($192))|0;
  __Z15update_envelopeR6slot_t($10);
  __Z15update_envelopeR6slot_t($13);
  __Z15update_envelopeR6slot_t($4);
  __Z15update_envelopeR6slot_t($0);
  HEAP32[$ch>>2] = $133;
  $196 = $189&65535;
  HEAP16[$$0>>1] = $196;
  $197 = $195&65535;
  HEAP16[$190>>1] = $197;
  $198 = (($$0) + 4|0);
  $199 = (($$01) + -1)|0;
  $200 = ($199|0)==(0);
  if ($200) {
   $$lcssa = $121;$$lcssa10 = $172;$$lcssa11 = $176;$$lcssa12 = $180;$$lcssa13 = $184;
   break;
  } else {
   $$0 = $198;$$01 = $199;$$pn = $YM2612_LFOcnt$0;$CH_S0_OUT_1$0 = $121;$in0$0 = $172;$in1$0 = $176;$in2$0 = $180;$in3$0 = $184;
  }
 }
 HEAP32[$9>>2] = $$lcssa;
 HEAP32[$11>>2] = $$lcssa10;
 HEAP32[$12>>2] = $$lcssa11;
 HEAP32[$14>>2] = $$lcssa12;
 HEAP32[$15>>2] = $$lcssa13;
 return;
}
function __ZN18ym2612_update_chanILi5EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
 $g = $g|0;
 $ch = $ch|0;
 $buf = $buf|0;
 $length = $length|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in1$0 = 0, $in2$0 = 0, $in3$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ch) + 436|0);
 $1 = (($ch) + 504|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -536870912)|0;
 $4 = (($ch) + 204|0);
 $5 = (($ch) + 272|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -536870912)|0;
 $8 = $7 | $3;
 $9 = (($ch) + 320|0);
 $10 = (($ch) + 388|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -536870912)|0;
 $13 = $8 | $12;
 $14 = (($ch) + 4|0);
 $15 = (($ch) + 88|0);
 $16 = (($ch) + 144|0);
 $17 = (($ch) + 376|0);
 $18 = (($ch) + 260|0);
 $19 = (($ch) + 492|0);
 $20 = (($g) + 8196|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($13|0)==(0);
 if ($22) {
  return;
 }
 $23 = (($g) + 8192|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$19>>2]|0;
 $26 = HEAP32[$18>>2]|0;
 $27 = HEAP32[$17>>2]|0;
 $28 = HEAP32[$16>>2]|0;
 $29 = HEAP32[$14>>2]|0;
 $30 = (($ch) + 156|0);
 $31 = (($ch) + 100|0);
 $32 = (($ch) + 120|0);
 $33 = (($ch) + 196|0);
 $34 = (($ch) + 124|0);
 $35 = (($ch) + 332|0);
 $36 = (($ch) + 352|0);
 $37 = (($ch) + 428|0);
 $38 = (($ch) + 356|0);
 $39 = (($ch) + 216|0);
 $40 = (($ch) + 236|0);
 $41 = (($ch) + 312|0);
 $42 = (($ch) + 240|0);
 $43 = (($ch) + 448|0);
 $44 = (($ch) + 468|0);
 $45 = (($ch) + 544|0);
 $46 = (($ch) + 472|0);
 $47 = (($ch) + 28|0);
 $48 = (($ch) + 32|0);
 $49 = (($ch) + 148|0);
 $50 = (($ch) + 380|0);
 $51 = (($ch) + 264|0);
 $52 = (($ch) + 496|0);
 $53 = (($ch) + 16|0);
 $54 = (($ch) + 20|0);
 $$0 = $buf;$$01 = $length;$$pn = $24;$CH_S0_OUT_1$0 = $29;$in0$0 = $28;$in1$0 = $27;$in2$0 = $26;$in3$0 = $25;
 while(1) {
  $YM2612_LFOcnt$0 = (($$pn) + ($21))|0;
  $55 = $YM2612_LFOcnt$0 >>> 18;
  $56 = $55 & 1023;
  $57 = ((($g) + ($56<<1)|0) + 26744|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = HEAP32[$30>>2]|0;
  $61 = $60 >> 16;
  $62 = ((($g) + ($61<<1)|0) + 10344|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = HEAP32[$31>>2]|0;
  $66 = (($64) + ($65))|0;
  $67 = HEAP32[$32>>2]|0;
  $68 = $66 ^ $67;
  $69 = HEAP32[$33>>2]|0;
  $70 = $59 >> $69;
  $71 = (($70) + ($68))|0;
  $72 = HEAP32[$34>>2]|0;
  $73 = (($66) - ($72))|0;
  $74 = $73 >> 31;
  $75 = $74 & $71;
  $76 = HEAP32[$10>>2]|0;
  $77 = $76 >> 16;
  $78 = ((($g) + ($77<<1)|0) + 10344|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79 << 16 >> 16;
  $81 = HEAP32[$35>>2]|0;
  $82 = (($80) + ($81))|0;
  $83 = HEAP32[$36>>2]|0;
  $84 = $82 ^ $83;
  $85 = HEAP32[$37>>2]|0;
  $86 = $59 >> $85;
  $87 = (($86) + ($84))|0;
  $88 = HEAP32[$38>>2]|0;
  $89 = (($82) - ($88))|0;
  $90 = $89 >> 31;
  $91 = $90 & $87;
  $92 = HEAP32[$5>>2]|0;
  $93 = $92 >> 16;
  $94 = ((($g) + ($93<<1)|0) + 10344|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = $95 << 16 >> 16;
  $97 = HEAP32[$39>>2]|0;
  $98 = (($96) + ($97))|0;
  $99 = HEAP32[$40>>2]|0;
  $100 = $98 ^ $99;
  $101 = HEAP32[$41>>2]|0;
  $102 = $59 >> $101;
  $103 = (($102) + ($100))|0;
  $104 = HEAP32[$42>>2]|0;
  $105 = (($98) - ($104))|0;
  $106 = $105 >> 31;
  $107 = $106 & $103;
  $108 = HEAP32[$1>>2]|0;
  $109 = $108 >> 16;
  $110 = ((($g) + ($109<<1)|0) + 10344|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111 << 16 >> 16;
  $113 = HEAP32[$43>>2]|0;
  $114 = (($112) + ($113))|0;
  $115 = HEAP32[$44>>2]|0;
  $116 = $114 ^ $115;
  $117 = HEAP32[$45>>2]|0;
  $118 = $59 >> $117;
  $119 = (($118) + ($116))|0;
  $120 = HEAP32[$46>>2]|0;
  $121 = (($114) - ($120))|0;
  $122 = $121 >> 31;
  $123 = $122 & $119;
  $124 = HEAP32[$ch>>2]|0;
  $125 = (($124) + ($CH_S0_OUT_1$0))|0;
  $126 = HEAP32[$47>>2]|0;
  $127 = $125 >> $126;
  $128 = (($127) + ($in0$0))|0;
  $129 = $128 >>> 14;
  $130 = $129 & 4095;
  $131 = (($g) + ($130<<1)|0);
  $132 = HEAP16[$131>>1]|0;
  $133 = $132 << 16 >> 16;
  $134 = (($133) + ($75))|0;
  $135 = ((($g) + ($134<<2)|0) + 30840|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($124) + ($in3$0))|0;
  $138 = $137 >>> 14;
  $139 = $138 & 4095;
  $140 = (($g) + ($139<<1)|0);
  $141 = HEAP16[$140>>1]|0;
  $142 = $141 << 16 >> 16;
  $143 = (($142) + ($123))|0;
  $144 = ((($g) + ($143<<2)|0) + 30840|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($124) + ($in1$0))|0;
  $147 = $146 >>> 14;
  $148 = $147 & 4095;
  $149 = (($g) + ($148<<1)|0);
  $150 = HEAP16[$149>>1]|0;
  $151 = $150 << 16 >> 16;
  $152 = (($151) + ($91))|0;
  $153 = ((($g) + ($152<<2)|0) + 30840|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($154) + ($145))|0;
  $156 = (($124) + ($in2$0))|0;
  $157 = $156 >>> 14;
  $158 = $157 & 4095;
  $159 = (($g) + ($158<<1)|0);
  $160 = HEAP16[$159>>1]|0;
  $161 = $160 << 16 >> 16;
  $162 = (($161) + ($107))|0;
  $163 = ((($g) + ($162<<2)|0) + 30840|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($155) + ($164))|0;
  $166 = $165 >> 16;
  $167 = ((($g) + ($56<<1)|0) + 28792|0);
  $168 = HEAP16[$167>>1]|0;
  $169 = $168 << 16 >> 16;
  $170 = HEAP32[$48>>2]|0;
  $171 = Math_imul($169, $170)|0;
  $172 = $171 >> 10;
  $173 = (($172) + 256)|0;
  $174 = HEAP32[$49>>2]|0;
  $175 = Math_imul($173, $174)|0;
  $176 = $175 >>> 8;
  $177 = (($176) + ($in0$0))|0;
  $178 = HEAP32[$50>>2]|0;
  $179 = Math_imul($173, $178)|0;
  $180 = $179 >>> 8;
  $181 = (($180) + ($in1$0))|0;
  $182 = HEAP32[$51>>2]|0;
  $183 = Math_imul($182, $173)|0;
  $184 = $183 >>> 8;
  $185 = (($184) + ($in2$0))|0;
  $186 = HEAP32[$52>>2]|0;
  $187 = Math_imul($186, $173)|0;
  $188 = $187 >>> 8;
  $189 = (($188) + ($in3$0))|0;
  $190 = HEAP16[$$0>>1]|0;
  $191 = $190&65535;
  $192 = HEAP32[$53>>2]|0;
  $193 = $192 & $166;
  $194 = (($193) + ($191))|0;
  $195 = (($$0) + 2|0);
  $196 = HEAP16[$195>>1]|0;
  $197 = $196&65535;
  $198 = HEAP32[$54>>2]|0;
  $199 = $198 & $166;
  $200 = (($199) + ($197))|0;
  __Z15update_envelopeR6slot_t($15);
  __Z15update_envelopeR6slot_t($4);
  __Z15update_envelopeR6slot_t($9);
  __Z15update_envelopeR6slot_t($0);
  HEAP32[$ch>>2] = $136;
  $201 = $194&65535;
  HEAP16[$$0>>1] = $201;
  $202 = $200&65535;
  HEAP16[$195>>1] = $202;
  $203 = (($$0) + 4|0);
  $204 = (($$01) + -1)|0;
  $205 = ($204|0)==(0);
  if ($205) {
   $$lcssa = $124;$$lcssa10 = $177;$$lcssa11 = $181;$$lcssa12 = $185;$$lcssa13 = $189;
   break;
  } else {
   $$0 = $203;$$01 = $204;$$pn = $YM2612_LFOcnt$0;$CH_S0_OUT_1$0 = $124;$in0$0 = $177;$in1$0 = $181;$in2$0 = $185;$in3$0 = $189;
  }
 }
 HEAP32[$14>>2] = $$lcssa;
 HEAP32[$16>>2] = $$lcssa10;
 HEAP32[$17>>2] = $$lcssa11;
 HEAP32[$18>>2] = $$lcssa12;
 HEAP32[$19>>2] = $$lcssa13;
 return;
}
function __ZN18ym2612_update_chanILi6EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
 $g = $g|0;
 $ch = $ch|0;
 $buf = $buf|0;
 $length = $length|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in1$0 = 0, $in2$0 = 0, $in3$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ch) + 436|0);
 $1 = (($ch) + 504|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -536870912)|0;
 $4 = (($ch) + 204|0);
 $5 = (($ch) + 272|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -536870912)|0;
 $8 = $7 | $3;
 $9 = (($ch) + 320|0);
 $10 = (($ch) + 388|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -536870912)|0;
 $13 = $8 | $12;
 $14 = (($ch) + 4|0);
 $15 = (($ch) + 88|0);
 $16 = (($ch) + 144|0);
 $17 = (($ch) + 376|0);
 $18 = (($ch) + 260|0);
 $19 = (($ch) + 492|0);
 $20 = (($g) + 8196|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($13|0)==(0);
 if ($22) {
  return;
 }
 $23 = (($g) + 8192|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$19>>2]|0;
 $26 = HEAP32[$18>>2]|0;
 $27 = HEAP32[$17>>2]|0;
 $28 = HEAP32[$16>>2]|0;
 $29 = HEAP32[$14>>2]|0;
 $30 = (($ch) + 156|0);
 $31 = (($ch) + 100|0);
 $32 = (($ch) + 120|0);
 $33 = (($ch) + 196|0);
 $34 = (($ch) + 124|0);
 $35 = (($ch) + 332|0);
 $36 = (($ch) + 352|0);
 $37 = (($ch) + 428|0);
 $38 = (($ch) + 356|0);
 $39 = (($ch) + 216|0);
 $40 = (($ch) + 236|0);
 $41 = (($ch) + 312|0);
 $42 = (($ch) + 240|0);
 $43 = (($ch) + 448|0);
 $44 = (($ch) + 468|0);
 $45 = (($ch) + 544|0);
 $46 = (($ch) + 472|0);
 $47 = (($ch) + 28|0);
 $48 = (($ch) + 32|0);
 $49 = (($ch) + 148|0);
 $50 = (($ch) + 380|0);
 $51 = (($ch) + 264|0);
 $52 = (($ch) + 496|0);
 $53 = (($ch) + 16|0);
 $54 = (($ch) + 20|0);
 $$0 = $buf;$$01 = $length;$$pn = $24;$CH_S0_OUT_1$0 = $29;$in0$0 = $28;$in1$0 = $27;$in2$0 = $26;$in3$0 = $25;
 while(1) {
  $YM2612_LFOcnt$0 = (($$pn) + ($21))|0;
  $55 = $YM2612_LFOcnt$0 >>> 18;
  $56 = $55 & 1023;
  $57 = ((($g) + ($56<<1)|0) + 26744|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = HEAP32[$30>>2]|0;
  $61 = $60 >> 16;
  $62 = ((($g) + ($61<<1)|0) + 10344|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = HEAP32[$31>>2]|0;
  $66 = (($64) + ($65))|0;
  $67 = HEAP32[$32>>2]|0;
  $68 = $66 ^ $67;
  $69 = HEAP32[$33>>2]|0;
  $70 = $59 >> $69;
  $71 = (($70) + ($68))|0;
  $72 = HEAP32[$34>>2]|0;
  $73 = (($66) - ($72))|0;
  $74 = $73 >> 31;
  $75 = $74 & $71;
  $76 = HEAP32[$10>>2]|0;
  $77 = $76 >> 16;
  $78 = ((($g) + ($77<<1)|0) + 10344|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79 << 16 >> 16;
  $81 = HEAP32[$35>>2]|0;
  $82 = (($80) + ($81))|0;
  $83 = HEAP32[$36>>2]|0;
  $84 = $82 ^ $83;
  $85 = HEAP32[$37>>2]|0;
  $86 = $59 >> $85;
  $87 = (($86) + ($84))|0;
  $88 = HEAP32[$38>>2]|0;
  $89 = (($82) - ($88))|0;
  $90 = $89 >> 31;
  $91 = $90 & $87;
  $92 = HEAP32[$5>>2]|0;
  $93 = $92 >> 16;
  $94 = ((($g) + ($93<<1)|0) + 10344|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = $95 << 16 >> 16;
  $97 = HEAP32[$39>>2]|0;
  $98 = (($96) + ($97))|0;
  $99 = HEAP32[$40>>2]|0;
  $100 = $98 ^ $99;
  $101 = HEAP32[$41>>2]|0;
  $102 = $59 >> $101;
  $103 = (($102) + ($100))|0;
  $104 = HEAP32[$42>>2]|0;
  $105 = (($98) - ($104))|0;
  $106 = $105 >> 31;
  $107 = $106 & $103;
  $108 = HEAP32[$1>>2]|0;
  $109 = $108 >> 16;
  $110 = ((($g) + ($109<<1)|0) + 10344|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111 << 16 >> 16;
  $113 = HEAP32[$43>>2]|0;
  $114 = (($112) + ($113))|0;
  $115 = HEAP32[$44>>2]|0;
  $116 = $114 ^ $115;
  $117 = HEAP32[$45>>2]|0;
  $118 = $59 >> $117;
  $119 = (($118) + ($116))|0;
  $120 = HEAP32[$46>>2]|0;
  $121 = (($114) - ($120))|0;
  $122 = $121 >> 31;
  $123 = $122 & $119;
  $124 = HEAP32[$ch>>2]|0;
  $125 = (($124) + ($CH_S0_OUT_1$0))|0;
  $126 = HEAP32[$47>>2]|0;
  $127 = $125 >> $126;
  $128 = (($127) + ($in0$0))|0;
  $129 = $128 >>> 14;
  $130 = $129 & 4095;
  $131 = (($g) + ($130<<1)|0);
  $132 = HEAP16[$131>>1]|0;
  $133 = $132 << 16 >> 16;
  $134 = (($133) + ($75))|0;
  $135 = ((($g) + ($134<<2)|0) + 30840|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $in3$0 >>> 14;
  $138 = $137 & 4095;
  $139 = (($g) + ($138<<1)|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $140 << 16 >> 16;
  $142 = (($141) + ($123))|0;
  $143 = ((($g) + ($142<<2)|0) + 30840|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($124) + ($in1$0))|0;
  $146 = $145 >>> 14;
  $147 = $146 & 4095;
  $148 = (($g) + ($147<<1)|0);
  $149 = HEAP16[$148>>1]|0;
  $150 = $149 << 16 >> 16;
  $151 = (($150) + ($91))|0;
  $152 = ((($g) + ($151<<2)|0) + 30840|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + ($144))|0;
  $155 = $in2$0 >>> 14;
  $156 = $155 & 4095;
  $157 = (($g) + ($156<<1)|0);
  $158 = HEAP16[$157>>1]|0;
  $159 = $158 << 16 >> 16;
  $160 = (($159) + ($107))|0;
  $161 = ((($g) + ($160<<2)|0) + 30840|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($154) + ($162))|0;
  $164 = $163 >> 16;
  $165 = ((($g) + ($56<<1)|0) + 28792|0);
  $166 = HEAP16[$165>>1]|0;
  $167 = $166 << 16 >> 16;
  $168 = HEAP32[$48>>2]|0;
  $169 = Math_imul($167, $168)|0;
  $170 = $169 >> 10;
  $171 = (($170) + 256)|0;
  $172 = HEAP32[$49>>2]|0;
  $173 = Math_imul($171, $172)|0;
  $174 = $173 >>> 8;
  $175 = (($174) + ($in0$0))|0;
  $176 = HEAP32[$50>>2]|0;
  $177 = Math_imul($171, $176)|0;
  $178 = $177 >>> 8;
  $179 = (($178) + ($in1$0))|0;
  $180 = HEAP32[$51>>2]|0;
  $181 = Math_imul($180, $171)|0;
  $182 = $181 >>> 8;
  $183 = (($182) + ($in2$0))|0;
  $184 = HEAP32[$52>>2]|0;
  $185 = Math_imul($184, $171)|0;
  $186 = $185 >>> 8;
  $187 = (($186) + ($in3$0))|0;
  $188 = HEAP16[$$0>>1]|0;
  $189 = $188&65535;
  $190 = HEAP32[$53>>2]|0;
  $191 = $190 & $164;
  $192 = (($191) + ($189))|0;
  $193 = (($$0) + 2|0);
  $194 = HEAP16[$193>>1]|0;
  $195 = $194&65535;
  $196 = HEAP32[$54>>2]|0;
  $197 = $196 & $164;
  $198 = (($197) + ($195))|0;
  __Z15update_envelopeR6slot_t($15);
  __Z15update_envelopeR6slot_t($4);
  __Z15update_envelopeR6slot_t($9);
  __Z15update_envelopeR6slot_t($0);
  HEAP32[$ch>>2] = $136;
  $199 = $192&65535;
  HEAP16[$$0>>1] = $199;
  $200 = $198&65535;
  HEAP16[$193>>1] = $200;
  $201 = (($$0) + 4|0);
  $202 = (($$01) + -1)|0;
  $203 = ($202|0)==(0);
  if ($203) {
   $$lcssa = $124;$$lcssa10 = $175;$$lcssa11 = $179;$$lcssa12 = $183;$$lcssa13 = $187;
   break;
  } else {
   $$0 = $201;$$01 = $202;$$pn = $YM2612_LFOcnt$0;$CH_S0_OUT_1$0 = $124;$in0$0 = $175;$in1$0 = $179;$in2$0 = $183;$in3$0 = $187;
  }
 }
 HEAP32[$14>>2] = $$lcssa;
 HEAP32[$16>>2] = $$lcssa10;
 HEAP32[$17>>2] = $$lcssa11;
 HEAP32[$18>>2] = $$lcssa12;
 HEAP32[$19>>2] = $$lcssa13;
 return;
}
function __ZN18ym2612_update_chanILi7EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
 $g = $g|0;
 $ch = $ch|0;
 $buf = $buf|0;
 $length = $length|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa11 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in1$0 = 0, $in2$0 = 0;
 var $in3$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ch) + 436|0);
 $1 = (($ch) + 504|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -536870912)|0;
 $4 = (($ch) + 88|0);
 $5 = (($ch) + 156|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -536870912)|0;
 $8 = $7 | $3;
 $9 = (($ch) + 204|0);
 $10 = (($ch) + 272|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -536870912)|0;
 $13 = $8 | $12;
 $14 = (($ch) + 320|0);
 $15 = (($ch) + 388|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -536870912)|0;
 $18 = $13 | $17;
 $19 = (($ch) + 4|0);
 $20 = (($ch) + 144|0);
 $21 = (($ch) + 376|0);
 $22 = (($ch) + 260|0);
 $23 = (($ch) + 492|0);
 $24 = (($g) + 8196|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($18|0)==(0);
 if ($26) {
  return;
 }
 $27 = (($g) + 8192|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$23>>2]|0;
 $30 = HEAP32[$22>>2]|0;
 $31 = HEAP32[$21>>2]|0;
 $32 = HEAP32[$20>>2]|0;
 $33 = HEAP32[$19>>2]|0;
 $34 = (($ch) + 100|0);
 $35 = (($ch) + 120|0);
 $36 = (($ch) + 196|0);
 $37 = (($ch) + 124|0);
 $38 = (($ch) + 332|0);
 $39 = (($ch) + 352|0);
 $40 = (($ch) + 428|0);
 $41 = (($ch) + 356|0);
 $42 = (($ch) + 216|0);
 $43 = (($ch) + 236|0);
 $44 = (($ch) + 312|0);
 $45 = (($ch) + 240|0);
 $46 = (($ch) + 448|0);
 $47 = (($ch) + 468|0);
 $48 = (($ch) + 544|0);
 $49 = (($ch) + 472|0);
 $50 = (($ch) + 28|0);
 $51 = (($ch) + 32|0);
 $52 = (($ch) + 148|0);
 $53 = (($ch) + 380|0);
 $54 = (($ch) + 264|0);
 $55 = (($ch) + 496|0);
 $56 = (($ch) + 16|0);
 $57 = (($ch) + 20|0);
 $$0 = $buf;$$01 = $length;$$pn = $28;$CH_S0_OUT_1$0 = $33;$in0$0 = $32;$in1$0 = $31;$in2$0 = $30;$in3$0 = $29;
 while(1) {
  $YM2612_LFOcnt$0 = (($$pn) + ($25))|0;
  $58 = $YM2612_LFOcnt$0 >>> 18;
  $59 = $58 & 1023;
  $60 = ((($g) + ($59<<1)|0) + 26744|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = HEAP32[$5>>2]|0;
  $64 = $63 >> 16;
  $65 = ((($g) + ($64<<1)|0) + 10344|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = HEAP32[$34>>2]|0;
  $69 = (($67) + ($68))|0;
  $70 = HEAP32[$35>>2]|0;
  $71 = $69 ^ $70;
  $72 = HEAP32[$36>>2]|0;
  $73 = $62 >> $72;
  $74 = (($73) + ($71))|0;
  $75 = HEAP32[$37>>2]|0;
  $76 = (($69) - ($75))|0;
  $77 = $76 >> 31;
  $78 = $77 & $74;
  $79 = HEAP32[$15>>2]|0;
  $80 = $79 >> 16;
  $81 = ((($g) + ($80<<1)|0) + 10344|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82 << 16 >> 16;
  $84 = HEAP32[$38>>2]|0;
  $85 = (($83) + ($84))|0;
  $86 = HEAP32[$39>>2]|0;
  $87 = $85 ^ $86;
  $88 = HEAP32[$40>>2]|0;
  $89 = $62 >> $88;
  $90 = (($89) + ($87))|0;
  $91 = HEAP32[$41>>2]|0;
  $92 = (($85) - ($91))|0;
  $93 = $92 >> 31;
  $94 = $93 & $90;
  $95 = HEAP32[$10>>2]|0;
  $96 = $95 >> 16;
  $97 = ((($g) + ($96<<1)|0) + 10344|0);
  $98 = HEAP16[$97>>1]|0;
  $99 = $98 << 16 >> 16;
  $100 = HEAP32[$42>>2]|0;
  $101 = (($99) + ($100))|0;
  $102 = HEAP32[$43>>2]|0;
  $103 = $101 ^ $102;
  $104 = HEAP32[$44>>2]|0;
  $105 = $62 >> $104;
  $106 = (($105) + ($103))|0;
  $107 = HEAP32[$45>>2]|0;
  $108 = (($101) - ($107))|0;
  $109 = $108 >> 31;
  $110 = $109 & $106;
  $111 = HEAP32[$1>>2]|0;
  $112 = $111 >> 16;
  $113 = ((($g) + ($112<<1)|0) + 10344|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114 << 16 >> 16;
  $116 = HEAP32[$46>>2]|0;
  $117 = (($115) + ($116))|0;
  $118 = HEAP32[$47>>2]|0;
  $119 = $117 ^ $118;
  $120 = HEAP32[$48>>2]|0;
  $121 = $62 >> $120;
  $122 = (($121) + ($119))|0;
  $123 = HEAP32[$49>>2]|0;
  $124 = (($117) - ($123))|0;
  $125 = $124 >> 31;
  $126 = $125 & $122;
  $127 = HEAP32[$ch>>2]|0;
  $128 = (($127) + ($CH_S0_OUT_1$0))|0;
  $129 = HEAP32[$50>>2]|0;
  $130 = $128 >> $129;
  $131 = (($130) + ($in0$0))|0;
  $132 = $131 >>> 14;
  $133 = $132 & 4095;
  $134 = (($g) + ($133<<1)|0);
  $135 = HEAP16[$134>>1]|0;
  $136 = $135 << 16 >> 16;
  $137 = (($136) + ($78))|0;
  $138 = ((($g) + ($137<<2)|0) + 30840|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $in3$0 >>> 14;
  $141 = $140 & 4095;
  $142 = (($g) + ($141<<1)|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143 << 16 >> 16;
  $145 = (($144) + ($126))|0;
  $146 = ((($g) + ($145<<2)|0) + 30840|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $in1$0 >>> 14;
  $149 = $148 & 4095;
  $150 = (($g) + ($149<<1)|0);
  $151 = HEAP16[$150>>1]|0;
  $152 = $151 << 16 >> 16;
  $153 = (($152) + ($94))|0;
  $154 = ((($g) + ($153<<2)|0) + 30840|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $in2$0 >>> 14;
  $157 = $156 & 4095;
  $158 = (($g) + ($157<<1)|0);
  $159 = HEAP16[$158>>1]|0;
  $160 = $159 << 16 >> 16;
  $161 = (($160) + ($110))|0;
  $162 = ((($g) + ($161<<2)|0) + 30840|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($147) + ($127))|0;
  $165 = (($164) + ($155))|0;
  $166 = (($165) + ($163))|0;
  $167 = $166 >> 16;
  $168 = ((($g) + ($59<<1)|0) + 28792|0);
  $169 = HEAP16[$168>>1]|0;
  $170 = $169 << 16 >> 16;
  $171 = HEAP32[$51>>2]|0;
  $172 = Math_imul($170, $171)|0;
  $173 = $172 >> 10;
  $174 = (($173) + 256)|0;
  $175 = HEAP32[$52>>2]|0;
  $176 = Math_imul($174, $175)|0;
  $177 = $176 >>> 8;
  $178 = (($177) + ($in0$0))|0;
  $179 = HEAP32[$53>>2]|0;
  $180 = Math_imul($174, $179)|0;
  $181 = $180 >>> 8;
  $182 = (($181) + ($in1$0))|0;
  $183 = HEAP32[$54>>2]|0;
  $184 = Math_imul($183, $174)|0;
  $185 = $184 >>> 8;
  $186 = (($185) + ($in2$0))|0;
  $187 = HEAP32[$55>>2]|0;
  $188 = Math_imul($187, $174)|0;
  $189 = $188 >>> 8;
  $190 = (($189) + ($in3$0))|0;
  $191 = HEAP16[$$0>>1]|0;
  $192 = $191&65535;
  $193 = HEAP32[$56>>2]|0;
  $194 = $193 & $167;
  $195 = (($194) + ($192))|0;
  $196 = (($$0) + 2|0);
  $197 = HEAP16[$196>>1]|0;
  $198 = $197&65535;
  $199 = HEAP32[$57>>2]|0;
  $200 = $199 & $167;
  $201 = (($200) + ($198))|0;
  __Z15update_envelopeR6slot_t($4);
  __Z15update_envelopeR6slot_t($9);
  __Z15update_envelopeR6slot_t($14);
  __Z15update_envelopeR6slot_t($0);
  HEAP32[$ch>>2] = $139;
  $202 = $195&65535;
  HEAP16[$$0>>1] = $202;
  $203 = $201&65535;
  HEAP16[$196>>1] = $203;
  $204 = (($$0) + 4|0);
  $205 = (($$01) + -1)|0;
  $206 = ($205|0)==(0);
  if ($206) {
   $$lcssa = $127;$$lcssa10 = $178;$$lcssa11 = $182;$$lcssa12 = $186;$$lcssa13 = $190;
   break;
  } else {
   $$0 = $204;$$01 = $205;$$pn = $YM2612_LFOcnt$0;$CH_S0_OUT_1$0 = $127;$in0$0 = $178;$in1$0 = $182;$in2$0 = $186;$in3$0 = $190;
  }
 }
 HEAP32[$19>>2] = $$lcssa;
 HEAP32[$20>>2] = $$lcssa10;
 HEAP32[$21>>2] = $$lcssa11;
 HEAP32[$22>>2] = $$lcssa12;
 HEAP32[$23>>2] = $$lcssa13;
 return;
}
function __Z15update_envelopeR6slot_t($sl) {
 $sl = $sl|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($sl) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($sl) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($sl) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 HEAP32[$4>>2] = $6;
 $7 = ($6|0)<($1|0);
 if ($7) {
  return;
 }
 __ZL16update_envelope_P6slot_t($sl);
 return;
}
function __ZL16update_envelope_P6slot_t($sl) {
 $sl = $sl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($sl) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 do {
  if ((($1|0) == 2)) {
   $16 = (($sl) + 28|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 & 8;
   $19 = ($18|0)==(0);
   if (!($19)) {
    $20 = $17 & 1;
    $21 = ($20|0)==(0);
    if (!($21)) {
     $30 = $17 << 1;
     $31 = $30 & 4;
     __Z7set_segR6slot_ti($sl,$31);
     break;
    }
    $22 = (($sl) + 68|0);
    HEAP32[$22>>2] = 0;
    $23 = (($sl) + 80|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($sl) + 72|0);
    HEAP32[$25>>2] = $24;
    $26 = (($sl) + 76|0);
    HEAP32[$26>>2] = 268435456;
    HEAP32[$0>>2] = 0;
    $27 = HEAP32[$16>>2]|0;
    $28 = $27 << 1;
    $29 = $28 & 4;
    __Z7set_segR6slot_ti($sl,$29);
    return;
   }
  } else if ((($1|0) == 1)) {
   $9 = (($sl) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($sl) + 68|0);
   HEAP32[$11>>2] = $10;
   $12 = (($sl) + 88|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($sl) + 72|0);
   HEAP32[$14>>2] = $13;
   $15 = (($sl) + 76|0);
   HEAP32[$15>>2] = 536870912;
   HEAP32[$0>>2] = 2;
   return;
  } else if ((($1|0) == 0)) {
   $2 = (($sl) + 68|0);
   HEAP32[$2>>2] = 268435456;
   $3 = (($sl) + 84|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($sl) + 72|0);
   HEAP32[$5>>2] = $4;
   $6 = (($sl) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($sl) + 76|0);
   HEAP32[$8>>2] = $7;
   HEAP32[$0>>2] = 1;
   return;
  } else if (!((($1|0) == 3))) {
   return;
  }
 } while(0);
 $32 = (($sl) + 68|0);
 HEAP32[$32>>2] = 536870912;
 $33 = (($sl) + 72|0);
 HEAP32[$33>>2] = 0;
 $34 = (($sl) + 76|0);
 HEAP32[$34>>2] = 536870913;
 return;
}
function _gme_identify_header($header) {
 $header = $header|0;
 var $$0 = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Z8get_be32PKv($header)|0);
 do {
  if ((($0|0) == 1263752024) | (($0|0) == 1263747907)) {
   $$0 = 50064;
  } else if ((($0|0) == 1313166157)) {
   $$0 = 50072;
  } else if ((($0|0) == 1314080325)) {
   $$0 = 50080;
  } else if ((($0|0) == 1515733337)) {
   $$0 = 50032;
  } else if ((($0|0) == 1195528961)) {
   $$0 = 50040;
  } else if ((($0|0) == 1396789261)) {
   $$0 = 50088;
  } else if ((($0|0) == 1449618720)) {
   $$0 = 50104;
  } else if ((($0|0) == 1212502861)) {
   $$0 = 50056;
  } else if ((($0|0) == 1197034840)) {
   $$0 = 50048;
  } else if ((($0|0) == 1397638483)) {
   $$0 = 50096;
  } else {
   $$0 = 50112;
  }
 } while(0);
 return ($$0|0);
}
function _gme_identify_extension($extension_) {
 $extension_ = $extension_|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extension = 0, $extension_$ = 0, $types$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $extension = sp;
 $0 = (_strrchr($extension_,46)|0);
 $1 = ($0|0)==(0|0);
 $2 = (($0) + 1|0);
 $extension_$ = $1 ? $extension_ : $2;
 __ZL12to_uppercasePKciPc($extension_$,$extension);
 $7 = 35088;$types$02 = 49984;
 while(1) {
  $6 = (($7) + 16|0);
  $8 = HEAP32[$6>>2]|0;
  $9 = (_strcmp($extension,$8)|0);
  $10 = ($9|0)==(0);
  $4 = (($types$02) + 4|0);
  if ($10) {
   $$0 = $7;
   label = 4;
   break;
  }
  $3 = HEAP32[$4>>2]|0;
  $5 = ($3|0)==(0|0);
  if ($5) {
   $$0 = 0;
   label = 4;
   break;
  } else {
   $7 = $3;$types$02 = $4;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _gme_new_emu($type,$rate) {
 $type = $type|0;
 $rate = $rate|0;
 var $$0 = 0, $$mux = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($rate|0)==(-1);
 if ($1) {
  $2 = (($type) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (FUNCTION_TABLE_i[$3 & 31]()|0);
  $$0 = $4;
  return ($$0|0);
 }
 $5 = (($type) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_i[$6 & 31]()|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (($type) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 do {
  if (!($12)) {
   $13 = (__ZN12Multi_BuffernwEj(512)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = (($7) + 248|0);
    HEAP32[$15>>2] = 0;
    break;
   } else {
    __ZN14Effects_BufferC2Eb($13,0);
    $16 = (($7) + 248|0);
    HEAP32[$16>>2] = $13;
    $17 = HEAP32[$7>>2]|0;
    $18 = (($17) + 36|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 31]($7,$13);
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$9>>2]|0;
 $21 = $20 & 1;
 $22 = ($21|0)==(0);
 if ($22) {
  label = 11;
 } else {
  $23 = (($7) + 248|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   if ($8) {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   label = 11;
  }
 }
 if ((label|0) == 11) {
  $26 = (__ZN9Music_Emu15set_sample_rateEl($7,$rate)|0);
  $27 = ($26|0)==(0|0);
  $brmerge = $27 | $8;
  $$mux = $27 ? $7 : 0;
  if ($brmerge) {
   $$0 = $$mux;
   return ($$0|0);
  }
 }
 $28 = HEAP32[$7>>2]|0;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 FUNCTION_TABLE_vi[$30 & 127]($7);
 $$0 = 0;
 return ($$0|0);
}
function _gme_open_file($path,$out,$sample_rate) {
 $path = $path|0;
 $out = $out|0;
 $sample_rate = $sample_rate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $file_type$05 = 0;
 var $header = 0, $header_size$04 = 0, $in = 0, $or$cond = 0, $rem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $in = sp + 16|0;
 $header = sp + 24|0;
 $rem = sp;
 $0 = ($path|0)!=(0|0);
 $1 = ($out|0)!=(0|0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  ___assert_fail((50176|0),(50120|0),136,(50192|0));
  // unreachable;
 }
 HEAP32[$out>>2] = 0;
 __ZN15Std_File_ReaderC2Ev($in);
 $2 = (__ZN15Std_File_Reader4openEPKc($in,$path)|0);
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $4 = (_gme_identify_extension($path)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    $6 = (__ZN15Std_File_Reader4readEPvl($in,$header,4)|0);
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     $$0 = $6;
     break;
    }
    $8 = (_gme_identify_header($header)|0);
    $9 = (_gme_identify_extension($8)|0);
    $10 = ($9|0)==(0|0);
    if ($10) {
     $$0 = 38248;
     break;
    } else {
     $file_type$05 = $9;$header_size$04 = 4;
    }
   } else {
    $file_type$05 = $4;$header_size$04 = 0;
   }
   $11 = (_gme_new_emu($file_type$05,$sample_rate)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$0 = 50160;
   } else {
    __ZN16Remaining_ReaderC2EPKvlP11Data_Reader($rem,$header,$header_size$04,$in);
    $13 = (__ZN8Gme_File4loadER11Data_Reader($11,$rem)|0);
    __ZN15Std_File_Reader5closeEv($in);
    $14 = ($13|0)==(0|0);
    if ($14) {
     HEAP32[$out>>2] = $11;
     $$0 = 0;
     break;
    }
    if ($12) {
     $$0 = $13;
    } else {
     $15 = HEAP32[$11>>2]|0;
     $16 = (($15) + 4|0);
     $17 = HEAP32[$16>>2]|0;
     FUNCTION_TABLE_vi[$17 & 127]($11);
     $$0 = $13;
    }
   }
  } else {
   $$0 = $2;
  }
 } while(0);
 __ZN15Std_File_ReaderD2Ev($in);
 STACKTOP = sp;return ($$0|0);
}
function _gme_track_info($me,$out,$track) {
 $me = $me|0;
 $out = $out|0;
 $track = $track|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK8Gme_File10track_infoEP12track_info_ti($me,$out,$track)|0);
 return ($0|0);
}
function _gme_start_track($me,$index) {
 $me = $me|0;
 $index = $index|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN9Music_Emu11start_trackEi($me,$index)|0);
 return ($0|0);
}
function _gme_play($me,$n,$p) {
 $me = $me|0;
 $n = $n|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN9Music_Emu4playElPs($me,$n,$p)|0);
 return ($0|0);
}
function _gme_track_ended($me) {
 $me = $me|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu11track_endedEv($me)|0);
 $1 = $0&1;
 return ($1|0);
}
function _gme_tell($me) {
 $me = $me|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9Music_Emu4tellEv($me)|0);
 return ($0|0);
}
function _gme_seek($me,$msec) {
 $me = $me|0;
 $msec = $msec|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN9Music_Emu4seekEl($me,$msec)|0);
 return ($0|0);
}
function __Z8get_be32PKv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = $1 << 24;
 $3 = (($p) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 16;
 $7 = $6 | $2;
 $8 = (($p) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = (($p) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 return ($16|0);
}
function __ZL12to_uppercasePKciPc($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $2 = (($in) + ($i$01)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = (_toupper($4)|0);
  $6 = $5&255;
  $7 = (($out) + ($i$01)|0);
  HEAP8[$7>>0] = $6;
  $8 = ($6<<24>>24)==(0);
  $1 = (($i$01) + 1)|0;
  if ($8) {
   label = 5;
   break;
  }
  $0 = ($1|0)<(6);
  if ($0) {
   $i$01 = $1;
  } else {
   break;
  }
 }
 if ((label|0) == 5) {
  return;
 }
 HEAP8[$out>>0] = 0;
 return;
}
function __Z14json_stringifyPK8JsonNodePKc($node,$space) {
 $node = $node|0;
 $space = $space|0;
 var $0 = 0, $1 = 0, $sb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sb = sp;
 __ZL7sb_initP2SB($sb);
 $0 = ($space|0)==(0|0);
 if ($0) {
  __ZL10emit_valueP2SBPK8JsonNode($sb,$node);
 } else {
  __ZL19emit_value_indentedP2SBPK8JsonNodePKci($sb,$node,$space,0);
 }
 $1 = (__ZL9sb_finishP2SB($sb)|0);
 STACKTOP = sp;return ($1|0);
}
function __Z16json_first_childPK8JsonNode($node) {
 $node = $node|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($node|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($node) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & -2;
 $switch = ($3|0)==(4);
 if (!($switch)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (($node) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $$0 = $5;
 return ($$0|0);
}
function __Z13json_mkstringPKc($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZL11json_strdupPKc($s)|0);
 $1 = (__ZL8mkstringPc($0)|0);
 return ($1|0);
}
function __Z13json_mknumberd($n) {
 $n = +$n;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZL6mknode7JsonTag(3)|0);
 $1 = (($0) + 24|0);
 HEAPF64[$1>>3] = $n;
 return ($0|0);
}
function __Z13json_mkobjectv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZL6mknode7JsonTag(5)|0);
 return ($0|0);
}
function __Z18json_append_memberP8JsonNodePKcS0_($object,$key,$value) {
 $object = $object|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($object) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(5);
 if (!($2)) {
  ___assert_fail((50248|0),(50208|0),586,(50280|0));
  // unreachable;
 }
 $3 = HEAP32[$value>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (__ZL11json_strdupPKc($key)|0);
  __ZL13append_memberP8JsonNodePcS0_($object,$5,$value);
  return;
 } else {
  ___assert_fail((50304|0),(50208|0),587,(50280|0));
  // unreachable;
 }
}
function __ZL7sb_initP2SB($sb) {
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(17)|0);
 $1 = (($sb) + 8|0);
 HEAP32[$1>>2] = $0;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[_stderr>>2]|0;
  (_fwrite((50536|0),15,1,($3|0))|0);
  _exit(1);
  // unreachable;
 } else {
  HEAP32[$sb>>2] = $0;
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + 16|0);
  $6 = (($sb) + 4|0);
  HEAP32[$6>>2] = $5;
  return;
 }
}
function __ZL19emit_value_indentedP2SBPK8JsonNodePKci($out,$node,$space,$indent_level) {
 $out = $out|0;
 $node = $node|0;
 $space = $space|0;
 $indent_level = $indent_level|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($node) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZL12tag_is_validj($1)|0);
 if (!($2)) {
  ___assert_fail((50552|0),(50208|0),1003,(50576|0));
  // unreachable;
 }
 switch ($1|0) {
 case 0:  {
  __ZL7sb_putsP2SBPKc($out,50600);
  return;
  break;
 }
 case 3:  {
  $9 = (($node) + 24|0);
  $10 = +HEAPF64[$9>>3];
  __ZL11emit_numberP2SBd($out,$10);
  return;
  break;
 }
 case 5:  {
  __ZL20emit_object_indentedP2SBPK8JsonNodePKci($out,$node,$space,$indent_level);
  return;
  break;
 }
 case 4:  {
  __ZL19emit_array_indentedP2SBPK8JsonNodePKci($out,$node,$space,$indent_level);
  return;
  break;
 }
 case 2:  {
  $7 = (($node) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  __ZL11emit_stringP2SBPKc($out,$8);
  return;
  break;
 }
 case 1:  {
  $3 = (($node) + 24|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)!=(0);
  $6 = $5 ? 50608 : 50368;
  __ZL7sb_putsP2SBPKc($out,$6);
  return;
  break;
 }
 default: {
  ___assert_fail((50368|0),(50208|0),1024,(50576|0));
  // unreachable;
 }
 }
}
function __ZL10emit_valueP2SBPK8JsonNode($out,$node) {
 $out = $out|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($node) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZL12tag_is_validj($1)|0);
 if (!($2)) {
  ___assert_fail((50552|0),(50208|0),976,(50680|0));
  // unreachable;
 }
 switch ($1|0) {
 case 4:  {
  __ZL10emit_arrayP2SBPK8JsonNode($out,$node);
  return;
  break;
 }
 case 1:  {
  $3 = (($node) + 24|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)!=(0);
  $6 = $5 ? 50608 : 50368;
  __ZL7sb_putsP2SBPKc($out,$6);
  return;
  break;
 }
 case 0:  {
  __ZL7sb_putsP2SBPKc($out,50600);
  return;
  break;
 }
 case 2:  {
  $7 = (($node) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  __ZL11emit_stringP2SBPKc($out,$8);
  return;
  break;
 }
 case 3:  {
  $9 = (($node) + 24|0);
  $10 = +HEAPF64[$9>>3];
  __ZL11emit_numberP2SBd($out,$10);
  return;
  break;
 }
 case 5:  {
  __ZL11emit_objectP2SBPK8JsonNode($out,$node);
  return;
  break;
 }
 default: {
  ___assert_fail((50368|0),(50208|0),997,(50680|0));
  // unreachable;
 }
 }
}
function __ZL9sb_finishP2SB($sb) {
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$sb>>2]|0;
 HEAP8[$0>>0] = 0;
 $1 = (($sb) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$sb>>2]|0;
 $4 = ($2>>>0)>($3>>>0);
 if (!($4)) {
  $5 = (_strlen(($2|0))|0);
  $6 = $3;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = ($5|0)==($8|0);
  if ($9) {
   return ($2|0);
  }
 }
 ___assert_fail((50696|0),(50208|0),108,(50776|0));
 // unreachable;
 return (0)|0;
}
function __ZL11emit_stringP2SBPKc($out,$str) {
 $out = $out|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0$lcssa = 0, $b$07 = 0, $b$13 = 0, $b$2 = 0, $lc = 0, $len$05 = 0, $s$08 = 0, $s$14 = 0, $s$2 = 0, $scevgep = 0, $scevgep13 = 0, $uc = 0, $unicode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $unicode = sp;
 $uc = sp + 6|0;
 $lc = sp + 4|0;
 $0 = (__ZL13utf8_validatePKc($str)|0);
 if (!($0)) {
  ___assert_fail((50328|0),(50208|0),1112,(50352|0));
  // unreachable;
 }
 $1 = (($out) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$out>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)<(14);
 if ($7) {
  __ZL7sb_growP2SBi($out,14);
 }
 $8 = HEAP32[$out>>2]|0;
 $9 = (($8) + 1|0);
 HEAP8[$8>>0] = 34;
 $10 = HEAP8[$str>>0]|0;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $b$0$lcssa = $9;
  $63 = (($b$0$lcssa) + 1|0);
  HEAP8[$b$0$lcssa>>0] = 34;
  HEAP32[$out>>2] = $63;
  STACKTOP = sp;return;
 } else {
  $14 = $10;$b$07 = $9;$s$08 = $str;
 }
 L9: while(1) {
  $12 = (($s$08) + 1|0);
  $13 = $14&255;
  L11: do {
   switch ($13|0) {
   case 10:  {
    $23 = (($b$07) + 1|0);
    HEAP8[$b$07>>0] = 92;
    $24 = (($b$07) + 2|0);
    HEAP8[$23>>0] = 110;
    $b$2 = $24;$s$2 = $12;
    break;
   }
   case 34:  {
    $15 = (($b$07) + 1|0);
    HEAP8[$b$07>>0] = 92;
    $16 = (($b$07) + 2|0);
    HEAP8[$15>>0] = 34;
    $b$2 = $16;$s$2 = $12;
    break;
   }
   case 12:  {
    $21 = (($b$07) + 1|0);
    HEAP8[$b$07>>0] = 92;
    $22 = (($b$07) + 2|0);
    HEAP8[$21>>0] = 102;
    $b$2 = $22;$s$2 = $12;
    break;
   }
   case 9:  {
    $27 = (($b$07) + 1|0);
    HEAP8[$b$07>>0] = 92;
    $28 = (($b$07) + 2|0);
    HEAP8[$27>>0] = 116;
    $b$2 = $28;$s$2 = $12;
    break;
   }
   case 13:  {
    $25 = (($b$07) + 1|0);
    HEAP8[$b$07>>0] = 92;
    $26 = (($b$07) + 2|0);
    HEAP8[$25>>0] = 114;
    $b$2 = $26;$s$2 = $12;
    break;
   }
   case 92:  {
    $17 = (($b$07) + 1|0);
    HEAP8[$b$07>>0] = 92;
    $18 = (($b$07) + 2|0);
    HEAP8[$17>>0] = 92;
    $b$2 = $18;$s$2 = $12;
    break;
   }
   case 8:  {
    $19 = (($b$07) + 1|0);
    HEAP8[$b$07>>0] = 92;
    $20 = (($b$07) + 2|0);
    HEAP8[$19>>0] = 98;
    $b$2 = $20;$s$2 = $12;
    break;
   }
   default: {
    $29 = (__ZL16utf8_validate_czPKc($s$08)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     label = 15;
     break L9;
    }
    $31 = ($14&255)<(31);
    if (!($31)) {
     $scevgep = (($b$07) + ($29)|0);
     $b$13 = $b$07;$len$05 = $29;$s$14 = $s$08;
     while(1) {
      $50 = (($len$05) + -1)|0;
      $51 = (($s$14) + 1|0);
      $52 = HEAP8[$s$14>>0]|0;
      $53 = (($b$13) + 1|0);
      HEAP8[$b$13>>0] = $52;
      $54 = ($50|0)==(0);
      if ($54) {
       break;
      } else {
       $b$13 = $53;$len$05 = $50;$s$14 = $51;
      }
     }
     $scevgep13 = (($s$08) + ($29)|0);
     $b$2 = $scevgep;$s$2 = $scevgep13;
     break L11;
    }
    $32 = (__ZL14utf8_read_charPKcPj($s$08,$unicode)|0);
    $33 = (($s$08) + ($32)|0);
    $34 = HEAP32[$unicode>>2]|0;
    $35 = ($34>>>0)<(65536);
    if ($35) {
     $36 = (($b$07) + 1|0);
     HEAP8[$b$07>>0] = 92;
     $37 = (($b$07) + 2|0);
     HEAP8[$36>>0] = 117;
     $38 = HEAP32[$unicode>>2]|0;
     $39 = $38&65535;
     __ZL11write_hex16Pct($37,$39);
     $40 = (($b$07) + 6|0);
     $b$2 = $40;$s$2 = $33;
     break L11;
    }
    $41 = ($34>>>0)<(1114112);
    if (!($41)) {
     label = 21;
     break L9;
    }
    __ZL17to_surrogate_pairjPtS_($34,$uc,$lc);
    $42 = (($b$07) + 1|0);
    HEAP8[$b$07>>0] = 92;
    $43 = (($b$07) + 2|0);
    HEAP8[$42>>0] = 117;
    $44 = HEAP16[$uc>>1]|0;
    __ZL11write_hex16Pct($43,$44);
    $45 = (($b$07) + 6|0);
    $46 = (($b$07) + 7|0);
    HEAP8[$45>>0] = 92;
    $47 = (($b$07) + 8|0);
    HEAP8[$46>>0] = 117;
    $48 = HEAP16[$lc>>1]|0;
    __ZL11write_hex16Pct($47,$48);
    $49 = (($b$07) + 12|0);
    $b$2 = $49;$s$2 = $33;
   }
   }
  } while(0);
  HEAP32[$out>>2] = $b$2;
  $55 = HEAP32[$1>>2]|0;
  $56 = $55;
  $57 = $b$2;
  $58 = (($56) - ($57))|0;
  $59 = ($58|0)<(14);
  if ($59) {
   __ZL7sb_growP2SBi($out,14);
  }
  $60 = HEAP32[$out>>2]|0;
  $61 = HEAP8[$s$2>>0]|0;
  $62 = ($61<<24>>24)==(0);
  if ($62) {
   $b$0$lcssa = $60;
   label = 28;
   break;
  } else {
   $14 = $61;$b$07 = $60;$s$08 = $s$2;
  }
 }
 if ((label|0) == 15) {
  ___assert_fail((50368|0),(50208|0),1170,(50352|0));
  // unreachable;
 }
 else if ((label|0) == 21) {
  ___assert_fail((50376|0),(50208|0),1193,(50352|0));
  // unreachable;
 }
 else if ((label|0) == 28) {
  $63 = (($b$0$lcssa) + 1|0);
  HEAP8[$b$0$lcssa>>0] = 34;
  HEAP32[$out>>2] = $63;
  STACKTOP = sp;return;
 }
}
function __ZL6mknode7JsonTag($tag) {
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,32)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fwrite((50536|0),15,1,($2|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $3 = (($0) + 16|0);
  HEAP32[$3>>2] = $tag;
  return ($0|0);
 }
 return (0)|0;
}
function __ZL11json_strdupPKc($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($str|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[_stderr>>2]|0;
  (_fwrite((50536|0),15,1,($4|0))|0);
  _exit(1);
  // unreachable;
 } else {
  (_strcpy(($2|0),($str|0))|0);
  return ($2|0);
 }
 return (0)|0;
}
function __ZL8mkstringPc($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZL6mknode7JsonTag(2)|0);
 $1 = (($0) + 24|0);
 HEAP32[$1>>2] = $s;
 return ($0|0);
}
function __ZL11append_nodeP8JsonNodeS0_($parent,$child) {
 $parent = $parent|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$child>>2] = $parent;
 $0 = (($parent) + 24|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($child) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = (($child) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  HEAP32[$0>>2] = $child;
  HEAP32[$1>>2] = $child;
  return;
 } else {
  $7 = (($5) + 8|0);
  HEAP32[$7>>2] = $child;
  HEAP32[$1>>2] = $child;
  return;
 }
}
function __ZL13append_memberP8JsonNodePcS0_($object,$key,$value) {
 $object = $object|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($value) + 12|0);
 HEAP32[$0>>2] = $key;
 __ZL11append_nodeP8JsonNodeS0_($object,$value);
 return;
}
function __ZL13utf8_validatePKc($s) {
 $s = $s|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 } else {
  $$012 = $s;
 }
 while(1) {
  $2 = (__ZL16utf8_validate_czPKc($$012)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$0 = 0;
   label = 4;
   break;
  }
  $4 = (($$012) + ($2)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $$0 = 1;
   label = 4;
   break;
  } else {
   $$012 = $4;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZL12tag_is_validj($tag) {
 $tag = $tag|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($tag>>>0)<(6);
 return ($0|0);
}
function __ZL12parse_numberPPKcPd($sp,$out) {
 $sp = $sp|0;
 $out = $out|0;
 var $$ = 0, $$0 = 0, $$off = 0, $$off10 = 0, $$off11 = 0, $$off12 = 0, $$off8 = 0, $$off9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $18$phi = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $s$1 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$sp>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(45);
 $3 = (($0) + 1|0);
 $$ = $2 ? $3 : $0;
 $4 = HEAP8[$$>>0]|0;
 $5 = ($4<<24>>24)==(48);
 if ($5) {
  $6 = (($$) + 1|0);
  $14 = $$;$s$2 = $6;
 } else {
  $$off = (($4) + -48)<<24>>24;
  $7 = ($$off&255)<(10);
  if ($7) {
   $s$1 = $$;
   while(1) {
    $8 = (($s$1) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $$off8 = (($9) + -48)<<24>>24;
    $10 = ($$off8&255)<(10);
    if ($10) {
     $s$1 = $8;
    } else {
     $14 = $s$1;$s$2 = $8;
     break;
    }
   }
  } else {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $11 = HEAP8[$s$2>>0]|0;
 $12 = ($11<<24>>24)==(46);
 if ($12) {
  $13 = (($14) + 2|0);
  $15 = HEAP8[$13>>0]|0;
  $$off11 = (($15) + -48)<<24>>24;
  $16 = ($$off11&255)<(10);
  if ($16) {
   $18 = $s$2;$s$3 = $13;
   while(1) {
    $17 = (($18) + 2|0);
    $19 = HEAP8[$17>>0]|0;
    $$off12 = (($19) + -48)<<24>>24;
    $20 = ($$off12&255)<(10);
    if ($20) {
     $18$phi = $s$3;$s$3 = $17;$18 = $18$phi;
    } else {
     $s$4 = $17;
     break;
    }
   }
  } else {
   $$0 = 0;
   return ($$0|0);
  }
 } else {
  $s$4 = $s$2;
 }
 $21 = HEAP8[$s$4>>0]|0;
 if ((($21<<24>>24) == 101) | (($21<<24>>24) == 69)) {
  $22 = (($s$4) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  if ((($23<<24>>24) == 45) | (($23<<24>>24) == 43)) {
   $24 = (($s$4) + 2|0);
   $s$5 = $24;
  } else {
   $s$5 = $22;
  }
  $25 = HEAP8[$s$5>>0]|0;
  $$off9 = (($25) + -48)<<24>>24;
  $26 = ($$off9&255)<(10);
  if ($26) {
   $s$6 = $s$5;
   while(1) {
    $27 = (($s$6) + 1|0);
    $28 = HEAP8[$27>>0]|0;
    $$off10 = (($28) + -48)<<24>>24;
    $29 = ($$off10&255)<(10);
    if ($29) {
     $s$6 = $27;
    } else {
     $s$7 = $27;
     break;
    }
   }
  } else {
   $$0 = 0;
   return ($$0|0);
  }
 } else {
  $s$7 = $s$4;
 }
 $30 = ($out|0)==(0|0);
 if (!($30)) {
  $31 = HEAP32[$sp>>2]|0;
  $32 = (+_strtod($31,0));
  HEAPF64[$out>>3] = $32;
 }
 HEAP32[$sp>>2] = $s$7;
 $$0 = 1;
 return ($$0|0);
}
function __ZL7sb_putsP2SBPKc($sb,$str) {
 $sb = $sb|0;
 $str = $str|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($str|0))|0);
 __ZL6sb_putP2SBPKci($sb,$str,$0);
 return;
}
function __ZL11emit_numberP2SBd($out,$num) {
 $out = $out|0;
 $num = +$num;
 var $0 = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 8|0;
 HEAPF64[tempDoublePtr>>3]=$num;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($buf,50672,$vararg_buffer)|0);
 $0 = (__ZL15number_is_validPKc($buf)|0);
 if ($0) {
  __ZL7sb_putsP2SBPKc($out,$buf);
  STACKTOP = sp;return;
 } else {
  __ZL7sb_putsP2SBPKc($out,50600);
  STACKTOP = sp;return;
 }
}
function __ZL19emit_array_indentedP2SBPK8JsonNodePKci($out,$array,$space,$indent_level) {
 $out = $out|0;
 $array = $array|0;
 $space = $space|0;
 $indent_level = $indent_level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $element$06 = 0, $exitcond = 0, $i$03 = 0, $i$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($array) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZL7sb_putsP2SBPKc($out,50656);
  return;
 }
 __ZL7sb_putsP2SBPKc($out,50664);
 $3 = (($indent_level) + 1)|0;
 $4 = ($indent_level|0)>(-1);
 $element$06 = $1;
 while(1) {
  if ($4) {
   $i$03 = 0;
   while(1) {
    __ZL7sb_putsP2SBPKc($out,$space);
    $6 = (($i$03) + 1)|0;
    $7 = ($6|0)<($3|0);
    if ($7) {
     $i$03 = $6;
    } else {
     break;
    }
   }
  }
  __ZL19emit_value_indentedP2SBPK8JsonNodePKci($out,$element$06,$space,$3);
  $8 = (($element$06) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = $10 ? 50640 : 50648;
  __ZL7sb_putsP2SBPKc($out,$11);
  $12 = ($9|0)==(0|0);
  if ($12) {
   break;
  } else {
   $element$06 = $9;
  }
 }
 $5 = ($indent_level|0)>(0);
 if ($5) {
  $i$12 = 0;
  while(1) {
   __ZL7sb_putsP2SBPKc($out,$space);
   $13 = (($i$12) + 1)|0;
   $exitcond = ($13|0)==($indent_level|0);
   if ($exitcond) {
    break;
   } else {
    $i$12 = $13;
   }
  }
 }
 $14 = HEAP32[$out>>2]|0;
 $15 = (($out) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14>>>0)<($16>>>0);
 if (!($17)) {
  __ZL7sb_growP2SBi($out,1);
 }
 $18 = HEAP32[$out>>2]|0;
 $19 = (($18) + 1|0);
 HEAP32[$out>>2] = $19;
 HEAP8[$18>>0] = 93;
 return;
}
function __ZL20emit_object_indentedP2SBPK8JsonNodePKci($out,$object,$space,$indent_level) {
 $out = $out|0;
 $object = $object|0;
 $space = $space|0;
 $indent_level = $indent_level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, $i$12 = 0, $member$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($object) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZL7sb_putsP2SBPKc($out,50616);
  return;
 }
 __ZL7sb_putsP2SBPKc($out,50624);
 $3 = (($indent_level) + 1)|0;
 $4 = ($indent_level|0)>(-1);
 $member$06 = $1;
 while(1) {
  if ($4) {
   $i$03 = 0;
   while(1) {
    __ZL7sb_putsP2SBPKc($out,$space);
    $6 = (($i$03) + 1)|0;
    $7 = ($6|0)<($3|0);
    if ($7) {
     $i$03 = $6;
    } else {
     break;
    }
   }
  }
  $8 = (($member$06) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  __ZL11emit_stringP2SBPKc($out,$9);
  __ZL7sb_putsP2SBPKc($out,50632);
  __ZL19emit_value_indentedP2SBPK8JsonNodePKci($out,$member$06,$space,$3);
  $10 = (($member$06) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = $12 ? 50640 : 50648;
  __ZL7sb_putsP2SBPKc($out,$13);
  $14 = ($11|0)==(0|0);
  if ($14) {
   break;
  } else {
   $member$06 = $11;
  }
 }
 $5 = ($indent_level|0)>(0);
 if ($5) {
  $i$12 = 0;
  while(1) {
   __ZL7sb_putsP2SBPKc($out,$space);
   $15 = (($i$12) + 1)|0;
   $exitcond = ($15|0)==($indent_level|0);
   if ($exitcond) {
    break;
   } else {
    $i$12 = $15;
   }
  }
 }
 $16 = HEAP32[$out>>2]|0;
 $17 = (($out) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16>>>0)<($18>>>0);
 if (!($19)) {
  __ZL7sb_growP2SBi($out,1);
 }
 $20 = HEAP32[$out>>2]|0;
 $21 = (($20) + 1|0);
 HEAP32[$out>>2] = $21;
 HEAP8[$20>>0] = 125;
 return;
}
function __ZL10emit_arrayP2SBPK8JsonNode($out,$array) {
 $out = $out|0;
 $array = $array|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $element$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$out>>2]|0;
 $1 = (($out) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)<($2>>>0);
 if (!($3)) {
  __ZL7sb_growP2SBi($out,1);
 }
 $4 = HEAP32[$out>>2]|0;
 $5 = (($4) + 1|0);
 HEAP32[$out>>2] = $5;
 HEAP8[$4>>0] = 91;
 $6 = (__Z16json_first_childPK8JsonNode($array)|0);
 $7 = ($6|0)==(0|0);
 L4: do {
  if (!($7)) {
   $element$01 = $6;
   while(1) {
    __ZL10emit_valueP2SBPK8JsonNode($out,$element$01);
    $8 = (($element$01) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     break L4;
    }
    $11 = HEAP32[$out>>2]|0;
    $12 = HEAP32[$1>>2]|0;
    $13 = ($11>>>0)<($12>>>0);
    if (!($13)) {
     __ZL7sb_growP2SBi($out,1);
    }
    $14 = HEAP32[$out>>2]|0;
    $15 = (($14) + 1|0);
    HEAP32[$out>>2] = $15;
    HEAP8[$14>>0] = 44;
    $$pr = HEAP32[$8>>2]|0;
    $16 = ($$pr|0)==(0|0);
    if ($16) {
     break;
    } else {
     $element$01 = $$pr;
    }
   }
  }
 } while(0);
 $17 = HEAP32[$out>>2]|0;
 $18 = HEAP32[$1>>2]|0;
 $19 = ($17>>>0)<($18>>>0);
 if ($19) {
  $20 = HEAP32[$out>>2]|0;
  $21 = (($20) + 1|0);
  HEAP32[$out>>2] = $21;
  HEAP8[$20>>0] = 93;
  return;
 }
 __ZL7sb_growP2SBi($out,1);
 $20 = HEAP32[$out>>2]|0;
 $21 = (($20) + 1|0);
 HEAP32[$out>>2] = $21;
 HEAP8[$20>>0] = 93;
 return;
}
function __ZL11emit_objectP2SBPK8JsonNode($out,$object) {
 $out = $out|0;
 $object = $object|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $member$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$out>>2]|0;
 $1 = (($out) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)<($2>>>0);
 if (!($3)) {
  __ZL7sb_growP2SBi($out,1);
 }
 $4 = HEAP32[$out>>2]|0;
 $5 = (($4) + 1|0);
 HEAP32[$out>>2] = $5;
 HEAP8[$4>>0] = 123;
 $6 = (__Z16json_first_childPK8JsonNode($object)|0);
 $7 = ($6|0)==(0|0);
 L4: do {
  if (!($7)) {
   $member$01 = $6;
   while(1) {
    $8 = (($member$01) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    __ZL11emit_stringP2SBPKc($out,$9);
    $10 = HEAP32[$out>>2]|0;
    $11 = HEAP32[$1>>2]|0;
    $12 = ($10>>>0)<($11>>>0);
    if (!($12)) {
     __ZL7sb_growP2SBi($out,1);
    }
    $13 = HEAP32[$out>>2]|0;
    $14 = (($13) + 1|0);
    HEAP32[$out>>2] = $14;
    HEAP8[$13>>0] = 58;
    __ZL10emit_valueP2SBPK8JsonNode($out,$member$01);
    $15 = (($member$01) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     break L4;
    }
    $18 = HEAP32[$out>>2]|0;
    $19 = HEAP32[$1>>2]|0;
    $20 = ($18>>>0)<($19>>>0);
    if (!($20)) {
     __ZL7sb_growP2SBi($out,1);
    }
    $21 = HEAP32[$out>>2]|0;
    $22 = (($21) + 1|0);
    HEAP32[$out>>2] = $22;
    HEAP8[$21>>0] = 44;
    $$pr = HEAP32[$15>>2]|0;
    $23 = ($$pr|0)==(0|0);
    if ($23) {
     break;
    } else {
     $member$01 = $$pr;
    }
   }
  }
 } while(0);
 $24 = HEAP32[$out>>2]|0;
 $25 = HEAP32[$1>>2]|0;
 $26 = ($24>>>0)<($25>>>0);
 if ($26) {
  $27 = HEAP32[$out>>2]|0;
  $28 = (($27) + 1|0);
  HEAP32[$out>>2] = $28;
  HEAP8[$27>>0] = 125;
  return;
 }
 __ZL7sb_growP2SBi($out,1);
 $27 = HEAP32[$out>>2]|0;
 $28 = (($27) + 1|0);
 HEAP32[$out>>2] = $28;
 HEAP8[$27>>0] = 125;
 return;
}
function __ZL7sb_growP2SBi($sb,$need) {
 $sb = $sb|0;
 $need = $need|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $alloc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$sb>>2]|0;
 $1 = (($sb) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $0;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = (($sb) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = (($8) - ($4))|0;
 $10 = (($5) + ($need))|0;
 $alloc$0 = $9;
 while(1) {
  $11 = $alloc$0 << 1;
  $12 = ($11>>>0)<($10>>>0);
  if ($12) {
   $alloc$0 = $11;
  } else {
   $$lcssa = $11;
   break;
  }
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = $$lcssa | 1;
 $15 = (_realloc($13,$14)|0);
 HEAP32[$1>>2] = $15;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = HEAP32[_stderr>>2]|0;
  (_fwrite((50536|0),15,1,($17|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $18 = (($15) + ($5)|0);
  HEAP32[$sb>>2] = $18;
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) + ($$lcssa)|0);
  HEAP32[$6>>2] = $20;
  return;
 }
}
function __ZL16utf8_validate_czPKc($s) {
 $s = $s|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 1|0);
 $1 = HEAP8[$s>>0]|0;
 $2 = ($1<<24>>24)>(-1);
 do {
  if ($2) {
   $$0 = 1;
  } else {
   $3 = ($1&255)<(194);
   if ($3) {
    $$0 = 0;
   } else {
    $4 = ($1&255)<(224);
    if ($4) {
     $5 = HEAP8[$0>>0]|0;
     $6 = $5 & -64;
     $7 = ($6<<24>>24)==(-128);
     $$ = $7 ? 2 : 0;
     $$0 = $$;
     break;
    }
    $8 = ($1&255)<(240);
    if ($8) {
     if ((($1<<24>>24) == -19)) {
      $11 = HEAP8[$0>>0]|0;
      $12 = ($11&255)>(159);
      if ($12) {
       $$0 = 0;
       break;
      }
     } else if ((($1<<24>>24) == -32)) {
      $9 = HEAP8[$0>>0]|0;
      $10 = ($9&255)<(160);
      if ($10) {
       $$0 = 0;
       break;
      }
     }
     $13 = HEAP8[$0>>0]|0;
     $14 = $13 & -64;
     $15 = ($14<<24>>24)==(-128);
     if (!($15)) {
      $$0 = 0;
      break;
     }
     $16 = (($s) + 2|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 & -64;
     $19 = ($18<<24>>24)==(-128);
     $$1 = $19 ? 3 : 0;
     $$0 = $$1;
     break;
    }
    $20 = ($1&255)<(245);
    if ($20) {
     if ((($1<<24>>24) == -16)) {
      $21 = HEAP8[$0>>0]|0;
      $22 = ($21&255)<(144);
      if ($22) {
       $$0 = 0;
       break;
      }
     } else if ((($1<<24>>24) == -12)) {
      $23 = HEAP8[$0>>0]|0;
      $24 = ($23&255)>(143);
      if ($24) {
       $$0 = 0;
       break;
      }
     }
     $25 = HEAP8[$0>>0]|0;
     $26 = $25 & -64;
     $27 = ($26<<24>>24)==(-128);
     if ($27) {
      $28 = (($s) + 2|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29 & -64;
      $31 = ($30<<24>>24)==(-128);
      if ($31) {
       $32 = (($s) + 3|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = $33 & -64;
       $35 = ($34<<24>>24)==(-128);
       $$2 = $35 ? 4 : 0;
       $$0 = $$2;
      } else {
       $$0 = 0;
      }
     } else {
      $$0 = 0;
     }
    } else {
     $$0 = 0;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZL14utf8_read_charPKcPj($s,$out) {
 $s = $s|0;
 $out = $out|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZL16utf8_validate_czPKc($s)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  ___assert_fail((50496|0),(50208|0),230,(50520|0));
  // unreachable;
 }
 $2 = HEAP8[$s>>0]|0;
 $3 = $2&255;
 $4 = ($2<<24>>24)>(-1);
 if ($4) {
  HEAP32[$out>>2] = $3;
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ($2&255)<(224);
 if ($5) {
  $6 = $3 << 6;
  $7 = $6 & 1984;
  $8 = (($s) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $10 & 63;
  $12 = $11 | $7;
  HEAP32[$out>>2] = $12;
  $$0 = 2;
  return ($$0|0);
 }
 $13 = ($2&255)<(240);
 if ($13) {
  $14 = $3 << 12;
  $15 = $14 & 61440;
  $16 = (($s) + 1|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 6;
  $20 = $19 & 4032;
  $21 = $20 | $15;
  $22 = (($s) + 2|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $24 & 63;
  $26 = $21 | $25;
  HEAP32[$out>>2] = $26;
  $$0 = 3;
  return ($$0|0);
 } else {
  $27 = $3 << 18;
  $28 = $27 & 1835008;
  $29 = (($s) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 << 12;
  $33 = $32 & 258048;
  $34 = $33 | $28;
  $35 = (($s) + 2|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $37 << 6;
  $39 = $38 & 4032;
  $40 = $34 | $39;
  $41 = (($s) + 3|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $43 & 63;
  $45 = $40 | $44;
  HEAP32[$out>>2] = $45;
  $$0 = 4;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZL11write_hex16Pct($out,$val) {
 $out = $out|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $val&65535;
 $1 = $0 >>> 12;
 $2 = (50472 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($out) + 1|0);
 HEAP8[$out>>0] = $3;
 $5 = $0 >>> 8;
 $6 = $5 & 15;
 $7 = (50472 + ($6)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = (($out) + 2|0);
 HEAP8[$4>>0] = $8;
 $10 = $0 >>> 4;
 $11 = $10 & 15;
 $12 = (50472 + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (($out) + 3|0);
 HEAP8[$9>>0] = $13;
 $15 = $0 & 15;
 $16 = (50472 + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 HEAP8[$14>>0] = $17;
 return;
}
function __ZL17to_surrogate_pairjPtS_($unicode,$uc,$lc) {
 $unicode = $unicode|0;
 $uc = $uc|0;
 $lc = $lc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $unicode$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $unicode$off = (($unicode) + -65536)|0;
 $0 = ($unicode$off>>>0)<(1048576);
 if ($0) {
  $1 = $unicode$off >>> 10;
  $2 = $1 & 1023;
  $3 = $2 | 55296;
  $4 = $3&65535;
  HEAP16[$uc>>1] = $4;
  $5 = $unicode$off & 1023;
  $6 = $5 | 56320;
  $7 = $6&65535;
  HEAP16[$lc>>1] = $7;
  return;
 } else {
  ___assert_fail((50400|0),(50208|0),321,(50448|0));
  // unreachable;
 }
}
function __ZL6sb_putP2SBPKci($sb,$bytes,$count) {
 $sb = $sb|0;
 $bytes = $bytes|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($sb) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$sb>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)<($count|0);
 if ($6) {
  __ZL7sb_growP2SBi($sb,$count);
 }
 $7 = HEAP32[$sb>>2]|0;
 _memcpy(($7|0),($bytes|0),($count|0))|0;
 $8 = HEAP32[$sb>>2]|0;
 $9 = (($8) + ($count)|0);
 HEAP32[$sb>>2] = $9;
 return;
}
function __ZL15number_is_validPKc($num) {
 $num = $num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $num;
 $1 = (__ZL12parse_numberPPKcPd($0,0)|0);
 if (!($1)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _toupper($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c & 95;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((50984|0),(3|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[50976>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(50992,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 3]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((51160 + 8|0));
   ___cxa_throw(($7|0),(51216|0),(82|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (51184|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$func & 3]();
 _abort_message(51232,$vararg_buffer);
 // unreachable;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = (($2) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = (($2) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = HEAP32[12698]|0;HEAP32[12698] = (($17+0)|0);
 $18 = $17;
 __ZSt11__terminatePFvvE($18);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[51272>>2]|0;HEAP32[51272>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,51368,51424,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = (($info) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = (($info) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = (($info) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = (($7) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 15]($2,$info,$10,1);
    $11 = (($info) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = (($info) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$1 = 1;
    } else {
     $$1 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = (($info) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = (($info) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = (($info) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = (($info) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = (($info) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = (($info) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 15]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 15]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = (($this) + 16|0);
   $4 = (($this) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($this) + ($5<<3)|0) + 16|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = (($this) + 24|0);
    $9 = (($info) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = (($p$0) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 do {
  if ($16) {
   $17 = (($info) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$6>>2]|0;
   $19 = (($18) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 3]($6,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = (($info) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = (($24) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 15]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = (($info) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = (($info) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = (($info) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = (($info) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = (($info) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = (($info) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = (($info) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = (($info) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = (($info) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $23 = $path_below;
   } else {
    $23 = $17;
   }
   $19 = (($info) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $22 = ($23|0)==(1);
   $or$cond1 = $21 & $22;
   if ($or$cond1) {
    $24 = (($info) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off016 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off018 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off032 = 0, $is_dst_type_derived_from_static_type$2$off033 = 0, $p$017 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $59 = (($this) + 16|0);
    $60 = (($this) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($this) + ($61<<3)|0) + 16|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
    $63 = (($this) + 24|0);
    $64 = ($61|0)>(1);
    if (!($64)) {
     break;
    }
    $65 = (($this) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $66 & 2;
    $68 = ($67|0)==(0);
    if ($68) {
     $69 = (($info) + 36|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(1);
     if (!($71)) {
      $77 = $66 & 1;
      $78 = ($77|0)==(0);
      if ($78) {
       $81 = (($info) + 54|0);
       $p2$2 = $63;
       while(1) {
        $90 = HEAP8[$81>>0]|0;
        $91 = ($90<<24>>24)==(0);
        if (!($91)) {
         break L1;
        }
        $92 = HEAP32[$69>>2]|0;
        $93 = ($92|0)==(1);
        if ($93) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $94 = (($p2$2) + 8|0);
        $95 = ($94>>>0)<($62>>>0);
        if ($95) {
         $p2$2 = $94;
        } else {
         break L1;
        }
       }
      }
      $79 = (($info) + 24|0);
      $80 = (($info) + 54|0);
      $p2$1 = $63;
      while(1) {
       $82 = HEAP8[$80>>0]|0;
       $83 = ($82<<24>>24)==(0);
       if (!($83)) {
        break L1;
       }
       $84 = HEAP32[$69>>2]|0;
       $85 = ($84|0)==(1);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = ($86|0)==(1);
        if ($87) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $88 = (($p2$1) + 8|0);
       $89 = ($88>>>0)<($62>>>0);
       if ($89) {
        $p2$1 = $88;
       } else {
        break L1;
       }
      }
     }
    }
    $72 = (($info) + 54|0);
    $p2$0 = $63;
    while(1) {
     $73 = HEAP8[$72>>0]|0;
     $74 = ($73<<24>>24)==(0);
     if (!($74)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $75 = (($p2$0) + 8|0);
     $76 = ($75>>>0)<($62>>>0);
     if ($76) {
      $p2$0 = $75;
     } else {
      break L1;
     }
    }
   }
   $11 = (($info) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = (($info) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = (($info) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = (($info) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = (($this) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($this) + ($24<<3)|0) + 16|0);
     $26 = ($24|0)>(0);
     L31: do {
      if ($26) {
       $27 = (($this) + 16|0);
       $28 = (($info) + 52|0);
       $29 = (($info) + 53|0);
       $30 = (($info) + 54|0);
       $31 = (($this) + 8|0);
       $32 = (($info) + 24|0);
       $does_dst_type_point_to_our_static_type$0$off016 = 0;$is_dst_type_derived_from_static_type$0$off018 = 0;$p$017 = $27;
       L33: while(1) {
        HEAP8[$28>>0] = 0;
        HEAP8[$29>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$017,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$30>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off018;
         break;
        }
        $35 = HEAP8[$29>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off018;
         } else {
          $37 = HEAP8[$28>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$31>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$2$off0 = 1;
            break L33;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$32>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           label = 25;
           break L31;
          }
          $41 = HEAP32[$31>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           label = 25;
           break L31;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = (($p$017) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off016 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off018 = $is_dst_type_derived_from_static_type$1$off0;$p$017 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         break;
        }
       }
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off0;
        label = 24;
       } else {
        $is_dst_type_derived_from_static_type$2$off032 = $is_dst_type_derived_from_static_type$2$off0;
        label = 21;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off032 = 0;
       label = 21;
      }
     } while(0);
     if ((label|0) == 21) {
      HEAP32[$14>>2] = $current_ptr;
      $49 = (($info) + 40|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (($50) + 1)|0;
      HEAP32[$49>>2] = $51;
      $52 = (($info) + 36|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($53|0)==(1);
      if ($54) {
       $55 = (($info) + 24|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(2);
       if ($57) {
        $58 = (($info) + 54|0);
        HEAP8[$58>>0] = 1;
        if ($is_dst_type_derived_from_static_type$2$off032) {
         label = 25;
        } else {
         label = 26;
        }
       } else {
        $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off032;
        label = 24;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off032;
       label = 24;
      }
     }
     if ((label|0) == 24) {
      if ($is_dst_type_derived_from_static_type$2$off033) {
       label = 25;
      } else {
       label = 26;
      }
     }
     if ((label|0) == 25) {
      HEAP32[$20>>2] = 3;
      break;
     }
     else if ((label|0) == 26) {
      HEAP32[$20>>2] = 4;
      break;
     }
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = (($info) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 3]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 15]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = (($this) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 15]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = (($info) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = (($info) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = (($info) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = (($info) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = (($info) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = (($info) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 3]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = (($info) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = (($info) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = (($info) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = (($info) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = (($info) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($9|0)==($this|0);
   if ($10) {
    $11 = (($info) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = (($info) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = (($info) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = (($info) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = (($info) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = (($info) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = (($info) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = (($info) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = (($info) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = (($info) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = (($info) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = (($this) + 16|0);
  $8 = (($this) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($this) + ($9<<3)|0) + 16|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L3: do {
   if ($11) {
    $12 = (($this) + 24|0);
    $13 = (($info) + 24|0);
    $14 = (($this) + 8|0);
    $15 = (($info) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L3;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L3;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L3;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L3;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = (($p$0) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 3]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 63]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,51368,51536,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer10 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp;
 $thrown_object = sp + 12|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = (($2) + 80|0);
   $5 = (($2) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[50800>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $36;
    _abort_message(50920,$vararg_buffer10);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = (($2) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[51296>>2]|0;
   $26 = (($25) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 63](51296,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[50800>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = (($31) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 15]($29)|0);
    HEAP32[$vararg_buffer10>>2] = $30;
    $vararg_ptr1 = (($vararg_buffer10) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = (($vararg_buffer10) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(50824,$vararg_buffer10);
    // unreachable;
   } else {
    $35 = HEAP32[50800>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $35;
    $vararg_ptr6 = (($vararg_buffer10) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(50872,$vararg_buffer10);
    // unreachable;
   }
  }
 }
 _abort_message(50960,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((50976|0),(90|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(51048,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[50976>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(51104,$vararg_buffer);
  // unreachable;
 }
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa112 = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa127 = 0, $$lcssa130 = 0, $$lcssa132 = 0, $$lcssa134 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0;
 var $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0;
 var $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0;
 var $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0;
 var $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$014$i$i$lcssa = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0;
 var $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0;
 var $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0$i$i$lcssa = 0, $sp$074$i = 0, $sp$074$i$lcssa = 0, $sp$173$i = 0, $sp$173$i$lcssa = 0, $ssize$0$i = 0;
 var $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[51784>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((51784 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((51784 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[51784>>2] = $22;
     } else {
      $23 = HEAP32[((51784 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((51784 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((51784 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((51784 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[51784>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[((51784 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((51784 + 8|0))>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[((51784 + 20|0))>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = ((51784 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[51784>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[51784>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((51784 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((51784 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((51784 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((51784 + 8|0))>>2] = $81;
     HEAP32[((51784 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((51784 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((51784 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((51784 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((51784 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((51784 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((51784 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((51784 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((51784 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((51784 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((51784 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((51784 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((51784 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[51784>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[51784>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((51784 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((51784 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((51784 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((51784 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((51784 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((51784 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((51784 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((51784 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((51784 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((51784 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((51784 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((51784 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((51784 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((51784 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((51784 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((51784 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((51784 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[51784>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[51784>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((51784 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((51784 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((51784 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((51784 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((51784 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((51784 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L108: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa134 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L108;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[((51784 + 16|0))>>2]|0;
           $495 = ($$lcssa134>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa134>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L87;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((51784 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((51784 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((51784 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((51784 + 20|0))>>2] = $514;
   HEAP32[((51784 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((51784 + 8|0))>>2] = 0;
   HEAP32[((51784 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((51784 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((51784 + 12|0))>>2] = $528;
  $529 = HEAP32[((51784 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((51784 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[52256>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((52256 + 8|0))>>2] = $538;
    HEAP32[((52256 + 4|0))>>2] = $538;
    HEAP32[((52256 + 12|0))>>2] = -1;
    HEAP32[((52256 + 16|0))>>2] = -1;
    HEAP32[((52256 + 20|0))>>2] = 0;
    HEAP32[((51784 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[52256>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((52256 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((51784 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((51784 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((51784 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((51784 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((51784 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa130 = $sp$0$i$i;$$lcssa132 = $565;$sp$0$i$i$lcssa = $sp$0$i$i;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i$lcssa|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((51784 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$$lcssa130>>2]|0;
       $601 = HEAP32[$$lcssa132>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((52256 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((51784 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((51784 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((52256 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((51784 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((51784 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((51784 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((51784 + 432|0))>>2] = $633;
  $634 = HEAP32[((51784 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((51784 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((51784 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((51784 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((51784 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((51784 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((51784 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((51784 + 460|0))>>2] = 0;
    $641 = HEAP32[52256>>2]|0;
    HEAP32[((51784 + 36|0))>>2] = $641;
    HEAP32[((51784 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((51784 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((51784 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((51784 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((51784 + 24|0))>>2] = $654;
    HEAP32[((51784 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((52256 + 16|0))>>2]|0;
    HEAP32[((51784 + 28|0))>>2] = $660;
   } else {
    $sp$074$i = ((51784 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$074$i>>2]|0;
     $662 = (($sp$074$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      $$lcssa123 = $661;$$lcssa125 = $662;$$lcssa127 = $663;$sp$074$i$lcssa = $sp$074$i;
      label = 213;
      break;
     }
     $666 = (($sp$074$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$074$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$074$i$lcssa) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($$lcssa123>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($$lcssa127) + ($tsize$244$i))|0;
       HEAP32[$$lcssa125>>2] = $675;
       $676 = HEAP32[((51784 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((51784 + 24|0))>>2] = $684;
       HEAP32[((51784 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((52256 + 16|0))>>2]|0;
       HEAP32[((51784 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((51784 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((51784 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$173$i = ((51784 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$173$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      $$lcssa120 = $sp$173$i;$sp$173$i$lcssa = $sp$173$i;
      label = 223;
      break;
     }
     $696 = (($sp$173$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$173$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$173$i$lcssa) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$$lcssa120>>2] = $tbase$245$i;
      $703 = (($sp$173$i$lcssa) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L335: do {
       if ($729) {
        $730 = HEAP32[((51784 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((51784 + 12|0))>>2] = $731;
        HEAP32[((51784 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((51784 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((51784 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((51784 + 8|0))>>2] = $737;
         HEAP32[((51784 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L343: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((51784 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[51784>>2]|0;
            $764 = $763 & $762;
            HEAP32[51784>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i$lcssa>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((51784 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((51784 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((51784 + 4|0))>>2] = $807;
             break L343;
            } else {
             $808 = HEAP32[((51784 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L343;
             }
            }
           } while(0);
           $815 = HEAP32[((51784 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((51784 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((51784 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[51784>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[51784>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((51784 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((51784 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((51784 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((51784 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((51784 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((51784 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L432: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            $$lcssa = $909;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L432;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((51784 + 16|0))>>2]|0;
          $912 = ($$lcssa>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L335;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((51784 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((51784 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       $$lcssa116 = $926;$$lcssa117 = $929;$$lcssa118 = $930;
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($$lcssa117) + -47)|0;
    $$sum1$i14$i = (($$lcssa117) + -39)|0;
    $934 = (($$lcssa116) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($$lcssa116) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((51784 + 24|0))>>2] = $953;
    HEAP32[((51784 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((52256 + 16|0))>>2]|0;
    HEAP32[((51784 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((51784 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((51784 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((51784 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((51784 + 448|0))+12>>2]|0;
    HEAP32[((51784 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((51784 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((51784 + 460|0))>>2] = 0;
    HEAP32[((51784 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($$lcssa118>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($$lcssa118>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((51784 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[51784>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[51784>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((51784 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((51784 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((51784 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((51784 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((51784 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((51784 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L483: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         $$lcssa112 = $1048;$T$014$i$i$lcssa = $T$014$i$i;
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L483;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((51784 + 16|0))>>2]|0;
       $1051 = ($$lcssa112>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa112>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i$lcssa;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((51784 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((51784 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((51784 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((51784 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((51784 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0;
 var $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$060 = 0, $R$0 = 0, $R$0$lcssa = 0;
 var $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$059 = 0, $T$059$lcssa = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((51784 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((51784 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((51784 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((51784 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[51784>>2]|0;
     $36 = $35 & $34;
     HEAP32[51784>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((51784 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((51784 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((51784 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((51784 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((51784 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((51784 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((51784 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((51784 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((51784 + 12|0))>>2] = $120;
   HEAP32[((51784 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((51784 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((51784 + 20|0))>>2] = 0;
   HEAP32[((51784 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((51784 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((51784 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((51784 + 8|0))>>2] = $128;
   HEAP32[((51784 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((51784 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((51784 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[51784>>2]|0;
     $152 = $151 & $150;
     HEAP32[51784>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((51784 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((51784 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((51784 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((51784 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((51784 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((51784 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((51784 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((51784 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((51784 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((51784 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((51784 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((51784 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[51784>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[51784>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((51784 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((51784 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((51784 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((51784 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((51784 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((51784 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$060 = $292;$T$059 = $284;
     while(1) {
      $300 = $K19$060 >>> 31;
      $301 = ((($T$059) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$059$lcssa = $T$059;
       break;
      }
      $294 = $K19$060 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$060 = $294;$T$059 = $296;
      }
     }
     $303 = HEAP32[((51784 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$059$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((51784 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((51784 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((51784 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((51784 + 456|0));
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((51784 + 32|0))>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$012$i = 0, $$013$i = 0, $$01332$i = 0, $$01333$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3127$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0;
 var $$lcssa120 = 0, $$lcssa120$lcssa = 0, $$lcssa121 = 0, $$lcssa121$lcssa = 0, $$lcssa122 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa143 = 0, $$lcssa55$i = 0, $$lnz$0$i = 0, $$neg38$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us98$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0;
 var $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0, $477 = 0.0;
 var $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0;
 var $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0;
 var $658 = 0.0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0.0, $674 = 0.0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0.0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0.0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa180$i = 0, $a$0106$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph44$i = 0, $a$3$i = 0, $a$3$i$lcssa = 0, $a$3$i$lcssa119 = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$483$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0;
 var $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$174 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$372 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$0108$i = 0, $carry1$0$us$i = 0, $carry1$0$us94$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0;
 var $carry1$1$us$i$lcssa = 0, $carry1$1$us99$i = 0, $carry1$1$us99$i$lcssa = 0, $carry3$086$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$030$i = 0, $denormal$031$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us89$i = 0, $e2$1$i = 0, $e2$1$i$lcssa = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0;
 var $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa116 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa141 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3123$i = 0, $gotdig$3123$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0;
 var $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1124$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$073 = 0, $i$081$i = 0, $i$1 = 0, $i$1$i = 0, $i$271 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0126$i = 0, $j$0126$i$lcssa = 0, $j$072$i = 0;
 var $j$073$i = 0, $j$074$i = 0, $j$2$i = 0, $j$3115$i = 0, $k$0$lcssa$i = 0, $k$0125$i = 0, $k$0125$i$lcssa = 0, $k$068$i = 0, $k$069$i = 0, $k$070$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4107$i = 0, $k$5$in$us$i = 0, $k$5$in$us93$i = 0, $k$5$us$i = 0, $k$5$us95$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us101$i = 0, $k$684$i = 0;
 var $lnz$0$lcssa$i = 0, $lnz$0122$i = 0, $lnz$0122$i$lcssa = 0, $lnz$062$i = 0, $lnz$063$i = 0, $lnz$064$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond11$i = 0, $or$cond11119$i = 0, $or$cond16$i = 0, $or$cond18$i = 0, $or$cond185$i = 0, $or$cond19$i = 0, $or$cond20$us$i = 0, $or$cond20$us100$i = 0;
 var $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond7$i = 0, $or$cond9$i = 0, $or$cond9$i26 = 0, $or$cond9$not = 0, $rp$0$lcssa181$i = 0, $rp$0105$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0, $rp$2$ph42$i = 0, $rp$3$i$ph = 0, $rp$3$ph40$i = 0, $rp$482$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph43$i = 0, $z$1$us$i = 0, $z$1$us90$i = 0, $z$2$us$i = 0, $z$2$us92$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us102$i = 0;
 var $z$3$us102$i$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$lcssa = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa143 = $9;
   break;
  }
 }
 $12 = ($$lcssa143|0)==(45);
 do {
  if ((($$lcssa143|0) == 43) | (($$lcssa143|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa143;$sign$0 = 1;
  }
 } while(0);
 $c$174 = $c$0;$i$073 = 0;
 while(1) {
  $23 = $c$174 | 32;
  $24 = (52280 + ($i$073)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$174;$i$0$lcssa = $i$073;
   break;
  }
  $28 = ($i$073>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$174;
   }
  } while(0);
  $36 = (($i$073) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$174 = $c$2;$i$073 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($51) {
     $c$372 = $c$1$lcssa;$i$271 = 0;
     while(1) {
      $52 = $c$372 | 32;
      $53 = (52864 + ($i$271)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = ($52|0)==($55|0);
      if (!($56)) {
       $c$5 = $c$372;$i$3 = $i$271;
       break L34;
      }
      $57 = ($i$271>>>0)<(2);
      do {
       if ($57) {
        $58 = HEAP32[$0>>2]|0;
        $59 = HEAP32[$1>>2]|0;
        $60 = ($58>>>0)<($59>>>0);
        if ($60) {
         $61 = (($58) + 1|0);
         HEAP32[$0>>2] = $61;
         $62 = HEAP8[$58>>0]|0;
         $63 = $62&255;
         $c$4 = $63;
         break;
        } else {
         $64 = (___shgetc($f)|0);
         $c$4 = $64;
         break;
        }
       } else {
        $c$4 = $c$372;
       }
      } while(0);
      $65 = (($i$271) + 1)|0;
      $66 = ($65>>>0)<(3);
      if ($66) {
       $c$372 = $c$4;$i$271 = $65;
      } else {
       $c$5 = $c$4;$i$3 = $65;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $75 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $75 = $73;
    }
    $74 = ($75|0)==(40);
    if ($74) {
     $i$4 = 1;
    } else {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       $$lcssa = $88;$i$4$lcssa = $i$4;
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($$lcssa|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4$lcssa|0)==(0);
    $brmerge107 = $100 | $97;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4$lcssa;
    }
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      $$0 = nan;
      break;
     } else {
      $$in = $102;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $324 = HEAP32[$1>>2]|0;
       $325 = ($324|0)==(0|0);
       if ($325) {
        $c$6 = 48;
        break;
       }
       $326 = HEAP32[$0>>2]|0;
       $327 = (($326) + -1|0);
       HEAP32[$0>>2] = $327;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i = $128;$gotdig$0$i = 0;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i = $129;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        $gotdig$0$i$lcssa116 = $gotdig$0$i;
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $168 = 0;$170 = 0;$715 = 0;$716 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i = $135;$gotdig$0$i = 1;
        continue;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       }
      }
      if ((label|0) == 70) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $157 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $157 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $156 = ($157|0)==(48);
         if ($156) {
          $152 = $154;$153 = $155;
         } else {
          $168 = 0;$170 = 0;$715 = $154;$716 = $155;$c$2$i = $157;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break;
         }
        }
       } else {
        $168 = 0;$170 = 0;$715 = 0;$716 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa116;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
       }
      }
      L119: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 83;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond6$i = $162 | $163;
         if (!($or$cond6$i)) {
          $212 = $170;$213 = $715;$215 = $168;$216 = $716;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
          break L119;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $717 = $170;$718 = $168;$719 = $170;$720 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $212 = $170;$213 = $715;$215 = $168;$216 = $716;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break L119;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 83;
          break;
         }
        }
       } while(0);
       if ((label|0) == 83) {
        label = 0;
        $167 = ($168|0)<(0);
        $169 = ($170>>>0)<(8);
        $171 = ($168|0)==(0);
        $172 = $171 & $169;
        $173 = $167 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($168|0)<(0);
          $177 = ($170>>>0)<(14);
          $178 = ($168|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond$i = $185 | $186;
          if ($or$cond$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($170|0),($168|0),1,0)|0);
        $190 = tempRet0;
        $717 = $715;$718 = $716;$719 = $189;$720 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $168 = $720;$170 = $719;$715 = $717;$716 = $718;$c$2$i = $196;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $197 = (___shgetc($f)|0);
        $168 = $720;$170 = $719;$715 = $717;$716 = $718;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $198 = ($gotdig$2$i$lcssa|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i$lcssa|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i$lcssa|0)==(0);
      $211 = $210 ? $212 : $213;
      $214 = $210 ? $215 : $216;
      $217 = ($215|0)<(0);
      $218 = ($212>>>0)<(8);
      $219 = ($215|0)==(0);
      $220 = $219 & $218;
      $221 = $217 | $220;
      if ($221) {
       $223 = $212;$224 = $215;$x$325$i = $x$0$i$lcssa;
       while(1) {
        $222 = $x$325$i << 4;
        $225 = (_i64Add(($223|0),($224|0),1,0)|0);
        $226 = tempRet0;
        $227 = ($226|0)<(0);
        $228 = ($225>>>0)<(8);
        $229 = ($226|0)==(0);
        $230 = $229 & $228;
        $231 = $227 | $230;
        if ($231) {
         $223 = $225;$224 = $226;$x$325$i = $222;
        } else {
         $x$3$lcssa$i = $222;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i$lcssa;
      }
      $232 = $c$2$lcssa$i | 32;
      $233 = ($232|0)==(112);
      do {
       if ($233) {
        $234 = (_scanexp($f,$pok)|0);
        $235 = tempRet0;
        $236 = ($234|0)==(0);
        $237 = ($235|0)==(-2147483648);
        $238 = $236 & $237;
        if ($238) {
         $239 = ($pok|0)==(0);
         if ($239) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $240 = HEAP32[$1>>2]|0;
          $241 = ($240|0)==(0|0);
          if ($241) {
           $252 = 0;$253 = 0;
           break;
          }
          $242 = HEAP32[$0>>2]|0;
          $243 = (($242) + -1|0);
          HEAP32[$0>>2] = $243;
          $252 = 0;$253 = 0;
          break;
         }
        } else {
         $252 = $234;$253 = $235;
        }
       } else {
        $244 = HEAP32[$1>>2]|0;
        $245 = ($244|0)==(0|0);
        if ($245) {
         $252 = 0;$253 = 0;
        } else {
         $246 = HEAP32[$0>>2]|0;
         $247 = (($246) + -1|0);
         HEAP32[$0>>2] = $247;
         $252 = 0;$253 = 0;
        }
       }
      } while(0);
      $248 = (_bitshift64Shl(($211|0),($214|0),2)|0);
      $249 = tempRet0;
      $250 = (_i64Add(($248|0),($249|0),-32,-1)|0);
      $251 = tempRet0;
      $254 = (_i64Add(($250|0),($251|0),($252|0),($253|0))|0);
      $255 = tempRet0;
      $256 = ($x$3$lcssa$i|0)==(0);
      if ($256) {
       $257 = (+($sign$0|0));
       $258 = $257 * 0.0;
       $$0 = $258;
       STACKTOP = sp;return (+$$0);
      }
      $259 = (0 - ($emin$0$ph))|0;
      $260 = ($255|0)>(0);
      $261 = ($254>>>0)>($259>>>0);
      $262 = ($255|0)==(0);
      $263 = $262 & $261;
      $264 = $260 | $263;
      if ($264) {
       $265 = (___errno_location()|0);
       HEAP32[$265>>2] = 34;
       $266 = (+($sign$0|0));
       $267 = $266 * 1.7976931348623157E+308;
       $268 = $267 * 1.7976931348623157E+308;
       $$0 = $268;
       STACKTOP = sp;return (+$$0);
      }
      $269 = (($emin$0$ph) + -106)|0;
      $270 = ($269|0)<(0);
      $271 = $270 << 31 >> 31;
      $272 = ($255|0)<($271|0);
      $273 = ($254>>>0)<($269>>>0);
      $274 = ($255|0)==($271|0);
      $275 = $274 & $273;
      $276 = $272 | $275;
      if ($276) {
       $278 = (___errno_location()|0);
       HEAP32[$278>>2] = 34;
       $279 = (+($sign$0|0));
       $280 = $279 * 2.2250738585072014E-308;
       $281 = $280 * 2.2250738585072014E-308;
       $$0 = $281;
       STACKTOP = sp;return (+$$0);
      }
      $277 = ($x$3$lcssa$i|0)>(-1);
      if ($277) {
       $286 = $254;$287 = $255;$x$420$i = $x$3$lcssa$i;$y$321$i = $y$0$i$lcssa;
       while(1) {
        $282 = !($y$321$i >= 0.5);
        $283 = $x$420$i << 1;
        if ($282) {
         $$pn$i = $y$321$i;$x$5$i = $283;
        } else {
         $284 = $283 | 1;
         $285 = $y$321$i + -1.0;
         $$pn$i = $285;$x$5$i = $284;
        }
        $y$4$i = $y$321$i + $$pn$i;
        $288 = (_i64Add(($286|0),($287|0),-1,-1)|0);
        $289 = tempRet0;
        $290 = ($x$5$i|0)>(-1);
        if ($290) {
         $286 = $288;$287 = $289;$x$420$i = $x$5$i;$y$321$i = $y$4$i;
        } else {
         $295 = $288;$296 = $289;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $295 = $254;$296 = $255;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
      }
      $291 = ($emin$0$ph|0)<(0);
      $292 = $291 << 31 >> 31;
      $293 = (_i64Subtract(32,0,($emin$0$ph|0),($292|0))|0);
      $294 = tempRet0;
      $297 = (_i64Add(($295|0),($296|0),($293|0),($294|0))|0);
      $298 = tempRet0;
      $299 = (0)>($298|0);
      $300 = ($bits$0$ph>>>0)>($297>>>0);
      $301 = (0)==($298|0);
      $302 = $301 & $300;
      $303 = $299 | $302;
      if ($303) {
       $304 = ($297|0)<(0);
       if ($304) {
        $$0711$i = 0;
        label = 126;
       } else {
        $$07$i = $297;
        label = 124;
       }
      } else {
       $$07$i = $bits$0$ph;
       label = 124;
      }
      if ((label|0) == 124) {
       $305 = ($$07$i|0)<(53);
       if ($305) {
        $$0711$i = $$07$i;
        label = 126;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0712$i = $$07$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 126) {
       $306 = (84 - ($$0711$i))|0;
       $307 = (+_scalbn(1.0,$306));
       $308 = (+($sign$0|0));
       $309 = (+_copysignl($307,$308));
       $$0712$i = $$0711$i;$$pre$phi$iZ2D = $308;$bias$0$i = $309;
      }
      $310 = ($$0712$i|0)<(32);
      $311 = $y$3$lcssa$i != 0.0;
      $or$cond4$i = $310 & $311;
      $312 = $x$4$lcssa$i & 1;
      $313 = ($312|0)==(0);
      $or$cond9$i = $or$cond4$i & $313;
      $314 = $or$cond9$i&1;
      $x$6$i = (($314) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
      $315 = (+($x$6$i>>>0));
      $316 = $$pre$phi$iZ2D * $315;
      $317 = $bias$0$i + $316;
      $318 = $$pre$phi$iZ2D * $y$5$i;
      $319 = $318 + $317;
      $320 = $319 - $bias$0$i;
      $321 = $320 != 0.0;
      if (!($321)) {
       $322 = (___errno_location()|0);
       HEAP32[$322>>2] = 34;
      }
      $323 = (+_scalbnl($320,$295));
      $$0 = $323;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $328 = (0 - ($sum$i))|0;
    $$012$i = $c$6;$gotdig$0$i12 = 0;
    while(1) {
     if ((($$012$i|0) == 46)) {
      $gotdig$0$i12$lcssa141 = $gotdig$0$i12;
      label = 137;
      break;
     } else if (!((($$012$i|0) == 48))) {
      $$2$i = $$012$i;$721 = 0;$722 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
      break;
     }
     $329 = HEAP32[$0>>2]|0;
     $330 = HEAP32[$1>>2]|0;
     $331 = ($329>>>0)<($330>>>0);
     if ($331) {
      $332 = (($329) + 1|0);
      HEAP32[$0>>2] = $332;
      $333 = HEAP8[$329>>0]|0;
      $334 = $333&255;
      $$012$i = $334;$gotdig$0$i12 = 1;
      continue;
     } else {
      $335 = (___shgetc($f)|0);
      $$012$i = $335;$gotdig$0$i12 = 1;
      continue;
     }
    }
    if ((label|0) == 137) {
     $336 = HEAP32[$0>>2]|0;
     $337 = HEAP32[$1>>2]|0;
     $338 = ($336>>>0)<($337>>>0);
     if ($338) {
      $339 = (($336) + 1|0);
      HEAP32[$0>>2] = $339;
      $340 = HEAP8[$336>>0]|0;
      $341 = $340&255;
      $$1$ph$i = $341;
     } else {
      $342 = (___shgetc($f)|0);
      $$1$ph$i = $342;
     }
     $343 = ($$1$ph$i|0)==(48);
     if ($343) {
      $344 = 0;$345 = 0;
      while(1) {
       $346 = (_i64Add(($344|0),($345|0),-1,-1)|0);
       $347 = tempRet0;
       $348 = HEAP32[$0>>2]|0;
       $349 = HEAP32[$1>>2]|0;
       $350 = ($348>>>0)<($349>>>0);
       if ($350) {
        $351 = (($348) + 1|0);
        HEAP32[$0>>2] = $351;
        $352 = HEAP8[$348>>0]|0;
        $353 = $352&255;
        $$1$be$i = $353;
       } else {
        $354 = (___shgetc($f)|0);
        $$1$be$i = $354;
       }
       $355 = ($$1$be$i|0)==(48);
       if ($355) {
        $344 = $346;$345 = $347;
       } else {
        $$2$i = $$1$be$i;$721 = $346;$722 = $347;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
        break;
       }
      }
     } else {
      $$2$i = $$1$ph$i;$721 = 0;$722 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa141;$gotrad$0$i14 = 1;
     }
    }
    HEAP32[$x$i>>2] = 0;
    $356 = (($$2$i) + -48)|0;
    $357 = ($356>>>0)<(10);
    $358 = ($$2$i|0)==(46);
    $or$cond11119$i = $357 | $358;
    L221: do {
     if ($or$cond11119$i) {
      $359 = (($x$i) + 496|0);
      $$3127$i = $$2$i;$362 = 0;$363 = 0;$723 = $358;$724 = $356;$725 = $721;$726 = $722;$gotdig$3123$i = $gotdig$2$i13;$gotrad$1124$i = $gotrad$0$i14;$j$0126$i = 0;$k$0125$i = 0;$lnz$0122$i = 0;
      L223: while(1) {
       do {
        if ($723) {
         $cond$i = ($gotrad$1124$i|0)==(0);
         if ($cond$i) {
          $727 = $362;$728 = $363;$729 = $362;$730 = $363;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = 1;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
         } else {
          $731 = $725;$732 = $726;$733 = $362;$734 = $363;$gotdig$3123$i$lcssa = $gotdig$3123$i;$j$0126$i$lcssa = $j$0126$i;$k$0125$i$lcssa = $k$0125$i;$lnz$0122$i$lcssa = $lnz$0122$i;
          break L223;
         }
        } else {
         $361 = ($k$0125$i|0)<(125);
         $364 = (_i64Add(($362|0),($363|0),1,0)|0);
         $365 = tempRet0;
         $366 = ($$3127$i|0)!=(48);
         if (!($361)) {
          if (!($366)) {
           $727 = $725;$728 = $726;$729 = $364;$730 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
           break;
          }
          $376 = HEAP32[$359>>2]|0;
          $377 = $376 | 1;
          HEAP32[$359>>2] = $377;
          $727 = $725;$728 = $726;$729 = $364;$730 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
          break;
         }
         $$lnz$0$i = $366 ? $364 : $lnz$0122$i;
         $367 = ($j$0126$i|0)==(0);
         $368 = (($x$i) + ($k$0125$i<<2)|0);
         if ($367) {
          $storemerge$i = $724;
         } else {
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369*10)|0;
          $371 = (($$3127$i) + -48)|0;
          $372 = (($371) + ($370))|0;
          $storemerge$i = $372;
         }
         HEAP32[$368>>2] = $storemerge$i;
         $373 = (($j$0126$i) + 1)|0;
         $374 = ($373|0)==(9);
         $375 = $374&1;
         $$k$0$i = (($375) + ($k$0125$i))|0;
         $$14$i = $374 ? 0 : $373;
         $727 = $725;$728 = $726;$729 = $364;$730 = $365;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $$14$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $378 = HEAP32[$0>>2]|0;
       $379 = HEAP32[$1>>2]|0;
       $380 = ($378>>>0)<($379>>>0);
       if ($380) {
        $381 = (($378) + 1|0);
        HEAP32[$0>>2] = $381;
        $382 = HEAP8[$378>>0]|0;
        $383 = $382&255;
        $$3$be$i = $383;
       } else {
        $384 = (___shgetc($f)|0);
        $$3$be$i = $384;
       }
       $385 = (($$3$be$i) + -48)|0;
       $386 = ($385>>>0)<(10);
       $387 = ($$3$be$i|0)==(46);
       $or$cond11$i = $386 | $387;
       if ($or$cond11$i) {
        $$3127$i = $$3$be$i;$362 = $729;$363 = $730;$723 = $387;$724 = $385;$725 = $727;$726 = $728;$gotdig$3123$i = $gotdig$4$i;$gotrad$1124$i = $gotrad$2$i;$j$0126$i = $j$2$i;$k$0125$i = $k$2$i;$lnz$0122$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$390 = $729;$391 = $727;$393 = $730;$394 = $728;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 160;
        break L221;
       }
      }
      $360 = ($gotdig$3123$i$lcssa|0)!=(0);
      $735 = $733;$736 = $734;$737 = $731;$738 = $732;$739 = $360;$j$074$i = $j$0126$i$lcssa;$k$070$i = $k$0125$i$lcssa;$lnz$064$i = $lnz$0122$i$lcssa;
      label = 168;
     } else {
      $$3$lcssa$i = $$2$i;$390 = 0;$391 = $721;$393 = 0;$394 = $722;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 160;
     }
    } while(0);
    do {
     if ((label|0) == 160) {
      $388 = ($gotrad$1$lcssa$i|0)==(0);
      $389 = $388 ? $390 : $391;
      $392 = $388 ? $393 : $394;
      $395 = ($gotdig$3$lcssa$i|0)!=(0);
      $396 = $$3$lcssa$i | 32;
      $397 = ($396|0)==(101);
      $or$cond16$i = $395 & $397;
      if (!($or$cond16$i)) {
       $412 = ($$3$lcssa$i|0)>(-1);
       if ($412) {
        $735 = $390;$736 = $393;$737 = $389;$738 = $392;$739 = $395;$j$074$i = $j$0$lcssa$i;$k$070$i = $k$0$lcssa$i;$lnz$064$i = $lnz$0$lcssa$i;
        label = 168;
        break;
       } else {
        $740 = $390;$741 = $393;$742 = $395;$743 = $389;$744 = $392;$j$073$i = $j$0$lcssa$i;$k$069$i = $k$0$lcssa$i;$lnz$063$i = $lnz$0$lcssa$i;
        label = 170;
        break;
       }
      }
      $398 = (_scanexp($f,$pok)|0);
      $399 = tempRet0;
      $400 = ($398|0)==(0);
      $401 = ($399|0)==(-2147483648);
      $402 = $400 & $401;
      do {
       if ($402) {
        $403 = ($pok|0)==(0);
        if ($403) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $404 = HEAP32[$1>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $408 = 0;$409 = 0;
          break;
         }
         $406 = HEAP32[$0>>2]|0;
         $407 = (($406) + -1|0);
         HEAP32[$0>>2] = $407;
         $408 = 0;$409 = 0;
         break;
        }
       } else {
        $408 = $398;$409 = $399;
       }
      } while(0);
      $410 = (_i64Add(($408|0),($409|0),($389|0),($392|0))|0);
      $411 = tempRet0;
      $423 = $410;$424 = $390;$426 = $411;$427 = $393;$j$072$i = $j$0$lcssa$i;$k$068$i = $k$0$lcssa$i;$lnz$062$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 168) {
     $413 = HEAP32[$1>>2]|0;
     $414 = ($413|0)==(0|0);
     if ($414) {
      $740 = $735;$741 = $736;$742 = $739;$743 = $737;$744 = $738;$j$073$i = $j$074$i;$k$069$i = $k$070$i;$lnz$063$i = $lnz$064$i;
      label = 170;
     } else {
      $415 = HEAP32[$0>>2]|0;
      $416 = (($415) + -1|0);
      HEAP32[$0>>2] = $416;
      if ($739) {
       $423 = $737;$424 = $735;$426 = $738;$427 = $736;$j$072$i = $j$074$i;$k$068$i = $k$070$i;$lnz$062$i = $lnz$064$i;
      } else {
       label = 171;
      }
     }
    }
    if ((label|0) == 170) {
     if ($742) {
      $423 = $743;$424 = $740;$426 = $744;$427 = $741;$j$072$i = $j$073$i;$k$068$i = $k$069$i;$lnz$062$i = $lnz$063$i;
     } else {
      label = 171;
     }
    }
    if ((label|0) == 171) {
     $417 = (___errno_location()|0);
     HEAP32[$417>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $418 = HEAP32[$x$i>>2]|0;
    $419 = ($418|0)==(0);
    if ($419) {
     $420 = (+($sign$0|0));
     $421 = $420 * 0.0;
     $$0 = $421;
     STACKTOP = sp;return (+$$0);
    }
    $422 = ($423|0)==($424|0);
    $425 = ($426|0)==($427|0);
    $428 = $422 & $425;
    $429 = ($427|0)<(0);
    $430 = ($424>>>0)<(10);
    $431 = ($427|0)==(0);
    $432 = $431 & $430;
    $433 = $429 | $432;
    $or$cond$i17 = $428 & $433;
    if ($or$cond$i17) {
     $434 = ($bits$0$ph>>>0)>(30);
     $435 = $418 >>> $bits$0$ph;
     $436 = ($435|0)==(0);
     $or$cond18$i = $434 | $436;
     if ($or$cond18$i) {
      $437 = (+($sign$0|0));
      $438 = (+($418>>>0));
      $439 = $437 * $438;
      $$0 = $439;
      STACKTOP = sp;return (+$$0);
     }
    }
    $440 = (($emin$0$ph|0) / -2)&-1;
    $441 = ($440|0)<(0);
    $442 = $441 << 31 >> 31;
    $443 = ($426|0)>($442|0);
    $444 = ($423>>>0)>($440>>>0);
    $445 = ($426|0)==($442|0);
    $446 = $445 & $444;
    $447 = $443 | $446;
    if ($447) {
     $448 = (___errno_location()|0);
     HEAP32[$448>>2] = 34;
     $449 = (+($sign$0|0));
     $450 = $449 * 1.7976931348623157E+308;
     $451 = $450 * 1.7976931348623157E+308;
     $$0 = $451;
     STACKTOP = sp;return (+$$0);
    }
    $452 = (($emin$0$ph) + -106)|0;
    $453 = ($452|0)<(0);
    $454 = $453 << 31 >> 31;
    $455 = ($426|0)<($454|0);
    $456 = ($423>>>0)<($452>>>0);
    $457 = ($426|0)==($454|0);
    $458 = $457 & $456;
    $459 = $455 | $458;
    if ($459) {
     $460 = (___errno_location()|0);
     HEAP32[$460>>2] = 34;
     $461 = (+($sign$0|0));
     $462 = $461 * 2.2250738585072014E-308;
     $463 = $462 * 2.2250738585072014E-308;
     $$0 = $463;
     STACKTOP = sp;return (+$$0);
    }
    $464 = ($j$072$i|0)==(0);
    if ($464) {
     $k$3$i = $k$068$i;
    } else {
     $465 = ($j$072$i|0)<(9);
     if ($465) {
      $466 = (($x$i) + ($k$068$i<<2)|0);
      $$promoted$i = HEAP32[$466>>2]|0;
      $468 = $$promoted$i;$j$3115$i = $j$072$i;
      while(1) {
       $467 = ($468*10)|0;
       $469 = (($j$3115$i) + 1)|0;
       $exitcond$i = ($469|0)==(9);
       if ($exitcond$i) {
        $$lcssa133 = $467;
        break;
       } else {
        $468 = $467;$j$3115$i = $469;
       }
      }
      HEAP32[$466>>2] = $$lcssa133;
     }
     $470 = (($k$068$i) + 1)|0;
     $k$3$i = $470;
    }
    $471 = ($lnz$062$i|0)<(9);
    if ($471) {
     $472 = ($lnz$062$i|0)<=($423|0);
     $473 = ($423|0)<(18);
     $or$cond3$i = $472 & $473;
     if ($or$cond3$i) {
      $474 = ($423|0)==(9);
      if ($474) {
       $475 = (+($sign$0|0));
       $476 = HEAP32[$x$i>>2]|0;
       $477 = (+($476>>>0));
       $478 = $475 * $477;
       $$0 = $478;
       STACKTOP = sp;return (+$$0);
      }
      $479 = ($423|0)<(9);
      if ($479) {
       $480 = (+($sign$0|0));
       $481 = HEAP32[$x$i>>2]|0;
       $482 = (+($481>>>0));
       $483 = $480 * $482;
       $484 = (8 - ($423))|0;
       $485 = (52304 + ($484<<2)|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (+($486|0));
       $488 = $483 / $487;
       $$0 = $488;
       STACKTOP = sp;return (+$$0);
      }
      $489 = Math_imul($423, -3)|0;
      $$neg38$i = (($bits$0$ph) + 27)|0;
      $490 = (($$neg38$i) + ($489))|0;
      $491 = ($490|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $492 = $$pre$i18 >>> $490;
      $493 = ($492|0)==(0);
      $or$cond185$i = $491 | $493;
      if ($or$cond185$i) {
       $494 = (+($sign$0|0));
       $495 = (+($$pre$i18>>>0));
       $496 = $494 * $495;
       $497 = (($423) + -10)|0;
       $498 = (52304 + ($497<<2)|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = (+($499|0));
       $501 = $496 * $500;
       $$0 = $501;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $502 = (($423|0) % 9)&-1;
    $503 = ($502|0)==(0);
    if ($503) {
     $a$2$ph44$i = 0;$e2$0$ph$i = 0;$rp$2$ph42$i = $423;$z$1$ph43$i = $k$3$i;
    } else {
     $504 = ($423|0)>(-1);
     $505 = (($502) + 9)|0;
     $506 = $504 ? $502 : $505;
     $507 = (8 - ($506))|0;
     $508 = (52304 + ($507<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ($k$3$i|0)==(0);
     if ($510) {
      $a$0$lcssa180$i = 0;$rp$0$lcssa181$i = $423;$z$0$i = 0;
     } else {
      $511 = (1000000000 / ($509|0))&-1;
      $a$0106$i = 0;$carry$0108$i = 0;$k$4107$i = 0;$rp$0105$i = $423;
      while(1) {
       $512 = (($x$i) + ($k$4107$i<<2)|0);
       $513 = HEAP32[$512>>2]|0;
       $514 = (($513>>>0) % ($509>>>0))&-1;
       $515 = (($513>>>0) / ($509>>>0))&-1;
       $516 = (($515) + ($carry$0108$i))|0;
       HEAP32[$512>>2] = $516;
       $517 = Math_imul($514, $511)|0;
       $518 = ($k$4107$i|0)==($a$0106$i|0);
       $519 = ($516|0)==(0);
       $or$cond19$i = $518 & $519;
       $520 = (($k$4107$i) + 1)|0;
       if ($or$cond19$i) {
        $521 = $520 & 127;
        $522 = (($rp$0105$i) + -9)|0;
        $a$1$i = $521;$rp$1$i19 = $522;
       } else {
        $a$1$i = $a$0106$i;$rp$1$i19 = $rp$0105$i;
       }
       $523 = ($520|0)==($k$3$i|0);
       if ($523) {
        $$lcssa132 = $517;$a$1$i$lcssa = $a$1$i;$rp$1$i19$lcssa = $rp$1$i19;
        break;
       } else {
        $a$0106$i = $a$1$i;$carry$0108$i = $517;$k$4107$i = $520;$rp$0105$i = $rp$1$i19;
       }
      }
      $524 = ($$lcssa132|0)==(0);
      if ($524) {
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $k$3$i;
      } else {
       $525 = (($k$3$i) + 1)|0;
       $526 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$526>>2] = $$lcssa132;
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $525;
      }
     }
     $527 = (9 - ($506))|0;
     $528 = (($527) + ($rp$0$lcssa181$i))|0;
     $a$2$ph44$i = $a$0$lcssa180$i;$e2$0$ph$i = 0;$rp$2$ph42$i = $528;$z$1$ph43$i = $z$0$i;
    }
    L315: while(1) {
     $529 = ($rp$2$ph42$i|0)<(18);
     $530 = (($x$i) + ($a$2$ph44$i<<2)|0);
     if ($529) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph43$i;
      while(1) {
       $532 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $532;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $533 = (($x$i) + ($k$5$us$i<<2)|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = (_bitshift64Shl(($534|0),0,29)|0);
        $536 = tempRet0;
        $537 = (_i64Add(($535|0),($536|0),($carry1$0$us$i|0),0)|0);
        $538 = tempRet0;
        $539 = ($538>>>0)>(0);
        $540 = ($537>>>0)>(1000000000);
        $541 = ($538|0)==(0);
        $542 = $541 & $540;
        $543 = $539 | $542;
        if ($543) {
         $544 = (___udivdi3(($537|0),($538|0),1000000000,0)|0);
         $545 = tempRet0;
         $546 = (___uremdi3(($537|0),($538|0),1000000000,0)|0);
         $547 = tempRet0;
         $$sink$off0$us$i = $546;$carry1$1$us$i = $544;
        } else {
         $$sink$off0$us$i = $537;$carry1$1$us$i = 0;
        }
        HEAP32[$533>>2] = $$sink$off0$us$i;
        $548 = (($z$2$us$i) + 127)|0;
        $549 = $548 & 127;
        $550 = ($k$5$us$i|0)!=($549|0);
        $551 = ($k$5$us$i|0)==($a$2$ph44$i|0);
        $or$cond20$us$i = $550 | $551;
        if ($or$cond20$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $552 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $552 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $553 = (($k$5$us$i) + -1)|0;
        if ($551) {
         $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $553;$z$2$us$i = $z$3$us$i;
        }
       }
       $554 = (($e2$0$us$i) + -29)|0;
       $555 = ($carry1$1$us$i$lcssa|0)==(0);
       if ($555) {
        $e2$0$us$i = $554;$z$1$us$i = $z$3$us$i$lcssa;
       } else {
        $$lcssa55$i = $554;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa;
        break;
       }
      }
     } else {
      $531 = ($rp$2$ph42$i|0)==(18);
      if ($531) {
       $e2$0$us89$i = $e2$0$ph$i;$z$1$us90$i = $z$1$ph43$i;
      } else {
       $a$3$ph$i = $a$2$ph44$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph40$i = $rp$2$ph42$i;$z$5$ph$i = $z$1$ph43$i;
       break;
      }
      while(1) {
       $556 = HEAP32[$530>>2]|0;
       $557 = ($556>>>0)<(9007199);
       if (!($557)) {
        $a$3$ph$i = $a$2$ph44$i;$e2$1$ph$i = $e2$0$us89$i;$rp$3$ph40$i = 18;$z$5$ph$i = $z$1$us90$i;
        break L315;
       }
       $558 = (($z$1$us90$i) + 127)|0;
       $carry1$0$us94$i = 0;$k$5$in$us93$i = $558;$z$2$us92$i = $z$1$us90$i;
       while(1) {
        $k$5$us95$i = $k$5$in$us93$i & 127;
        $559 = (($x$i) + ($k$5$us95$i<<2)|0);
        $560 = HEAP32[$559>>2]|0;
        $561 = (_bitshift64Shl(($560|0),0,29)|0);
        $562 = tempRet0;
        $563 = (_i64Add(($561|0),($562|0),($carry1$0$us94$i|0),0)|0);
        $564 = tempRet0;
        $565 = ($564>>>0)>(0);
        $566 = ($563>>>0)>(1000000000);
        $567 = ($564|0)==(0);
        $568 = $567 & $566;
        $569 = $565 | $568;
        if ($569) {
         $570 = (___udivdi3(($563|0),($564|0),1000000000,0)|0);
         $571 = tempRet0;
         $572 = (___uremdi3(($563|0),($564|0),1000000000,0)|0);
         $573 = tempRet0;
         $$sink$off0$us98$i = $572;$carry1$1$us99$i = $570;
        } else {
         $$sink$off0$us98$i = $563;$carry1$1$us99$i = 0;
        }
        HEAP32[$559>>2] = $$sink$off0$us98$i;
        $574 = (($z$2$us92$i) + 127)|0;
        $575 = $574 & 127;
        $576 = ($k$5$us95$i|0)!=($575|0);
        $577 = ($k$5$us95$i|0)==($a$2$ph44$i|0);
        $or$cond20$us100$i = $576 | $577;
        if ($or$cond20$us100$i) {
         $z$3$us102$i = $z$2$us92$i;
        } else {
         $578 = ($$sink$off0$us98$i|0)==(0);
         $k$5$z$2$us101$i = $578 ? $k$5$us95$i : $z$2$us92$i;
         $z$3$us102$i = $k$5$z$2$us101$i;
        }
        $579 = (($k$5$us95$i) + -1)|0;
        if ($577) {
         $carry1$1$us99$i$lcssa = $carry1$1$us99$i;$z$3$us102$i$lcssa = $z$3$us102$i;
         break;
        } else {
         $carry1$0$us94$i = $carry1$1$us99$i;$k$5$in$us93$i = $579;$z$2$us92$i = $z$3$us102$i;
        }
       }
       $580 = (($e2$0$us89$i) + -29)|0;
       $581 = ($carry1$1$us99$i$lcssa|0)==(0);
       if ($581) {
        $e2$0$us89$i = $580;$z$1$us90$i = $z$3$us102$i$lcssa;
       } else {
        $$lcssa55$i = $580;$carry1$1$lcssa$lcssa$i = $carry1$1$us99$i$lcssa;$z$3$lcssa$lcssa$i = $z$3$us102$i$lcssa;
        break;
       }
      }
     }
     $582 = (($rp$2$ph42$i) + 9)|0;
     $583 = (($a$2$ph44$i) + 127)|0;
     $584 = $583 & 127;
     $585 = ($584|0)==($z$3$lcssa$lcssa$i|0);
     if ($585) {
      $586 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $587 = $586 & 127;
      $588 = (($x$i) + ($587<<2)|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $591 = $590 & 127;
      $592 = (($x$i) + ($591<<2)|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = $593 | $589;
      HEAP32[$592>>2] = $594;
      $z$4$i = $587;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $595 = (($x$i) + ($584<<2)|0);
     HEAP32[$595>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph44$i = $584;$e2$0$ph$i = $$lcssa55$i;$rp$2$ph42$i = $582;$z$1$ph43$i = $z$4$i;
    }
    L346: while(1) {
     $632 = (($z$5$ph$i) + 1)|0;
     $630 = $632 & 127;
     $633 = (($z$5$ph$i) + 127)|0;
     $634 = $633 & 127;
     $635 = (($x$i) + ($634<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph40$i;
     while(1) {
      $608 = ($rp$3$i$ph|0)==(18);
      $636 = ($rp$3$i$ph|0)>(27);
      $$21$i = $636 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$081$i = 0;
       while(1) {
        $598 = (($i$081$i) + ($a$3$i))|0;
        $599 = $598 & 127;
        $600 = ($599|0)==($z$5$ph$i|0);
        if ($600) {
         $i$1$i = 2;
         break;
        }
        $601 = (($x$i) + ($599<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = (52296 + ($i$081$i<<2)|0);
        $604 = HEAP32[$603>>2]|0;
        $605 = ($602>>>0)<($604>>>0);
        if ($605) {
         $i$1$i = 2;
         break;
        }
        $606 = ($602>>>0)>($604>>>0);
        $597 = (($i$081$i) + 1)|0;
        if ($606) {
         $i$1$i = $i$081$i;
         break;
        }
        $596 = ($597|0)<(2);
        if ($596) {
         $i$081$i = $597;
        } else {
         $i$1$i = $597;
         break;
        }
       }
       $607 = ($i$1$i|0)==(2);
       $or$cond7$i = $607 & $608;
       if ($or$cond7$i) {
        $$lcssa122 = $630;$a$3$i$lcssa = $a$3$i;$e2$1$i$lcssa = $e2$1$i;$z$5$ph$i$lcssa = $z$5$ph$i;
        break L346;
       }
       $611 = (($$21$i) + ($e2$1$i))|0;
       $612 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($612) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $611;
       } else {
        $$lcssa120 = $611;$a$3$i$lcssa119 = $a$3$i;
        break;
       }
      }
      $613 = 1 << $$21$i;
      $614 = (($613) + -1)|0;
      $615 = 1000000000 >>> $$21$i;
      $a$483$i = $a$3$i$lcssa119;$carry3$086$i = 0;$k$684$i = $a$3$i$lcssa119;$rp$482$i = $rp$3$i$ph;
      while(1) {
       $616 = (($x$i) + ($k$684$i<<2)|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = $617 & $614;
       $619 = $617 >>> $$21$i;
       $620 = (($619) + ($carry3$086$i))|0;
       HEAP32[$616>>2] = $620;
       $621 = Math_imul($618, $615)|0;
       $622 = ($k$684$i|0)==($a$483$i|0);
       $623 = ($620|0)==(0);
       $or$cond22$i = $622 & $623;
       $624 = (($k$684$i) + 1)|0;
       $625 = $624 & 127;
       $626 = (($rp$482$i) + -9)|0;
       $rp$5$i = $or$cond22$i ? $626 : $rp$482$i;
       $a$5$i = $or$cond22$i ? $625 : $a$483$i;
       $627 = ($625|0)==($z$5$ph$i|0);
       if ($627) {
        $$lcssa121 = $621;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
        break;
       } else {
        $a$483$i = $a$5$i;$carry3$086$i = $621;$k$684$i = $625;$rp$482$i = $rp$5$i;
       }
      }
      $628 = ($$lcssa121|0)==(0);
      if ($628) {
       $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa120;$rp$3$i$ph = $rp$5$i$lcssa;
       continue;
      }
      $629 = ($630|0)==($a$5$i$lcssa|0);
      if (!($629)) {
       $$lcssa120$lcssa = $$lcssa120;$$lcssa121$lcssa = $$lcssa121;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
       break;
      }
      $637 = HEAP32[$635>>2]|0;
      $638 = $637 | 1;
      HEAP32[$635>>2] = $638;
      $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa120;$rp$3$i$ph = $rp$5$i$lcssa;
     }
     $631 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$631>>2] = $$lcssa121$lcssa;
     $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa120$lcssa;$rp$3$ph40$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $630;
    }
    $609 = $a$3$i$lcssa & 127;
    $610 = ($609|0)==($z$5$ph$i$lcssa|0);
    if ($610) {
     $639 = (($$lcssa122) + -1)|0;
     $640 = (($x$i) + ($639<<2)|0);
     HEAP32[$640>>2] = 0;
     $z$7$i = $$lcssa122;
    } else {
     $z$7$i = $z$5$ph$i$lcssa;
    }
    $641 = (($x$i) + ($609<<2)|0);
    $642 = HEAP32[$641>>2]|0;
    $643 = (+($642>>>0));
    $644 = (($a$3$i$lcssa) + 1)|0;
    $645 = $644 & 127;
    $646 = ($645|0)==($z$7$i|0);
    if ($646) {
     $705 = (($z$7$i) + 1)|0;
     $706 = $705 & 127;
     $707 = (($706) + -1)|0;
     $708 = (($x$i) + ($707<<2)|0);
     HEAP32[$708>>2] = 0;
     $z$7$1$i = $706;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $709 = $643 * 1.0E+9;
    $710 = (($x$i) + ($645<<2)|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (+($711>>>0));
    $713 = $709 + $712;
    $670 = (+($sign$0|0));
    $652 = $670 * $713;
    $690 = (($e2$1$i$lcssa) + 53)|0;
    $648 = (($690) - ($emin$0$ph))|0;
    $714 = ($648|0)<($bits$0$ph|0);
    if ($714) {
     $647 = ($648|0)<(0);
     if ($647) {
      $$01332$i = 0;$denormal$031$i = 1;
      label = 244;
     } else {
      $$013$i = $648;$denormal$0$i = 1;
      label = 243;
     }
    } else {
     $$013$i = $bits$0$ph;$denormal$0$i = 0;
     label = 243;
    }
    if ((label|0) == 243) {
     $649 = ($$013$i|0)<(53);
     if ($649) {
      $$01332$i = $$013$i;$denormal$031$i = $denormal$0$i;
      label = 244;
     } else {
      $$01333$i = $$013$i;$bias$0$i24 = 0.0;$denormal$030$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i23 = $652;
     }
    }
    if ((label|0) == 244) {
     $650 = (105 - ($$01332$i))|0;
     $651 = (+_scalbn(1.0,$650));
     $653 = (+_copysignl($651,$652));
     $654 = (53 - ($$01332$i))|0;
     $655 = (+_scalbn(1.0,$654));
     $656 = (+_fmodl($652,$655));
     $657 = $652 - $656;
     $658 = $653 + $657;
     $$01333$i = $$01332$i;$bias$0$i24 = $653;$denormal$030$i = $denormal$031$i;$frac$0$i = $656;$y$1$i23 = $658;
    }
    $659 = (($a$3$i$lcssa) + 2)|0;
    $660 = $659 & 127;
    $661 = ($660|0)==($z$7$1$i|0);
    do {
     if ($661) {
      $frac$2$i = $frac$0$i;
     } else {
      $662 = (($x$i) + ($660<<2)|0);
      $663 = HEAP32[$662>>2]|0;
      $664 = ($663>>>0)<(500000000);
      do {
       if ($664) {
        $665 = ($663|0)==(0);
        if ($665) {
         $666 = (($a$3$i$lcssa) + 3)|0;
         $667 = $666 & 127;
         $668 = ($667|0)==($z$7$1$i|0);
         if ($668) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $669 = $670 * 0.25;
        $671 = $669 + $frac$0$i;
        $frac$1$i = $671;
       } else {
        $672 = ($663>>>0)>(500000000);
        if ($672) {
         $673 = $670 * 0.75;
         $674 = $673 + $frac$0$i;
         $frac$1$i = $674;
         break;
        }
        $675 = (($a$3$i$lcssa) + 3)|0;
        $676 = $675 & 127;
        $677 = ($676|0)==($z$7$1$i|0);
        if ($677) {
         $678 = $670 * 0.5;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        } else {
         $680 = $670 * 0.75;
         $681 = $680 + $frac$0$i;
         $frac$1$i = $681;
         break;
        }
       }
      } while(0);
      $682 = (53 - ($$01333$i))|0;
      $683 = ($682|0)>(1);
      if (!($683)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = (+_fmodl($frac$1$i,1.0));
      $685 = $684 != 0.0;
      if ($685) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $686 = $frac$1$i + 1.0;
      $frac$2$i = $686;
     }
    } while(0);
    $687 = $y$1$i23 + $frac$2$i;
    $688 = $687 - $bias$0$i24;
    $689 = $690 & 2147483647;
    $691 = (-2 - ($sum$i))|0;
    $692 = ($689|0)>($691|0);
    do {
     if ($692) {
      $693 = (+Math_abs((+$688)));
      $694 = !($693 >= 9007199254740992.0);
      if ($694) {
       $denormal$2$i = $denormal$030$i;$e2$2$i = $e2$1$i$lcssa;$y$2$i25 = $688;
      } else {
       $695 = ($denormal$030$i|0)!=(0);
       $696 = ($$01333$i|0)==($648|0);
       $or$cond23$i = $695 & $696;
       $denormal$1$i = $or$cond23$i ? 0 : $denormal$030$i;
       $697 = $688 * 0.5;
       $698 = (($e2$1$i$lcssa) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $698;$y$2$i25 = $697;
      }
      $699 = (($e2$2$i) + 50)|0;
      $700 = ($699|0)>($328|0);
      if (!($700)) {
       $701 = ($denormal$2$i|0)!=(0);
       $702 = $frac$2$i != 0.0;
       $or$cond9$i26 = $701 & $702;
       if (!($or$cond9$i26)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
        break;
       }
      }
      $703 = (___errno_location()|0);
      HEAP32[$703>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
     } else {
      $e2$3$i = $e2$1$i$lcssa;$y$3$i = $688;
     }
    } while(0);
    $704 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $704;
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0;
 var $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $ex$0$lcssa = $44;
       break;
      }
     }
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $ey$0$lcssa = $67;
       break;
      }
     }
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   L27: do {
    if ($82) {
     $152 = $93;$153 = $87;$154 = $88;$95 = $83;$97 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($152) {
       $94 = ($95|0)==($85|0);
       $96 = ($97|0)==($86|0);
       $98 = $94 & $96;
       if ($98) {
        break;
       } else {
        $100 = $153;$101 = $154;
       }
      } else {
       $100 = $95;$101 = $97;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $152 = $112;$153 = $106;$154 = $107;$95 = $102;$97 = $103;$ex$212 = $104;
      } else {
       $$lcssa7 = $112;$114 = $102;$116 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
       break L27;
      }
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$114 = $83;$116 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $113 = ($114|0)==($85|0);
    $115 = ($116|0)==($86|0);
    $117 = $113 & $115;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $119 = $156;$121 = $155;
    }
   } else {
    $119 = $116;$121 = $114;
   }
   $118 = ($119>>>0)<(1048576);
   $120 = ($121>>>0)<(0);
   $122 = ($119|0)==(1048576);
   $123 = $122 & $120;
   $124 = $118 | $123;
   if ($124) {
    $126 = $121;$127 = $119;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $137 = $128;$138 = $129;$ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $121;$138 = $119;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$150 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$150 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $150;HEAP32[tempDoublePtr+4>>2] = $148;$151 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $151;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _log10($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0.0, $9 = 0.0, $hx$0 = 0, $k$0 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1>>>0)<(1048576);
 $3 = ($1|0)<(0);
 $or$cond = $2 | $3;
 do {
  if ($or$cond) {
   $4 = $1 & 2147483647;
   $5 = ($0|0)==(0);
   $6 = ($4|0)==(0);
   $7 = $5 & $6;
   if ($7) {
    $8 = $x * $x;
    $9 = -1.0 / $8;
    $$0 = $9;
    return (+$$0);
   }
   if (!($3)) {
    $12 = $x * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $12;$13 = HEAP32[tempDoublePtr>>2]|0;
    $14 = HEAP32[tempDoublePtr+4>>2]|0;
    $25 = $13;$70 = $14;$hx$0 = $14;$k$0 = -1077;
    break;
   }
   $10 = $x - $x;
   $11 = $10 / 0.0;
   $$0 = $11;
   return (+$$0);
  } else {
   $15 = ($1>>>0)>(2146435071);
   if ($15) {
    $$0 = $x;
    return (+$$0);
   }
   $16 = ($1|0)==(1072693248);
   $17 = ($0|0)==(0);
   $18 = (0)==(0);
   $19 = $17 & $18;
   $or$cond4 = $16 & $19;
   if ($or$cond4) {
    $$0 = 0.0;
    return (+$$0);
   } else {
    $25 = $0;$70 = $1;$hx$0 = $1;$k$0 = -1023;
   }
  }
 } while(0);
 $20 = (($hx$0) + 614242)|0;
 $21 = $20 >>> 20;
 $22 = (($k$0) + ($21))|0;
 $23 = $20 & 1048575;
 $24 = (($23) + 1072079006)|0;
 HEAP32[tempDoublePtr>>2] = $25;HEAP32[tempDoublePtr+4>>2] = $24;$26 = +HEAPF64[tempDoublePtr>>3];
 $27 = $26 + -1.0;
 $28 = $27 * 0.5;
 $29 = $27 * $28;
 $30 = $27 + 2.0;
 $31 = $27 / $30;
 $32 = $31 * $31;
 $33 = $32 * $32;
 $34 = $33 * 0.15313837699209373;
 $35 = $34 + 0.22222198432149784;
 $36 = $33 * $35;
 $37 = $36 + 0.39999999999409419;
 $38 = $33 * $37;
 $39 = $33 * 0.14798198605116586;
 $40 = $39 + 0.1818357216161805;
 $41 = $33 * $40;
 $42 = $41 + 0.28571428743662391;
 $43 = $33 * $42;
 $44 = $43 + 0.66666666666667351;
 $45 = $32 * $44;
 $46 = $38 + $45;
 $47 = $27 - $29;
 HEAPF64[tempDoublePtr>>3] = $47;$48 = HEAP32[tempDoublePtr>>2]|0;
 $49 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $49;$50 = +HEAPF64[tempDoublePtr>>3];
 $51 = $27 - $50;
 $52 = $51 - $29;
 $53 = $29 + $46;
 $54 = $31 * $53;
 $55 = $54 + $52;
 $56 = $50 * 0.43429448187816888;
 $57 = (+($22|0));
 $58 = $57 * 0.30102999566361177;
 $59 = $57 * 3.6942390771589308E-13;
 $60 = $50 + $55;
 $61 = $60 * 2.5082946711645275E-11;
 $62 = $59 + $61;
 $63 = $55 * 0.43429448187816888;
 $64 = $63 + $62;
 $65 = $58 + $56;
 $66 = $58 - $65;
 $67 = $56 + $66;
 $68 = $67 + $64;
 $69 = $65 + $68;
 $$0 = $69;
 return (+$$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 63]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 63]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa7 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $8 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa7 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0$lcssa7)|0);
   $26 = ($25>>>0)<($i$0$lcssa7>>>0);
   if ($26) {
    $$0 = $i$0$lcssa7;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa7)|0);
    $28 = (($l) - ($i$0$lcssa7))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa7;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 63]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=52904+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $3 & $4;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$110;$w$0$lcssa = $w$011;
        break L11;
       }
       $26 = (($w$011) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 } else {
  $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 }
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa10 = $2;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = (($l$04) + 1|0);
  $6 = (($r$05) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  return ($11|0);
 }
 $8 = $$lcssa&255;
 $9 = $$lcssa10&255;
 $10 = (($8) - ($9))|0;
 $11 = $10;
 return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $13 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$7 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $4 = ($3<<24>>24)!=(0);
    $5 = ($$08|0)!=(0);
    $or$cond = $4 & $5;
    $6 = ($7<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond & $6;
    if (!($or$cond4)) {
     $13 = $7;$r$0$lcssa = $r$07;
     break L4;
    }
    $8 = (($l$06) + 1|0);
    $9 = (($r$07) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $13 = 0;$r$0$lcssa = $9;
     break;
    } else {
     $$08$in = $$08;$7 = $10;$l$06 = $8;$r$07 = $9;
    }
   }
  }
 } while(0);
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((51784 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((52256 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((51784 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((51784 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((51784 + 24|0))>>2] = $36;
  HEAP32[((51784 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((51784 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((51784 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((51784 + 8|0))>>2] = $storemerge21;
  HEAP32[((51784 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((51784 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[51784>>2]|0;
    $88 = $87 & $86;
    HEAP32[51784>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((51784 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((51784 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((51784 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((51784 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((51784 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((51784 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0;
 var $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$051 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$050 = 0, $T$050$lcssa = 0;
 var $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((51784 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((51784 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((51784 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((51784 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[51784>>2]|0;
     $32 = $31 & $30;
     HEAP32[51784>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((51784 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((51784 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((51784 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((51784 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((51784 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((51784 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((51784 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((51784 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((51784 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((51784 + 12|0))>>2] = $115;
   HEAP32[((51784 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((51784 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((51784 + 20|0))>>2] = 0;
   HEAP32[((51784 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((51784 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((51784 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((51784 + 8|0))>>2] = $123;
   HEAP32[((51784 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((51784 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[51784>>2]|0;
     $146 = $145 & $144;
     HEAP32[51784>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((51784 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((51784 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((51784 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((51784 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((51784 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((51784 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((51784 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((51784 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((51784 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[51784>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[51784>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((51784 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((51784 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((51784 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((51784 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((51784 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((51784 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$051 = $283;$T$050 = $275;
   while(1) {
    $291 = $K20$051 >>> 31;
    $292 = ((($T$050) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$050$lcssa = $T$050;
     break;
    }
    $285 = $K20$051 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$051 = $285;$T$050 = $287;
    }
   }
   $294 = HEAP32[((51784 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$050$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((51784 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  return ($97|0);
 } else {
  $c$111 = $c$0;$x$012 = 0;
 }
 while(1) {
  $33 = ($x$012*10)|0;
  $34 = (($c$111) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if ($$) {
   $c$111 = $c$1$be;$x$012 = $35;
  } else {
   $$lcssa17 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $46 = ($$lcssa17|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $$lcssa17;$53 = $47;$c$27 = $c$1$be$lcssa;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$27|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$27|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond5 = $70 & $75;
   if ($or$cond5) {
    $52 = $60;$53 = $61;$c$27 = $c$2$be;
   } else {
    $90 = $60;$91 = $61;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $90 = $$lcssa17;$91 = $47;$c$2$lcssa = $c$1$be$lcssa;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0;
 var $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0, $$01$i69$i = 0, $$01$i74 = 0;
 var $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$100 = 0, $$12$i = 0, $$12$i$i = 0, $$12$i118$i = 0;
 var $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0, $$29$i = 0, $$3$i = 0.0;
 var $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa283$i = 0, $$lcssa291 = 0, $$lcssa297 = 0, $$lcssa298 = 0;
 var $$lcssa299 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa304 = 0, $$lcssa305 = 0, $$lcssa311 = 0, $$lcssa315 = 0, $$lcssa317 = 0, $$lcssa320 = 0, $$lcssa321 = 0, $$lcssa324 = 0.0, $$lcssa325 = 0, $$lcssa328 = 0, $$lcssa332 = 0, $$mask$i = 0, $$mask$i39 = 0, $$mask1$i = 0, $$mask1$i38 = 0, $$neg159$i = 0;
 var $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0, $$pre269 = 0, $$pre270 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0.0, $1031 = 0.0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $1039$phi = 0, $104 = 0, $1040 = 0, $1040$phi = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $124$phi = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $579$phi = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $879$phi = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0;
 var $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0;
 var $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0;
 var $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0;
 var $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0115 = 0, $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0;
 var $fl$4 = 0, $fl$6 = 0, $fmt88$lcssa = 0, $fmt88167 = 0, $fmt89 = 0, $fmt90 = 0, $fmt91 = 0, $fmt93 = 0, $fmt93$lcssa294 = 0, $fmt94 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1191 = 0, $i$1230$i = 0, $i$2166 = 0;
 var $i$2217$i = 0, $i$3164 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0;
 var $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0, $or$cond$i60$i = 0, $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0;
 var $or$cond279 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0;
 var $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s9$0$i = 0, $s9$1200$i = 0;
 var $s9$2$i = 0, $sext = 0, $sext101 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa295 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0;
 var $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0168 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0;
 var $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1039 = 0;$1040 = 0;$cnt$0 = 0;$fmt90 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt90>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 351;
   break;
  } else {
   $1041 = $22;$fmt89 = $fmt90;
  }
  while(1) {
   if ((($1041<<24>>24) == 0)) {
    $fmt88$lcssa = $fmt89;$z$0$lcssa = $fmt89;
    break;
   } else if ((($1041<<24>>24) == 37)) {
    $fmt88167 = $fmt89;$z$0168 = $fmt89;
    label = 9;
    break;
   }
   $24 = (($fmt89) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1041 = $$pre;$fmt89 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = (($fmt88167) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt88$lcssa = $fmt88167;$z$0$lcssa = $z$0168;
      break L12;
     }
     $28 = (($z$0168) + 1|0);
     $29 = (($fmt88167) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt88167 = $29;$z$0168 = $28;
      label = 9;
     } else {
      $fmt88$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt90;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt90,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt90|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1040$phi = $1040;$1039$phi = $1039;$cnt$0 = $cnt$1;$fmt90 = $fmt88$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1040 = $1040$phi;$1039 = $1039$phi;
   continue;
  }
  $36 = (($fmt88$lcssa) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = (($fmt88$lcssa) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   $42 = (($fmt88$lcssa) + 3|0);
   $$100 = $41 ? $42 : $36;
   $$l10n$0 = $41 ? 1 : $l10n$0;
   $isdigittmp$ = $41 ? $isdigittmp : -1;
   $$pre269 = HEAP8[$$100>>0]|0;
   $44 = $$pre269;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$100;
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L24: do {
   if ($46) {
    $48 = $43;$53 = $44;$fl$0175 = 0;$storemerge8174 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $63 = $53;$fl$0115 = $fl$0175;$storemerge8113 = $storemerge8174;
      break L24;
     }
     $52 = $53 << 24 >> 24;
     $54 = (($52) + -32)|0;
     $55 = 1 << $54;
     $56 = $55 | $fl$0175;
     $57 = (($storemerge8174) + 1|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58 << 24 >> 24;
     $60 = $59 & -32;
     $61 = ($60|0)==(32);
     if ($61) {
      $48 = $59;$53 = $58;$fl$0175 = $56;$storemerge8174 = $57;
     } else {
      $63 = $58;$fl$0115 = $56;$storemerge8113 = $57;
      break;
     }
    }
   } else {
    $63 = $44;$fl$0115 = 0;$storemerge8113 = $storemerge;
   }
  } while(0);
  $62 = ($63<<24>>24)==(42);
  do {
   if ($62) {
    $64 = (($storemerge8113) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $isdigittmp11 = (($66) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $67 = (($storemerge8113) + 2|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = ($68<<24>>24)==(36);
     if ($69) {
      $70 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$70>>2] = 10;
      $71 = HEAP8[$64>>0]|0;
      $72 = $71 << 24 >> 24;
      $73 = (($72) + -48)|0;
      $74 = (($nl_arg) + ($73<<3)|0);
      $75 = $74;
      $76 = $75;
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 4)|0;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($storemerge8113) + 3|0);
      $l10n$2 = 1;$storemerge13 = $81;$w$0 = $77;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $82 = ($l10n$1|0)==(0);
     if (!($82)) {
      $$0 = -1;
      label = 369;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0115;$fmt91 = $64;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $83 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $64;$w$0 = $83;
    }
    $84 = ($w$0|0)<(0);
    if ($84) {
     $85 = $fl$0115 | 8192;
     $86 = (0 - ($w$0))|0;
     $fl$1 = $85;$fmt91 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $86;
    } else {
     $fl$1 = $fl$0115;$fmt91 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $87 = $63 << 24 >> 24;
    $isdigittmp1$i = (($87) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $91 = $storemerge8113;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $88 = ($i$03$i*10)|0;
      $89 = (($88) + ($isdigittmp4$i))|0;
      $90 = (($91) + 1|0);
      $92 = HEAP8[$90>>0]|0;
      $93 = $92 << 24 >> 24;
      $isdigittmp$i = (($93) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $91 = $90;$i$03$i = $89;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $89;$$lcssa291 = $90;
       break;
      }
     }
     $94 = ($$lcssa|0)<(0);
     if ($94) {
      $$0 = -1;
      label = 369;
      break L1;
     } else {
      $fl$1 = $fl$0115;$fmt91 = $$lcssa291;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$0115;$fmt91 = $storemerge8113;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $95 = HEAP8[$fmt91>>0]|0;
  $96 = ($95<<24>>24)==(46);
  L45: do {
   if ($96) {
    $97 = (($fmt91) + 1|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = ($98<<24>>24)==(42);
    if (!($99)) {
     $120 = $98 << 24 >> 24;
     $isdigittmp1$i28 = (($120) + -48)|0;
     $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
     if ($isdigit2$i29) {
      $1042 = $97;$124 = $fmt91;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
     } else {
      $fmt94 = $97;$p$0 = 0;
      break;
     }
     while(1) {
      $121 = ($i$03$i31*10)|0;
      $122 = (($121) + ($isdigittmp4$i30))|0;
      $123 = (($124) + 2|0);
      $125 = HEAP8[$123>>0]|0;
      $126 = $125 << 24 >> 24;
      $isdigittmp$i32 = (($126) + -48)|0;
      $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
      if ($isdigit$i33) {
       $124$phi = $1042;$1042 = $123;$i$03$i31 = $122;$isdigittmp4$i30 = $isdigittmp$i32;$124 = $124$phi;
      } else {
       $fmt94 = $123;$p$0 = $122;
       break L45;
      }
     }
    }
    $100 = (($fmt91) + 2|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101 << 24 >> 24;
    $isdigittmp9 = (($102) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $103 = (($fmt91) + 3|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = ($104<<24>>24)==(36);
     if ($105) {
      $106 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$106>>2] = 10;
      $107 = HEAP8[$100>>0]|0;
      $108 = $107 << 24 >> 24;
      $109 = (($108) + -48)|0;
      $110 = (($nl_arg) + ($109<<3)|0);
      $111 = $110;
      $112 = $111;
      $113 = HEAP32[$112>>2]|0;
      $114 = (($111) + 4)|0;
      $115 = $114;
      $116 = HEAP32[$115>>2]|0;
      $117 = (($fmt91) + 4|0);
      $fmt94 = $117;$p$0 = $113;
      break;
     }
    }
    $118 = ($l10n$3|0)==(0);
    if (!($118)) {
     $$0 = -1;
     label = 369;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $119 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt94 = $100;$p$0 = $119;
    } else {
     $fmt94 = $100;$p$0 = 0;
    }
   } else {
    $fmt94 = $fmt91;$p$0 = -1;
   }
  } while(0);
  $fmt93 = $fmt94;$st$0 = 0;
  while(1) {
   $127 = HEAP8[$fmt93>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = (($128) + -65)|0;
   $130 = ($129>>>0)>(57);
   if ($130) {
    $$0 = -1;
    label = 369;
    break L1;
   }
   $131 = (($fmt93) + 1|0);
   $132 = ((52336 + (($st$0*58)|0)|0) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + -1)|0;
   $136 = ($135>>>0)<(8);
   if ($136) {
    $fmt93 = $131;$st$0 = $134;
   } else {
    $$lcssa297 = $127;$$lcssa298 = $131;$$lcssa299 = $133;$$lcssa300 = $134;$fmt93$lcssa294 = $fmt93;$st$0$lcssa295 = $st$0;
    break;
   }
  }
  $137 = ($$lcssa299<<24>>24)==(0);
  if ($137) {
   $$0 = -1;
   label = 369;
   break;
  }
  $138 = ($$lcssa299<<24>>24)==(19);
  $139 = ($argpos$0|0)>(-1);
  L64: do {
   if ($138) {
    if ($139) {
     $$0 = -1;
     label = 369;
     break L1;
    } else {
     $1043 = $1039;$1044 = $1040;
     label = 62;
    }
   } else {
    if ($139) {
     $140 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$140>>2] = $$lcssa300;
     $141 = (($nl_arg) + ($argpos$0<<3)|0);
     $142 = $141;
     $143 = $142;
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 4)|0;
     $146 = $145;
     $147 = HEAP32[$146>>2]|0;
     $1043 = $144;$1044 = $147;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 369;
     break L1;
    }
    $148 = ($$lcssa299&255)>(20);
    if ($148) {
     $182 = $$lcssa297;$191 = $1039;$218 = $1040;
    } else {
     do {
      switch ($$lcssa300|0) {
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $151 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $152 = ($151|0)<(0);
       $153 = $152 << 31 >> 31;
       $1045 = $153;$1046 = $151;
       label = 63;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
       $180 = HEAP32[tempDoublePtr+4>>2]|0;
       $1043 = $179;$1044 = $180;
       label = 62;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1045 = 0;$1046 = $154;
       label = 63;
       break L64;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $149 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $150 = $149;
       $1045 = $1040;$1046 = $150;
       label = 63;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $155 = $arglist_current14;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (($155) + 4)|0;
       $159 = $158;
       $160 = HEAP32[$159>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1045 = $160;$1046 = $157;
       label = 63;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $168 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $169 = $168&255;
       $170 = $169 << 24 >> 24;
       $171 = ($170|0)<(0);
       $172 = $171 << 31 >> 31;
       $sext = $168 << 24;
       $173 = $sext >> 24;
       $1045 = $172;$1046 = $173;
       label = 63;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $174 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i39 = $174 & 255;
       $1045 = 0;$1046 = $$mask$i39;
       label = 63;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $161 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $162 = $161&65535;
       $163 = $162 << 16 >> 16;
       $164 = ($163|0)<(0);
       $165 = $164 << 31 >> 31;
       $sext101 = $161 << 16;
       $166 = $sext101 >> 16;
       $1045 = $165;$1046 = $166;
       label = 63;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
       $177 = HEAP32[tempDoublePtr+4>>2]|0;
       $1045 = $177;$1046 = $176;
       label = 63;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $167 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i38 = $167 & 65535;
       $1045 = 0;$1046 = $$mask1$i38;
       label = 63;
       break L64;
       break;
      }
      default: {
       $1045 = $1040;$1046 = $1039;
       label = 63;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $1045 = $1044;$1046 = $1043;
    label = 63;
   } else {
    $1039 = $1043;$1040 = $1044;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 63) {
   label = 0;
   $$pre270 = HEAP8[$fmt93$lcssa294>>0]|0;
   $182 = $$pre270;$191 = $1046;$218 = $1045;
  }
  $181 = $182 << 24 >> 24;
  $183 = ($st$0$lcssa295|0)!=(0);
  $184 = $181 & 15;
  $185 = ($184|0)==(3);
  $or$cond15 = $183 & $185;
  $186 = $181 & -33;
  $t$0 = $or$cond15 ? $186 : $181;
  $187 = $fl$1 & 8192;
  $188 = ($187|0)==(0);
  $189 = $fl$1 & -65537;
  $fl$1$ = $188 ? $fl$1 : $189;
  L88: do {
   switch ($t$0|0) {
   case 109:  {
    $305 = (___errno_location()|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (_strerror(($306|0))|0);
    $a$1 = $307;
    label = 95;
    break;
   }
   case 115:  {
    $308 = $191;
    $309 = ($191|0)==(0);
    $$21 = $309 ? 52816 : $308;
    $a$1 = $$21;
    label = 95;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $191;
    HEAP32[$5>>2] = 0;
    $1051 = $wc;$1052 = $6;$p$4274 = -1;
    label = 100;
    break;
   }
   case 83:  {
    $316 = $191;
    $317 = ($p$0|0)==(0);
    if ($317) {
     $1053 = $191;$1054 = $316;$i$0$lcssa275 = 0;
     label = 105;
    } else {
     $1051 = $316;$1052 = $191;$p$4274 = $p$0;
     label = 100;
    }
    break;
   }
   case 117:  {
    $263 = $218;$265 = $191;$pl$0 = 0;$prefix$0 = 52800;
    label = 85;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 74;
    break;
   }
   case 112:  {
    $212 = ($p$0>>>0)>(8);
    $213 = $212 ? $p$0 : 8;
    $214 = $fl$1$ | 8;
    $fl$3 = $214;$p$1 = $213;$t$1 = 120;
    label = 74;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $191;HEAP32[tempDoublePtr+4>>2] = $218;$355 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $356 = ($218|0)<(0);
    if ($356) {
     $357 = -$355;
     $$013$i = $357;$pl$0$i = 1;$prefix$0$i = 52824;
    } else {
     $358 = $fl$1$ & 2048;
     $359 = ($358|0)==(0);
     if ($359) {
      $360 = $fl$1$ & 1;
      $361 = ($360|0)==(0);
      $$$i = $361 ? ((52824 + 1|0)) : ((52824 + 6|0));
      $$013$i = $355;$pl$0$i = $360;$prefix$0$i = $$$i;
     } else {
      $$013$i = $355;$pl$0$i = 1;$prefix$0$i = ((52824 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$013$i;$362 = HEAP32[tempDoublePtr>>2]|0;
    $363 = HEAP32[tempDoublePtr+4>>2]|0;
    $364 = $363 & 2146435072;
    $365 = ($364>>>0)<(2146435072);
    $366 = (0)<(0);
    $367 = ($364|0)==(2146435072);
    $368 = $367 & $366;
    $369 = $365 | $368;
    if (!($369)) {
     $370 = $t$0 & 32;
     $371 = ($370|0)!=(0);
     $372 = $371 ? 52848 : 52856;
     $373 = ($$013$i != $$013$i) | (0.0 != 0.0);
     if ($373) {
      $374 = $371 ? 52864 : 52872;
      $pl$1$i = 0;$s1$0$i = $374;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $372;
     }
     $375 = (($pl$1$i) + 3)|0;
     $376 = $fl$1$ & 8192;
     $377 = ($376|0)==(0);
     $378 = ($w$1|0)>($375|0);
     $or$cond$i43$i = $377 & $378;
     if ($or$cond$i43$i) {
      $379 = (($w$1) - ($375))|0;
      $380 = ($379>>>0)>(256);
      $381 = $380 ? 256 : $379;
      _memset(($pad$i|0),32,($381|0))|0;
      $382 = ($379>>>0)>(255);
      if ($382) {
       $$01$i45$i = $379;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $383 = (($$01$i45$i) + -256)|0;
        $384 = ($383>>>0)>(255);
        if ($384) {
         $$01$i45$i = $383;
        } else {
         break;
        }
       }
       $385 = $379 & 255;
       $$0$lcssa$i47$i = $385;
      } else {
       $$0$lcssa$i47$i = $379;
      }
      (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $386 = $fl$1$ & 73728;
     $387 = ($386|0)==(8192);
     $or$cond$i50$i = $387 & $378;
     if ($or$cond$i50$i) {
      $388 = (($w$1) - ($375))|0;
      $389 = ($388>>>0)>(256);
      $390 = $389 ? 256 : $388;
      _memset(($pad$i|0),32,($390|0))|0;
      $391 = ($388>>>0)>(255);
      if ($391) {
       $$01$i52$i = $388;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $392 = (($$01$i52$i) + -256)|0;
        $393 = ($392>>>0)>(255);
        if ($393) {
         $$01$i52$i = $392;
        } else {
         break;
        }
       }
       $394 = $388 & 255;
       $$0$lcssa$i54$i = $394;
      } else {
       $$0$lcssa$i54$i = $388;
      }
      (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
     }
     $w$$i = $378 ? $w$1 : $375;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $395 = (+_frexpl($$013$i,$e2$i));
    $396 = $395 * 2.0;
    $397 = $396 != 0.0;
    if ($397) {
     $398 = HEAP32[$e2$i>>2]|0;
     $399 = (($398) + -1)|0;
     HEAP32[$e2$i>>2] = $399;
    }
    $400 = $t$0 | 32;
    $401 = ($400|0)==(97);
    if ($401) {
     $402 = $t$0 & 32;
     $403 = ($402|0)==(0);
     $404 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $403 ? $prefix$0$i : $404;
     $405 = $pl$0$i | 2;
     $406 = ($p$0>>>0)>(11);
     $407 = (12 - ($p$0))|0;
     $re$0$i = $406 ? 0 : $407;
     $408 = ($re$0$i|0)==(0);
     do {
      if ($408) {
       $$1$i = $396;
      } else {
       $re$1187$i = $re$0$i;$round$0186$i = 8.0;
       while(1) {
        $409 = (($re$1187$i) + -1)|0;
        $410 = $round$0186$i * 16.0;
        $411 = ($409|0)==(0);
        if ($411) {
         $$lcssa324 = $410;
         break;
        } else {
         $re$1187$i = $409;$round$0186$i = $410;
        }
       }
       $412 = HEAP8[$prefix$0$$i>>0]|0;
       $413 = ($412<<24>>24)==(45);
       if ($413) {
        $414 = -$396;
        $415 = $414 - $$lcssa324;
        $416 = $$lcssa324 + $415;
        $417 = -$416;
        $$1$i = $417;
        break;
       } else {
        $418 = $396 + $$lcssa324;
        $419 = $418 - $$lcssa324;
        $$1$i = $419;
        break;
       }
      }
     } while(0);
     $420 = HEAP32[$e2$i>>2]|0;
     $421 = ($420|0)<(0);
     $422 = (0 - ($420))|0;
     $423 = $421 ? $422 : $420;
     $424 = ($423|0)<(0);
     if ($424) {
      $425 = ($423|0)<(0);
      $426 = $425 << 31 >> 31;
      $$05$i$i = $7;$427 = $423;$428 = $426;
      while(1) {
       $429 = (___uremdi3(($427|0),($428|0),10,0)|0);
       $430 = tempRet0;
       $431 = $429 | 48;
       $432 = $431&255;
       $433 = (($$05$i$i) + -1|0);
       HEAP8[$433>>0] = $432;
       $434 = (___udivdi3(($427|0),($428|0),10,0)|0);
       $435 = tempRet0;
       $436 = ($428>>>0)>(9);
       $437 = ($427>>>0)>(4294967295);
       $438 = ($428|0)==(9);
       $439 = $438 & $437;
       $440 = $436 | $439;
       if ($440) {
        $$05$i$i = $433;$427 = $434;$428 = $435;
       } else {
        $$lcssa325 = $433;$1055 = $434;$1056 = $435;
        break;
       }
      }
      $$0$lcssa$i56$i = $$lcssa325;$$01$lcssa$off0$i$i = $1055;
     } else {
      $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $423;
     }
     $441 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($441) {
      $$1$lcssa$i$i = $$0$lcssa$i56$i;
     } else {
      $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $442 = (($y$03$i$i>>>0) % 10)&-1;
       $443 = $442 | 48;
       $444 = $443&255;
       $445 = (($$12$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (($y$03$i$i>>>0) / 10)&-1;
       $447 = ($y$03$i$i>>>0)<(10);
       if ($447) {
        $$1$lcssa$i$i = $445;
        break;
       } else {
        $$12$i$i = $445;$y$03$i$i = $446;
       }
      }
     }
     $448 = ($$1$lcssa$i$i|0)==($7|0);
     if ($448) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $449 = HEAP32[$e2$i>>2]|0;
     $450 = $449 >> 31;
     $451 = $450 & 2;
     $452 = (($451) + 43)|0;
     $453 = $452&255;
     $454 = (($estr$0$i) + -1|0);
     HEAP8[$454>>0] = $453;
     $455 = (($t$0) + 15)|0;
     $456 = $455&255;
     $457 = (($estr$0$i) + -2|0);
     HEAP8[$457>>0] = $456;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $458 = $fl$1$ & 8;
      $459 = ($458|0)==(0);
      if ($459) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $460 = (~~(($$2$us$us$i)));
        $461 = (52880 + ($460)|0);
        $462 = HEAP8[$461>>0]|0;
        $463 = $462&255;
        $464 = $463 | $402;
        $465 = $464&255;
        $466 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $465;
        $467 = (+($460|0));
        $468 = $$2$us$us$i - $467;
        $469 = $468 * 16.0;
        $470 = $466;
        $471 = (($470) - ($0))|0;
        $472 = ($471|0)!=(1);
        $notlhs$us$us$i = $469 == 0.0;
        $or$cond$i80 = $472 | $notlhs$us$us$i;
        if ($or$cond$i80) {
         $s$1$us$us$i = $466;
        } else {
         $473 = (($s$0$us$us$i) + 2|0);
         HEAP8[$466>>0] = 46;
         $s$1$us$us$i = $473;
        }
        $474 = $469 != 0.0;
        if ($474) {
         $$2$us$us$i = $469;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $475 = (~~(($$2$us$i)));
        $476 = (52880 + ($475)|0);
        $477 = HEAP8[$476>>0]|0;
        $478 = $477&255;
        $479 = $478 | $402;
        $480 = $479&255;
        $481 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $480;
        $482 = (+($475|0));
        $483 = $$2$us$i - $482;
        $484 = $483 * 16.0;
        $485 = $481;
        $486 = (($485) - ($0))|0;
        $487 = ($486|0)==(1);
        if ($487) {
         $488 = (($s$0$us$i) + 2|0);
         HEAP8[$481>>0] = 46;
         $s$1$us$i = $488;
        } else {
         $s$1$us$i = $481;
        }
        $489 = $484 != 0.0;
        if ($489) {
         $$2$us$i = $484;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $490 = (~~(($$2$i)));
       $491 = (52880 + ($490)|0);
       $492 = HEAP8[$491>>0]|0;
       $493 = $492&255;
       $494 = $493 | $402;
       $495 = $494&255;
       $496 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $495;
       $497 = (+($490|0));
       $498 = $$2$i - $497;
       $499 = $498 * 16.0;
       $500 = $496;
       $501 = (($500) - ($0))|0;
       $502 = ($501|0)==(1);
       if ($502) {
        $503 = (($s$0$i) + 2|0);
        HEAP8[$496>>0] = 46;
        $s$1$i = $503;
       } else {
        $s$1$i = $496;
       }
       $504 = $499 != 0.0;
       if ($504) {
        $$2$i = $499;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $505 = ($p$0|0)!=(0);
     $$pre308$i = $s$1$lcssa$i;
     $506 = (($11) + ($$pre308$i))|0;
     $507 = ($506|0)<($p$0|0);
     $or$cond279 = $505 & $507;
     $508 = $457;
     if ($or$cond279) {
      $509 = (($12) + ($p$0))|0;
      $510 = (($509) - ($508))|0;
      $l$0$i = $510;
     } else {
      $511 = (($10) - ($508))|0;
      $512 = (($511) + ($$pre308$i))|0;
      $l$0$i = $512;
     }
     $513 = (($l$0$i) + ($405))|0;
     $514 = $fl$1$ & 73728;
     $515 = ($514|0)==(0);
     $516 = ($w$1|0)>($513|0);
     $or$cond$i60$i = $515 & $516;
     if ($or$cond$i60$i) {
      $517 = (($w$1) - ($513))|0;
      $518 = ($517>>>0)>(256);
      $519 = $518 ? 256 : $517;
      _memset(($pad$i|0),32,($519|0))|0;
      $520 = ($517>>>0)>(255);
      if ($520) {
       $$01$i62$i = $517;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $521 = (($$01$i62$i) + -256)|0;
        $522 = ($521>>>0)>(255);
        if ($522) {
         $$01$i62$i = $521;
        } else {
         break;
        }
       }
       $523 = $517 & 255;
       $$0$lcssa$i64$i = $523;
      } else {
       $$0$lcssa$i64$i = $517;
      }
      (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$405,$f)|0);
     $524 = ($514|0)==(65536);
     $or$cond$i67$i = $524 & $516;
     if ($or$cond$i67$i) {
      $525 = (($w$1) - ($513))|0;
      $526 = ($525>>>0)>(256);
      $527 = $526 ? 256 : $525;
      _memset(($pad$i|0),48,($527|0))|0;
      $528 = ($525>>>0)>(255);
      if ($528) {
       $$01$i69$i = $525;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $529 = (($$01$i69$i) + -256)|0;
        $530 = ($529>>>0)>(255);
        if ($530) {
         $$01$i69$i = $529;
        } else {
         break;
        }
       }
       $531 = $525 & 255;
       $$0$lcssa$i71$i = $531;
      } else {
       $$0$lcssa$i71$i = $525;
      }
      (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
     }
     $532 = (($$pre308$i) - ($0))|0;
     (___fwritex($buf$i,$532,$f)|0);
     $533 = $457;
     $534 = (($9) - ($533))|0;
     $535 = (($l$0$i) - ($534))|0;
     $536 = (($535) - ($532))|0;
     $537 = ($536|0)>(0);
     if ($537) {
      $538 = ($536>>>0)>(256);
      $539 = $538 ? 256 : $536;
      _memset(($pad$i|0),48,($539|0))|0;
      $540 = ($536>>>0)>(255);
      if ($540) {
       $$01$i75$i = $536;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $541 = (($$01$i75$i) + -256)|0;
        $542 = ($541>>>0)>(255);
        if ($542) {
         $$01$i75$i = $541;
        } else {
         break;
        }
       }
       $543 = $536 & 255;
       $$0$lcssa$i77$i = $543;
      } else {
       $$0$lcssa$i77$i = $536;
      }
      (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
     }
     (___fwritex($457,$534,$f)|0);
     $544 = ($514|0)==(8192);
     $or$cond$i80$i = $544 & $516;
     if ($or$cond$i80$i) {
      $545 = (($w$1) - ($513))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i82$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i82$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i82$i = $549;
        } else {
         break;
        }
       }
       $551 = $545 & 255;
       $$0$lcssa$i84$i = $551;
      } else {
       $$0$lcssa$i84$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
     }
     $w$25$i = $516 ? $w$1 : $513;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $w$25$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $552 = ($p$0|0)<(0);
    $$p$i = $552 ? 6 : $p$0;
    if ($397) {
     $553 = $396 * 268435456.0;
     $554 = HEAP32[$e2$i>>2]|0;
     $555 = (($554) + -28)|0;
     HEAP32[$e2$i>>2] = $555;
     $$3$i = $553;$557 = $555;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $396;$557 = $$pre$i;
    }
    $556 = ($557|0)<(0);
    $$39$i = $556 ? $big$i : $13;
    $558 = $$39$i;
    $$4$i = $$3$i;$z$0$i = $$39$i;
    while(1) {
     $559 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $559;
     $560 = (($z$0$i) + 4|0);
     $561 = (+($559>>>0));
     $562 = $$4$i - $561;
     $563 = $562 * 1.0E+9;
     $564 = $563 != 0.0;
     if ($564) {
      $$4$i = $563;$z$0$i = $560;
     } else {
      $$lcssa301 = $560;
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $565 = ($$pr$i|0)>(0);
    if ($565) {
     $567 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa301;
     while(1) {
      $566 = ($567|0)>(29);
      $568 = $566 ? 29 : $567;
      $d$0253$i = (($z$1260$i) + -4|0);
      $569 = ($d$0253$i>>>0)<($a$1261$i>>>0);
      do {
       if ($569) {
        $a$2$ph$i = $a$1261$i;
       } else {
        $579 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
        while(1) {
         $570 = HEAP32[$d$0255$i>>2]|0;
         $571 = (_bitshift64Shl(($570|0),0,($568|0))|0);
         $572 = tempRet0;
         $573 = (_i64Add(($571|0),($572|0),($carry$0254$i|0),0)|0);
         $574 = tempRet0;
         $575 = (___uremdi3(($573|0),($574|0),1000000000,0)|0);
         $576 = tempRet0;
         HEAP32[$d$0255$i>>2] = $575;
         $577 = (___udivdi3(($573|0),($574|0),1000000000,0)|0);
         $578 = tempRet0;
         $d$0$i = (($579) + -8|0);
         $580 = ($d$0$i>>>0)<($a$1261$i>>>0);
         if ($580) {
          $$lcssa302 = $577;
          break;
         } else {
          $579$phi = $d$0255$i;$carry$0254$i = $577;$d$0255$i = $d$0$i;$579 = $579$phi;
         }
        }
        $581 = ($$lcssa302|0)==(0);
        if ($581) {
         $a$2$ph$i = $a$1261$i;
         break;
        }
        $582 = (($a$1261$i) + -4|0);
        HEAP32[$582>>2] = $$lcssa302;
        $a$2$ph$i = $582;
       }
      } while(0);
      $z$2$i = $z$1260$i;
      while(1) {
       $583 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($583)) {
        $z$2$i$lcssa = $z$2$i;
        break;
       }
       $584 = (($z$2$i) + -4|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = ($585|0)==(0);
       if ($586) {
        $z$2$i = $584;
       } else {
        $z$2$i$lcssa = $z$2$i;
        break;
       }
      }
      $587 = HEAP32[$e2$i>>2]|0;
      $588 = (($587) - ($568))|0;
      HEAP32[$e2$i>>2] = $588;
      $589 = ($588|0)>(0);
      if ($589) {
       $567 = $588;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
      } else {
       $$pr154$i = $588;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
       break;
      }
     }
    } else {
     $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa301;
    }
    $590 = ($$pr154$i|0)<(0);
    L226: do {
     if ($590) {
      $591 = (($$p$i) + 25)|0;
      $592 = (($591|0) / 9)&-1;
      $593 = (($592) + 1)|0;
      $594 = ($400|0)==(102);
      if ($594) {
       $595 = (($$39$i) + ($593<<2)|0);
       $597 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
       while(1) {
        $596 = ($597|0)<(-9);
        $598 = (0 - ($597))|0;
        $$26$us$i = $596 ? 9 : $598;
        $599 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
        do {
         if ($599) {
          $624 = 1 << $$26$us$i;
          $617 = (($624) + -1)|0;
          $621 = 1000000000 >>> $$26$us$i;
          $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
          while(1) {
           $615 = HEAP32[$d$1241$us$i>>2]|0;
           $616 = $615 & $617;
           $618 = $615 >>> $$26$us$i;
           $619 = (($618) + ($carry3$0242$us$i))|0;
           HEAP32[$d$1241$us$i>>2] = $619;
           $620 = Math_imul($616, $621)|0;
           $622 = (($d$1241$us$i) + 4|0);
           $623 = ($622>>>0)<($z$3247$us$i>>>0);
           if ($623) {
            $carry3$0242$us$i = $620;$d$1241$us$i = $622;
           } else {
            $$lcssa305 = $620;
            break;
           }
          }
          $603 = HEAP32[$a$3248$us$i>>2]|0;
          $604 = ($603|0)==(0);
          $605 = (($a$3248$us$i) + 4|0);
          $$a$3$us$i = $604 ? $605 : $a$3248$us$i;
          $606 = ($$lcssa305|0)==(0);
          if ($606) {
           $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
           break;
          }
          $607 = (($z$3247$us$i) + 4|0);
          HEAP32[$z$3247$us$i>>2] = $$lcssa305;
          $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $607;
         } else {
          $600 = HEAP32[$a$3248$us$i>>2]|0;
          $601 = ($600|0)==(0);
          $602 = (($a$3248$us$i) + 4|0);
          $$a$3$us309$i = $601 ? $602 : $a$3248$us$i;
          $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
         }
        } while(0);
        $608 = $z$4$us$i;
        $609 = (($608) - ($558))|0;
        $610 = $609 >> 2;
        $611 = ($610|0)>($593|0);
        $$z$4$us$i = $611 ? $595 : $z$4$us$i;
        $612 = HEAP32[$e2$i>>2]|0;
        $613 = (($612) + ($$26$us$i))|0;
        HEAP32[$e2$i>>2] = $613;
        $614 = ($613|0)<(0);
        if ($614) {
         $597 = $613;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us310$i;$z$3$lcssa$i = $$z$4$us$i;
         break L226;
        }
       }
      } else {
       $626 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
      }
      while(1) {
       $625 = ($626|0)<(-9);
       $627 = (0 - ($626))|0;
       $$26$i = $625 ? 9 : $627;
       $628 = ($a$3248$i>>>0)<($z$3247$i>>>0);
       do {
        if ($628) {
         $632 = 1 << $$26$i;
         $633 = (($632) + -1)|0;
         $634 = 1000000000 >>> $$26$i;
         $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
         while(1) {
          $635 = HEAP32[$d$1241$i>>2]|0;
          $636 = $635 & $633;
          $637 = $635 >>> $$26$i;
          $638 = (($637) + ($carry3$0242$i))|0;
          HEAP32[$d$1241$i>>2] = $638;
          $639 = Math_imul($636, $634)|0;
          $640 = (($d$1241$i) + 4|0);
          $641 = ($640>>>0)<($z$3247$i>>>0);
          if ($641) {
           $carry3$0242$i = $639;$d$1241$i = $640;
          } else {
           $$lcssa304 = $639;
           break;
          }
         }
         $642 = HEAP32[$a$3248$i>>2]|0;
         $643 = ($642|0)==(0);
         $644 = (($a$3248$i) + 4|0);
         $$a$3$i = $643 ? $644 : $a$3248$i;
         $645 = ($$lcssa304|0)==(0);
         if ($645) {
          $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
          break;
         }
         $646 = (($z$3247$i) + 4|0);
         HEAP32[$z$3247$i>>2] = $$lcssa304;
         $$a$3312$i = $$a$3$i;$z$4$i = $646;
        } else {
         $629 = HEAP32[$a$3248$i>>2]|0;
         $630 = ($629|0)==(0);
         $631 = (($a$3248$i) + 4|0);
         $$a$3311$i = $630 ? $631 : $a$3248$i;
         $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
        }
       } while(0);
       $647 = $z$4$i;
       $648 = $$a$3312$i;
       $649 = (($647) - ($648))|0;
       $650 = $649 >> 2;
       $651 = ($650|0)>($593|0);
       if ($651) {
        $652 = (($$a$3312$i) + ($593<<2)|0);
        $z$5$i = $652;
       } else {
        $z$5$i = $z$4$i;
       }
       $653 = HEAP32[$e2$i>>2]|0;
       $654 = (($653) + ($$26$i))|0;
       HEAP32[$e2$i>>2] = $654;
       $655 = ($654|0)<(0);
       if ($655) {
        $626 = $654;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3312$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $656 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($656) {
      $657 = $a$3$lcssa$i;
      $658 = (($558) - ($657))|0;
      $659 = $658 >> 2;
      $660 = ($659*9)|0;
      $661 = HEAP32[$a$3$lcssa$i>>2]|0;
      $662 = ($661>>>0)<(10);
      if ($662) {
       $e$1$i = $660;
       break;
      } else {
       $e$0237$i = $660;$i$0236$i = 10;
      }
      while(1) {
       $663 = ($i$0236$i*10)|0;
       $664 = (($e$0237$i) + 1)|0;
       $665 = ($661>>>0)<($663>>>0);
       if ($665) {
        $e$1$i = $664;
        break;
       } else {
        $e$0237$i = $664;$i$0236$i = $663;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $666 = ($400|0)!=(102);
    $667 = $666 ? $e$1$i : 0;
    $668 = (($$p$i) - ($667))|0;
    $669 = ($400|0)==(103);
    $670 = ($$p$i|0)!=(0);
    $$27$i = $669 & $670;
    $$neg159$i = $$27$i << 31 >> 31;
    $671 = (($668) + ($$neg159$i))|0;
    $672 = $z$3$lcssa$i;
    $673 = (($672) - ($558))|0;
    $674 = $673 >> 2;
    $675 = ($674*9)|0;
    $676 = (($675) + -9)|0;
    $677 = ($671|0)<($676|0);
    if ($677) {
     $678 = (($671) + 9216)|0;
     $679 = (($678|0) / 9)&-1;
     $$sum$i = (($679) + -1023)|0;
     $680 = (($$39$i) + ($$sum$i<<2)|0);
     $681 = (($678|0) % 9)&-1;
     $j$0229$i = (($681) + 1)|0;
     $682 = ($j$0229$i|0)<(9);
     if ($682) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $683 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $683;
        break;
       } else {
        $i$1230$i = $683;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $684 = HEAP32[$680>>2]|0;
     $685 = (($684>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $686 = ($685|0)==(0);
     if ($686) {
      $$sum21$i = (($679) + -1022)|0;
      $687 = (($$39$i) + ($$sum21$i<<2)|0);
      $688 = ($687|0)==($z$3$lcssa$i|0);
      if ($688) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $680;$e$3$i = $e$1$i;
      } else {
       label = 231;
      }
     } else {
      label = 231;
     }
     do {
      if ((label|0) == 231) {
       label = 0;
       $689 = (($684>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $690 = $689 & 1;
       $691 = ($690|0)==(0);
       $$28$i = $691 ? 9007199254740992.0 : 9007199254740994.0;
       $692 = (($i$1$lcssa$i|0) / 2)&-1;
       $693 = ($685>>>0)<($692>>>0);
       do {
        if ($693) {
         $small$0$i = 0.5;
        } else {
         $694 = ($685|0)==($692|0);
         if ($694) {
          $$sum22$i = (($679) + -1022)|0;
          $695 = (($$39$i) + ($$sum22$i<<2)|0);
          $696 = ($695|0)==($z$3$lcssa$i|0);
          if ($696) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $697 = ($pl$0$i|0)==(0);
       do {
        if ($697) {
         $round6$1$i = $$28$i;$small$1$i = $small$0$i;
        } else {
         $698 = HEAP8[$prefix$0$i>>0]|0;
         $699 = ($698<<24>>24)==(45);
         if (!($699)) {
          $round6$1$i = $$28$i;$small$1$i = $small$0$i;
          break;
         }
         $700 = -$$28$i;
         $701 = -$small$0$i;
         $round6$1$i = $700;$small$1$i = $701;
        }
       } while(0);
       $702 = (($684) - ($685))|0;
       HEAP32[$680>>2] = $702;
       $703 = $round6$1$i + $small$1$i;
       $704 = $703 != $round6$1$i;
       if (!($704)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $680;$e$3$i = $e$1$i;
        break;
       }
       $705 = (($702) + ($i$1$lcssa$i))|0;
       HEAP32[$680>>2] = $705;
       $706 = ($705>>>0)>(999999999);
       if ($706) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $680;
        while(1) {
         $707 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $708 = ($707>>>0)<($a$5223$i>>>0);
         if ($708) {
          $709 = (($a$5223$i) + -4|0);
          HEAP32[$709>>2] = 0;
          $a$6$i = $709;
         } else {
          $a$6$i = $a$5223$i;
         }
         $710 = HEAP32[$707>>2]|0;
         $711 = (($710) + 1)|0;
         HEAP32[$707>>2] = $711;
         $712 = ($711>>>0)>(999999999);
         if ($712) {
          $a$5223$i = $a$6$i;$d$2222$i = $707;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $707;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $680;
       }
       $713 = $a$5$lcssa$i;
       $714 = (($558) - ($713))|0;
       $715 = $714 >> 2;
       $716 = ($715*9)|0;
       $717 = HEAP32[$a$5$lcssa$i>>2]|0;
       $718 = ($717>>>0)<(10);
       if ($718) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $716;
        break;
       } else {
        $e$2218$i = $716;$i$2217$i = 10;
       }
       while(1) {
        $719 = ($i$2217$i*10)|0;
        $720 = (($e$2218$i) + 1)|0;
        $721 = ($717>>>0)<($719>>>0);
        if ($721) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $720;
         break;
        } else {
         $e$2218$i = $720;$i$2217$i = $719;
        }
       }
      }
     } while(0);
     $722 = (($d$3$i) + 4|0);
     $723 = ($z$3$lcssa$i>>>0)>($722>>>0);
     $$z$3$i = $723 ? $722 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $a$8$ph294$i = $a$8$ph$i;
    $724 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $725 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($725)) {
      $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
      break;
     }
     $726 = (($z$6$i) + -4|0);
     $727 = HEAP32[$726>>2]|0;
     $728 = ($727|0)==(0);
     if ($728) {
      $z$6$i = $726;
     } else {
      $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
      break;
     }
    }
    do {
     if ($669) {
      $729 = ($$p$i|0)==(0);
      $730 = $729&1;
      $$$p$i = (($730) + ($$p$i))|0;
      $731 = ($$$p$i|0)>($e$4$ph$i|0);
      $732 = ($e$4$ph$i|0)>(-5);
      $or$cond6$i = $731 & $732;
      if ($or$cond6$i) {
       $733 = (($t$0) + -1)|0;
       $$neg160$i = (($$$p$i) + -1)|0;
       $734 = (($$neg160$i) - ($e$4$ph$i))|0;
       $$019$i = $733;$$216$i = $734;
      } else {
       $735 = (($t$0) + -2)|0;
       $736 = (($$$p$i) + -1)|0;
       $$019$i = $735;$$216$i = $736;
      }
      $737 = $fl$1$ & 8;
      $738 = ($737|0)==(0);
      if (!($738)) {
       $$120$i = $$019$i;$$317$i = $$216$i;
       break;
      }
      do {
       if ($$lcssa283$i) {
        $739 = (($z$6$i$lcssa) + -4|0);
        $740 = HEAP32[$739>>2]|0;
        $741 = ($740|0)==(0);
        if ($741) {
         $j$2$i = 9;
         break;
        }
        $742 = (($740>>>0) % 10)&-1;
        $743 = ($742|0)==(0);
        if ($743) {
         $i$3213$i = 10;$j$1214$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $744 = ($i$3213$i*10)|0;
         $745 = (($j$1214$i) + 1)|0;
         $746 = (($740>>>0) % ($744>>>0))&-1;
         $747 = ($746|0)==(0);
         if ($747) {
          $i$3213$i = $744;$j$1214$i = $745;
         } else {
          $j$2$i = $745;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $748 = $$019$i | 32;
      $749 = ($748|0)==(102);
      $750 = $z$6$i$lcssa;
      $751 = (($750) - ($558))|0;
      $752 = $751 >> 2;
      $753 = ($752*9)|0;
      $754 = (($753) + -9)|0;
      if ($749) {
       $755 = (($754) - ($j$2$i))|0;
       $756 = ($755|0)<(0);
       $$29$i = $756 ? 0 : $755;
       $757 = ($$216$i|0)<($$29$i|0);
       $$216$$29$i = $757 ? $$216$i : $$29$i;
       $$120$i = $$019$i;$$317$i = $$216$$29$i;
       break;
      } else {
       $758 = (($754) + ($e$4$ph$i))|0;
       $759 = (($758) - ($j$2$i))|0;
       $760 = ($759|0)<(0);
       $$31$i = $760 ? 0 : $759;
       $761 = ($$216$i|0)<($$31$i|0);
       $$216$$31$i = $761 ? $$216$i : $$31$i;
       $$120$i = $$019$i;$$317$i = $$216$$31$i;
       break;
      }
     } else {
      $$120$i = $t$0;$$317$i = $$p$i;
     }
    } while(0);
    $762 = ($$317$i|0)!=(0);
    if ($762) {
     $766 = 1;
    } else {
     $763 = $fl$1$ & 8;
     $764 = ($763|0)!=(0);
     $766 = $764;
    }
    $765 = $766&1;
    $767 = $$120$i | 32;
    $768 = ($767|0)==(102);
    if ($768) {
     $769 = ($e$4$ph$i|0)>(0);
     $770 = $769 ? $e$4$ph$i : 0;
     $$pn$i = $770;$estr$2$i = 0;
    } else {
     $771 = ($e$4$ph$i|0)<(0);
     $772 = $771 ? $724 : $e$4$ph$i;
     $773 = ($772|0)<(0);
     if ($773) {
      $774 = ($772|0)<(0);
      $775 = $774 << 31 >> 31;
      $$05$i87$i = $7;$776 = $772;$777 = $775;
      while(1) {
       $778 = (___uremdi3(($776|0),($777|0),10,0)|0);
       $779 = tempRet0;
       $780 = $778 | 48;
       $781 = $780&255;
       $782 = (($$05$i87$i) + -1|0);
       HEAP8[$782>>0] = $781;
       $783 = (___udivdi3(($776|0),($777|0),10,0)|0);
       $784 = tempRet0;
       $785 = ($777>>>0)>(9);
       $786 = ($776>>>0)>(4294967295);
       $787 = ($777|0)==(9);
       $788 = $787 & $786;
       $789 = $785 | $788;
       if ($789) {
        $$05$i87$i = $782;$776 = $783;$777 = $784;
       } else {
        $$lcssa311 = $782;$1057 = $783;$1058 = $784;
        break;
       }
      }
      $$0$lcssa$i92$i = $$lcssa311;$$01$lcssa$off0$i93$i = $1057;
     } else {
      $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $772;
     }
     $790 = ($$01$lcssa$off0$i93$i|0)==(0);
     if ($790) {
      $estr$1$ph$i = $$0$lcssa$i92$i;
     } else {
      $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
      while(1) {
       $791 = (($y$03$i94$i>>>0) % 10)&-1;
       $792 = $791 | 48;
       $793 = $792&255;
       $794 = (($$12$i95$i) + -1|0);
       HEAP8[$794>>0] = $793;
       $795 = (($y$03$i94$i>>>0) / 10)&-1;
       $796 = ($y$03$i94$i>>>0)<(10);
       if ($796) {
        $estr$1$ph$i = $794;
        break;
       } else {
        $$12$i95$i = $794;$y$03$i94$i = $795;
       }
      }
     }
     $797 = $estr$1$ph$i;
     $798 = (($9) - ($797))|0;
     $799 = ($798|0)<(2);
     if ($799) {
      $estr$1209$i = $estr$1$ph$i;
      while(1) {
       $800 = (($estr$1209$i) + -1|0);
       HEAP8[$800>>0] = 48;
       $801 = $800;
       $802 = (($9) - ($801))|0;
       $803 = ($802|0)<(2);
       if ($803) {
        $estr$1209$i = $800;
       } else {
        $estr$1$lcssa$i = $800;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $804 = $e$4$ph$i >> 31;
     $805 = $804 & 2;
     $806 = (($805) + 43)|0;
     $807 = $806&255;
     $808 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$808>>0] = $807;
     $809 = $$120$i&255;
     $810 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$810>>0] = $809;
     $811 = $810;
     $812 = (($9) - ($811))|0;
     $$pn$i = $812;$estr$2$i = $810;
    }
    $813 = (($pl$0$i) + 1)|0;
    $814 = (($813) + ($$317$i))|0;
    $l$1$i = (($814) + ($765))|0;
    $815 = (($l$1$i) + ($$pn$i))|0;
    $816 = $fl$1$ & 73728;
    $817 = ($816|0)==(0);
    $818 = ($w$1|0)>($815|0);
    $or$cond$i101$i = $817 & $818;
    if ($or$cond$i101$i) {
     $819 = (($w$1) - ($815))|0;
     $820 = ($819>>>0)>(256);
     $821 = $820 ? 256 : $819;
     _memset(($pad$i|0),32,($821|0))|0;
     $822 = ($819>>>0)>(255);
     if ($822) {
      $$01$i103$i = $819;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $823 = (($$01$i103$i) + -256)|0;
       $824 = ($823>>>0)>(255);
       if ($824) {
        $$01$i103$i = $823;
       } else {
        break;
       }
      }
      $825 = $819 & 255;
      $$0$lcssa$i105$i = $825;
     } else {
      $$0$lcssa$i105$i = $819;
     }
     (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $826 = ($816|0)==(65536);
    $or$cond$i108$i = $826 & $818;
    if ($or$cond$i108$i) {
     $827 = (($w$1) - ($815))|0;
     $828 = ($827>>>0)>(256);
     $829 = $828 ? 256 : $827;
     _memset(($pad$i|0),48,($829|0))|0;
     $830 = ($827>>>0)>(255);
     if ($830) {
      $$01$i110$i = $827;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $831 = (($$01$i110$i) + -256)|0;
       $832 = ($831>>>0)>(255);
       if ($832) {
        $$01$i110$i = $831;
       } else {
        break;
       }
      }
      $833 = $827 & 255;
      $$0$lcssa$i112$i = $833;
     } else {
      $$0$lcssa$i112$i = $827;
     }
     (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
    }
    do {
     if ($768) {
      $834 = ($a$8$ph$i>>>0)>($$39$i>>>0);
      $r$0$a$8$i = $834 ? $$39$i : $a$8$ph$i;
      $835 = $558 ^ -1;
      $836 = $a$8$ph294$i ^ -1;
      $837 = ($835>>>0)>($836>>>0);
      $umax$i = $837 ? $835 : $836;
      $838 = (3 - ($umax$i))|0;
      $uglygep$i = (($$39$i) + 1|0);
      $uglygep296$i = $uglygep$i;
      $839 = ($838>>>0)>($uglygep296$i>>>0);
      $umax297$i = $839 ? $838 : $uglygep296$i;
      $umax297298299$i = $umax297$i;
      $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
      $uglygep300301$i = $uglygep300$i;
      $840 = $umax$i ^ -1;
      $d$4199$i = $r$0$a$8$i;
      while(1) {
       $841 = HEAP32[$d$4199$i>>2]|0;
       $842 = ($841|0)==(0);
       if ($842) {
        $$1$lcssa$i120$i = $14;
       } else {
        $$12$i118$i = $14;$y$03$i117$i = $841;
        while(1) {
         $843 = (($y$03$i117$i>>>0) % 10)&-1;
         $844 = $843 | 48;
         $845 = $844&255;
         $846 = (($$12$i118$i) + -1|0);
         HEAP8[$846>>0] = $845;
         $847 = (($y$03$i117$i>>>0) / 10)&-1;
         $848 = ($y$03$i117$i>>>0)<(10);
         if ($848) {
          $$1$lcssa$i120$i = $846;
          break;
         } else {
          $$12$i118$i = $846;$y$03$i117$i = $847;
         }
        }
       }
       $849 = ($d$4199$i|0)==($r$0$a$8$i|0);
       do {
        if ($849) {
         $853 = ($$1$lcssa$i120$i|0)==($14|0);
         if (!($853)) {
          $s7$1$i = $$1$lcssa$i120$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $850 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
         if ($850) {
          $s7$0196$i = $$1$lcssa$i120$i;
         } else {
          $s7$1$i = $$1$lcssa$i120$i;
          break;
         }
         while(1) {
          $851 = (($s7$0196$i) + -1|0);
          HEAP8[$851>>0] = 48;
          $852 = ($851>>>0)>($buf$i>>>0);
          if ($852) {
           $s7$0196$i = $851;
          } else {
           $s7$1$i = $851;
           break;
          }
         }
        }
       } while(0);
       $854 = $s7$1$i;
       $855 = (($15) - ($854))|0;
       (___fwritex($s7$1$i,$855,$f)|0);
       $856 = (($d$4199$i) + 4|0);
       $857 = ($856>>>0)>($$39$i>>>0);
       if ($857) {
        $$lcssa320 = $856;
        break;
       } else {
        $d$4199$i = $856;
       }
      }
      $858 = $uglygep300301$i & -4;
      $859 = (($858) + ($840))|0;
      $860 = $859;
      $$not$i = $762 ^ 1;
      $861 = $fl$1$ & 8;
      $862 = ($861|0)==(0);
      $or$cond35$i = $862 & $$not$i;
      if (!($or$cond35$i)) {
       (___fwritex(52896,1,$f)|0);
      }
      $863 = ($$lcssa320>>>0)<($z$6$i$lcssa>>>0);
      $864 = ($$317$i|0)>(0);
      $or$cond10191$i = $863 & $864;
      if ($or$cond10191$i) {
       $$418193$i = $$317$i;$879 = $860;$d$5192$i = $$lcssa320;
       while(1) {
        $865 = HEAP32[$d$5192$i>>2]|0;
        $866 = ($865|0)==(0);
        if ($866) {
         $s8$0188$i = $14;
         label = 300;
        } else {
         $$12$i127$i = $14;$y$03$i126$i = $865;
         while(1) {
          $867 = (($y$03$i126$i>>>0) % 10)&-1;
          $868 = $867 | 48;
          $869 = $868&255;
          $870 = (($$12$i127$i) + -1|0);
          HEAP8[$870>>0] = $869;
          $871 = (($y$03$i126$i>>>0) / 10)&-1;
          $872 = ($y$03$i126$i>>>0)<(10);
          if ($872) {
           $$lcssa321 = $870;
           break;
          } else {
           $$12$i127$i = $870;$y$03$i126$i = $871;
          }
         }
         $873 = ($$lcssa321>>>0)>($buf$i>>>0);
         if ($873) {
          $s8$0188$i = $$lcssa321;
          label = 300;
         } else {
          $s8$0$lcssa$i = $$lcssa321;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $874 = (($s8$0188$i) + -1|0);
          HEAP8[$874>>0] = 48;
          $875 = ($874>>>0)>($buf$i>>>0);
          if ($875) {
           $s8$0188$i = $874;
           label = 300;
          } else {
           $s8$0$lcssa$i = $874;
           break;
          }
         }
        }
        $876 = ($$418193$i|0)>(9);
        $877 = $876 ? 9 : $$418193$i;
        (___fwritex($s8$0$lcssa$i,$877,$f)|0);
        $878 = (($879) + 8|0);
        $880 = (($$418193$i) + -9)|0;
        $881 = ($878>>>0)<($z$6$i$lcssa>>>0);
        $882 = ($880|0)>(0);
        $or$cond10$i = $881 & $882;
        if ($or$cond10$i) {
         $879$phi = $d$5192$i;$$418193$i = $880;$d$5192$i = $878;$879 = $879$phi;
        } else {
         $$418$lcssa$i = $880;
         break;
        }
       }
      } else {
       $$418$lcssa$i = $$317$i;
      }
      $883 = ($$418$lcssa$i|0)>(0);
      if (!($883)) {
       break;
      }
      $884 = ($$418$lcssa$i>>>0)>(256);
      $885 = $884 ? 256 : $$418$lcssa$i;
      _memset(($pad$i|0),48,($885|0))|0;
      $886 = ($$418$lcssa$i>>>0)>(255);
      if ($886) {
       $$01$i134$i = $$418$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $887 = (($$01$i134$i) + -256)|0;
        $888 = ($887>>>0)>(255);
        if ($888) {
         $$01$i134$i = $887;
        } else {
         break;
        }
       }
       $889 = $$418$lcssa$i & 255;
       $$0$lcssa$i136$i = $889;
      } else {
       $$0$lcssa$i136$i = $$418$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
     } else {
      $890 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $890;
      $891 = ($$317$i|0)>(-1);
      do {
       if ($891) {
        $892 = $fl$1$ & 8;
        $893 = ($892|0)==(0);
        $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
        while(1) {
         $894 = HEAP32[$d$6204$i>>2]|0;
         $895 = ($894|0)==(0);
         if ($895) {
          label = 312;
         } else {
          $$12$i142$i = $14;$y$03$i141$i = $894;
          while(1) {
           $896 = (($y$03$i141$i>>>0) % 10)&-1;
           $897 = $896 | 48;
           $898 = $897&255;
           $899 = (($$12$i142$i) + -1|0);
           HEAP8[$899>>0] = $898;
           $900 = (($y$03$i141$i>>>0) / 10)&-1;
           $901 = ($y$03$i141$i>>>0)<(10);
           if ($901) {
            $$12$i142$i$lcssa = $$12$i142$i;$$lcssa315 = $899;
            break;
           } else {
            $$12$i142$i = $899;$y$03$i141$i = $900;
           }
          }
          $902 = ($$lcssa315|0)==($14|0);
          if ($902) {
           label = 312;
          } else {
           $1059 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa315;
          }
         }
         if ((label|0) == 312) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $1059 = $14;$s9$0$i = $16;
         }
         $903 = ($d$6204$i|0)==($a$8$ph$i|0);
         do {
          if ($903) {
           (___fwritex($s9$0$i,1,$f)|0);
           $907 = ($$5205$i|0)<(1);
           $or$cond37$i = $907 & $893;
           if ($or$cond37$i) {
            $s9$2$i = $1059;
            break;
           }
           (___fwritex(52896,1,$f)|0);
           $s9$2$i = $1059;
          } else {
           $904 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($904) {
            $s9$1200$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $905 = (($s9$1200$i) + -1|0);
            HEAP8[$905>>0] = 48;
            $906 = ($905>>>0)>($buf$i>>>0);
            if ($906) {
             $s9$1200$i = $905;
            } else {
             $s9$2$i = $905;
             break;
            }
           }
          }
         } while(0);
         $908 = $s9$2$i;
         $909 = (($15) - ($908))|0;
         $910 = ($$5205$i|0)>($909|0);
         $$$5$i = $910 ? $909 : $$5205$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $911 = (($$5205$i) - ($909))|0;
         $912 = (($d$6204$i) + 4|0);
         $913 = ($912>>>0)<($z$6$$i>>>0);
         $914 = ($911|0)>(-1);
         $or$cond12$i = $913 & $914;
         if ($or$cond12$i) {
          $$5205$i = $911;$d$6204$i = $912;
         } else {
          $$lcssa317 = $911;
          break;
         }
        }
        $915 = ($$lcssa317|0)>(0);
        if (!($915)) {
         break;
        }
        $916 = ($$lcssa317>>>0)>(256);
        $917 = $916 ? 256 : $$lcssa317;
        _memset(($pad$i|0),48,($917|0))|0;
        $918 = ($$lcssa317>>>0)>(255);
        if ($918) {
         $$01$i149$i = $$lcssa317;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $919 = (($$01$i149$i) + -256)|0;
          $920 = ($919>>>0)>(255);
          if ($920) {
           $$01$i149$i = $919;
          } else {
           break;
          }
         }
         $921 = $$lcssa317 & 255;
         $$0$lcssa$i151$i = $921;
        } else {
         $$0$lcssa$i151$i = $$lcssa317;
        }
        (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
       }
      } while(0);
      $922 = $estr$2$i;
      $923 = (($9) - ($922))|0;
      (___fwritex($estr$2$i,$923,$f)|0);
     }
    } while(0);
    $924 = ($816|0)==(8192);
    $or$cond$i$i = $924 & $818;
    if ($or$cond$i$i) {
     $925 = (($w$1) - ($815))|0;
     $926 = ($925>>>0)>(256);
     $927 = $926 ? 256 : $925;
     _memset(($pad$i|0),32,($927|0))|0;
     $928 = ($925>>>0)>(255);
     if ($928) {
      $$01$i$i = $925;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $929 = (($$01$i$i) + -256)|0;
       $930 = ($929>>>0)>(255);
       if ($930) {
        $$01$i$i = $929;
       } else {
        break;
       }
      }
      $931 = $925 & 255;
      $$0$lcssa$i$i = $931;
     } else {
      $$0$lcssa$i$i = $925;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$38$i = $818 ? $w$1 : $815;
    $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $w$38$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 99:  {
    $304 = $191&255;
    HEAP8[$4>>0] = $304;
    $1047 = $191;$1048 = $218;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 52800;$z$2 = $2;
    break;
   }
   case 110:  {
    switch ($st$0$lcssa295|0) {
    case 0:  {
     $190 = $191;
     HEAP32[$190>>2] = $cnt$1;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $200 = $cnt$1&65535;
     $201 = $191;
     HEAP16[$201>>1] = $200;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $202 = $cnt$1&255;
     $203 = $191;
     HEAP8[$203>>0] = $202;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $204 = $191;
     HEAP32[$204>>2] = $cnt$1;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $192 = $191;
     HEAP32[$192>>2] = $cnt$1;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $205 = ($cnt$1|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = $191;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $cnt$1;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $193 = ($cnt$1|0)<(0);
     $194 = $193 << 31 >> 31;
     $195 = $191;
     $196 = $195;
     $197 = $196;
     HEAP32[$197>>2] = $cnt$1;
     $198 = (($196) + 4)|0;
     $199 = $198;
     HEAP32[$199>>2] = $194;
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1039 = $191;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 111:  {
    $238 = ($191|0)==(0);
    $239 = ($218|0)==(0);
    $240 = $238 & $239;
    if ($240) {
     $$0$lcssa$i52 = $2;
    } else {
     $$03$i49 = $2;$242 = $191;$246 = $218;
     while(1) {
      $241 = $242 & 7;
      $243 = $241 | 48;
      $244 = $243&255;
      $245 = (($$03$i49) + -1|0);
      HEAP8[$245>>0] = $244;
      $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
      $248 = tempRet0;
      $249 = ($247|0)==(0);
      $250 = ($248|0)==(0);
      $251 = $249 & $250;
      if ($251) {
       $$0$lcssa$i52 = $245;
       break;
      } else {
       $$03$i49 = $245;$242 = $247;$246 = $248;
      }
     }
    }
    $252 = $fl$1$ & 8;
    $253 = ($252|0)==(0);
    $or$cond19 = $253 | $240;
    $$25 = $or$cond19 ? 52800 : ((52800 + 5|0));
    $254 = $or$cond19&1;
    $$26 = $254 ^ 1;
    $293 = $191;$295 = $218;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
    label = 90;
    break;
   }
   case 105: case 100:  {
    $255 = ($218|0)<(0);
    if ($255) {
     $256 = (_i64Subtract(0,0,($191|0),($218|0))|0);
     $257 = tempRet0;
     $263 = $257;$265 = $256;$pl$0 = 1;$prefix$0 = 52800;
     label = 85;
     break L88;
    }
    $258 = $fl$1$ & 2048;
    $259 = ($258|0)==(0);
    if ($259) {
     $260 = $fl$1$ & 1;
     $261 = ($260|0)==(0);
     $$ = $261 ? 52800 : ((52800 + 2|0));
     $263 = $218;$265 = $191;$pl$0 = $260;$prefix$0 = $$;
     label = 85;
    } else {
     $263 = $218;$265 = $191;$pl$0 = 1;$prefix$0 = ((52800 + 1|0));
     label = 85;
    }
    break;
   }
   default: {
    $1047 = $191;$1048 = $218;$a$2 = $fmt90;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 52800;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 74) {
    label = 0;
    $215 = $t$1 & 32;
    $216 = ($191|0)==(0);
    $217 = ($218|0)==(0);
    $219 = $216 & $217;
    if ($219) {
     $293 = $191;$295 = $218;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 52800;
     label = 90;
    } else {
     $$012$i = $2;$221 = $191;$228 = $218;
     while(1) {
      $220 = $221 & 15;
      $222 = (52880 + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      $225 = $224 | $215;
      $226 = $225&255;
      $227 = (($$012$i) + -1|0);
      HEAP8[$227>>0] = $226;
      $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
      $230 = tempRet0;
      $231 = ($229|0)==(0);
      $232 = ($230|0)==(0);
      $233 = $231 & $232;
      if ($233) {
       $$lcssa332 = $227;
       break;
      } else {
       $$012$i = $227;$221 = $229;$228 = $230;
      }
     }
     $234 = $fl$3 & 8;
     $235 = ($234|0)==(0);
     if ($235) {
      $293 = $191;$295 = $218;$a$0 = $$lcssa332;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 52800;
      label = 90;
     } else {
      $236 = $t$1 >> 4;
      $237 = (52800 + ($236)|0);
      $293 = $191;$295 = $218;$a$0 = $$lcssa332;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
      label = 90;
     }
    }
   }
   else if ((label|0) == 85) {
    label = 0;
    $262 = ($263>>>0)>(0);
    $264 = ($265>>>0)>(4294967295);
    $266 = ($263|0)==(0);
    $267 = $266 & $264;
    $268 = $262 | $267;
    if ($268) {
     $$05$i = $2;$269 = $265;$270 = $263;
     while(1) {
      $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
      $272 = tempRet0;
      $273 = $271 | 48;
      $274 = $273&255;
      $275 = (($$05$i) + -1|0);
      HEAP8[$275>>0] = $274;
      $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
      $277 = tempRet0;
      $278 = ($270>>>0)>(9);
      $279 = ($269>>>0)>(4294967295);
      $280 = ($270|0)==(9);
      $281 = $280 & $279;
      $282 = $278 | $281;
      if ($282) {
       $$05$i = $275;$269 = $276;$270 = $277;
      } else {
       $$lcssa328 = $275;$1049 = $276;$1050 = $277;
       break;
      }
     }
     $$0$lcssa$i54 = $$lcssa328;$$01$lcssa$off0$i = $1049;
    } else {
     $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $265;
    }
    $283 = ($$01$lcssa$off0$i|0)==(0);
    if ($283) {
     $293 = $265;$295 = $263;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 90;
    } else {
     $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $284 = (($y$03$i>>>0) % 10)&-1;
      $285 = $284 | 48;
      $286 = $285&255;
      $287 = (($$12$i) + -1|0);
      HEAP8[$287>>0] = $286;
      $288 = (($y$03$i>>>0) / 10)&-1;
      $289 = ($y$03$i>>>0)<(10);
      if ($289) {
       $293 = $265;$295 = $263;$a$0 = $287;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 90;
       break;
      } else {
       $$12$i = $287;$y$03$i = $288;
      }
     }
    }
   }
   else if ((label|0) == 95) {
    label = 0;
    $310 = (_memchr($a$1,0,$p$0)|0);
    $311 = ($310|0)==(0|0);
    if ($311) {
     $312 = (($a$1) + ($p$0)|0);
     $1047 = $191;$1048 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 52800;$z$2 = $312;
     break;
    } else {
     $313 = $310;
     $314 = $a$1;
     $315 = (($313) - ($314))|0;
     $1047 = $191;$1048 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $315;$pl$2 = 0;$prefix$2 = 52800;$z$2 = $310;
     break;
    }
   }
   else if ((label|0) == 100) {
    label = 0;
    $i$0180 = 0;$l$1179 = 0;$ws$0181 = $1051;
    while(1) {
     $318 = HEAP32[$ws$0181>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $i$0$lcssa = $i$0180;$l$2 = $l$1179;
      break;
     }
     $320 = (_wctomb($mb,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($p$4274) - ($i$0180))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond23 = $321 | $323;
     if ($or$cond23) {
      $i$0$lcssa = $i$0180;$l$2 = $320;
      break;
     }
     $324 = (($ws$0181) + 4|0);
     $325 = (($320) + ($i$0180))|0;
     $326 = ($p$4274>>>0)>($325>>>0);
     if ($326) {
      $i$0180 = $325;$l$1179 = $320;$ws$0181 = $324;
     } else {
      $i$0$lcssa = $325;$l$2 = $320;
      break;
     }
    }
    $327 = ($l$2|0)<(0);
    if ($327) {
     $$0 = -1;
     label = 369;
     break L1;
    } else {
     $1053 = $1052;$1054 = $1051;$i$0$lcssa275 = $i$0$lcssa;
     label = 105;
    }
   }
  } while(0);
  if ((label|0) == 90) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = ($293|0)!=(0);
   $294 = ($295|0)!=(0);
   $296 = $292 | $294;
   $297 = ($p$2|0)!=(0);
   $or$cond = $296 | $297;
   if ($or$cond) {
    $298 = $a$0;
    $299 = (($3) - ($298))|0;
    $300 = $296&1;
    $301 = $300 ^ 1;
    $302 = (($301) + ($299))|0;
    $303 = ($p$2|0)>($302|0);
    $p$2$ = $303 ? $p$2 : $302;
    $1047 = $293;$1048 = $295;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1047 = $293;$1048 = $295;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 105) {
   label = 0;
   $328 = $fl$1$ & 73728;
   $329 = ($328|0)==(0);
   $330 = ($w$1|0)>($i$0$lcssa275|0);
   $or$cond$i65 = $329 & $330;
   if ($or$cond$i65) {
    $331 = (($w$1) - ($i$0$lcssa275))|0;
    $332 = ($331>>>0)>(256);
    $333 = $332 ? 256 : $331;
    _memset(($pad$i|0),32,($333|0))|0;
    $334 = ($331>>>0)>(255);
    if ($334) {
     $$01$i67 = $331;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $335 = (($$01$i67) + -256)|0;
      $336 = ($335>>>0)>(255);
      if ($336) {
       $$01$i67 = $335;
      } else {
       break;
      }
     }
     $337 = $331 & 255;
     $$0$lcssa$i69 = $337;
    } else {
     $$0$lcssa$i69 = $331;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $338 = ($i$0$lcssa275|0)==(0);
   L476: do {
    if (!($338)) {
     $i$1191 = 0;$ws$1192 = $1054;
     while(1) {
      $339 = HEAP32[$ws$1192>>2]|0;
      $340 = ($339|0)==(0);
      if ($340) {
       break L476;
      }
      $341 = (_wctomb($mb,$339)|0);
      $342 = (($341) + ($i$1191))|0;
      $343 = ($342|0)>($i$0$lcssa275|0);
      if ($343) {
       break L476;
      }
      $344 = (($ws$1192) + 4|0);
      (___fwritex($mb,$341,$f)|0);
      $345 = ($342>>>0)<($i$0$lcssa275>>>0);
      if ($345) {
       $i$1191 = $342;$ws$1192 = $344;
      } else {
       break;
      }
     }
    }
   } while(0);
   $346 = ($328|0)==(8192);
   $or$cond$i72 = $346 & $330;
   if ($or$cond$i72) {
    $347 = (($w$1) - ($i$0$lcssa275))|0;
    $348 = ($347>>>0)>(256);
    $349 = $348 ? 256 : $347;
    _memset(($pad$i|0),32,($349|0))|0;
    $350 = ($347>>>0)>(255);
    if ($350) {
     $$01$i74 = $347;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $351 = (($$01$i74) + -256)|0;
      $352 = ($351>>>0)>(255);
      if ($352) {
       $$01$i74 = $351;
      } else {
       break;
      }
     }
     $353 = $347 & 255;
     $$0$lcssa$i76 = $353;
    } else {
     $$0$lcssa$i76 = $347;
    }
    (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
   }
   $354 = $330 ? $w$1 : $i$0$lcssa275;
   $1039 = $1053;$1040 = $218;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $354;$l10n$0 = $l10n$3;
   continue;
  }
  $932 = $z$2;
  $933 = $a$2;
  $934 = (($932) - ($933))|0;
  $935 = ($p$5|0)<($934|0);
  $$p$5 = $935 ? $934 : $p$5;
  $936 = (($pl$2) + ($$p$5))|0;
  $937 = ($w$1|0)<($936|0);
  $w$2 = $937 ? $936 : $w$1;
  $938 = $fl$6 & 73728;
  $939 = ($938|0)==(0);
  $940 = ($w$2|0)>($936|0);
  $or$cond$i82 = $939 & $940;
  if ($or$cond$i82) {
   $941 = (($w$2) - ($936))|0;
   $942 = ($941>>>0)>(256);
   $943 = $942 ? 256 : $941;
   _memset(($pad$i|0),32,($943|0))|0;
   $944 = ($941>>>0)>(255);
   if ($944) {
    $$01$i84 = $941;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $945 = (($$01$i84) + -256)|0;
     $946 = ($945>>>0)>(255);
     if ($946) {
      $$01$i84 = $945;
     } else {
      break;
     }
    }
    $947 = $941 & 255;
    $$0$lcssa$i86 = $947;
   } else {
    $$0$lcssa$i86 = $941;
   }
   (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $948 = ($938|0)==(65536);
  $or$cond$i58 = $948 & $940;
  if ($or$cond$i58) {
   $949 = (($w$2) - ($936))|0;
   $950 = ($949>>>0)>(256);
   $951 = $950 ? 256 : $949;
   _memset(($pad$i|0),48,($951|0))|0;
   $952 = ($949>>>0)>(255);
   if ($952) {
    $$01$i60 = $949;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $953 = (($$01$i60) + -256)|0;
     $954 = ($953>>>0)>(255);
     if ($954) {
      $$01$i60 = $953;
     } else {
      break;
     }
    }
    $955 = $949 & 255;
    $$0$lcssa$i62 = $955;
   } else {
    $$0$lcssa$i62 = $949;
   }
   (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
  }
  $956 = ($$p$5|0)>($934|0);
  if ($956) {
   $957 = (($$p$5) - ($934))|0;
   $958 = ($957>>>0)>(256);
   $959 = $958 ? 256 : $957;
   _memset(($pad$i|0),48,($959|0))|0;
   $960 = ($957>>>0)>(255);
   if ($960) {
    $$01$i45 = $957;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $961 = (($$01$i45) + -256)|0;
     $962 = ($961>>>0)>(255);
     if ($962) {
      $$01$i45 = $961;
     } else {
      break;
     }
    }
    $963 = $957 & 255;
    $$0$lcssa$i47 = $963;
   } else {
    $$0$lcssa$i47 = $957;
   }
   (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
  }
  (___fwritex($a$2,$934,$f)|0);
  $964 = ($938|0)==(8192);
  $or$cond$i = $964 & $940;
  if (!($or$cond$i)) {
   $1039 = $1047;$1040 = $1048;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $965 = (($w$2) - ($936))|0;
  $966 = ($965>>>0)>(256);
  $967 = $966 ? 256 : $965;
  _memset(($pad$i|0),32,($967|0))|0;
  $968 = ($965>>>0)>(255);
  if ($968) {
   $$01$i = $965;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $969 = (($$01$i) + -256)|0;
    $970 = ($969>>>0)>(255);
    if ($970) {
     $$01$i = $969;
    } else {
     break;
    }
   }
   $971 = $965 & 255;
   $$0$lcssa$i = $971;
  } else {
   $$0$lcssa$i = $965;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1039 = $1047;$1040 = $1048;$cnt$0 = $cnt$1;$fmt90 = $$lcssa298;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 351) {
  $972 = ($f|0)==(0|0);
  if (!($972)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $973 = ($l10n$0$lcssa|0)==(0);
  if ($973) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2166 = 1;
  }
  while(1) {
   $974 = (($nl_type) + ($i$2166<<2)|0);
   $975 = HEAP32[$974>>2]|0;
   $976 = ($975|0)==(0);
   if ($976) {
    $i$3164 = $i$2166;
    break;
   }
   $977 = (($nl_arg) + ($i$2166<<3)|0);
   $978 = ($975>>>0)>(20);
   L533: do {
    if (!($978)) {
     do {
      switch ($975|0) {
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1002 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1003 = $1002&65535;
       $1004 = $1003 << 16 >> 16;
       $1005 = ($1004|0)<(0);
       $1006 = $1005 << 31 >> 31;
       $1007 = $977;
       $1008 = $1007;
       HEAP32[$1008>>2] = $1004;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = $1006;
       break L533;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1011 & 65535;
       $1012 = $977;
       $1013 = $1012;
       HEAP32[$1013>>2] = $$mask1$i;
       $1014 = (($1012) + 4)|0;
       $1015 = $1014;
       HEAP32[$1015>>2] = 0;
       break L533;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1016 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1017 = $1016&255;
       $1018 = $1017 << 24 >> 24;
       $1019 = ($1018|0)<(0);
       $1020 = $1019 << 31 >> 31;
       $1021 = $977;
       $1022 = $1021;
       HEAP32[$1022>>2] = $1018;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = $1020;
       break L533;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1025 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1025 & 255;
       $1026 = $977;
       $1027 = $1026;
       HEAP32[$1027>>2] = $$mask$i;
       $1028 = (($1026) + 4)|0;
       $1029 = $1028;
       HEAP32[$1029>>2] = 0;
       break L533;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1030 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$977>>3] = $1030;
       break L533;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1031 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$977>>3] = $1031;
       break L533;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $980 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $981 = ($980|0)<(0);
       $982 = $981 << 31 >> 31;
       $983 = $977;
       $984 = $983;
       HEAP32[$984>>2] = $980;
       $985 = (($983) + 4)|0;
       $986 = $985;
       HEAP32[$986>>2] = $982;
       break L533;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $987 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $988 = $977;
       $989 = $988;
       HEAP32[$989>>2] = $987;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = 0;
       break L533;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $992 = $arglist_current44;
       $993 = $992;
       $994 = HEAP32[$993>>2]|0;
       $995 = (($992) + 4)|0;
       $996 = $995;
       $997 = HEAP32[$996>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $998 = $977;
       $999 = $998;
       HEAP32[$999>>2] = $994;
       $1000 = (($998) + 4)|0;
       $1001 = $1000;
       HEAP32[$1001>>2] = $997;
       break L533;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $979 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$977>>2] = $979;
       break L533;
       break;
      }
      default: {
       break L533;
      }
      }
     } while(0);
    }
   } while(0);
   $1032 = (($i$2166) + 1)|0;
   $1033 = ($1032|0)<(10);
   if ($1033) {
    $i$2166 = $1032;
   } else {
    $$0 = 1;
    label = 369;
    break;
   }
  }
  if ((label|0) == 369) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1036 = (($nl_type) + ($i$3164<<2)|0);
   $1037 = HEAP32[$1036>>2]|0;
   $1038 = ($1037|0)==(0);
   $1035 = (($i$3164) + 1)|0;
   if (!($1038)) {
    $$0 = -1;
    label = 369;
    break;
   }
   $1034 = ($1035|0)<(10);
   if ($1034) {
    $i$3164 = $1035;
   } else {
    $$0 = 1;
    label = 369;
    break;
   }
  }
  if ((label|0) == 369) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 369) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&15](a1|0,+a2);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&31]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&3]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b1(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(1); }
function b2(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2); }
function b3() { ; nullFunc_i(3);return 0; }
function b4(p0) { p0 = p0|0; nullFunc_vi(4); }
function b5(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(5); }
function b6(p0) { p0 = p0|0; nullFunc_ii(6);return 0; }
function b7() { ; nullFunc_v(7); }
function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
function b8(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0; }
function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9); }
function b10(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0; }
function b11(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,__ZN6Ay_Emu9load_mem_EPKhl,__ZNK6Ay_Emu11track_info_EP12track_info_ti,__ZN11Classic_Emu5play_ElPs,__ZN6Ay_Emu10run_clocksERii,__ZN7Ay_File9load_mem_EPKhl,__ZNK7Ay_File11track_info_EP12track_info_ti,__ZN9Gme_Info_5play_ElPs,__ZN8Gme_File9load_mem_EPKhl,__ZN13Subset_Reader10read_availEPvl,__ZN11Data_Reader4readEPvl,__ZN16Remaining_Reader10read_availEPvl,__ZN16Remaining_Reader4readEPvl,__ZN15Mem_File_Reader10read_availEPvl,__ZN15Std_File_Reader10read_availEPvl,__ZN15Std_File_Reader4readEPvl,__ZN14Effects_Buffer15set_sample_rateEli,__ZN14Effects_Buffer12read_samplesEPsl,__ZNK7Gbs_Emu11track_info_EP12track_info_ti,__ZN7Gbs_Emu10run_clocksERii,__ZNK8Gbs_File11track_info_EP12track_info_ti,__ZN7Gym_Emu9load_mem_EPKhl,__ZNK7Gym_Emu11track_info_EP12track_info_ti,__ZN7Gym_Emu5play_ElPs,__ZN8Gym_File9load_mem_EPKhl,__ZNK8Gym_File11track_info_EP12track_info_ti,__ZNK7Hes_Emu11track_info_EP12track_info_ti,__ZN7Hes_Emu10run_clocksERii,__ZNK8Hes_File11track_info_EP12track_info_ti
,__ZNK7Kss_Emu11track_info_EP12track_info_ti,__ZN7Kss_Emu10run_clocksERii,__ZNK8Kss_File11track_info_EP12track_info_ti,__ZN13Stereo_Buffer15set_sample_rateEli,__ZN13Stereo_Buffer12read_samplesEPsl,__ZNK7Nsf_Emu11track_info_EP12track_info_ti,__ZN7Nsf_Emu10run_clocksERii,__ZNK8Nsf_File11track_info_EP12track_info_ti,__ZNK8Nsfe_Emu11track_info_EP12track_info_ti,__ZNK9Nsfe_File11track_info_EP12track_info_ti,__ZN7Sap_Emu9load_mem_EPKhl,__ZNK7Sap_Emu11track_info_EP12track_info_ti,__ZN7Sap_Emu10run_clocksERii,__ZN8Sap_File9load_mem_EPKhl,__ZNK8Sap_File11track_info_EP12track_info_ti,__ZN7Spc_Emu9load_mem_EPKhl,__ZNK7Spc_Emu11track_info_EP12track_info_ti,__ZN7Spc_Emu5play_ElPs,__ZNK8Spc_File11track_info_EP12track_info_ti,__ZN7Vgm_Emu9load_mem_EPKhl,__ZNK7Vgm_Emu11track_info_EP12track_info_ti,__ZN7Vgm_Emu5play_ElPs,__ZN7Vgm_Emu10run_clocksERii,__ZNK8Vgm_File11track_info_EP12track_info_ti,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vid = [b1,__ZN6Ay_Emu10set_tempo_Ed,__ZN9Gme_Info_10set_tempo_Ed,__ZN7Gbs_Emu10set_tempo_Ed,__ZN7Gym_Emu10set_tempo_Ed,__ZN7Hes_Emu10set_tempo_Ed,__ZN7Kss_Emu10set_tempo_Ed,__ZN7Nsf_Emu10set_tempo_Ed,__ZN7Sap_Emu10set_tempo_Ed,__ZN7Spc_Emu10set_tempo_Ed,__ZN7Vgm_Emu10set_tempo_Ed,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,__ZN6Ay_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Gbs_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Hes_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Kss_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Nsf_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Sap_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Vgm_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_i = [b3,__ZL10new_ay_emuv,__ZL11new_ay_filev,__ZL11new_gbs_emuv,__ZL12new_gbs_filev,__ZL11new_gym_emuv,__ZL12new_gym_filev,__ZL11new_hes_emuv,__ZL12new_hes_filev,__ZL11new_kss_emuv,__ZL12new_kss_filev,__ZL11new_nsf_emuv,__ZL12new_nsf_filev,__ZL12new_nsfe_emuv,__ZL13new_nsfe_filev,__ZL11new_sap_emuv,__ZL12new_sap_filev,__ZL11new_spc_emuv,__ZL12new_spc_filev,__ZL11new_vgm_emuv,__ZL12new_vgm_filev,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,__ZN6Ay_EmuD2Ev,__ZN6Ay_EmuD0Ev,__ZN9Music_Emu6unloadEv,__ZN9Music_Emu8pre_loadEv,__ZN9Music_Emu10post_load_Ev,__ZN8Gme_File15clear_playlist_Ev,__ZN9Music_EmuD2Ev,__ZN7Ay_FileD0Ev,__ZN9Gme_Info_8pre_loadEv,__ZN9Gme_Info_10post_load_Ev,__ZN11Classic_EmuD2Ev,__ZN11Classic_EmuD0Ev,__ZN11Data_ReaderD2Ev,__ZN13Subset_ReaderD0Ev,__ZN16Remaining_ReaderD0Ev,__ZN15Mem_File_ReaderD0Ev,__ZN15Std_File_ReaderD2Ev,__ZN15Std_File_ReaderD0Ev,__ZN11Data_ReaderD0Ev,__ZN11File_ReaderD0Ev,__ZN14Dual_ResamplerD2Ev,__ZN14Dual_ResamplerD0Ev,__ZN14Effects_BufferD2Ev,__ZN14Effects_BufferD0Ev,__ZN14Effects_Buffer5clearEv,__ZN7Gbs_EmuD2Ev,__ZN7Gbs_EmuD0Ev,__ZN7Gbs_Emu6unloadEv
,__ZN8Gbs_FileD0Ev,__ZN8Gme_FileD2Ev,__ZN8Gme_FileD0Ev,__ZN8Gme_File6unloadEv,__ZN8Gme_File8pre_loadEv,__ZN8Gme_File10post_load_Ev,__ZN7Gym_EmuD2Ev,__ZN7Gym_EmuD0Ev,__ZThn256_N7Gym_EmuD1Ev,__ZThn256_N7Gym_EmuD0Ev,__ZN8Gym_FileD0Ev,__ZN7Hes_EmuD2Ev,__ZN7Hes_EmuD0Ev,__ZN7Hes_Emu6unloadEv,__ZN8Hes_FileD0Ev,__ZN7Kss_EmuD2Ev,__ZN7Kss_EmuD0Ev,__ZN7Kss_Emu6unloadEv,__ZN8Kss_FileD0Ev,__ZN12Multi_BufferD2Ev,__ZN12Multi_BufferD0Ev,__ZN13Stereo_BufferD2Ev,__ZN13Stereo_BufferD0Ev,__ZN13Stereo_Buffer5clearEv,__ZN9Music_EmuD0Ev,__ZN9Gme_Info_D0Ev,__ZN7Nsf_EmuD2Ev,__ZN7Nsf_EmuD0Ev,__ZN7Nsf_Emu6unloadEv,__ZN8Nsf_FileD0Ev
,__ZN8Nsfe_EmuD2Ev,__ZN8Nsfe_EmuD0Ev,__ZN8Nsfe_Emu6unloadEv,__ZN8Nsfe_Emu15clear_playlist_Ev,__ZN9Nsfe_FileD2Ev,__ZN9Nsfe_FileD0Ev,__ZN7Sap_EmuD2Ev,__ZN7Sap_EmuD0Ev,__ZN8Sap_FileD0Ev,__ZN7Spc_EmuD2Ev,__ZN7Spc_EmuD0Ev,__ZN8Spc_FileD2Ev,__ZN8Spc_FileD0Ev,__ZN7Vgm_EmuD2Ev,__ZN7Vgm_EmuD0Ev,__ZThn272_N7Vgm_EmuD1Ev,__ZThn272_N7Vgm_EmuD0Ev,__ZN8Vgm_FileD2Ev,__ZN8Vgm_FileD0Ev,__ZN12Vgm_Emu_ImplD2Ev,__ZN12Vgm_Emu_ImplD0Ev,__ZThn272_N12Vgm_Emu_ImplD1Ev,__ZThn272_N12Vgm_Emu_ImplD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev
,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,__ZN11Classic_Emu10set_bufferEP12Multi_Buffer,__ZN11Classic_Emu14set_equalizer_ERK15gme_equalizer_t,__ZN11Classic_Emu12mute_voices_Ei,__ZN6Ay_Emu9update_eqERK9blip_eq_t,__ZN9Music_Emu10set_bufferEP12Multi_Buffer,__ZN9Gme_Info_14set_equalizer_ERK15gme_equalizer_t,__ZN9Gme_Info_12mute_voices_Ei,__ZN14Effects_Buffer10clock_rateEl,__ZN14Effects_Buffer9bass_freqEi,__ZN14Effects_Buffer9end_frameEi,__ZN14Effects_Buffer6configERKNS_8config_tE,__ZN7Gbs_Emu9update_eqERK9blip_eq_t,__ZN9Music_Emu14set_equalizer_ERK15gme_equalizer_t,__ZN7Gym_Emu12mute_voices_Ei,__ZN7Hes_Emu9update_eqERK9blip_eq_t,__ZN7Kss_Emu9update_eqERK9blip_eq_t,__ZN13Stereo_Buffer10clock_rateEl,__ZN13Stereo_Buffer9bass_freqEi,__ZN13Stereo_Buffer9end_frameEi,__ZN7Nsf_Emu9update_eqERK9blip_eq_t,__ZN7Sap_Emu9update_eqERK9blip_eq_t,__ZN7Spc_Emu12mute_voices_Ei,__ZN7Vgm_Emu12mute_voices_Ei,__ZN7Vgm_Emu9update_eqERK9blip_eq_t,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,__ZNK13Subset_Reader6remainEv,__ZNK16Remaining_Reader6remainEv,__ZNK11File_Reader6remainEv,__ZNK15Mem_File_Reader4sizeEv,__ZNK15Mem_File_Reader4tellEv,__ZNK15Std_File_Reader4sizeEv,__ZNK15Std_File_Reader4tellEv,__ZNK14Effects_Buffer13samples_availEv,__ZNK13Stereo_Buffer13samples_availEv,__ZNKSt9bad_alloc4whatEv,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_iiiii = [b8,__ZN7Gym_Emu10play_frameEiiPs,__ZThn256_N7Gym_Emu10play_frameEiiPs,__ZN12Vgm_Emu_Impl10play_frameEiiPs,__ZThn272_N12Vgm_Emu_Impl10play_frameEiiPs,b8,b8,b8];
var FUNCTION_TABLE_viiiiii = [b9,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_iii = [b10,__ZN8Gme_File5load_ER11Data_Reader,__ZN11Classic_Emu16set_sample_rate_El,__ZN6Ay_Emu12start_track_Ei,__ZN9Music_Emu5skip_El,__ZN9Gme_Info_16set_sample_rate_El,__ZN9Gme_Info_12start_track_Ei,__ZN11Data_Reader4skipEl,__ZN11File_Reader4skipEl,__ZN15Mem_File_Reader4seekEl,__ZN15Std_File_Reader4seekEl,__ZN12Multi_Buffer17set_channel_countEi,__ZN7Gbs_Emu5load_ER11Data_Reader,__ZN7Gbs_Emu12start_track_Ei,__ZN8Gbs_File5load_ER11Data_Reader,__ZN7Gym_Emu16set_sample_rate_El,__ZN7Gym_Emu12start_track_Ei,__ZN7Hes_Emu5load_ER11Data_Reader,__ZN7Hes_Emu12start_track_Ei,__ZN8Hes_File5load_ER11Data_Reader,__ZN7Kss_Emu5load_ER11Data_Reader,__ZN7Kss_Emu12start_track_Ei,__ZN8Kss_File5load_ER11Data_Reader,__ZN7Nsf_Emu5load_ER11Data_Reader,__ZN7Nsf_Emu12start_track_Ei,__ZN8Nsf_File5load_ER11Data_Reader,__ZN8Nsfe_Emu5load_ER11Data_Reader,__ZN8Nsfe_Emu12start_track_Ei,__ZN9Nsfe_File5load_ER11Data_Reader
,__ZN7Sap_Emu12start_track_Ei,__ZN7Spc_Emu16set_sample_rate_El,__ZN7Spc_Emu12start_track_Ei,__ZN7Spc_Emu5skip_El,__ZN8Spc_File5load_ER11Data_Reader,__ZN7Vgm_Emu16set_sample_rate_El,__ZN7Vgm_Emu12start_track_Ei,__ZN8Vgm_File5load_ER11Data_Reader,__ZN7Nsf_Emu8pcm_readEPvj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiii = [b11,__ZN14Effects_Buffer7channelEii,__ZN13Stereo_Buffer7channelEii,__ZN18ym2612_update_chanILi0EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi1EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi2EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi3EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi4EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi5EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi6EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi7EE4funcER8tables_tR9channel_tPsi,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11];

  return { _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _start_track: _start_track, _current_track: _current_track, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _strncpy: _strncpy, _memset: _memset, _song_info: _song_info, _memcpy: _memcpy, _open_file: _open_file, _i64Subtract: _i64Subtract, _generate_sound_data: _generate_sound_data, _realloc: _realloc, _i64Add: _i64Add, _current_time: _current_time, _seek: _seek, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _memmove: _memmove, _malloc: _malloc, _track_has_ended: _track_has_ended, _strcpy: _strcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vid: dynCall_vid, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__start_track = asm["_start_track"]; asm["_start_track"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__start_track.apply(null, arguments);
};

var real__current_track = asm["_current_track"]; asm["_current_track"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__current_track.apply(null, arguments);
};

var real__calloc = asm["_calloc"]; asm["_calloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__calloc.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__song_info = asm["_song_info"]; asm["_song_info"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__song_info.apply(null, arguments);
};

var real__open_file = asm["_open_file"]; asm["_open_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__open_file.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__generate_sound_data = asm["_generate_sound_data"]; asm["_generate_sound_data"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__generate_sound_data.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__current_time = asm["_current_time"]; asm["_current_time"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__current_time.apply(null, arguments);
};

var real__seek = asm["_seek"]; asm["_seek"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__seek.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__track_has_ended = asm["_track_has_ended"]; asm["_track_has_ended"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__track_has_ended.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _start_track = Module["_start_track"] = asm["_start_track"];
var _current_track = Module["_current_track"] = asm["_current_track"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _song_info = Module["_song_info"] = asm["_song_info"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _open_file = Module["_open_file"] = asm["_open_file"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _generate_sound_data = Module["_generate_sound_data"] = asm["_generate_sound_data"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _current_time = Module["_current_time"] = asm["_current_time"];
var _seek = Module["_seek"] = asm["_seek"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _track_has_ended = Module["_track_has_ended"] = asm["_track_has_ended"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    function applyMemoryInitializer(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



/* eslint no-undef:0 */
module.exports = {
    Module: Module,
    FS: FS,
    NODEFS: NODEFS
};

